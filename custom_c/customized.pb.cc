// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: customized.proto

#include "customized.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Activity_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Address_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Adjudication_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_AllergyIntoleranceObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Amount_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_CarePlanObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CareTeam_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CareTeamObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Carrier_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Category_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_ClaimObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coding_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Communication_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Component_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConditionObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Contained_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Detail_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceName_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_DeviceObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Diagnosis_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DiagnosticReportObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DosageInstruction_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DoseAndRate_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_EncounterObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Entry_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_ExplanationOfBenefitObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GoalObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Hospitalization_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Identifier_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ImagingStudyObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ImmunizationObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Instance_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Insurance_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Item_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MedicationAdministrationObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MedicationRequestObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Name_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ObservationObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Onset_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_OrganizationObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Participant_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_PatientObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Payment_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Period_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PractitionerObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Procedure_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProcedureObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quantity_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Reaction_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Reference_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Repeat_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_Resource_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Series_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SupportingInfo_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Telecom_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Text_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Timing_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Total_customized_2eproto;
namespace patient {
class ActivityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Activity> _instance;
} _Activity_default_instance_;
class AddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Address> _instance;
} _Address_default_instance_;
class AdjudicationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Adjudication> _instance;
} _Adjudication_default_instance_;
class AmountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Amount> _instance;
} _Amount_default_instance_;
class CareTeamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CareTeam> _instance;
} _CareTeam_default_instance_;
class CommunicationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Communication> _instance;
} _Communication_default_instance_;
class ComponentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Component> _instance;
} _Component_default_instance_;
class ContainedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Contained> _instance;
} _Contained_default_instance_;
class DetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Detail> _instance;
} _Detail_default_instance_;
class DiagnosisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Diagnosis> _instance;
} _Diagnosis_default_instance_;
class EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Entry> _instance;
} _Entry_default_instance_;
class ExtensionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Extension> _instance;
} _Extension_default_instance_;
class IdentifierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Identifier> _instance;
} _Identifier_default_instance_;
class InsuranceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Insurance> _instance;
} _Insurance_default_instance_;
class ItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Item> _instance;
} _Item_default_instance_;
class NameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Name> _instance;
} _Name_default_instance_;
class ParticipantDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Participant> _instance;
} _Participant_default_instance_;
class PaymentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Payment> _instance;
} _Payment_default_instance_;
class ProcedureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Procedure> _instance;
} _Procedure_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request> _instance;
} _Request_default_instance_;
class RootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Root> _instance;
} _Root_default_instance_;
class SupportingInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SupportingInfo> _instance;
} _SupportingInfo_default_instance_;
class TelecomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Telecom> _instance;
} _Telecom_default_instance_;
class TextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Text> _instance;
} _Text_default_instance_;
class TotalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Total> _instance;
} _Total_default_instance_;
class CodingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Coding> _instance;
} _Coding_default_instance_;
class QuantityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Quantity> _instance;
} _Quantity_default_instance_;
class ReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Reference> _instance;
} _Reference_default_instance_;
class CategoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Category> _instance;
} _Category_default_instance_;
class PeriodDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Period> _instance;
} _Period_default_instance_;
class ResourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Resource> _instance;
  const ::patient::CarePlanObject* careplan_;
  const ::patient::CareTeamObject* careteam_;
  const ::patient::ClaimObject* claim_;
  const ::patient::ConditionObject* condition_;
  const ::patient::DiagnosticReportObject* diagnosticreport_;
  const ::patient::EncounterObject* encounter_;
  const ::patient::ExplanationOfBenefitObject* explanationofbenefit_;
  const ::patient::ImmunizationObject* immunization_;
  const ::patient::MedicationRequestObject* medicationrequest_;
  const ::patient::ObservationObject* observation_;
  const ::patient::OrganizationObject* organization_;
  const ::patient::PatientObject* patient_;
  const ::patient::PractitionerObject* practitioner_;
  const ::patient::ProcedureObject* procedure_;
} _Resource_default_instance_;
class DosageInstructionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DosageInstruction> _instance;
} _DosageInstruction_default_instance_;
class RepeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Repeat> _instance;
} _Repeat_default_instance_;
class TimingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Timing> _instance;
} _Timing_default_instance_;
class DoseAndRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoseAndRate> _instance;
} _DoseAndRate_default_instance_;
class OnsetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Onset> _instance;
} _Onset_default_instance_;
class ReactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Reaction> _instance;
} _Reaction_default_instance_;
class InstanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Instance> _instance;
} _Instance_default_instance_;
class SeriesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Series> _instance;
} _Series_default_instance_;
class HospitalizationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hospitalization> _instance;
} _Hospitalization_default_instance_;
class CarrierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Carrier> _instance;
} _Carrier_default_instance_;
class DeviceNameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceName> _instance;
} _DeviceName_default_instance_;
class AllergyIntoleranceObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllergyIntoleranceObject> _instance;
} _AllergyIntoleranceObject_default_instance_;
class CarePlanObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CarePlanObject> _instance;
} _CarePlanObject_default_instance_;
class CareTeamObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CareTeamObject> _instance;
} _CareTeamObject_default_instance_;
class ClaimObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClaimObject> _instance;
} _ClaimObject_default_instance_;
class ConditionObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConditionObject> _instance;
} _ConditionObject_default_instance_;
class DeviceObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceObject> _instance;
} _DeviceObject_default_instance_;
class DiagnosticReportObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosticReportObject> _instance;
} _DiagnosticReportObject_default_instance_;
class EncounterObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EncounterObject> _instance;
} _EncounterObject_default_instance_;
class ExplanationOfBenefitObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExplanationOfBenefitObject> _instance;
} _ExplanationOfBenefitObject_default_instance_;
class GoalObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GoalObject> _instance;
} _GoalObject_default_instance_;
class ImagingStudyObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImagingStudyObject> _instance;
} _ImagingStudyObject_default_instance_;
class ImmunizationObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImmunizationObject> _instance;
} _ImmunizationObject_default_instance_;
class MedicationRequestObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MedicationRequestObject> _instance;
} _MedicationRequestObject_default_instance_;
class MedicationAdministrationObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MedicationAdministrationObject> _instance;
} _MedicationAdministrationObject_default_instance_;
class ObservationObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObservationObject> _instance;
} _ObservationObject_default_instance_;
class OrganizationObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrganizationObject> _instance;
} _OrganizationObject_default_instance_;
class PatientObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatientObject> _instance;
} _PatientObject_default_instance_;
class PractitionerObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PractitionerObject> _instance;
} _PractitionerObject_default_instance_;
class ProcedureObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcedureObject> _instance;
} _ProcedureObject_default_instance_;
class PatientRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatientRecord> _instance;
} _PatientRecord_default_instance_;
}  // namespace patient
static void InitDefaultsscc_info_Activity_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Activity_default_instance_;
    new (ptr) ::patient::Activity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Activity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Activity_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Activity_customized_2eproto}, {
      &scc_info_Detail_customized_2eproto.base,}};

static void InitDefaultsscc_info_Address_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Address_default_instance_;
    new (ptr) ::patient::Address();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::patient::_Extension_default_instance_;
    new (ptr) ::patient::Extension();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Address::InitAsDefaultInstance();
  ::patient::Extension::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Address_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Address_customized_2eproto}, {
      &scc_info_Coding_customized_2eproto.base,}};

static void InitDefaultsscc_info_Adjudication_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Adjudication_default_instance_;
    new (ptr) ::patient::Adjudication();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Adjudication::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Adjudication_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Adjudication_customized_2eproto}, {
      &scc_info_Amount_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_AllergyIntoleranceObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_AllergyIntoleranceObject_default_instance_;
    new (ptr) ::patient::AllergyIntoleranceObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::AllergyIntoleranceObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_AllergyIntoleranceObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_AllergyIntoleranceObject_customized_2eproto}, {
      &scc_info_Identifier_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Onset_customized_2eproto.base,
      &scc_info_Reaction_customized_2eproto.base,}};

static void InitDefaultsscc_info_Amount_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Amount_default_instance_;
    new (ptr) ::patient::Amount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Amount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Amount_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Amount_customized_2eproto}, {}};

static void InitDefaultsscc_info_CarePlanObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_CarePlanObject_default_instance_;
    new (ptr) ::patient::CarePlanObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::CarePlanObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_CarePlanObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_CarePlanObject_customized_2eproto}, {
      &scc_info_Activity_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_CareTeam_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Period_customized_2eproto.base,
      &scc_info_Text_customized_2eproto.base,}};

static void InitDefaultsscc_info_CareTeam_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_CareTeam_default_instance_;
    new (ptr) ::patient::CareTeam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::CareTeam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CareTeam_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CareTeam_customized_2eproto}, {
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_CareTeamObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_CareTeamObject_default_instance_;
    new (ptr) ::patient::CareTeamObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::CareTeamObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CareTeamObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_CareTeamObject_customized_2eproto}, {
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Participant_customized_2eproto.base,
      &scc_info_Period_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_Carrier_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Carrier_default_instance_;
    new (ptr) ::patient::Carrier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Carrier::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Carrier_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Carrier_customized_2eproto}, {}};

static void InitDefaultsscc_info_Category_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Category_default_instance_;
    new (ptr) ::patient::Category();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Category::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Category_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Category_customized_2eproto}, {
      &scc_info_Coding_customized_2eproto.base,}};

static void InitDefaultsscc_info_ClaimObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_ClaimObject_default_instance_;
    new (ptr) ::patient::ClaimObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::ClaimObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_ClaimObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_ClaimObject_customized_2eproto}, {
      &scc_info_Period_customized_2eproto.base,
      &scc_info_Diagnosis_customized_2eproto.base,
      &scc_info_Insurance_customized_2eproto.base,
      &scc_info_Item_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Procedure_customized_2eproto.base,
      &scc_info_SupportingInfo_customized_2eproto.base,
      &scc_info_Total_customized_2eproto.base,}};

static void InitDefaultsscc_info_Coding_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Coding_default_instance_;
    new (ptr) ::patient::Coding();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Coding::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coding_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Coding_customized_2eproto}, {}};

static void InitDefaultsscc_info_Communication_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Communication_default_instance_;
    new (ptr) ::patient::Communication();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Communication::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Communication_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Communication_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_Component_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Component_default_instance_;
    new (ptr) ::patient::Component();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Component::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Component_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Component_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Quantity_customized_2eproto.base,}};

static void InitDefaultsscc_info_ConditionObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_ConditionObject_default_instance_;
    new (ptr) ::patient::ConditionObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::ConditionObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConditionObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ConditionObject_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,}};

static void InitDefaultsscc_info_Contained_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Contained_default_instance_;
    new (ptr) ::patient::Contained();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Contained::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Contained_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Contained_customized_2eproto}, {
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_Detail_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Detail_default_instance_;
    new (ptr) ::patient::Detail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Detail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Detail_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Detail_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,}};

static void InitDefaultsscc_info_DeviceName_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_DeviceName_default_instance_;
    new (ptr) ::patient::DeviceName();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::DeviceName::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceName_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceName_customized_2eproto}, {}};

static void InitDefaultsscc_info_DeviceObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_DeviceObject_default_instance_;
    new (ptr) ::patient::DeviceObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::DeviceObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_DeviceObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_DeviceObject_customized_2eproto}, {
      &scc_info_Carrier_customized_2eproto.base,
      &scc_info_DeviceName_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,}};

static void InitDefaultsscc_info_Diagnosis_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Diagnosis_default_instance_;
    new (ptr) ::patient::Diagnosis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Diagnosis::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Diagnosis_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Diagnosis_customized_2eproto}, {
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_DiagnosticReportObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_DiagnosticReportObject_default_instance_;
    new (ptr) ::patient::DiagnosticReportObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::DiagnosticReportObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DiagnosticReportObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DiagnosticReportObject_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,}};

static void InitDefaultsscc_info_DosageInstruction_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_DosageInstruction_default_instance_;
    new (ptr) ::patient::DosageInstruction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::DosageInstruction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DosageInstruction_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DosageInstruction_customized_2eproto}, {
      &scc_info_DoseAndRate_customized_2eproto.base,
      &scc_info_Timing_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_DoseAndRate_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_DoseAndRate_default_instance_;
    new (ptr) ::patient::DoseAndRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::DoseAndRate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DoseAndRate_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DoseAndRate_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Quantity_customized_2eproto.base,}};

static void InitDefaultsscc_info_EncounterObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_EncounterObject_default_instance_;
    new (ptr) ::patient::EncounterObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::EncounterObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_EncounterObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_EncounterObject_customized_2eproto}, {
      &scc_info_Coding_customized_2eproto.base,
      &scc_info_Participant_customized_2eproto.base,
      &scc_info_Period_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Hospitalization_customized_2eproto.base,}};

static void InitDefaultsscc_info_Entry_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Entry_default_instance_;
    new (ptr) ::patient::Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Entry_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Entry_customized_2eproto}, {
      &scc_info_Request_customized_2eproto.base,
      &scc_info_Resource_customized_2eproto.base,}};

static void InitDefaultsscc_info_ExplanationOfBenefitObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_ExplanationOfBenefitObject_default_instance_;
    new (ptr) ::patient::ExplanationOfBenefitObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::ExplanationOfBenefitObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_ExplanationOfBenefitObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0, InitDefaultsscc_info_ExplanationOfBenefitObject_customized_2eproto}, {
      &scc_info_Period_customized_2eproto.base,
      &scc_info_CareTeam_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Contained_customized_2eproto.base,
      &scc_info_Diagnosis_customized_2eproto.base,
      &scc_info_Identifier_customized_2eproto.base,
      &scc_info_Insurance_customized_2eproto.base,
      &scc_info_Item_customized_2eproto.base,
      &scc_info_Payment_customized_2eproto.base,
      &scc_info_Total_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_GoalObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_GoalObject_default_instance_;
    new (ptr) ::patient::GoalObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::GoalObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GoalObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GoalObject_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,}};

static void InitDefaultsscc_info_Hospitalization_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Hospitalization_default_instance_;
    new (ptr) ::patient::Hospitalization();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Hospitalization::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Hospitalization_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Hospitalization_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_Identifier_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Identifier_default_instance_;
    new (ptr) ::patient::Identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Identifier::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Identifier_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Identifier_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_ImagingStudyObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_ImagingStudyObject_default_instance_;
    new (ptr) ::patient::ImagingStudyObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::ImagingStudyObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ImagingStudyObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ImagingStudyObject_customized_2eproto}, {
      &scc_info_Identifier_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Series_customized_2eproto.base,}};

static void InitDefaultsscc_info_ImmunizationObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_ImmunizationObject_default_instance_;
    new (ptr) ::patient::ImmunizationObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::ImmunizationObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ImmunizationObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ImmunizationObject_customized_2eproto}, {
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_Instance_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Instance_default_instance_;
    new (ptr) ::patient::Instance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Instance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Instance_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Instance_customized_2eproto}, {
      &scc_info_Coding_customized_2eproto.base,}};

static void InitDefaultsscc_info_Insurance_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Insurance_default_instance_;
    new (ptr) ::patient::Insurance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Insurance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Insurance_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Insurance_customized_2eproto}, {
      &scc_info_Reference_customized_2eproto.base,}};

static void InitDefaultsscc_info_Item_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Item_default_instance_;
    new (ptr) ::patient::Item();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Item::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Item_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Item_customized_2eproto}, {
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Amount_customized_2eproto.base,
      &scc_info_Period_customized_2eproto.base,
      &scc_info_Adjudication_customized_2eproto.base,}};

static void InitDefaultsscc_info_MedicationAdministrationObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_MedicationAdministrationObject_default_instance_;
    new (ptr) ::patient::MedicationAdministrationObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::MedicationAdministrationObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MedicationAdministrationObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MedicationAdministrationObject_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,}};

static void InitDefaultsscc_info_MedicationRequestObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_MedicationRequestObject_default_instance_;
    new (ptr) ::patient::MedicationRequestObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::MedicationRequestObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MedicationRequestObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MedicationRequestObject_customized_2eproto}, {
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,
      &scc_info_DosageInstruction_customized_2eproto.base,}};

static void InitDefaultsscc_info_Name_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Name_default_instance_;
    new (ptr) ::patient::Name();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Name::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Name_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Name_customized_2eproto}, {}};

static void InitDefaultsscc_info_ObservationObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_ObservationObject_default_instance_;
    new (ptr) ::patient::ObservationObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::ObservationObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ObservationObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ObservationObject_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Component_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Quantity_customized_2eproto.base,}};

static void InitDefaultsscc_info_Onset_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Onset_default_instance_;
    new (ptr) ::patient::Onset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Onset::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Onset_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Onset_customized_2eproto}, {
      &scc_info_Period_customized_2eproto.base,}};

static void InitDefaultsscc_info_OrganizationObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_OrganizationObject_default_instance_;
    new (ptr) ::patient::OrganizationObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::OrganizationObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_OrganizationObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_OrganizationObject_customized_2eproto}, {
      &scc_info_Address_customized_2eproto.base,
      &scc_info_Identifier_customized_2eproto.base,
      &scc_info_Telecom_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_Participant_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Participant_default_instance_;
    new (ptr) ::patient::Participant();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Participant::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Participant_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Participant_customized_2eproto}, {
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_PatientObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_PatientObject_default_instance_;
    new (ptr) ::patient::PatientObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::PatientObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_PatientObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_PatientObject_customized_2eproto}, {
      &scc_info_Address_customized_2eproto.base,
      &scc_info_Communication_customized_2eproto.base,
      &scc_info_Identifier_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Name_customized_2eproto.base,
      &scc_info_Telecom_customized_2eproto.base,
      &scc_info_Text_customized_2eproto.base,}};

static void InitDefaultsscc_info_PatientRecord_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_PatientRecord_default_instance_;
    new (ptr) ::patient::PatientRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::PatientRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<19> scc_info_PatientRecord_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 19, 0, InitDefaultsscc_info_PatientRecord_customized_2eproto}, {
      &scc_info_PatientObject_customized_2eproto.base,
      &scc_info_CarePlanObject_customized_2eproto.base,
      &scc_info_CareTeamObject_customized_2eproto.base,
      &scc_info_ClaimObject_customized_2eproto.base,
      &scc_info_ConditionObject_customized_2eproto.base,
      &scc_info_DiagnosticReportObject_customized_2eproto.base,
      &scc_info_EncounterObject_customized_2eproto.base,
      &scc_info_ExplanationOfBenefitObject_customized_2eproto.base,
      &scc_info_ImmunizationObject_customized_2eproto.base,
      &scc_info_MedicationRequestObject_customized_2eproto.base,
      &scc_info_ObservationObject_customized_2eproto.base,
      &scc_info_OrganizationObject_customized_2eproto.base,
      &scc_info_PractitionerObject_customized_2eproto.base,
      &scc_info_ProcedureObject_customized_2eproto.base,
      &scc_info_AllergyIntoleranceObject_customized_2eproto.base,
      &scc_info_GoalObject_customized_2eproto.base,
      &scc_info_ImagingStudyObject_customized_2eproto.base,
      &scc_info_DeviceObject_customized_2eproto.base,
      &scc_info_MedicationAdministrationObject_customized_2eproto.base,}};

static void InitDefaultsscc_info_Payment_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Payment_default_instance_;
    new (ptr) ::patient::Payment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Payment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Payment_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Payment_customized_2eproto}, {
      &scc_info_Amount_customized_2eproto.base,}};

static void InitDefaultsscc_info_Period_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Period_default_instance_;
    new (ptr) ::patient::Period();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Period::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Period_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Period_customized_2eproto}, {}};

static void InitDefaultsscc_info_PractitionerObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_PractitionerObject_default_instance_;
    new (ptr) ::patient::PractitionerObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::PractitionerObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PractitionerObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PractitionerObject_customized_2eproto}, {
      &scc_info_Address_customized_2eproto.base,
      &scc_info_Identifier_customized_2eproto.base,
      &scc_info_Name_customized_2eproto.base,
      &scc_info_Telecom_customized_2eproto.base,}};

static void InitDefaultsscc_info_Procedure_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Procedure_default_instance_;
    new (ptr) ::patient::Procedure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Procedure::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Procedure_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Procedure_customized_2eproto}, {
      &scc_info_Reference_customized_2eproto.base,}};

static void InitDefaultsscc_info_ProcedureObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_ProcedureObject_default_instance_;
    new (ptr) ::patient::ProcedureObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::ProcedureObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProcedureObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ProcedureObject_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Period_customized_2eproto.base,}};

static void InitDefaultsscc_info_Quantity_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Quantity_default_instance_;
    new (ptr) ::patient::Quantity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Quantity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quantity_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Quantity_customized_2eproto}, {}};

static void InitDefaultsscc_info_Reaction_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Reaction_default_instance_;
    new (ptr) ::patient::Reaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Reaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Reaction_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Reaction_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_Reference_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Reference_default_instance_;
    new (ptr) ::patient::Reference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Reference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Reference_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Reference_customized_2eproto}, {}};

static void InitDefaultsscc_info_Repeat_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Repeat_default_instance_;
    new (ptr) ::patient::Repeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Repeat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Repeat_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Repeat_customized_2eproto}, {}};

static void InitDefaultsscc_info_Request_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Request_default_instance_;
    new (ptr) ::patient::Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Request_customized_2eproto}, {}};

static void InitDefaultsscc_info_Resource_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Resource_default_instance_;
    new (ptr) ::patient::Resource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Resource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_Resource_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 14, 0, InitDefaultsscc_info_Resource_customized_2eproto}, {
      &scc_info_CarePlanObject_customized_2eproto.base,
      &scc_info_CareTeamObject_customized_2eproto.base,
      &scc_info_ClaimObject_customized_2eproto.base,
      &scc_info_ConditionObject_customized_2eproto.base,
      &scc_info_DiagnosticReportObject_customized_2eproto.base,
      &scc_info_EncounterObject_customized_2eproto.base,
      &scc_info_ExplanationOfBenefitObject_customized_2eproto.base,
      &scc_info_ImmunizationObject_customized_2eproto.base,
      &scc_info_MedicationRequestObject_customized_2eproto.base,
      &scc_info_ObservationObject_customized_2eproto.base,
      &scc_info_OrganizationObject_customized_2eproto.base,
      &scc_info_PatientObject_customized_2eproto.base,
      &scc_info_PractitionerObject_customized_2eproto.base,
      &scc_info_ProcedureObject_customized_2eproto.base,}};

static void InitDefaultsscc_info_Root_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Root_default_instance_;
    new (ptr) ::patient::Root();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Root::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Root_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Root_customized_2eproto}, {
      &scc_info_Entry_customized_2eproto.base,}};

static void InitDefaultsscc_info_Series_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Series_default_instance_;
    new (ptr) ::patient::Series();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Series::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Series_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Series_customized_2eproto}, {
      &scc_info_Coding_customized_2eproto.base,
      &scc_info_Instance_customized_2eproto.base,}};

static void InitDefaultsscc_info_SupportingInfo_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_SupportingInfo_default_instance_;
    new (ptr) ::patient::SupportingInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::SupportingInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SupportingInfo_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SupportingInfo_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,}};

static void InitDefaultsscc_info_Telecom_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Telecom_default_instance_;
    new (ptr) ::patient::Telecom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Telecom::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Telecom_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Telecom_customized_2eproto}, {}};

static void InitDefaultsscc_info_Text_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Text_default_instance_;
    new (ptr) ::patient::Text();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Text::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Text_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Text_customized_2eproto}, {}};

static void InitDefaultsscc_info_Timing_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Timing_default_instance_;
    new (ptr) ::patient::Timing();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Timing::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Timing_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Timing_customized_2eproto}, {
      &scc_info_Repeat_customized_2eproto.base,}};

static void InitDefaultsscc_info_Total_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Total_default_instance_;
    new (ptr) ::patient::Total();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Total::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Total_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Total_customized_2eproto}, {
      &scc_info_Amount_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_customized_2eproto[62];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_customized_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_customized_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_customized_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Activity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Activity, detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Address, city_),
  PROTOBUF_FIELD_OFFSET(::patient::Address, country_),
  PROTOBUF_FIELD_OFFSET(::patient::Address, extension_),
  PROTOBUF_FIELD_OFFSET(::patient::Address, line_),
  PROTOBUF_FIELD_OFFSET(::patient::Address, postalcode_),
  PROTOBUF_FIELD_OFFSET(::patient::Address, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Adjudication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Adjudication, amount_),
  PROTOBUF_FIELD_OFFSET(::patient::Adjudication, category_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Amount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Amount, currency_),
  PROTOBUF_FIELD_OFFSET(::patient::Amount, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::CareTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::CareTeam, provider_),
  PROTOBUF_FIELD_OFFSET(::patient::CareTeam, role_),
  PROTOBUF_FIELD_OFFSET(::patient::CareTeam, sequence_),
  PROTOBUF_FIELD_OFFSET(::patient::CareTeam, reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Communication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Communication, language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Component, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Component, code_),
  PROTOBUF_FIELD_OFFSET(::patient::Component, valuequantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Contained, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Contained, id_),
  PROTOBUF_FIELD_OFFSET(::patient::Contained, intent_),
  PROTOBUF_FIELD_OFFSET(::patient::Contained, performer_),
  PROTOBUF_FIELD_OFFSET(::patient::Contained, requester_),
  PROTOBUF_FIELD_OFFSET(::patient::Contained, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::Contained, status_),
  PROTOBUF_FIELD_OFFSET(::patient::Contained, subject_),
  PROTOBUF_FIELD_OFFSET(::patient::Contained, beneficiary_),
  PROTOBUF_FIELD_OFFSET(::patient::Contained, payor_),
  PROTOBUF_FIELD_OFFSET(::patient::Contained, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Detail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Detail, code_),
  PROTOBUF_FIELD_OFFSET(::patient::Detail, location_),
  PROTOBUF_FIELD_OFFSET(::patient::Detail, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Diagnosis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Diagnosis, diagnosisreference_),
  PROTOBUF_FIELD_OFFSET(::patient::Diagnosis, sequence_),
  PROTOBUF_FIELD_OFFSET(::patient::Diagnosis, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Entry, fullurl_),
  PROTOBUF_FIELD_OFFSET(::patient::Entry, request_),
  PROTOBUF_FIELD_OFFSET(::patient::Entry, resource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Extension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Extension, extension_),
  PROTOBUF_FIELD_OFFSET(::patient::Extension, url_),
  PROTOBUF_FIELD_OFFSET(::patient::Extension, valuecoding_),
  PROTOBUF_FIELD_OFFSET(::patient::Extension, valuestring_),
  PROTOBUF_FIELD_OFFSET(::patient::Extension, valuedecimal_),
  PROTOBUF_FIELD_OFFSET(::patient::Extension, valuecode_),
  PROTOBUF_FIELD_OFFSET(::patient::Extension, valueaddress_),
  PROTOBUF_FIELD_OFFSET(::patient::Extension, valueinteger_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Identifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Identifier, system_),
  PROTOBUF_FIELD_OFFSET(::patient::Identifier, value_),
  PROTOBUF_FIELD_OFFSET(::patient::Identifier, type_),
  PROTOBUF_FIELD_OFFSET(::patient::Identifier, use_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Insurance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Insurance, coverage_),
  PROTOBUF_FIELD_OFFSET(::patient::Insurance, focal_),
  PROTOBUF_FIELD_OFFSET(::patient::Insurance, sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Item, encounter_),
  PROTOBUF_FIELD_OFFSET(::patient::Item, productorservice_),
  PROTOBUF_FIELD_OFFSET(::patient::Item, sequence_),
  PROTOBUF_FIELD_OFFSET(::patient::Item, informationsequence_),
  PROTOBUF_FIELD_OFFSET(::patient::Item, net_),
  PROTOBUF_FIELD_OFFSET(::patient::Item, category_),
  PROTOBUF_FIELD_OFFSET(::patient::Item, locationcodeableconcept_),
  PROTOBUF_FIELD_OFFSET(::patient::Item, servicedperiod_),
  PROTOBUF_FIELD_OFFSET(::patient::Item, adjudication_),
  PROTOBUF_FIELD_OFFSET(::patient::Item, proceduresequence_),
  PROTOBUF_FIELD_OFFSET(::patient::Item, diagnosissequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Name, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Name, family_),
  PROTOBUF_FIELD_OFFSET(::patient::Name, given_),
  PROTOBUF_FIELD_OFFSET(::patient::Name, prefix_),
  PROTOBUF_FIELD_OFFSET(::patient::Name, use_),
  PROTOBUF_FIELD_OFFSET(::patient::Name, suffix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Participant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Participant, individual_),
  PROTOBUF_FIELD_OFFSET(::patient::Participant, member_),
  PROTOBUF_FIELD_OFFSET(::patient::Participant, role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Payment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Payment, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Procedure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Procedure, procedurereference_),
  PROTOBUF_FIELD_OFFSET(::patient::Procedure, sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Request, method_),
  PROTOBUF_FIELD_OFFSET(::patient::Request, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Root, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Root, entry_),
  PROTOBUF_FIELD_OFFSET(::patient::Root, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::Root, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::SupportingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::SupportingInfo, category_),
  PROTOBUF_FIELD_OFFSET(::patient::SupportingInfo, sequence_),
  PROTOBUF_FIELD_OFFSET(::patient::SupportingInfo, valuereference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Telecom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Telecom, system_),
  PROTOBUF_FIELD_OFFSET(::patient::Telecom, use_),
  PROTOBUF_FIELD_OFFSET(::patient::Telecom, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Text, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Text, div_),
  PROTOBUF_FIELD_OFFSET(::patient::Text, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Total, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Total, currency_),
  PROTOBUF_FIELD_OFFSET(::patient::Total, value_),
  PROTOBUF_FIELD_OFFSET(::patient::Total, amount_),
  PROTOBUF_FIELD_OFFSET(::patient::Total, category_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Coding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Coding, code_),
  PROTOBUF_FIELD_OFFSET(::patient::Coding, display_),
  PROTOBUF_FIELD_OFFSET(::patient::Coding, system_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Quantity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Quantity, code_),
  PROTOBUF_FIELD_OFFSET(::patient::Quantity, system_),
  PROTOBUF_FIELD_OFFSET(::patient::Quantity, unit_),
  PROTOBUF_FIELD_OFFSET(::patient::Quantity, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Reference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Reference, reference_),
  PROTOBUF_FIELD_OFFSET(::patient::Reference, display_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Category, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Category, coding_),
  PROTOBUF_FIELD_OFFSET(::patient::Category, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Period, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Period, end_),
  PROTOBUF_FIELD_OFFSET(::patient::Period, start_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Resource, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::patient::Resource, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Resource, resourcetype_),
  offsetof(::patient::ResourceDefaultTypeInternal, careplan_),
  offsetof(::patient::ResourceDefaultTypeInternal, careteam_),
  offsetof(::patient::ResourceDefaultTypeInternal, claim_),
  offsetof(::patient::ResourceDefaultTypeInternal, condition_),
  offsetof(::patient::ResourceDefaultTypeInternal, diagnosticreport_),
  offsetof(::patient::ResourceDefaultTypeInternal, encounter_),
  offsetof(::patient::ResourceDefaultTypeInternal, explanationofbenefit_),
  offsetof(::patient::ResourceDefaultTypeInternal, immunization_),
  offsetof(::patient::ResourceDefaultTypeInternal, medicationrequest_),
  offsetof(::patient::ResourceDefaultTypeInternal, observation_),
  offsetof(::patient::ResourceDefaultTypeInternal, organization_),
  offsetof(::patient::ResourceDefaultTypeInternal, patient_),
  offsetof(::patient::ResourceDefaultTypeInternal, practitioner_),
  offsetof(::patient::ResourceDefaultTypeInternal, procedure_),
  PROTOBUF_FIELD_OFFSET(::patient::Resource, resource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::DosageInstruction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::DosageInstruction, sequence_),
  PROTOBUF_FIELD_OFFSET(::patient::DosageInstruction, asneededboolean_),
  PROTOBUF_FIELD_OFFSET(::patient::DosageInstruction, doseandrate_),
  PROTOBUF_FIELD_OFFSET(::patient::DosageInstruction, timing_),
  PROTOBUF_FIELD_OFFSET(::patient::DosageInstruction, additionalinstruction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Repeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Repeat, frequency_),
  PROTOBUF_FIELD_OFFSET(::patient::Repeat, period_),
  PROTOBUF_FIELD_OFFSET(::patient::Repeat, periodunit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Timing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Timing, repeat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::DoseAndRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::DoseAndRate, type_),
  PROTOBUF_FIELD_OFFSET(::patient::DoseAndRate, dosequantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Onset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Onset, onsetdatetime_),
  PROTOBUF_FIELD_OFFSET(::patient::Onset, onsetage_),
  PROTOBUF_FIELD_OFFSET(::patient::Onset, onsetperiod_),
  PROTOBUF_FIELD_OFFSET(::patient::Onset, onsetstring_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Reaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Reaction, substance_),
  PROTOBUF_FIELD_OFFSET(::patient::Reaction, manifestation_),
  PROTOBUF_FIELD_OFFSET(::patient::Reaction, description_),
  PROTOBUF_FIELD_OFFSET(::patient::Reaction, onset_),
  PROTOBUF_FIELD_OFFSET(::patient::Reaction, severity_),
  PROTOBUF_FIELD_OFFSET(::patient::Reaction, exposureroute_),
  PROTOBUF_FIELD_OFFSET(::patient::Reaction, note_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Instance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Instance, uid_),
  PROTOBUF_FIELD_OFFSET(::patient::Instance, sopclass_),
  PROTOBUF_FIELD_OFFSET(::patient::Instance, number_),
  PROTOBUF_FIELD_OFFSET(::patient::Instance, title_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Series, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Series, uid_),
  PROTOBUF_FIELD_OFFSET(::patient::Series, number_),
  PROTOBUF_FIELD_OFFSET(::patient::Series, modality_),
  PROTOBUF_FIELD_OFFSET(::patient::Series, numberofinstances_),
  PROTOBUF_FIELD_OFFSET(::patient::Series, bodysite_),
  PROTOBUF_FIELD_OFFSET(::patient::Series, started_),
  PROTOBUF_FIELD_OFFSET(::patient::Series, instance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Hospitalization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Hospitalization, dischargedisposition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Carrier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Carrier, deviceidentifier_),
  PROTOBUF_FIELD_OFFSET(::patient::Carrier, carrierhrf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::DeviceName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::DeviceName, name_),
  PROTOBUF_FIELD_OFFSET(::patient::DeviceName, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::AllergyIntoleranceObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::AllergyIntoleranceObject, identifier_),
  PROTOBUF_FIELD_OFFSET(::patient::AllergyIntoleranceObject, clinicalstatus_),
  PROTOBUF_FIELD_OFFSET(::patient::AllergyIntoleranceObject, verificationstatus_),
  PROTOBUF_FIELD_OFFSET(::patient::AllergyIntoleranceObject, type_),
  PROTOBUF_FIELD_OFFSET(::patient::AllergyIntoleranceObject, category_),
  PROTOBUF_FIELD_OFFSET(::patient::AllergyIntoleranceObject, criticality_),
  PROTOBUF_FIELD_OFFSET(::patient::AllergyIntoleranceObject, code_),
  PROTOBUF_FIELD_OFFSET(::patient::AllergyIntoleranceObject, patient_),
  PROTOBUF_FIELD_OFFSET(::patient::AllergyIntoleranceObject, encounter_),
  PROTOBUF_FIELD_OFFSET(::patient::AllergyIntoleranceObject, onset_),
  PROTOBUF_FIELD_OFFSET(::patient::AllergyIntoleranceObject, recordeddate_),
  PROTOBUF_FIELD_OFFSET(::patient::AllergyIntoleranceObject, recorder_),
  PROTOBUF_FIELD_OFFSET(::patient::AllergyIntoleranceObject, asserter_),
  PROTOBUF_FIELD_OFFSET(::patient::AllergyIntoleranceObject, lastoccurrence_),
  PROTOBUF_FIELD_OFFSET(::patient::AllergyIntoleranceObject, note_),
  PROTOBUF_FIELD_OFFSET(::patient::AllergyIntoleranceObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::AllergyIntoleranceObject, reaction_),
  PROTOBUF_FIELD_OFFSET(::patient::AllergyIntoleranceObject, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, activity_),
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, addresses_),
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, careteam_),
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, category_),
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, encounter_),
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, intent_),
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, period_),
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, status_),
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, subject_),
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, text_),
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, goal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::CareTeamObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::CareTeamObject, encounter_),
  PROTOBUF_FIELD_OFFSET(::patient::CareTeamObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::CareTeamObject, managingorganization_),
  PROTOBUF_FIELD_OFFSET(::patient::CareTeamObject, participant_),
  PROTOBUF_FIELD_OFFSET(::patient::CareTeamObject, period_),
  PROTOBUF_FIELD_OFFSET(::patient::CareTeamObject, reasoncode_),
  PROTOBUF_FIELD_OFFSET(::patient::CareTeamObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::CareTeamObject, status_),
  PROTOBUF_FIELD_OFFSET(::patient::CareTeamObject, subject_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, billableperiod_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, created_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, diagnosis_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, insurance_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, item_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, patient_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, prescription_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, priority_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, procedure_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, provider_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, status_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, supportinginfo_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, total_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, type_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, use_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::ConditionObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::ConditionObject, abatementdatetime_),
  PROTOBUF_FIELD_OFFSET(::patient::ConditionObject, clinicalstatus_),
  PROTOBUF_FIELD_OFFSET(::patient::ConditionObject, code_),
  PROTOBUF_FIELD_OFFSET(::patient::ConditionObject, encounter_),
  PROTOBUF_FIELD_OFFSET(::patient::ConditionObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::ConditionObject, onsetdatetime_),
  PROTOBUF_FIELD_OFFSET(::patient::ConditionObject, recordeddate_),
  PROTOBUF_FIELD_OFFSET(::patient::ConditionObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::ConditionObject, subject_),
  PROTOBUF_FIELD_OFFSET(::patient::ConditionObject, verificationstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::DeviceObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::DeviceObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::DeviceObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::DeviceObject, udicarrier_),
  PROTOBUF_FIELD_OFFSET(::patient::DeviceObject, status_),
  PROTOBUF_FIELD_OFFSET(::patient::DeviceObject, distinctidentifier_),
  PROTOBUF_FIELD_OFFSET(::patient::DeviceObject, manufacturedate_),
  PROTOBUF_FIELD_OFFSET(::patient::DeviceObject, expirationdate_),
  PROTOBUF_FIELD_OFFSET(::patient::DeviceObject, lotnumber_),
  PROTOBUF_FIELD_OFFSET(::patient::DeviceObject, serialnumber_),
  PROTOBUF_FIELD_OFFSET(::patient::DeviceObject, devicename_),
  PROTOBUF_FIELD_OFFSET(::patient::DeviceObject, type_),
  PROTOBUF_FIELD_OFFSET(::patient::DeviceObject, patient_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::DiagnosticReportObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::DiagnosticReportObject, category_),
  PROTOBUF_FIELD_OFFSET(::patient::DiagnosticReportObject, code_),
  PROTOBUF_FIELD_OFFSET(::patient::DiagnosticReportObject, effectivedatetime_),
  PROTOBUF_FIELD_OFFSET(::patient::DiagnosticReportObject, encounter_),
  PROTOBUF_FIELD_OFFSET(::patient::DiagnosticReportObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::DiagnosticReportObject, issued_),
  PROTOBUF_FIELD_OFFSET(::patient::DiagnosticReportObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::DiagnosticReportObject, result_),
  PROTOBUF_FIELD_OFFSET(::patient::DiagnosticReportObject, status_),
  PROTOBUF_FIELD_OFFSET(::patient::DiagnosticReportObject, subject_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::EncounterObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::EncounterObject, class__),
  PROTOBUF_FIELD_OFFSET(::patient::EncounterObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::EncounterObject, participant_),
  PROTOBUF_FIELD_OFFSET(::patient::EncounterObject, period_),
  PROTOBUF_FIELD_OFFSET(::patient::EncounterObject, reasoncode_),
  PROTOBUF_FIELD_OFFSET(::patient::EncounterObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::EncounterObject, serviceprovider_),
  PROTOBUF_FIELD_OFFSET(::patient::EncounterObject, status_),
  PROTOBUF_FIELD_OFFSET(::patient::EncounterObject, subject_),
  PROTOBUF_FIELD_OFFSET(::patient::EncounterObject, type_),
  PROTOBUF_FIELD_OFFSET(::patient::EncounterObject, hospitalization_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, billableperiod_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, careteam_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, claim_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, contained_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, created_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, diagnosis_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, identifier_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, insurance_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, insurer_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, item_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, outcome_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, patient_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, payment_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, provider_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, referral_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, status_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, total_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, type_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, use_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::GoalObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::GoalObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::GoalObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::GoalObject, lifecyclestatus_),
  PROTOBUF_FIELD_OFFSET(::patient::GoalObject, achievementstatus_),
  PROTOBUF_FIELD_OFFSET(::patient::GoalObject, description_),
  PROTOBUF_FIELD_OFFSET(::patient::GoalObject, subject_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::ImagingStudyObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::ImagingStudyObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::ImagingStudyObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::ImagingStudyObject, identifier_),
  PROTOBUF_FIELD_OFFSET(::patient::ImagingStudyObject, status_),
  PROTOBUF_FIELD_OFFSET(::patient::ImagingStudyObject, subject_),
  PROTOBUF_FIELD_OFFSET(::patient::ImagingStudyObject, encounter_),
  PROTOBUF_FIELD_OFFSET(::patient::ImagingStudyObject, started_),
  PROTOBUF_FIELD_OFFSET(::patient::ImagingStudyObject, numberofseries_),
  PROTOBUF_FIELD_OFFSET(::patient::ImagingStudyObject, numberofinstances_),
  PROTOBUF_FIELD_OFFSET(::patient::ImagingStudyObject, series_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::ImmunizationObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::ImmunizationObject, encounter_),
  PROTOBUF_FIELD_OFFSET(::patient::ImmunizationObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::ImmunizationObject, occurrencedatetime_),
  PROTOBUF_FIELD_OFFSET(::patient::ImmunizationObject, patient_),
  PROTOBUF_FIELD_OFFSET(::patient::ImmunizationObject, primarysource_),
  PROTOBUF_FIELD_OFFSET(::patient::ImmunizationObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::ImmunizationObject, status_),
  PROTOBUF_FIELD_OFFSET(::patient::ImmunizationObject, vaccinecode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::MedicationRequestObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::MedicationRequestObject, authoredon_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationRequestObject, encounter_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationRequestObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationRequestObject, intent_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationRequestObject, medicationcodeableconcept_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationRequestObject, reasonreference_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationRequestObject, requester_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationRequestObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationRequestObject, status_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationRequestObject, subject_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationRequestObject, dosageinstruction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::MedicationAdministrationObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::MedicationAdministrationObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationAdministrationObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationAdministrationObject, status_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationAdministrationObject, medicationcodeableconcept_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationAdministrationObject, subject_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationAdministrationObject, context_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationAdministrationObject, effectivedatetime_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationAdministrationObject, reasonreference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, category_),
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, code_),
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, component_),
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, effectivedatetime_),
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, encounter_),
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, issued_),
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, status_),
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, subject_),
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, valuecodeableconcept_),
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, valuequantity_),
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, valuestring_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::OrganizationObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::OrganizationObject, active_),
  PROTOBUF_FIELD_OFFSET(::patient::OrganizationObject, address_),
  PROTOBUF_FIELD_OFFSET(::patient::OrganizationObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::OrganizationObject, identifier_),
  PROTOBUF_FIELD_OFFSET(::patient::OrganizationObject, name_),
  PROTOBUF_FIELD_OFFSET(::patient::OrganizationObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::OrganizationObject, telecom_),
  PROTOBUF_FIELD_OFFSET(::patient::OrganizationObject, type_),
  PROTOBUF_FIELD_OFFSET(::patient::OrganizationObject, extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, address_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, birthdate_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, communication_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, extension_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, gender_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, identifier_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, maritalstatus_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, multiplebirthboolean_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, name_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, telecom_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, text_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, deceaseddatetime_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, multiplebirthinteger_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::PractitionerObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::PractitionerObject, active_),
  PROTOBUF_FIELD_OFFSET(::patient::PractitionerObject, address_),
  PROTOBUF_FIELD_OFFSET(::patient::PractitionerObject, gender_),
  PROTOBUF_FIELD_OFFSET(::patient::PractitionerObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::PractitionerObject, identifier_),
  PROTOBUF_FIELD_OFFSET(::patient::PractitionerObject, name_),
  PROTOBUF_FIELD_OFFSET(::patient::PractitionerObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::PractitionerObject, telecom_),
  PROTOBUF_FIELD_OFFSET(::patient::PractitionerObject, extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::ProcedureObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::ProcedureObject, code_),
  PROTOBUF_FIELD_OFFSET(::patient::ProcedureObject, encounter_),
  PROTOBUF_FIELD_OFFSET(::patient::ProcedureObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::ProcedureObject, performedperiod_),
  PROTOBUF_FIELD_OFFSET(::patient::ProcedureObject, reasonreference_),
  PROTOBUF_FIELD_OFFSET(::patient::ProcedureObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::ProcedureObject, status_),
  PROTOBUF_FIELD_OFFSET(::patient::ProcedureObject, subject_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, patient_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, careplan_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, careteam_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, claim_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, condition_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, diagnosticreport_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, encounter_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, explanationofbenefit_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, immunization_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, medicationrequest_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, observation_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, organization_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, practitioner_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, procedure_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, allergyintolerance_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, goal_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, imagingstudy_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, device_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, medicationadministration_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::patient::Activity)},
  { 6, -1, sizeof(::patient::Address)},
  { 17, -1, sizeof(::patient::Adjudication)},
  { 24, -1, sizeof(::patient::Amount)},
  { 31, -1, sizeof(::patient::CareTeam)},
  { 40, -1, sizeof(::patient::Communication)},
  { 46, -1, sizeof(::patient::Component)},
  { 53, -1, sizeof(::patient::Contained)},
  { 68, -1, sizeof(::patient::Detail)},
  { 76, -1, sizeof(::patient::Diagnosis)},
  { 84, -1, sizeof(::patient::Entry)},
  { 92, -1, sizeof(::patient::Extension)},
  { 105, -1, sizeof(::patient::Identifier)},
  { 114, -1, sizeof(::patient::Insurance)},
  { 122, -1, sizeof(::patient::Item)},
  { 138, -1, sizeof(::patient::Name)},
  { 148, -1, sizeof(::patient::Participant)},
  { 156, -1, sizeof(::patient::Payment)},
  { 162, -1, sizeof(::patient::Procedure)},
  { 169, -1, sizeof(::patient::Request)},
  { 176, -1, sizeof(::patient::Root)},
  { 184, -1, sizeof(::patient::SupportingInfo)},
  { 192, -1, sizeof(::patient::Telecom)},
  { 200, -1, sizeof(::patient::Text)},
  { 207, -1, sizeof(::patient::Total)},
  { 216, -1, sizeof(::patient::Coding)},
  { 224, -1, sizeof(::patient::Quantity)},
  { 233, -1, sizeof(::patient::Reference)},
  { 240, -1, sizeof(::patient::Category)},
  { 247, -1, sizeof(::patient::Period)},
  { 254, -1, sizeof(::patient::Resource)},
  { 275, -1, sizeof(::patient::DosageInstruction)},
  { 285, -1, sizeof(::patient::Repeat)},
  { 293, -1, sizeof(::patient::Timing)},
  { 299, -1, sizeof(::patient::DoseAndRate)},
  { 306, -1, sizeof(::patient::Onset)},
  { 315, -1, sizeof(::patient::Reaction)},
  { 327, -1, sizeof(::patient::Instance)},
  { 336, -1, sizeof(::patient::Series)},
  { 348, -1, sizeof(::patient::Hospitalization)},
  { 354, -1, sizeof(::patient::Carrier)},
  { 361, -1, sizeof(::patient::DeviceName)},
  { 368, -1, sizeof(::patient::AllergyIntoleranceObject)},
  { 391, -1, sizeof(::patient::CarePlanObject)},
  { 409, -1, sizeof(::patient::CareTeamObject)},
  { 423, -1, sizeof(::patient::ClaimObject)},
  { 445, -1, sizeof(::patient::ConditionObject)},
  { 460, -1, sizeof(::patient::DeviceObject)},
  { 477, -1, sizeof(::patient::DiagnosticReportObject)},
  { 492, -1, sizeof(::patient::EncounterObject)},
  { 508, -1, sizeof(::patient::ExplanationOfBenefitObject)},
  { 534, -1, sizeof(::patient::GoalObject)},
  { 545, -1, sizeof(::patient::ImagingStudyObject)},
  { 560, -1, sizeof(::patient::ImmunizationObject)},
  { 573, -1, sizeof(::patient::MedicationRequestObject)},
  { 589, -1, sizeof(::patient::MedicationAdministrationObject)},
  { 602, -1, sizeof(::patient::ObservationObject)},
  { 620, -1, sizeof(::patient::OrganizationObject)},
  { 634, -1, sizeof(::patient::PatientObject)},
  { 654, -1, sizeof(::patient::PractitionerObject)},
  { 668, -1, sizeof(::patient::ProcedureObject)},
  { 681, -1, sizeof(::patient::PatientRecord)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Activity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Address_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Adjudication_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Amount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_CareTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Communication_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Component_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Contained_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Detail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Diagnosis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Extension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Identifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Insurance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Name_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Participant_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Payment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Procedure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Root_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_SupportingInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Telecom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Text_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Total_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Coding_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Quantity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Reference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Category_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Period_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Resource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_DosageInstruction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Repeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Timing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_DoseAndRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Onset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Reaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Instance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Series_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Hospitalization_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Carrier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_DeviceName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_AllergyIntoleranceObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_CarePlanObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_CareTeamObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_ClaimObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_ConditionObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_DeviceObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_DiagnosticReportObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_EncounterObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_ExplanationOfBenefitObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_GoalObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_ImagingStudyObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_ImmunizationObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_MedicationRequestObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_MedicationAdministrationObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_ObservationObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_OrganizationObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_PatientObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_PractitionerObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_ProcedureObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_PatientRecord_default_instance_),
};

const char descriptor_table_protodef_customized_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020customized.proto\022\007patient\"+\n\010Activity\022"
  "\037\n\006detail\030\001 \001(\0132\017.patient.Detail\"\200\001\n\007Add"
  "ress\022\014\n\004city\030\001 \001(\t\022\017\n\007country\030\002 \001(\t\022%\n\te"
  "xtension\030\003 \003(\0132\022.patient.Extension\022\014\n\004li"
  "ne\030\004 \003(\t\022\022\n\npostalCode\030\005 \001(\t\022\r\n\005state\030\006 "
  "\001(\t\"T\n\014Adjudication\022\037\n\006amount\030\001 \001(\0132\017.pa"
  "tient.Amount\022#\n\010category\030\002 \001(\0132\021.patient"
  ".Category\")\n\006Amount\022\020\n\010currency\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\002\"v\n\010CareTeam\022$\n\010provider\030\001 \001"
  "(\0132\022.patient.Reference\022\037\n\004role\030\002 \001(\0132\021.p"
  "atient.Category\022\020\n\010sequence\030\003 \001(\005\022\021\n\tref"
  "erence\030\004 \001(\t\"4\n\rCommunication\022#\n\010languag"
  "e\030\001 \001(\0132\021.patient.Category\"V\n\tComponent\022"
  "\037\n\004code\030\001 \001(\0132\021.patient.Category\022(\n\rvalu"
  "eQuantity\030\002 \001(\0132\021.patient.Quantity\"\255\002\n\tC"
  "ontained\022\n\n\002id\030\001 \001(\t\022\016\n\006intent\030\002 \001(\t\022%\n\t"
  "performer\030\003 \003(\0132\022.patient.Reference\022%\n\tr"
  "equester\030\004 \001(\0132\022.patient.Reference\022\024\n\014re"
  "sourceType\030\005 \001(\t\022\016\n\006status\030\006 \001(\t\022#\n\007subj"
  "ect\030\007 \001(\0132\022.patient.Reference\022\'\n\013benefic"
  "iary\030\010 \001(\0132\022.patient.Reference\022!\n\005payor\030"
  "\t \003(\0132\022.patient.Reference\022\037\n\004type\030\n \001(\0132"
  "\021.patient.Category\"_\n\006Detail\022\037\n\004code\030\001 \001"
  "(\0132\021.patient.Category\022$\n\010location\030\002 \001(\0132"
  "\022.patient.Reference\022\016\n\006status\030\003 \001(\t\"n\n\tD"
  "iagnosis\022.\n\022diagnosisReference\030\001 \001(\0132\022.p"
  "atient.Reference\022\020\n\010sequence\030\002 \001(\005\022\037\n\004ty"
  "pe\030\003 \003(\0132\021.patient.Category\"`\n\005Entry\022\017\n\007"
  "fullUrl\030\001 \001(\t\022!\n\007request\030\002 \001(\0132\020.patient"
  ".Request\022#\n\010resource\030\003 \003(\0132\021.patient.Res"
  "ource\"\341\001\n\tExtension\022%\n\textension\030\001 \003(\0132\022"
  ".patient.Extension\022\013\n\003url\030\002 \001(\t\022$\n\013value"
  "Coding\030\003 \001(\0132\017.patient.Coding\022\023\n\013valueSt"
  "ring\030\004 \001(\t\022\024\n\014valueDecimal\030\005 \001(\002\022\021\n\tvalu"
  "eCode\030\006 \001(\t\022&\n\014valueAddress\030\007 \001(\0132\020.pati"
  "ent.Address\022\024\n\014valueInteger\030\010 \001(\005\"Y\n\nIde"
  "ntifier\022\016\n\006system\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022\037"
  "\n\004type\030\003 \001(\0132\021.patient.Category\022\013\n\003use\030\004"
  " \001(\t\"R\n\tInsurance\022$\n\010coverage\030\001 \001(\0132\022.pa"
  "tient.Reference\022\r\n\005focal\030\002 \001(\010\022\020\n\010sequen"
  "ce\030\003 \001(\005\"\214\003\n\004Item\022%\n\tencounter\030\001 \003(\0132\022.p"
  "atient.Reference\022+\n\020productOrService\030\002 \001"
  "(\0132\021.patient.Category\022\020\n\010sequence\030\003 \001(\005\022"
  "\033\n\023informationSequence\030\004 \003(\005\022\034\n\003net\030\005 \001("
  "\0132\017.patient.Amount\022#\n\010category\030\006 \001(\0132\021.p"
  "atient.Category\0222\n\027locationCodeableConce"
  "pt\030\007 \001(\0132\021.patient.Category\022\'\n\016servicedP"
  "eriod\030\010 \001(\0132\017.patient.Period\022+\n\014adjudica"
  "tion\030\t \003(\0132\025.patient.Adjudication\022\031\n\021pro"
  "cedureSequence\030\n \003(\005\022\031\n\021diagnosisSequenc"
  "e\030\013 \003(\005\"R\n\004Name\022\016\n\006family\030\001 \001(\t\022\r\n\005given"
  "\030\002 \003(\t\022\016\n\006prefix\030\003 \003(\t\022\013\n\003use\030\004 \001(\t\022\016\n\006s"
  "uffix\030\005 \003(\t\"z\n\013Participant\022&\n\nindividual"
  "\030\001 \001(\0132\022.patient.Reference\022\"\n\006member\030\002 \001"
  "(\0132\022.patient.Reference\022\037\n\004role\030\003 \003(\0132\021.p"
  "atient.Category\"*\n\007Payment\022\037\n\006amount\030\001 \001"
  "(\0132\017.patient.Amount\"M\n\tProcedure\022.\n\022proc"
  "edureReference\030\001 \001(\0132\022.patient.Reference"
  "\022\020\n\010sequence\030\002 \001(\005\"&\n\007Request\022\016\n\006method\030"
  "\001 \001(\t\022\013\n\003url\030\002 \001(\t\"I\n\004Root\022\035\n\005entry\030\001 \003("
  "\0132\016.patient.Entry\022\024\n\014resourceType\030\002 \001(\t\022"
  "\014\n\004type\030\003 \001(\t\"s\n\016SupportingInfo\022#\n\010categ"
  "ory\030\001 \001(\0132\021.patient.Category\022\020\n\010sequence"
  "\030\002 \001(\005\022*\n\016valueReference\030\003 \001(\0132\022.patient"
  ".Reference\"5\n\007Telecom\022\016\n\006system\030\001 \001(\t\022\013\n"
  "\003use\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\"#\n\004Text\022\013\n\003div"
  "\030\001 \001(\t\022\016\n\006status\030\002 \001(\t\"n\n\005Total\022\020\n\010curre"
  "ncy\030\001 \001(\t\022\r\n\005value\030\002 \001(\002\022\037\n\006amount\030\003 \001(\013"
  "2\017.patient.Amount\022#\n\010category\030\004 \001(\0132\021.pa"
  "tient.Category\"7\n\006Coding\022\014\n\004code\030\001 \001(\t\022\017"
  "\n\007display\030\002 \001(\t\022\016\n\006system\030\003 \001(\t\"E\n\010Quant"
  "ity\022\014\n\004code\030\001 \001(\t\022\016\n\006system\030\002 \001(\t\022\014\n\004uni"
  "t\030\003 \001(\t\022\r\n\005value\030\004 \001(\002\"/\n\tReference\022\021\n\tr"
  "eference\030\001 \001(\t\022\017\n\007display\030\002 \001(\t\"9\n\010Categ"
  "ory\022\037\n\006coding\030\001 \003(\0132\017.patient.Coding\022\014\n\004"
  "text\030\002 \001(\t\"$\n\006Period\022\013\n\003end\030\001 \001(\t\022\r\n\005sta"
  "rt\030\002 \001(\t\"\370\005\n\010Resource\022\024\n\014resourceType\030\001 "
  "\001(\t\022+\n\010carePlan\030\002 \001(\0132\027.patient.CarePlan"
  "ObjectH\000\022+\n\010careTeam\030\003 \001(\0132\027.patient.Car"
  "eTeamObjectH\000\022%\n\005claim\030\004 \001(\0132\024.patient.C"
  "laimObjectH\000\022-\n\tcondition\030\005 \001(\0132\030.patien"
  "t.ConditionObjectH\000\022;\n\020diagnosticReport\030"
  "\006 \001(\0132\037.patient.DiagnosticReportObjectH\000"
  "\022-\n\tencounter\030\007 \001(\0132\030.patient.EncounterO"
  "bjectH\000\022C\n\024explanationOfBenefit\030\010 \001(\0132#."
  "patient.ExplanationOfBenefitObjectH\000\0223\n\014"
  "immunization\030\t \001(\0132\033.patient.Immunizatio"
  "nObjectH\000\022=\n\021medicationRequest\030\n \001(\0132 .p"
  "atient.MedicationRequestObjectH\000\0221\n\013obse"
  "rvation\030\013 \001(\0132\032.patient.ObservationObjec"
  "tH\000\0223\n\014organization\030\014 \001(\0132\033.patient.Orga"
  "nizationObjectH\000\022)\n\007patient\030\r \001(\0132\026.pati"
  "ent.PatientObjectH\000\0223\n\014practitioner\030\016 \001("
  "\0132\033.patient.PractitionerObjectH\000\022-\n\tproc"
  "edure\030\017 \001(\0132\030.patient.ProcedureObjectH\000B"
  "\n\n\010resource\"\274\001\n\021DosageInstruction\022\020\n\010seq"
  "uence\030\001 \001(\005\022\027\n\017asNeededBoolean\030\002 \001(\010\022)\n\013"
  "doseAndRate\030\003 \003(\0132\024.patient.DoseAndRate\022"
  "\037\n\006timing\030\004 \001(\0132\017.patient.Timing\0220\n\025addi"
  "tionalInstruction\030\005 \003(\0132\021.patient.Catego"
  "ry\"\?\n\006Repeat\022\021\n\tfrequency\030\001 \001(\005\022\016\n\006perio"
  "d\030\002 \001(\002\022\022\n\nperiodUnit\030\003 \001(\t\")\n\006Timing\022\037\n"
  "\006repeat\030\001 \001(\0132\017.patient.Repeat\"W\n\013DoseAn"
  "dRate\022\037\n\004type\030\001 \001(\0132\021.patient.Category\022\'"
  "\n\014doseQuantity\030\002 \001(\0132\021.patient.Quantity\""
  "k\n\005Onset\022\025\n\ronsetDateTime\030\001 \001(\t\022\020\n\010onset"
  "Age\030\002 \001(\005\022$\n\013onsetPeriod\030\003 \001(\0132\017.patient"
  ".Period\022\023\n\013onsetString\030\004 \001(\t\"\333\001\n\010Reactio"
  "n\022$\n\tsubstance\030\001 \001(\0132\021.patient.Category\022"
  "(\n\rmanifestation\030\002 \001(\0132\021.patient.Categor"
  "y\022\023\n\013description\030\003 \001(\t\022\r\n\005onset\030\004 \001(\t\022#\n"
  "\010severity\030\005 \001(\0132\021.patient.Category\022(\n\rex"
  "posureRoute\030\006 \001(\0132\021.patient.Category\022\014\n\004"
  "note\030\007 \001(\t\"Y\n\010Instance\022\013\n\003uid\030\001 \001(\t\022!\n\010s"
  "opClass\030\002 \001(\0132\017.patient.Coding\022\016\n\006number"
  "\030\003 \001(\005\022\r\n\005title\030\004 \001(\t\"\274\001\n\006Series\022\013\n\003uid\030"
  "\001 \001(\t\022\016\n\006number\030\002 \001(\005\022!\n\010modality\030\003 \001(\0132"
  "\017.patient.Coding\022\031\n\021numberOfInstances\030\004 "
  "\001(\005\022!\n\010bodySite\030\005 \001(\0132\017.patient.Coding\022\017"
  "\n\007started\030\006 \001(\t\022#\n\010instance\030\007 \003(\0132\021.pati"
  "ent.Instance\"B\n\017Hospitalization\022/\n\024disch"
  "argeDisposition\030\001 \001(\0132\021.patient.Category"
  "\"7\n\007Carrier\022\030\n\020deviceIdentifier\030\001 \001(\t\022\022\n"
  "\ncarrierHRF\030\002 \001(\t\"(\n\nDeviceName\022\014\n\004name\030"
  "\001 \001(\t\022\014\n\004type\030\002 \001(\t\"\255\004\n\030AllergyIntoleran"
  "ceObject\022\'\n\nidentifier\030\001 \001(\0132\023.patient.I"
  "dentifier\022)\n\016clinicalStatus\030\002 \001(\0132\021.pati"
  "ent.Category\022-\n\022verificationStatus\030\003 \001(\013"
  "2\021.patient.Category\022\014\n\004type\030\004 \001(\t\022\020\n\010cat"
  "egory\030\005 \003(\t\022\023\n\013criticality\030\006 \001(\t\022\037\n\004code"
  "\030\007 \001(\0132\021.patient.Category\022#\n\007patient\030\010 \001"
  "(\0132\022.patient.Reference\022%\n\tencounter\030\t \001("
  "\0132\022.patient.Reference\022\035\n\005onset\030\n \001(\0132\016.p"
  "atient.Onset\022\024\n\014recordedDate\030\013 \001(\t\022$\n\010re"
  "corder\030\014 \001(\0132\022.patient.Reference\022$\n\010asse"
  "rter\030\r \001(\0132\022.patient.Reference\022\026\n\016lastOc"
  "currence\030\016 \001(\t\022\014\n\004note\030\017 \001(\t\022\024\n\014resource"
  "Type\030\020 \001(\t\022#\n\010reaction\030\021 \001(\0132\021.patient.R"
  "eaction\022\n\n\002id\030\022 \001(\t\"\224\003\n\016CarePlanObject\022#"
  "\n\010activity\030\001 \003(\0132\021.patient.Activity\022%\n\ta"
  "ddresses\030\002 \003(\0132\022.patient.Reference\022#\n\010ca"
  "reTeam\030\003 \003(\0132\021.patient.CareTeam\022#\n\010categ"
  "ory\030\004 \003(\0132\021.patient.Category\022%\n\tencounte"
  "r\030\005 \001(\0132\022.patient.Reference\022\n\n\002id\030\006 \001(\t\022"
  "\016\n\006intent\030\007 \001(\t\022\037\n\006period\030\010 \001(\0132\017.patien"
  "t.Period\022\024\n\014resourceType\030\t \001(\t\022\016\n\006status"
  "\030\n \001(\t\022#\n\007subject\030\013 \001(\0132\022.patient.Refere"
  "nce\022\033\n\004text\030\014 \001(\0132\r.patient.Text\022 \n\004goal"
  "\030\r \003(\0132\022.patient.Reference\"\263\002\n\016CareTeamO"
  "bject\022%\n\tencounter\030\001 \001(\0132\022.patient.Refer"
  "ence\022\n\n\002id\030\002 \001(\t\0220\n\024managingOrganization"
  "\030\003 \003(\0132\022.patient.Reference\022)\n\013participan"
  "t\030\004 \003(\0132\024.patient.Participant\022\037\n\006period\030"
  "\005 \001(\0132\017.patient.Period\022%\n\nreasonCode\030\006 \003"
  "(\0132\021.patient.Category\022\024\n\014resourceType\030\007 "
  "\001(\t\022\016\n\006status\030\010 \001(\t\022#\n\007subject\030\t \001(\0132\022.p"
  "atient.Reference\"\243\004\n\013ClaimObject\022\'\n\016bill"
  "ablePeriod\030\001 \001(\0132\017.patient.Period\022\017\n\007cre"
  "ated\030\002 \001(\t\022%\n\tdiagnosis\030\003 \003(\0132\022.patient."
  "Diagnosis\022\n\n\002id\030\004 \001(\t\022%\n\tinsurance\030\005 \003(\013"
  "2\022.patient.Insurance\022\033\n\004item\030\006 \003(\0132\r.pat"
  "ient.Item\022#\n\007patient\030\007 \001(\0132\022.patient.Ref"
  "erence\022(\n\014prescription\030\010 \001(\0132\022.patient.R"
  "eference\022#\n\010priority\030\t \001(\0132\021.patient.Cat"
  "egory\022%\n\tprocedure\030\n \003(\0132\022.patient.Proce"
  "dure\022$\n\010provider\030\013 \001(\0132\022.patient.Referen"
  "ce\022\024\n\014resourceType\030\014 \001(\t\022\016\n\006status\030\r \001(\t"
  "\022/\n\016supportingInfo\030\016 \003(\0132\027.patient.Suppo"
  "rtingInfo\022\035\n\005total\030\017 \001(\0132\016.patient.Total"
  "\022\037\n\004type\030\020 \001(\0132\021.patient.Category\022\013\n\003use"
  "\030\021 \001(\t\"\302\002\n\017ConditionObject\022\031\n\021abatementD"
  "ateTime\030\001 \001(\t\022)\n\016clinicalStatus\030\002 \001(\0132\021."
  "patient.Category\022\037\n\004code\030\003 \001(\0132\021.patient"
  ".Category\022%\n\tencounter\030\004 \001(\0132\022.patient.R"
  "eference\022\n\n\002id\030\005 \001(\t\022\025\n\ronsetDateTime\030\006 "
  "\001(\t\022\024\n\014recordedDate\030\007 \001(\t\022\024\n\014resourceTyp"
  "e\030\010 \001(\t\022#\n\007subject\030\t \001(\0132\022.patient.Refer"
  "ence\022-\n\022verificationStatus\030\n \001(\0132\021.patie"
  "nt.Category\"\313\002\n\014DeviceObject\022\024\n\014resource"
  "Type\030\001 \001(\t\022\n\n\002id\030\002 \001(\t\022$\n\nudiCarrier\030\003 \003"
  "(\0132\020.patient.Carrier\022\016\n\006status\030\004 \001(\t\022\032\n\022"
  "distinctIdentifier\030\005 \001(\t\022\027\n\017manufactureD"
  "ate\030\006 \001(\t\022\026\n\016expirationDate\030\007 \001(\t\022\021\n\tlot"
  "Number\030\010 \001(\t\022\024\n\014serialNumber\030\t \001(\t\022\'\n\nde"
  "viceName\030\n \003(\0132\023.patient.DeviceName\022\037\n\004t"
  "ype\030\013 \001(\0132\021.patient.Category\022#\n\007patient\030"
  "\014 \001(\0132\022.patient.Reference\"\253\002\n\026Diagnostic"
  "ReportObject\022#\n\010category\030\001 \003(\0132\021.patient"
  ".Category\022\037\n\004code\030\002 \001(\0132\021.patient.Catego"
  "ry\022\031\n\021effectiveDateTime\030\003 \001(\t\022%\n\tencount"
  "er\030\004 \001(\0132\022.patient.Reference\022\n\n\002id\030\005 \001(\t"
  "\022\016\n\006issued\030\006 \001(\t\022\024\n\014resourceType\030\007 \001(\t\022\""
  "\n\006result\030\010 \003(\0132\022.patient.Reference\022\016\n\006st"
  "atus\030\t \001(\t\022#\n\007subject\030\n \001(\0132\022.patient.Re"
  "ference\"\374\002\n\017EncounterObject\022\036\n\005class\030\001 \001"
  "(\0132\017.patient.Coding\022\n\n\002id\030\002 \001(\t\022)\n\013parti"
  "cipant\030\003 \003(\0132\024.patient.Participant\022\037\n\006pe"
  "riod\030\004 \001(\0132\017.patient.Period\022%\n\nreasonCod"
  "e\030\005 \003(\0132\021.patient.Category\022\024\n\014resourceTy"
  "pe\030\006 \001(\t\022+\n\017serviceProvider\030\007 \001(\0132\022.pati"
  "ent.Reference\022\016\n\006status\030\010 \001(\t\022#\n\007subject"
  "\030\t \001(\0132\022.patient.Reference\022\037\n\004type\030\n \003(\013"
  "2\021.patient.Category\0221\n\017hospitalization\030\013"
  " \001(\0132\030.patient.Hospitalization\"\242\005\n\032Expla"
  "nationOfBenefitObject\022\'\n\016billablePeriod\030"
  "\001 \001(\0132\017.patient.Period\022#\n\010careTeam\030\002 \003(\013"
  "2\021.patient.CareTeam\022!\n\005claim\030\003 \001(\0132\022.pat"
  "ient.Reference\022%\n\tcontained\030\004 \003(\0132\022.pati"
  "ent.Contained\022\017\n\007created\030\005 \001(\t\022%\n\tdiagno"
  "sis\030\006 \003(\0132\022.patient.Diagnosis\022\n\n\002id\030\007 \001("
  "\t\022\'\n\nidentifier\030\010 \003(\0132\023.patient.Identifi"
  "er\022%\n\tinsurance\030\t \003(\0132\022.patient.Insuranc"
  "e\022#\n\007insurer\030\n \001(\0132\022.patient.Reference\022\033"
  "\n\004item\030\013 \003(\0132\r.patient.Item\022\017\n\007outcome\030\014"
  " \001(\t\022#\n\007patient\030\r \001(\0132\022.patient.Referenc"
  "e\022!\n\007payment\030\016 \001(\0132\020.patient.Payment\022$\n\010"
  "provider\030\017 \001(\0132\022.patient.Reference\022$\n\010re"
  "ferral\030\020 \001(\0132\022.patient.Reference\022\024\n\014reso"
  "urceType\030\021 \001(\t\022\016\n\006status\030\022 \001(\t\022\035\n\005total\030"
  "\023 \003(\0132\016.patient.Total\022\037\n\004type\030\024 \001(\0132\021.pa"
  "tient.Category\022\013\n\003use\030\025 \001(\t\"\302\001\n\nGoalObje"
  "ct\022\024\n\014resourceType\030\001 \001(\t\022\n\n\002id\030\002 \001(\t\022\027\n\017"
  "lifecycleStatus\030\003 \001(\t\022,\n\021achievementStat"
  "us\030\004 \001(\0132\021.patient.Category\022&\n\013descripti"
  "on\030\005 \001(\0132\021.patient.Category\022#\n\007subject\030\006"
  " \001(\0132\022.patient.Reference\"\240\002\n\022ImagingStud"
  "yObject\022\024\n\014resourceType\030\001 \001(\t\022\n\n\002id\030\002 \001("
  "\t\022\'\n\nidentifier\030\003 \003(\0132\023.patient.Identifi"
  "er\022\016\n\006status\030\004 \001(\t\022#\n\007subject\030\005 \001(\0132\022.pa"
  "tient.Reference\022%\n\tencounter\030\006 \001(\0132\022.pat"
  "ient.Reference\022\017\n\007started\030\007 \001(\t\022\026\n\016numbe"
  "rOfSeries\030\010 \001(\005\022\031\n\021numberOfInstances\030\t \001"
  "(\005\022\037\n\006series\030\n \003(\0132\017.patient.Series\"\355\001\n\022"
  "ImmunizationObject\022%\n\tencounter\030\001 \001(\0132\022."
  "patient.Reference\022\n\n\002id\030\002 \001(\t\022\032\n\022occurre"
  "nceDateTime\030\003 \001(\t\022#\n\007patient\030\004 \001(\0132\022.pat"
  "ient.Reference\022\025\n\rprimarySource\030\005 \001(\010\022\024\n"
  "\014resourceType\030\006 \001(\t\022\016\n\006status\030\007 \001(\t\022&\n\013v"
  "accineCode\030\010 \001(\0132\021.patient.Category\"\374\002\n\027"
  "MedicationRequestObject\022\022\n\nauthoredOn\030\001 "
  "\001(\t\022%\n\tencounter\030\002 \001(\0132\022.patient.Referen"
  "ce\022\n\n\002id\030\003 \001(\t\022\016\n\006intent\030\004 \001(\t\0224\n\031medica"
  "tionCodeableConcept\030\005 \001(\0132\021.patient.Cate"
  "gory\022+\n\017reasonReference\030\006 \003(\0132\022.patient."
  "Reference\022%\n\trequester\030\007 \001(\0132\022.patient.R"
  "eference\022\024\n\014resourceType\030\010 \001(\t\022\016\n\006status"
  "\030\t \001(\t\022#\n\007subject\030\n \001(\0132\022.patient.Refere"
  "nce\0225\n\021dosageInstruction\030\013 \003(\0132\032.patient"
  ".DosageInstruction\"\232\002\n\036MedicationAdminis"
  "trationObject\022\024\n\014resourceType\030\001 \001(\t\022\n\n\002i"
  "d\030\002 \001(\t\022\016\n\006status\030\003 \001(\t\0224\n\031medicationCod"
  "eableConcept\030\004 \001(\0132\021.patient.Category\022#\n"
  "\007subject\030\005 \001(\0132\022.patient.Reference\022#\n\007co"
  "ntext\030\006 \001(\0132\022.patient.Reference\022\031\n\021effec"
  "tiveDateTime\030\007 \001(\t\022+\n\017reasonReference\030\010 "
  "\003(\0132\022.patient.Reference\"\231\003\n\021ObservationO"
  "bject\022#\n\010category\030\001 \003(\0132\021.patient.Catego"
  "ry\022\037\n\004code\030\002 \001(\0132\021.patient.Category\022%\n\tc"
  "omponent\030\003 \003(\0132\022.patient.Component\022\031\n\021ef"
  "fectiveDateTime\030\004 \001(\t\022%\n\tencounter\030\005 \001(\013"
  "2\022.patient.Reference\022\n\n\002id\030\006 \001(\t\022\016\n\006issu"
  "ed\030\007 \001(\t\022\024\n\014resourceType\030\010 \001(\t\022\016\n\006status"
  "\030\t \001(\t\022#\n\007subject\030\n \001(\0132\022.patient.Refere"
  "nce\022/\n\024valueCodeableConcept\030\013 \001(\0132\021.pati"
  "ent.Category\022(\n\rvalueQuantity\030\014 \001(\0132\021.pa"
  "tient.Quantity\022\023\n\013valueString\030\r \001(\t\"\213\002\n\022"
  "OrganizationObject\022\016\n\006active\030\001 \001(\010\022!\n\007ad"
  "dress\030\002 \003(\0132\020.patient.Address\022\n\n\002id\030\003 \001("
  "\t\022\'\n\nidentifier\030\004 \003(\0132\023.patient.Identifi"
  "er\022\014\n\004name\030\005 \001(\t\022\024\n\014resourceType\030\006 \001(\t\022!"
  "\n\007telecom\030\007 \003(\0132\020.patient.Telecom\022\037\n\004typ"
  "e\030\010 \003(\0132\021.patient.Category\022%\n\textension\030"
  "\t \003(\0132\022.patient.Extension\"\323\003\n\rPatientObj"
  "ect\022!\n\007address\030\001 \003(\0132\020.patient.Address\022\021"
  "\n\tbirthDate\030\002 \001(\t\022-\n\rcommunication\030\003 \003(\013"
  "2\026.patient.Communication\022%\n\textension\030\004 "
  "\003(\0132\022.patient.Extension\022\016\n\006gender\030\005 \001(\t\022"
  "\n\n\002id\030\006 \001(\t\022\'\n\nidentifier\030\007 \003(\0132\023.patien"
  "t.Identifier\022(\n\rmaritalStatus\030\010 \001(\0132\021.pa"
  "tient.Category\022\034\n\024multipleBirthBoolean\030\t"
  " \001(\010\022\033\n\004name\030\n \003(\0132\r.patient.Name\022\024\n\014res"
  "ourceType\030\013 \001(\t\022!\n\007telecom\030\014 \003(\0132\020.patie"
  "nt.Telecom\022\033\n\004text\030\r \001(\0132\r.patient.Text\022"
  "\030\n\020deceasedDateTime\030\016 \001(\t\022\034\n\024multipleBir"
  "thInteger\030\017 \001(\005\"\211\002\n\022PractitionerObject\022\016"
  "\n\006active\030\001 \001(\010\022!\n\007address\030\002 \003(\0132\020.patien"
  "t.Address\022\016\n\006gender\030\003 \001(\t\022\n\n\002id\030\004 \001(\t\022\'\n"
  "\nidentifier\030\005 \003(\0132\023.patient.Identifier\022\033"
  "\n\004name\030\006 \003(\0132\r.patient.Name\022\024\n\014resourceT"
  "ype\030\007 \001(\t\022!\n\007telecom\030\010 \003(\0132\020.patient.Tel"
  "ecom\022%\n\textension\030\t \003(\0132\022.patient.Extens"
  "ion\"\207\002\n\017ProcedureObject\022\037\n\004code\030\001 \001(\0132\021."
  "patient.Category\022%\n\tencounter\030\002 \001(\0132\022.pa"
  "tient.Reference\022\n\n\002id\030\003 \001(\t\022(\n\017performed"
  "Period\030\004 \001(\0132\017.patient.Period\022+\n\017reasonR"
  "eference\030\005 \003(\0132\022.patient.Reference\022\024\n\014re"
  "sourceType\030\006 \001(\t\022\016\n\006status\030\007 \001(\t\022#\n\007subj"
  "ect\030\010 \001(\0132\022.patient.Reference\"\306\007\n\rPatien"
  "tRecord\022\'\n\007patient\030\001 \001(\0132\026.patient.Patie"
  "ntObject\022)\n\010carePlan\030\002 \003(\0132\027.patient.Car"
  "ePlanObject\022)\n\010careTeam\030\003 \003(\0132\027.patient."
  "CareTeamObject\022#\n\005claim\030\004 \003(\0132\024.patient."
  "ClaimObject\022+\n\tcondition\030\005 \003(\0132\030.patient"
  ".ConditionObject\0229\n\020diagnosticReport\030\006 \003"
  "(\0132\037.patient.DiagnosticReportObject\022+\n\te"
  "ncounter\030\007 \003(\0132\030.patient.EncounterObject"
  "\022A\n\024explanationOfBenefit\030\010 \003(\0132#.patient"
  ".ExplanationOfBenefitObject\0221\n\014immunizat"
  "ion\030\t \003(\0132\033.patient.ImmunizationObject\022;"
  "\n\021medicationRequest\030\n \003(\0132 .patient.Medi"
  "cationRequestObject\022/\n\013observation\030\013 \003(\013"
  "2\032.patient.ObservationObject\0221\n\014organiza"
  "tion\030\014 \003(\0132\033.patient.OrganizationObject\022"
  "1\n\014practitioner\030\r \003(\0132\033.patient.Practiti"
  "onerObject\022+\n\tprocedure\030\016 \003(\0132\030.patient."
  "ProcedureObject\022=\n\022allergyIntolerance\030\017 "
  "\003(\0132!.patient.AllergyIntoleranceObject\022!"
  "\n\004goal\030\020 \003(\0132\023.patient.GoalObject\0221\n\014ima"
  "gingStudy\030\021 \003(\0132\033.patient.ImagingStudyOb"
  "ject\022%\n\006device\030\022 \003(\0132\025.patient.DeviceObj"
  "ect\022I\n\030medicationAdministration\030\023 \003(\0132\'."
  "patient.MedicationAdministrationObjectb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_customized_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_customized_2eproto_sccs[61] = {
  &scc_info_Activity_customized_2eproto.base,
  &scc_info_Address_customized_2eproto.base,
  &scc_info_Adjudication_customized_2eproto.base,
  &scc_info_AllergyIntoleranceObject_customized_2eproto.base,
  &scc_info_Amount_customized_2eproto.base,
  &scc_info_CarePlanObject_customized_2eproto.base,
  &scc_info_CareTeam_customized_2eproto.base,
  &scc_info_CareTeamObject_customized_2eproto.base,
  &scc_info_Carrier_customized_2eproto.base,
  &scc_info_Category_customized_2eproto.base,
  &scc_info_ClaimObject_customized_2eproto.base,
  &scc_info_Coding_customized_2eproto.base,
  &scc_info_Communication_customized_2eproto.base,
  &scc_info_Component_customized_2eproto.base,
  &scc_info_ConditionObject_customized_2eproto.base,
  &scc_info_Contained_customized_2eproto.base,
  &scc_info_Detail_customized_2eproto.base,
  &scc_info_DeviceName_customized_2eproto.base,
  &scc_info_DeviceObject_customized_2eproto.base,
  &scc_info_Diagnosis_customized_2eproto.base,
  &scc_info_DiagnosticReportObject_customized_2eproto.base,
  &scc_info_DosageInstruction_customized_2eproto.base,
  &scc_info_DoseAndRate_customized_2eproto.base,
  &scc_info_EncounterObject_customized_2eproto.base,
  &scc_info_Entry_customized_2eproto.base,
  &scc_info_ExplanationOfBenefitObject_customized_2eproto.base,
  &scc_info_GoalObject_customized_2eproto.base,
  &scc_info_Hospitalization_customized_2eproto.base,
  &scc_info_Identifier_customized_2eproto.base,
  &scc_info_ImagingStudyObject_customized_2eproto.base,
  &scc_info_ImmunizationObject_customized_2eproto.base,
  &scc_info_Instance_customized_2eproto.base,
  &scc_info_Insurance_customized_2eproto.base,
  &scc_info_Item_customized_2eproto.base,
  &scc_info_MedicationAdministrationObject_customized_2eproto.base,
  &scc_info_MedicationRequestObject_customized_2eproto.base,
  &scc_info_Name_customized_2eproto.base,
  &scc_info_ObservationObject_customized_2eproto.base,
  &scc_info_Onset_customized_2eproto.base,
  &scc_info_OrganizationObject_customized_2eproto.base,
  &scc_info_Participant_customized_2eproto.base,
  &scc_info_PatientObject_customized_2eproto.base,
  &scc_info_PatientRecord_customized_2eproto.base,
  &scc_info_Payment_customized_2eproto.base,
  &scc_info_Period_customized_2eproto.base,
  &scc_info_PractitionerObject_customized_2eproto.base,
  &scc_info_Procedure_customized_2eproto.base,
  &scc_info_ProcedureObject_customized_2eproto.base,
  &scc_info_Quantity_customized_2eproto.base,
  &scc_info_Reaction_customized_2eproto.base,
  &scc_info_Reference_customized_2eproto.base,
  &scc_info_Repeat_customized_2eproto.base,
  &scc_info_Request_customized_2eproto.base,
  &scc_info_Resource_customized_2eproto.base,
  &scc_info_Root_customized_2eproto.base,
  &scc_info_Series_customized_2eproto.base,
  &scc_info_SupportingInfo_customized_2eproto.base,
  &scc_info_Telecom_customized_2eproto.base,
  &scc_info_Text_customized_2eproto.base,
  &scc_info_Timing_customized_2eproto.base,
  &scc_info_Total_customized_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_customized_2eproto_once;
static bool descriptor_table_customized_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_customized_2eproto = {
  &descriptor_table_customized_2eproto_initialized, descriptor_table_protodef_customized_2eproto, "customized.proto", 12886,
  &descriptor_table_customized_2eproto_once, descriptor_table_customized_2eproto_sccs, descriptor_table_customized_2eproto_deps, 61, 0,
  schemas, file_default_instances, TableStruct_customized_2eproto::offsets,
  file_level_metadata_customized_2eproto, 62, file_level_enum_descriptors_customized_2eproto, file_level_service_descriptors_customized_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_customized_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_customized_2eproto), true);
namespace patient {

// ===================================================================

void Activity::InitAsDefaultInstance() {
  ::patient::_Activity_default_instance_._instance.get_mutable()->detail_ = const_cast< ::patient::Detail*>(
      ::patient::Detail::internal_default_instance());
}
class Activity::_Internal {
 public:
  static const ::patient::Detail& detail(const Activity* msg);
};

const ::patient::Detail&
Activity::_Internal::detail(const Activity* msg) {
  return *msg->detail_;
}
Activity::Activity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Activity)
}
Activity::Activity(const Activity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_detail()) {
    detail_ = new ::patient::Detail(*from.detail_);
  } else {
    detail_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.Activity)
}

void Activity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Activity_customized_2eproto.base);
  detail_ = nullptr;
}

Activity::~Activity() {
  // @@protoc_insertion_point(destructor:patient.Activity)
  SharedDtor();
}

void Activity::SharedDtor() {
  if (this != internal_default_instance()) delete detail_;
}

void Activity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Activity& Activity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Activity_customized_2eproto.base);
  return *internal_default_instance();
}


void Activity::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Activity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Activity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Detail detail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Activity::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Activity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Detail detail = 1;
  if (this->has_detail()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::detail(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Activity)
  return target;
}

size_t Activity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Activity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .patient.Detail detail = 1;
  if (this->has_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detail_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Activity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Activity)
  GOOGLE_DCHECK_NE(&from, this);
  const Activity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Activity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Activity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Activity)
    MergeFrom(*source);
  }
}

void Activity::MergeFrom(const Activity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Activity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_detail()) {
    _internal_mutable_detail()->::patient::Detail::MergeFrom(from._internal_detail());
  }
}

void Activity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Activity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity::CopyFrom(const Activity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Activity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity::IsInitialized() const {
  return true;
}

void Activity::InternalSwap(Activity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(detail_, other->detail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Activity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Address::InitAsDefaultInstance() {
}
class Address::_Internal {
 public:
};

Address::Address()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Address)
}
Address::Address(const Address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      extension_(from.extension_),
      line_(from.line_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_city().empty()) {
    city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  postalcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_postalcode().empty()) {
    postalcode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.postalcode_);
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  // @@protoc_insertion_point(copy_constructor:patient.Address)
}

void Address::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Address_customized_2eproto.base);
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postalcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:patient.Address)
  SharedDtor();
}

void Address::SharedDtor() {
  city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postalcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Address& Address::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Address_customized_2eproto.base);
  return *internal_default_instance();
}


void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extension_.Clear();
  line_.Clear();
  city_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postalcode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Address::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string city = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_city(), ptr, ctx, "patient.Address.city");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_country(), ptr, ctx, "patient.Address.country");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Extension extension = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string line = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_line(), ptr, ctx, "patient.Address.line");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string postalCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_postalcode(), ptr, ctx, "patient.Address.postalCode");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_state(), ptr, ctx, "patient.Address.state");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Address::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string city = 1;
  if (this->city().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Address.city");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_city(), target);
  }

  // string country = 2;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Address.country");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_country(), target);
  }

  // repeated .patient.Extension extension = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extension_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_extension(i), target, stream);
  }

  // repeated string line = 4;
  for (int i = 0, n = this->_internal_line_size(); i < n; i++) {
    const auto& s = this->_internal_line(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Address.line");
    target = stream->WriteString(4, s, target);
  }

  // string postalCode = 5;
  if (this->postalcode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_postalcode().data(), static_cast<int>(this->_internal_postalcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Address.postalCode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_postalcode(), target);
  }

  // string state = 6;
  if (this->state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Address.state");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Address)
  return target;
}

size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Address)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Extension extension = 3;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string line = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(line_.size());
  for (int i = 0, n = line_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      line_.Get(i));
  }

  // string city = 1;
  if (this->city().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city());
  }

  // string country = 2;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string postalCode = 5;
  if (this->postalcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_postalcode());
  }

  // string state = 6;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Address::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Address)
  GOOGLE_DCHECK_NE(&from, this);
  const Address* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Address>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Address)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Address)
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extension_.MergeFrom(from.extension_);
  line_.MergeFrom(from.line_);
  if (from.city().size() > 0) {

    city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  if (from.country().size() > 0) {

    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  if (from.postalcode().size() > 0) {

    postalcode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.postalcode_);
  }
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
}

void Address::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  return true;
}

void Address::InternalSwap(Address* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  extension_.InternalSwap(&other->extension_);
  line_.InternalSwap(&other->line_);
  city_.Swap(&other->city_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  postalcode_.Swap(&other->postalcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Address::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Adjudication::InitAsDefaultInstance() {
  ::patient::_Adjudication_default_instance_._instance.get_mutable()->amount_ = const_cast< ::patient::Amount*>(
      ::patient::Amount::internal_default_instance());
  ::patient::_Adjudication_default_instance_._instance.get_mutable()->category_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
}
class Adjudication::_Internal {
 public:
  static const ::patient::Amount& amount(const Adjudication* msg);
  static const ::patient::Category& category(const Adjudication* msg);
};

const ::patient::Amount&
Adjudication::_Internal::amount(const Adjudication* msg) {
  return *msg->amount_;
}
const ::patient::Category&
Adjudication::_Internal::category(const Adjudication* msg) {
  return *msg->category_;
}
Adjudication::Adjudication()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Adjudication)
}
Adjudication::Adjudication(const Adjudication& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_amount()) {
    amount_ = new ::patient::Amount(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  if (from._internal_has_category()) {
    category_ = new ::patient::Category(*from.category_);
  } else {
    category_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.Adjudication)
}

void Adjudication::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Adjudication_customized_2eproto.base);
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(category_));
}

Adjudication::~Adjudication() {
  // @@protoc_insertion_point(destructor:patient.Adjudication)
  SharedDtor();
}

void Adjudication::SharedDtor() {
  if (this != internal_default_instance()) delete amount_;
  if (this != internal_default_instance()) delete category_;
}

void Adjudication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Adjudication& Adjudication::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Adjudication_customized_2eproto.base);
  return *internal_default_instance();
}


void Adjudication::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Adjudication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && category_ != nullptr) {
    delete category_;
  }
  category_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Adjudication::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Amount amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Adjudication::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Adjudication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Amount amount = 1;
  if (this->has_amount()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::amount(this), target, stream);
  }

  // .patient.Category category = 2;
  if (this->has_category()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::category(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Adjudication)
  return target;
}

size_t Adjudication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Adjudication)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .patient.Amount amount = 1;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  // .patient.Category category = 2;
  if (this->has_category()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *category_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Adjudication::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Adjudication)
  GOOGLE_DCHECK_NE(&from, this);
  const Adjudication* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Adjudication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Adjudication)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Adjudication)
    MergeFrom(*source);
  }
}

void Adjudication::MergeFrom(const Adjudication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Adjudication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_amount()) {
    _internal_mutable_amount()->::patient::Amount::MergeFrom(from._internal_amount());
  }
  if (from.has_category()) {
    _internal_mutable_category()->::patient::Category::MergeFrom(from._internal_category());
  }
}

void Adjudication::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Adjudication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Adjudication::CopyFrom(const Adjudication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Adjudication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Adjudication::IsInitialized() const {
  return true;
}

void Adjudication::InternalSwap(Adjudication* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(amount_, other->amount_);
  swap(category_, other->category_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Adjudication::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Amount::InitAsDefaultInstance() {
}
class Amount::_Internal {
 public:
};

Amount::Amount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Amount)
}
Amount::Amount(const Amount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:patient.Amount)
}

void Amount::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Amount_customized_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

Amount::~Amount() {
  // @@protoc_insertion_point(destructor:patient.Amount)
  SharedDtor();
}

void Amount::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Amount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Amount& Amount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Amount_customized_2eproto.base);
  return *internal_default_instance();
}


void Amount::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Amount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  _internal_metadata_.Clear();
}

const char* Amount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_currency(), ptr, ctx, "patient.Amount.currency");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Amount::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Amount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Amount.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Amount)
  return target;
}

size_t Amount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Amount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Amount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Amount)
  GOOGLE_DCHECK_NE(&from, this);
  const Amount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Amount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Amount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Amount)
    MergeFrom(*source);
  }
}

void Amount::MergeFrom(const Amount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Amount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void Amount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Amount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Amount::CopyFrom(const Amount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Amount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Amount::IsInitialized() const {
  return true;
}

void Amount::InternalSwap(Amount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Amount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CareTeam::InitAsDefaultInstance() {
  ::patient::_CareTeam_default_instance_._instance.get_mutable()->provider_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_CareTeam_default_instance_._instance.get_mutable()->role_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
}
class CareTeam::_Internal {
 public:
  static const ::patient::Reference& provider(const CareTeam* msg);
  static const ::patient::Category& role(const CareTeam* msg);
};

const ::patient::Reference&
CareTeam::_Internal::provider(const CareTeam* msg) {
  return *msg->provider_;
}
const ::patient::Category&
CareTeam::_Internal::role(const CareTeam* msg) {
  return *msg->role_;
}
CareTeam::CareTeam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.CareTeam)
}
CareTeam::CareTeam(const CareTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  if (from._internal_has_provider()) {
    provider_ = new ::patient::Reference(*from.provider_);
  } else {
    provider_ = nullptr;
  }
  if (from._internal_has_role()) {
    role_ = new ::patient::Category(*from.role_);
  } else {
    role_ = nullptr;
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:patient.CareTeam)
}

void CareTeam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CareTeam_customized_2eproto.base);
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&provider_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&provider_)) + sizeof(sequence_));
}

CareTeam::~CareTeam() {
  // @@protoc_insertion_point(destructor:patient.CareTeam)
  SharedDtor();
}

void CareTeam::SharedDtor() {
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete provider_;
  if (this != internal_default_instance()) delete role_;
}

void CareTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CareTeam& CareTeam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CareTeam_customized_2eproto.base);
  return *internal_default_instance();
}


void CareTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.CareTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && provider_ != nullptr) {
    delete provider_;
  }
  provider_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  sequence_ = 0;
  _internal_metadata_.Clear();
}

const char* CareTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Reference provider = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_provider(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_reference(), ptr, ctx, "patient.CareTeam.reference");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CareTeam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.CareTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Reference provider = 1;
  if (this->has_provider()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::provider(this), target, stream);
  }

  // .patient.Category role = 2;
  if (this->has_role()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::role(this), target, stream);
  }

  // int32 sequence = 3;
  if (this->sequence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sequence(), target);
  }

  // string reference = 4;
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.CareTeam.reference");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.CareTeam)
  return target;
}

size_t CareTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.CareTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reference = 4;
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  // .patient.Reference provider = 1;
  if (this->has_provider()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *provider_);
  }

  // .patient.Category role = 2;
  if (this->has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // int32 sequence = 3;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CareTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.CareTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CareTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CareTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.CareTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.CareTeam)
    MergeFrom(*source);
  }
}

void CareTeam::MergeFrom(const CareTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.CareTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference().size() > 0) {

    reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  if (from.has_provider()) {
    _internal_mutable_provider()->::patient::Reference::MergeFrom(from._internal_provider());
  }
  if (from.has_role()) {
    _internal_mutable_role()->::patient::Category::MergeFrom(from._internal_role());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
}

void CareTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.CareTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CareTeam::CopyFrom(const CareTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.CareTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CareTeam::IsInitialized() const {
  return true;
}

void CareTeam::InternalSwap(CareTeam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(provider_, other->provider_);
  swap(role_, other->role_);
  swap(sequence_, other->sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CareTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Communication::InitAsDefaultInstance() {
  ::patient::_Communication_default_instance_._instance.get_mutable()->language_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
}
class Communication::_Internal {
 public:
  static const ::patient::Category& language(const Communication* msg);
};

const ::patient::Category&
Communication::_Internal::language(const Communication* msg) {
  return *msg->language_;
}
Communication::Communication()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Communication)
}
Communication::Communication(const Communication& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_language()) {
    language_ = new ::patient::Category(*from.language_);
  } else {
    language_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.Communication)
}

void Communication::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Communication_customized_2eproto.base);
  language_ = nullptr;
}

Communication::~Communication() {
  // @@protoc_insertion_point(destructor:patient.Communication)
  SharedDtor();
}

void Communication::SharedDtor() {
  if (this != internal_default_instance()) delete language_;
}

void Communication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Communication& Communication::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Communication_customized_2eproto.base);
  return *internal_default_instance();
}


void Communication::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Communication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && language_ != nullptr) {
    delete language_;
  }
  language_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Communication::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Category language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_language(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Communication::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Communication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Category language = 1;
  if (this->has_language()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::language(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Communication)
  return target;
}

size_t Communication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Communication)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .patient.Category language = 1;
  if (this->has_language()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *language_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Communication::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Communication)
  GOOGLE_DCHECK_NE(&from, this);
  const Communication* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Communication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Communication)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Communication)
    MergeFrom(*source);
  }
}

void Communication::MergeFrom(const Communication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Communication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_language()) {
    _internal_mutable_language()->::patient::Category::MergeFrom(from._internal_language());
  }
}

void Communication::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Communication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Communication::CopyFrom(const Communication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Communication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Communication::IsInitialized() const {
  return true;
}

void Communication::InternalSwap(Communication* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(language_, other->language_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Communication::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Component::InitAsDefaultInstance() {
  ::patient::_Component_default_instance_._instance.get_mutable()->code_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_Component_default_instance_._instance.get_mutable()->valuequantity_ = const_cast< ::patient::Quantity*>(
      ::patient::Quantity::internal_default_instance());
}
class Component::_Internal {
 public:
  static const ::patient::Category& code(const Component* msg);
  static const ::patient::Quantity& valuequantity(const Component* msg);
};

const ::patient::Category&
Component::_Internal::code(const Component* msg) {
  return *msg->code_;
}
const ::patient::Quantity&
Component::_Internal::valuequantity(const Component* msg) {
  return *msg->valuequantity_;
}
Component::Component()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Component)
}
Component::Component(const Component& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_code()) {
    code_ = new ::patient::Category(*from.code_);
  } else {
    code_ = nullptr;
  }
  if (from._internal_has_valuequantity()) {
    valuequantity_ = new ::patient::Quantity(*from.valuequantity_);
  } else {
    valuequantity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.Component)
}

void Component::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Component_customized_2eproto.base);
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valuequantity_) -
      reinterpret_cast<char*>(&code_)) + sizeof(valuequantity_));
}

Component::~Component() {
  // @@protoc_insertion_point(destructor:patient.Component)
  SharedDtor();
}

void Component::SharedDtor() {
  if (this != internal_default_instance()) delete code_;
  if (this != internal_default_instance()) delete valuequantity_;
}

void Component::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Component& Component::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Component_customized_2eproto.base);
  return *internal_default_instance();
}


void Component::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Component)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && valuequantity_ != nullptr) {
    delete valuequantity_;
  }
  valuequantity_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Component::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Category code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Quantity valueQuantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_valuequantity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Component::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Component)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Category code = 1;
  if (this->has_code()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::code(this), target, stream);
  }

  // .patient.Quantity valueQuantity = 2;
  if (this->has_valuequantity()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::valuequantity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Component)
  return target;
}

size_t Component::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Component)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .patient.Category code = 1;
  if (this->has_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *code_);
  }

  // .patient.Quantity valueQuantity = 2;
  if (this->has_valuequantity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *valuequantity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Component::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Component)
  GOOGLE_DCHECK_NE(&from, this);
  const Component* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Component>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Component)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Component)
    MergeFrom(*source);
  }
}

void Component::MergeFrom(const Component& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Component)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_code()) {
    _internal_mutable_code()->::patient::Category::MergeFrom(from._internal_code());
  }
  if (from.has_valuequantity()) {
    _internal_mutable_valuequantity()->::patient::Quantity::MergeFrom(from._internal_valuequantity());
  }
}

void Component::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Component)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Component::CopyFrom(const Component& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Component)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Component::IsInitialized() const {
  return true;
}

void Component::InternalSwap(Component* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(code_, other->code_);
  swap(valuequantity_, other->valuequantity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Component::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Contained::InitAsDefaultInstance() {
  ::patient::_Contained_default_instance_._instance.get_mutable()->requester_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_Contained_default_instance_._instance.get_mutable()->subject_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_Contained_default_instance_._instance.get_mutable()->beneficiary_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_Contained_default_instance_._instance.get_mutable()->type_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
}
class Contained::_Internal {
 public:
  static const ::patient::Reference& requester(const Contained* msg);
  static const ::patient::Reference& subject(const Contained* msg);
  static const ::patient::Reference& beneficiary(const Contained* msg);
  static const ::patient::Category& type(const Contained* msg);
};

const ::patient::Reference&
Contained::_Internal::requester(const Contained* msg) {
  return *msg->requester_;
}
const ::patient::Reference&
Contained::_Internal::subject(const Contained* msg) {
  return *msg->subject_;
}
const ::patient::Reference&
Contained::_Internal::beneficiary(const Contained* msg) {
  return *msg->beneficiary_;
}
const ::patient::Category&
Contained::_Internal::type(const Contained* msg) {
  return *msg->type_;
}
Contained::Contained()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Contained)
}
Contained::Contained(const Contained& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      performer_(from.performer_),
      payor_(from.payor_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  intent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_intent().empty()) {
    intent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.intent_);
  }
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from._internal_has_requester()) {
    requester_ = new ::patient::Reference(*from.requester_);
  } else {
    requester_ = nullptr;
  }
  if (from._internal_has_subject()) {
    subject_ = new ::patient::Reference(*from.subject_);
  } else {
    subject_ = nullptr;
  }
  if (from._internal_has_beneficiary()) {
    beneficiary_ = new ::patient::Reference(*from.beneficiary_);
  } else {
    beneficiary_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::patient::Category(*from.type_);
  } else {
    type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.Contained)
}

void Contained::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Contained_customized_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&requester_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&requester_)) + sizeof(type_));
}

Contained::~Contained() {
  // @@protoc_insertion_point(destructor:patient.Contained)
  SharedDtor();
}

void Contained::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requester_;
  if (this != internal_default_instance()) delete subject_;
  if (this != internal_default_instance()) delete beneficiary_;
  if (this != internal_default_instance()) delete type_;
}

void Contained::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Contained& Contained::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Contained_customized_2eproto.base);
  return *internal_default_instance();
}


void Contained::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Contained)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  performer_.Clear();
  payor_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && requester_ != nullptr) {
    delete requester_;
  }
  requester_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && beneficiary_ != nullptr) {
    delete beneficiary_;
  }
  beneficiary_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Contained::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.Contained.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string intent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_intent(), ptr, ctx, "patient.Contained.intent");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Reference performer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_performer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Reference requester = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_requester(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resourceType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.Contained.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_status(), ptr, ctx, "patient.Contained.status");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference subject = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference beneficiary = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_beneficiary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Reference payor = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_payor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Category type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Contained::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Contained)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Contained.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string intent = 2;
  if (this->intent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_intent().data(), static_cast<int>(this->_internal_intent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Contained.intent");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_intent(), target);
  }

  // repeated .patient.Reference performer = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_performer_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_performer(i), target, stream);
  }

  // .patient.Reference requester = 4;
  if (this->has_requester()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::requester(this), target, stream);
  }

  // string resourceType = 5;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Contained.resourceType");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_resourcetype(), target);
  }

  // string status = 6;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Contained.status");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_status(), target);
  }

  // .patient.Reference subject = 7;
  if (this->has_subject()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::subject(this), target, stream);
  }

  // .patient.Reference beneficiary = 8;
  if (this->has_beneficiary()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::beneficiary(this), target, stream);
  }

  // repeated .patient.Reference payor = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_payor_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(9, this->_internal_payor(i), target, stream);
  }

  // .patient.Category type = 10;
  if (this->has_type()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Contained)
  return target;
}

size_t Contained::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Contained)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Reference performer = 3;
  total_size += 1UL * this->_internal_performer_size();
  for (const auto& msg : this->performer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Reference payor = 9;
  total_size += 1UL * this->_internal_payor_size();
  for (const auto& msg : this->payor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string intent = 2;
  if (this->intent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_intent());
  }

  // string resourceType = 5;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  // string status = 6;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .patient.Reference requester = 4;
  if (this->has_requester()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requester_);
  }

  // .patient.Reference subject = 7;
  if (this->has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_);
  }

  // .patient.Reference beneficiary = 8;
  if (this->has_beneficiary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *beneficiary_);
  }

  // .patient.Category type = 10;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Contained::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Contained)
  GOOGLE_DCHECK_NE(&from, this);
  const Contained* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Contained>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Contained)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Contained)
    MergeFrom(*source);
  }
}

void Contained::MergeFrom(const Contained& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Contained)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  performer_.MergeFrom(from.performer_);
  payor_.MergeFrom(from.payor_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.intent().size() > 0) {

    intent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.intent_);
  }
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.has_requester()) {
    _internal_mutable_requester()->::patient::Reference::MergeFrom(from._internal_requester());
  }
  if (from.has_subject()) {
    _internal_mutable_subject()->::patient::Reference::MergeFrom(from._internal_subject());
  }
  if (from.has_beneficiary()) {
    _internal_mutable_beneficiary()->::patient::Reference::MergeFrom(from._internal_beneficiary());
  }
  if (from.has_type()) {
    _internal_mutable_type()->::patient::Category::MergeFrom(from._internal_type());
  }
}

void Contained::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Contained)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contained::CopyFrom(const Contained& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Contained)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contained::IsInitialized() const {
  return true;
}

void Contained::InternalSwap(Contained* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  performer_.InternalSwap(&other->performer_);
  payor_.InternalSwap(&other->payor_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  intent_.Swap(&other->intent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requester_, other->requester_);
  swap(subject_, other->subject_);
  swap(beneficiary_, other->beneficiary_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Contained::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Detail::InitAsDefaultInstance() {
  ::patient::_Detail_default_instance_._instance.get_mutable()->code_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_Detail_default_instance_._instance.get_mutable()->location_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class Detail::_Internal {
 public:
  static const ::patient::Category& code(const Detail* msg);
  static const ::patient::Reference& location(const Detail* msg);
};

const ::patient::Category&
Detail::_Internal::code(const Detail* msg) {
  return *msg->code_;
}
const ::patient::Reference&
Detail::_Internal::location(const Detail* msg) {
  return *msg->location_;
}
Detail::Detail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Detail)
}
Detail::Detail(const Detail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from._internal_has_code()) {
    code_ = new ::patient::Category(*from.code_);
  } else {
    code_ = nullptr;
  }
  if (from._internal_has_location()) {
    location_ = new ::patient::Reference(*from.location_);
  } else {
    location_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.Detail)
}

void Detail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Detail_customized_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_) -
      reinterpret_cast<char*>(&code_)) + sizeof(location_));
}

Detail::~Detail() {
  // @@protoc_insertion_point(destructor:patient.Detail)
  SharedDtor();
}

void Detail::SharedDtor() {
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete code_;
  if (this != internal_default_instance()) delete location_;
}

void Detail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Detail& Detail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Detail_customized_2eproto.base);
  return *internal_default_instance();
}


void Detail::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Detail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Detail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Category code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_status(), ptr, ctx, "patient.Detail.status");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Detail::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Detail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Category code = 1;
  if (this->has_code()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::code(this), target, stream);
  }

  // .patient.Reference location = 2;
  if (this->has_location()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::location(this), target, stream);
  }

  // string status = 3;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Detail.status");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Detail)
  return target;
}

size_t Detail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Detail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 3;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .patient.Category code = 1;
  if (this->has_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *code_);
  }

  // .patient.Reference location = 2;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Detail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Detail)
  GOOGLE_DCHECK_NE(&from, this);
  const Detail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Detail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Detail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Detail)
    MergeFrom(*source);
  }
}

void Detail::MergeFrom(const Detail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Detail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.has_code()) {
    _internal_mutable_code()->::patient::Category::MergeFrom(from._internal_code());
  }
  if (from.has_location()) {
    _internal_mutable_location()->::patient::Reference::MergeFrom(from._internal_location());
  }
}

void Detail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Detail::CopyFrom(const Detail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detail::IsInitialized() const {
  return true;
}

void Detail::InternalSwap(Detail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(location_, other->location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Detail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Diagnosis::InitAsDefaultInstance() {
  ::patient::_Diagnosis_default_instance_._instance.get_mutable()->diagnosisreference_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class Diagnosis::_Internal {
 public:
  static const ::patient::Reference& diagnosisreference(const Diagnosis* msg);
};

const ::patient::Reference&
Diagnosis::_Internal::diagnosisreference(const Diagnosis* msg) {
  return *msg->diagnosisreference_;
}
Diagnosis::Diagnosis()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Diagnosis)
}
Diagnosis::Diagnosis(const Diagnosis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      type_(from.type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_diagnosisreference()) {
    diagnosisreference_ = new ::patient::Reference(*from.diagnosisreference_);
  } else {
    diagnosisreference_ = nullptr;
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:patient.Diagnosis)
}

void Diagnosis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Diagnosis_customized_2eproto.base);
  ::memset(&diagnosisreference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&diagnosisreference_)) + sizeof(sequence_));
}

Diagnosis::~Diagnosis() {
  // @@protoc_insertion_point(destructor:patient.Diagnosis)
  SharedDtor();
}

void Diagnosis::SharedDtor() {
  if (this != internal_default_instance()) delete diagnosisreference_;
}

void Diagnosis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Diagnosis& Diagnosis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Diagnosis_customized_2eproto.base);
  return *internal_default_instance();
}


void Diagnosis::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Diagnosis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.Clear();
  if (GetArenaNoVirtual() == nullptr && diagnosisreference_ != nullptr) {
    delete diagnosisreference_;
  }
  diagnosisreference_ = nullptr;
  sequence_ = 0;
  _internal_metadata_.Clear();
}

const char* Diagnosis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Reference diagnosisReference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_diagnosisreference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Category type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Diagnosis::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Diagnosis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Reference diagnosisReference = 1;
  if (this->has_diagnosisreference()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::diagnosisreference(this), target, stream);
  }

  // int32 sequence = 2;
  if (this->sequence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sequence(), target);
  }

  // repeated .patient.Category type = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_type_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_type(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Diagnosis)
  return target;
}

size_t Diagnosis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Diagnosis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Category type = 3;
  total_size += 1UL * this->_internal_type_size();
  for (const auto& msg : this->type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .patient.Reference diagnosisReference = 1;
  if (this->has_diagnosisreference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diagnosisreference_);
  }

  // int32 sequence = 2;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Diagnosis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Diagnosis)
  GOOGLE_DCHECK_NE(&from, this);
  const Diagnosis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Diagnosis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Diagnosis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Diagnosis)
    MergeFrom(*source);
  }
}

void Diagnosis::MergeFrom(const Diagnosis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Diagnosis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  type_.MergeFrom(from.type_);
  if (from.has_diagnosisreference()) {
    _internal_mutable_diagnosisreference()->::patient::Reference::MergeFrom(from._internal_diagnosisreference());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
}

void Diagnosis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Diagnosis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Diagnosis::CopyFrom(const Diagnosis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Diagnosis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diagnosis::IsInitialized() const {
  return true;
}

void Diagnosis::InternalSwap(Diagnosis* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  type_.InternalSwap(&other->type_);
  swap(diagnosisreference_, other->diagnosisreference_);
  swap(sequence_, other->sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Diagnosis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Entry::InitAsDefaultInstance() {
  ::patient::_Entry_default_instance_._instance.get_mutable()->request_ = const_cast< ::patient::Request*>(
      ::patient::Request::internal_default_instance());
}
class Entry::_Internal {
 public:
  static const ::patient::Request& request(const Entry* msg);
};

const ::patient::Request&
Entry::_Internal::request(const Entry* msg) {
  return *msg->request_;
}
Entry::Entry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Entry)
}
Entry::Entry(const Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      resource_(from.resource_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fullurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fullurl().empty()) {
    fullurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fullurl_);
  }
  if (from._internal_has_request()) {
    request_ = new ::patient::Request(*from.request_);
  } else {
    request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.Entry)
}

void Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Entry_customized_2eproto.base);
  fullurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_ = nullptr;
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:patient.Entry)
  SharedDtor();
}

void Entry::SharedDtor() {
  fullurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete request_;
}

void Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Entry& Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Entry_customized_2eproto.base);
  return *internal_default_instance();
}


void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_.Clear();
  fullurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string fullUrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_fullurl(), ptr, ctx, "patient.Entry.fullUrl");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Request request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Resource resource = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Entry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fullUrl = 1;
  if (this->fullurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fullurl().data(), static_cast<int>(this->_internal_fullurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Entry.fullUrl");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fullurl(), target);
  }

  // .patient.Request request = 2;
  if (this->has_request()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::request(this), target, stream);
  }

  // repeated .patient.Resource resource = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_resource(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Entry)
  return target;
}

size_t Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Resource resource = 3;
  total_size += 1UL * this->_internal_resource_size();
  for (const auto& msg : this->resource_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string fullUrl = 1;
  if (this->fullurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fullurl());
  }

  // .patient.Request request = 2;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Entry)
    MergeFrom(*source);
  }
}

void Entry::MergeFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resource_.MergeFrom(from.resource_);
  if (from.fullurl().size() > 0) {

    fullurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fullurl_);
  }
  if (from.has_request()) {
    _internal_mutable_request()->::patient::Request::MergeFrom(from._internal_request());
  }
}

void Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  return true;
}

void Entry::InternalSwap(Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  resource_.InternalSwap(&other->resource_);
  fullurl_.Swap(&other->fullurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_, other->request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Extension::InitAsDefaultInstance() {
  ::patient::_Extension_default_instance_._instance.get_mutable()->valuecoding_ = const_cast< ::patient::Coding*>(
      ::patient::Coding::internal_default_instance());
  ::patient::_Extension_default_instance_._instance.get_mutable()->valueaddress_ = const_cast< ::patient::Address*>(
      ::patient::Address::internal_default_instance());
}
class Extension::_Internal {
 public:
  static const ::patient::Coding& valuecoding(const Extension* msg);
  static const ::patient::Address& valueaddress(const Extension* msg);
};

const ::patient::Coding&
Extension::_Internal::valuecoding(const Extension* msg) {
  return *msg->valuecoding_;
}
const ::patient::Address&
Extension::_Internal::valueaddress(const Extension* msg) {
  return *msg->valueaddress_;
}
Extension::Extension()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Extension)
}
Extension::Extension(const Extension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  valuestring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_valuestring().empty()) {
    valuestring_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.valuestring_);
  }
  valuecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_valuecode().empty()) {
    valuecode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.valuecode_);
  }
  if (from._internal_has_valuecoding()) {
    valuecoding_ = new ::patient::Coding(*from.valuecoding_);
  } else {
    valuecoding_ = nullptr;
  }
  if (from._internal_has_valueaddress()) {
    valueaddress_ = new ::patient::Address(*from.valueaddress_);
  } else {
    valueaddress_ = nullptr;
  }
  ::memcpy(&valuedecimal_, &from.valuedecimal_,
    static_cast<size_t>(reinterpret_cast<char*>(&valueinteger_) -
    reinterpret_cast<char*>(&valuedecimal_)) + sizeof(valueinteger_));
  // @@protoc_insertion_point(copy_constructor:patient.Extension)
}

void Extension::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Address_customized_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  valuestring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  valuecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&valuecoding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valueinteger_) -
      reinterpret_cast<char*>(&valuecoding_)) + sizeof(valueinteger_));
}

Extension::~Extension() {
  // @@protoc_insertion_point(destructor:patient.Extension)
  SharedDtor();
}

void Extension::SharedDtor() {
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  valuestring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  valuecode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete valuecoding_;
  if (this != internal_default_instance()) delete valueaddress_;
}

void Extension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Extension& Extension::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Address_customized_2eproto.base);
  return *internal_default_instance();
}


void Extension::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Extension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extension_.Clear();
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  valuestring_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  valuecode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && valuecoding_ != nullptr) {
    delete valuecoding_;
  }
  valuecoding_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && valueaddress_ != nullptr) {
    delete valueaddress_;
  }
  valueaddress_ = nullptr;
  ::memset(&valuedecimal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valueinteger_) -
      reinterpret_cast<char*>(&valuedecimal_)) + sizeof(valueinteger_));
  _internal_metadata_.Clear();
}

const char* Extension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .patient.Extension extension = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_url(), ptr, ctx, "patient.Extension.url");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Coding valueCoding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_valuecoding(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string valueString = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_valuestring(), ptr, ctx, "patient.Extension.valueString");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float valueDecimal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          valuedecimal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string valueCode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_valuecode(), ptr, ctx, "patient.Extension.valueCode");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Address valueAddress = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_valueaddress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 valueInteger = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          valueinteger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Extension::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Extension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .patient.Extension extension = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extension_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_extension(i), target, stream);
  }

  // string url = 2;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Extension.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // .patient.Coding valueCoding = 3;
  if (this->has_valuecoding()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::valuecoding(this), target, stream);
  }

  // string valueString = 4;
  if (this->valuestring().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valuestring().data(), static_cast<int>(this->_internal_valuestring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Extension.valueString");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_valuestring(), target);
  }

  // float valueDecimal = 5;
  if (!(this->valuedecimal() <= 0 && this->valuedecimal() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_valuedecimal(), target);
  }

  // string valueCode = 6;
  if (this->valuecode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valuecode().data(), static_cast<int>(this->_internal_valuecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Extension.valueCode");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_valuecode(), target);
  }

  // .patient.Address valueAddress = 7;
  if (this->has_valueaddress()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::valueaddress(this), target, stream);
  }

  // int32 valueInteger = 8;
  if (this->valueinteger() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_valueinteger(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Extension)
  return target;
}

size_t Extension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Extension)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Extension extension = 1;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string url = 2;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string valueString = 4;
  if (this->valuestring().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valuestring());
  }

  // string valueCode = 6;
  if (this->valuecode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valuecode());
  }

  // .patient.Coding valueCoding = 3;
  if (this->has_valuecoding()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *valuecoding_);
  }

  // .patient.Address valueAddress = 7;
  if (this->has_valueaddress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *valueaddress_);
  }

  // float valueDecimal = 5;
  if (!(this->valuedecimal() <= 0 && this->valuedecimal() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 valueInteger = 8;
  if (this->valueinteger() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_valueinteger());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Extension::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Extension)
  GOOGLE_DCHECK_NE(&from, this);
  const Extension* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Extension>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Extension)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Extension)
    MergeFrom(*source);
  }
}

void Extension::MergeFrom(const Extension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Extension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extension_.MergeFrom(from.extension_);
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.valuestring().size() > 0) {

    valuestring_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.valuestring_);
  }
  if (from.valuecode().size() > 0) {

    valuecode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.valuecode_);
  }
  if (from.has_valuecoding()) {
    _internal_mutable_valuecoding()->::patient::Coding::MergeFrom(from._internal_valuecoding());
  }
  if (from.has_valueaddress()) {
    _internal_mutable_valueaddress()->::patient::Address::MergeFrom(from._internal_valueaddress());
  }
  if (!(from.valuedecimal() <= 0 && from.valuedecimal() >= 0)) {
    _internal_set_valuedecimal(from._internal_valuedecimal());
  }
  if (from.valueinteger() != 0) {
    _internal_set_valueinteger(from._internal_valueinteger());
  }
}

void Extension::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extension::CopyFrom(const Extension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extension::IsInitialized() const {
  return true;
}

void Extension::InternalSwap(Extension* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  extension_.InternalSwap(&other->extension_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  valuestring_.Swap(&other->valuestring_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  valuecode_.Swap(&other->valuecode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(valuecoding_, other->valuecoding_);
  swap(valueaddress_, other->valueaddress_);
  swap(valuedecimal_, other->valuedecimal_);
  swap(valueinteger_, other->valueinteger_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Extension::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Identifier::InitAsDefaultInstance() {
  ::patient::_Identifier_default_instance_._instance.get_mutable()->type_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
}
class Identifier::_Internal {
 public:
  static const ::patient::Category& type(const Identifier* msg);
};

const ::patient::Category&
Identifier::_Internal::type(const Identifier* msg) {
  return *msg->type_;
}
Identifier::Identifier()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Identifier)
}
Identifier::Identifier(const Identifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_system().empty()) {
    system_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.system_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  use_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_use().empty()) {
    use_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.use_);
  }
  if (from._internal_has_type()) {
    type_ = new ::patient::Category(*from.type_);
  } else {
    type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.Identifier)
}

void Identifier::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Identifier_customized_2eproto.base);
  system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = nullptr;
}

Identifier::~Identifier() {
  // @@protoc_insertion_point(destructor:patient.Identifier)
  SharedDtor();
}

void Identifier::SharedDtor() {
  system_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
}

void Identifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Identifier& Identifier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Identifier_customized_2eproto.base);
  return *internal_default_instance();
}


void Identifier::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Identifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  system_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Identifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string system = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_system(), ptr, ctx, "patient.Identifier.system");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_value(), ptr, ctx, "patient.Identifier.value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string use = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_use(), ptr, ctx, "patient.Identifier.use");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Identifier::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Identifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string system = 1;
  if (this->system().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_system().data(), static_cast<int>(this->_internal_system().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Identifier.system");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_system(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Identifier.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // .patient.Category type = 3;
  if (this->has_type()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::type(this), target, stream);
  }

  // string use = 4;
  if (this->use().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_use().data(), static_cast<int>(this->_internal_use().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Identifier.use");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_use(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Identifier)
  return target;
}

size_t Identifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Identifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string system = 1;
  if (this->system().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_system());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string use = 4;
  if (this->use().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_use());
  }

  // .patient.Category type = 3;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Identifier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Identifier)
  GOOGLE_DCHECK_NE(&from, this);
  const Identifier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Identifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Identifier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Identifier)
    MergeFrom(*source);
  }
}

void Identifier::MergeFrom(const Identifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Identifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.system().size() > 0) {

    system_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.system_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.use().size() > 0) {

    use_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.use_);
  }
  if (from.has_type()) {
    _internal_mutable_type()->::patient::Category::MergeFrom(from._internal_type());
  }
}

void Identifier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Identifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Identifier::CopyFrom(const Identifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Identifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identifier::IsInitialized() const {
  return true;
}

void Identifier::InternalSwap(Identifier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  system_.Swap(&other->system_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  use_.Swap(&other->use_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Identifier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Insurance::InitAsDefaultInstance() {
  ::patient::_Insurance_default_instance_._instance.get_mutable()->coverage_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class Insurance::_Internal {
 public:
  static const ::patient::Reference& coverage(const Insurance* msg);
};

const ::patient::Reference&
Insurance::_Internal::coverage(const Insurance* msg) {
  return *msg->coverage_;
}
Insurance::Insurance()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Insurance)
}
Insurance::Insurance(const Insurance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_coverage()) {
    coverage_ = new ::patient::Reference(*from.coverage_);
  } else {
    coverage_ = nullptr;
  }
  ::memcpy(&focal_, &from.focal_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&focal_)) + sizeof(sequence_));
  // @@protoc_insertion_point(copy_constructor:patient.Insurance)
}

void Insurance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Insurance_customized_2eproto.base);
  ::memset(&coverage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&coverage_)) + sizeof(sequence_));
}

Insurance::~Insurance() {
  // @@protoc_insertion_point(destructor:patient.Insurance)
  SharedDtor();
}

void Insurance::SharedDtor() {
  if (this != internal_default_instance()) delete coverage_;
}

void Insurance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Insurance& Insurance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Insurance_customized_2eproto.base);
  return *internal_default_instance();
}


void Insurance::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Insurance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && coverage_ != nullptr) {
    delete coverage_;
  }
  coverage_ = nullptr;
  ::memset(&focal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&focal_)) + sizeof(sequence_));
  _internal_metadata_.Clear();
}

const char* Insurance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Reference coverage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coverage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool focal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          focal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Insurance::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Insurance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Reference coverage = 1;
  if (this->has_coverage()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::coverage(this), target, stream);
  }

  // bool focal = 2;
  if (this->focal() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_focal(), target);
  }

  // int32 sequence = 3;
  if (this->sequence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Insurance)
  return target;
}

size_t Insurance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Insurance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .patient.Reference coverage = 1;
  if (this->has_coverage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coverage_);
  }

  // bool focal = 2;
  if (this->focal() != 0) {
    total_size += 1 + 1;
  }

  // int32 sequence = 3;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Insurance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Insurance)
  GOOGLE_DCHECK_NE(&from, this);
  const Insurance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Insurance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Insurance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Insurance)
    MergeFrom(*source);
  }
}

void Insurance::MergeFrom(const Insurance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Insurance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_coverage()) {
    _internal_mutable_coverage()->::patient::Reference::MergeFrom(from._internal_coverage());
  }
  if (from.focal() != 0) {
    _internal_set_focal(from._internal_focal());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
}

void Insurance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Insurance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Insurance::CopyFrom(const Insurance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Insurance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Insurance::IsInitialized() const {
  return true;
}

void Insurance::InternalSwap(Insurance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(coverage_, other->coverage_);
  swap(focal_, other->focal_);
  swap(sequence_, other->sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Insurance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Item::InitAsDefaultInstance() {
  ::patient::_Item_default_instance_._instance.get_mutable()->productorservice_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_Item_default_instance_._instance.get_mutable()->net_ = const_cast< ::patient::Amount*>(
      ::patient::Amount::internal_default_instance());
  ::patient::_Item_default_instance_._instance.get_mutable()->category_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_Item_default_instance_._instance.get_mutable()->locationcodeableconcept_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_Item_default_instance_._instance.get_mutable()->servicedperiod_ = const_cast< ::patient::Period*>(
      ::patient::Period::internal_default_instance());
}
class Item::_Internal {
 public:
  static const ::patient::Category& productorservice(const Item* msg);
  static const ::patient::Amount& net(const Item* msg);
  static const ::patient::Category& category(const Item* msg);
  static const ::patient::Category& locationcodeableconcept(const Item* msg);
  static const ::patient::Period& servicedperiod(const Item* msg);
};

const ::patient::Category&
Item::_Internal::productorservice(const Item* msg) {
  return *msg->productorservice_;
}
const ::patient::Amount&
Item::_Internal::net(const Item* msg) {
  return *msg->net_;
}
const ::patient::Category&
Item::_Internal::category(const Item* msg) {
  return *msg->category_;
}
const ::patient::Category&
Item::_Internal::locationcodeableconcept(const Item* msg) {
  return *msg->locationcodeableconcept_;
}
const ::patient::Period&
Item::_Internal::servicedperiod(const Item* msg) {
  return *msg->servicedperiod_;
}
Item::Item()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Item)
}
Item::Item(const Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      encounter_(from.encounter_),
      informationsequence_(from.informationsequence_),
      adjudication_(from.adjudication_),
      proceduresequence_(from.proceduresequence_),
      diagnosissequence_(from.diagnosissequence_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_productorservice()) {
    productorservice_ = new ::patient::Category(*from.productorservice_);
  } else {
    productorservice_ = nullptr;
  }
  if (from._internal_has_net()) {
    net_ = new ::patient::Amount(*from.net_);
  } else {
    net_ = nullptr;
  }
  if (from._internal_has_category()) {
    category_ = new ::patient::Category(*from.category_);
  } else {
    category_ = nullptr;
  }
  if (from._internal_has_locationcodeableconcept()) {
    locationcodeableconcept_ = new ::patient::Category(*from.locationcodeableconcept_);
  } else {
    locationcodeableconcept_ = nullptr;
  }
  if (from._internal_has_servicedperiod()) {
    servicedperiod_ = new ::patient::Period(*from.servicedperiod_);
  } else {
    servicedperiod_ = nullptr;
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:patient.Item)
}

void Item::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Item_customized_2eproto.base);
  ::memset(&productorservice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&productorservice_)) + sizeof(sequence_));
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:patient.Item)
  SharedDtor();
}

void Item::SharedDtor() {
  if (this != internal_default_instance()) delete productorservice_;
  if (this != internal_default_instance()) delete net_;
  if (this != internal_default_instance()) delete category_;
  if (this != internal_default_instance()) delete locationcodeableconcept_;
  if (this != internal_default_instance()) delete servicedperiod_;
}

void Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Item& Item::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Item_customized_2eproto.base);
  return *internal_default_instance();
}


void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encounter_.Clear();
  informationsequence_.Clear();
  adjudication_.Clear();
  proceduresequence_.Clear();
  diagnosissequence_.Clear();
  if (GetArenaNoVirtual() == nullptr && productorservice_ != nullptr) {
    delete productorservice_;
  }
  productorservice_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && net_ != nullptr) {
    delete net_;
  }
  net_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && category_ != nullptr) {
    delete category_;
  }
  category_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && locationcodeableconcept_ != nullptr) {
    delete locationcodeableconcept_;
  }
  locationcodeableconcept_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && servicedperiod_ != nullptr) {
    delete servicedperiod_;
  }
  servicedperiod_ = nullptr;
  sequence_ = 0;
  _internal_metadata_.Clear();
}

const char* Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .patient.Reference encounter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_encounter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Category productOrService = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_productorservice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 informationSequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_informationsequence(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_informationsequence(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Amount net = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_net(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category category = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category locationCodeableConcept = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_locationcodeableconcept(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Period servicedPeriod = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_servicedperiod(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Adjudication adjudication = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_adjudication(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 procedureSequence = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_proceduresequence(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_proceduresequence(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 diagnosisSequence = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_diagnosissequence(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_diagnosissequence(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Item::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .patient.Reference encounter = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_encounter_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_encounter(i), target, stream);
  }

  // .patient.Category productOrService = 2;
  if (this->has_productorservice()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::productorservice(this), target, stream);
  }

  // int32 sequence = 3;
  if (this->sequence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sequence(), target);
  }

  // repeated int32 informationSequence = 4;
  {
    int byte_size = _informationsequence_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_informationsequence(), byte_size, target);
    }
  }

  // .patient.Amount net = 5;
  if (this->has_net()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::net(this), target, stream);
  }

  // .patient.Category category = 6;
  if (this->has_category()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::category(this), target, stream);
  }

  // .patient.Category locationCodeableConcept = 7;
  if (this->has_locationcodeableconcept()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::locationcodeableconcept(this), target, stream);
  }

  // .patient.Period servicedPeriod = 8;
  if (this->has_servicedperiod()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::servicedperiod(this), target, stream);
  }

  // repeated .patient.Adjudication adjudication = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_adjudication_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(9, this->_internal_adjudication(i), target, stream);
  }

  // repeated int32 procedureSequence = 10;
  {
    int byte_size = _proceduresequence_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_proceduresequence(), byte_size, target);
    }
  }

  // repeated int32 diagnosisSequence = 11;
  {
    int byte_size = _diagnosissequence_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          11, _internal_diagnosissequence(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Item)
  return target;
}

size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Reference encounter = 1;
  total_size += 1UL * this->_internal_encounter_size();
  for (const auto& msg : this->encounter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 informationSequence = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->informationsequence_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _informationsequence_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .patient.Adjudication adjudication = 9;
  total_size += 1UL * this->_internal_adjudication_size();
  for (const auto& msg : this->adjudication_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 procedureSequence = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->proceduresequence_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _proceduresequence_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 diagnosisSequence = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->diagnosissequence_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _diagnosissequence_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .patient.Category productOrService = 2;
  if (this->has_productorservice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *productorservice_);
  }

  // .patient.Amount net = 5;
  if (this->has_net()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *net_);
  }

  // .patient.Category category = 6;
  if (this->has_category()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *category_);
  }

  // .patient.Category locationCodeableConcept = 7;
  if (this->has_locationcodeableconcept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locationcodeableconcept_);
  }

  // .patient.Period servicedPeriod = 8;
  if (this->has_servicedperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *servicedperiod_);
  }

  // int32 sequence = 3;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const Item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Item)
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  encounter_.MergeFrom(from.encounter_);
  informationsequence_.MergeFrom(from.informationsequence_);
  adjudication_.MergeFrom(from.adjudication_);
  proceduresequence_.MergeFrom(from.proceduresequence_);
  diagnosissequence_.MergeFrom(from.diagnosissequence_);
  if (from.has_productorservice()) {
    _internal_mutable_productorservice()->::patient::Category::MergeFrom(from._internal_productorservice());
  }
  if (from.has_net()) {
    _internal_mutable_net()->::patient::Amount::MergeFrom(from._internal_net());
  }
  if (from.has_category()) {
    _internal_mutable_category()->::patient::Category::MergeFrom(from._internal_category());
  }
  if (from.has_locationcodeableconcept()) {
    _internal_mutable_locationcodeableconcept()->::patient::Category::MergeFrom(from._internal_locationcodeableconcept());
  }
  if (from.has_servicedperiod()) {
    _internal_mutable_servicedperiod()->::patient::Period::MergeFrom(from._internal_servicedperiod());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
}

void Item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  return true;
}

void Item::InternalSwap(Item* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  encounter_.InternalSwap(&other->encounter_);
  informationsequence_.InternalSwap(&other->informationsequence_);
  adjudication_.InternalSwap(&other->adjudication_);
  proceduresequence_.InternalSwap(&other->proceduresequence_);
  diagnosissequence_.InternalSwap(&other->diagnosissequence_);
  swap(productorservice_, other->productorservice_);
  swap(net_, other->net_);
  swap(category_, other->category_);
  swap(locationcodeableconcept_, other->locationcodeableconcept_);
  swap(servicedperiod_, other->servicedperiod_);
  swap(sequence_, other->sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Name::InitAsDefaultInstance() {
}
class Name::_Internal {
 public:
};

Name::Name()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Name)
}
Name::Name(const Name& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      given_(from.given_),
      prefix_(from.prefix_),
      suffix_(from.suffix_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_family().empty()) {
    family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_);
  }
  use_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_use().empty()) {
    use_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.use_);
  }
  // @@protoc_insertion_point(copy_constructor:patient.Name)
}

void Name::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Name_customized_2eproto.base);
  family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Name::~Name() {
  // @@protoc_insertion_point(destructor:patient.Name)
  SharedDtor();
}

void Name::SharedDtor() {
  family_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Name::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Name& Name::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Name_customized_2eproto.base);
  return *internal_default_instance();
}


void Name::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Name)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  given_.Clear();
  prefix_.Clear();
  suffix_.Clear();
  family_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Name::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_family(), ptr, ctx, "patient.Name.family");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string given = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_given(), ptr, ctx, "patient.Name.given");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string prefix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_prefix(), ptr, ctx, "patient.Name.prefix");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string use = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_use(), ptr, ctx, "patient.Name.use");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string suffix = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_suffix(), ptr, ctx, "patient.Name.suffix");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Name::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Name)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string family = 1;
  if (this->family().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_family().data(), static_cast<int>(this->_internal_family().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Name.family");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_family(), target);
  }

  // repeated string given = 2;
  for (int i = 0, n = this->_internal_given_size(); i < n; i++) {
    const auto& s = this->_internal_given(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Name.given");
    target = stream->WriteString(2, s, target);
  }

  // repeated string prefix = 3;
  for (int i = 0, n = this->_internal_prefix_size(); i < n; i++) {
    const auto& s = this->_internal_prefix(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Name.prefix");
    target = stream->WriteString(3, s, target);
  }

  // string use = 4;
  if (this->use().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_use().data(), static_cast<int>(this->_internal_use().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Name.use");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_use(), target);
  }

  // repeated string suffix = 5;
  for (int i = 0, n = this->_internal_suffix_size(); i < n; i++) {
    const auto& s = this->_internal_suffix(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Name.suffix");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Name)
  return target;
}

size_t Name::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Name)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string given = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(given_.size());
  for (int i = 0, n = given_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      given_.Get(i));
  }

  // repeated string prefix = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(prefix_.size());
  for (int i = 0, n = prefix_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      prefix_.Get(i));
  }

  // repeated string suffix = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(suffix_.size());
  for (int i = 0, n = suffix_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      suffix_.Get(i));
  }

  // string family = 1;
  if (this->family().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_family());
  }

  // string use = 4;
  if (this->use().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_use());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Name::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Name)
  GOOGLE_DCHECK_NE(&from, this);
  const Name* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Name>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Name)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Name)
    MergeFrom(*source);
  }
}

void Name::MergeFrom(const Name& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Name)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  given_.MergeFrom(from.given_);
  prefix_.MergeFrom(from.prefix_);
  suffix_.MergeFrom(from.suffix_);
  if (from.family().size() > 0) {

    family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_);
  }
  if (from.use().size() > 0) {

    use_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.use_);
  }
}

void Name::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Name::CopyFrom(const Name& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Name::IsInitialized() const {
  return true;
}

void Name::InternalSwap(Name* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  given_.InternalSwap(&other->given_);
  prefix_.InternalSwap(&other->prefix_);
  suffix_.InternalSwap(&other->suffix_);
  family_.Swap(&other->family_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  use_.Swap(&other->use_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Name::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Participant::InitAsDefaultInstance() {
  ::patient::_Participant_default_instance_._instance.get_mutable()->individual_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_Participant_default_instance_._instance.get_mutable()->member_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class Participant::_Internal {
 public:
  static const ::patient::Reference& individual(const Participant* msg);
  static const ::patient::Reference& member(const Participant* msg);
};

const ::patient::Reference&
Participant::_Internal::individual(const Participant* msg) {
  return *msg->individual_;
}
const ::patient::Reference&
Participant::_Internal::member(const Participant* msg) {
  return *msg->member_;
}
Participant::Participant()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Participant)
}
Participant::Participant(const Participant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      role_(from.role_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_individual()) {
    individual_ = new ::patient::Reference(*from.individual_);
  } else {
    individual_ = nullptr;
  }
  if (from._internal_has_member()) {
    member_ = new ::patient::Reference(*from.member_);
  } else {
    member_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.Participant)
}

void Participant::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Participant_customized_2eproto.base);
  ::memset(&individual_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_) -
      reinterpret_cast<char*>(&individual_)) + sizeof(member_));
}

Participant::~Participant() {
  // @@protoc_insertion_point(destructor:patient.Participant)
  SharedDtor();
}

void Participant::SharedDtor() {
  if (this != internal_default_instance()) delete individual_;
  if (this != internal_default_instance()) delete member_;
}

void Participant::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Participant& Participant::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Participant_customized_2eproto.base);
  return *internal_default_instance();
}


void Participant::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Participant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_.Clear();
  if (GetArenaNoVirtual() == nullptr && individual_ != nullptr) {
    delete individual_;
  }
  individual_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && member_ != nullptr) {
    delete member_;
  }
  member_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Participant::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Reference individual = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_individual(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference member = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_member(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Category role = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_role(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Participant::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Participant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Reference individual = 1;
  if (this->has_individual()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::individual(this), target, stream);
  }

  // .patient.Reference member = 2;
  if (this->has_member()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::member(this), target, stream);
  }

  // repeated .patient.Category role = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_role_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_role(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Participant)
  return target;
}

size_t Participant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Participant)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Category role = 3;
  total_size += 1UL * this->_internal_role_size();
  for (const auto& msg : this->role_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .patient.Reference individual = 1;
  if (this->has_individual()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *individual_);
  }

  // .patient.Reference member = 2;
  if (this->has_member()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *member_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Participant::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Participant)
  GOOGLE_DCHECK_NE(&from, this);
  const Participant* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Participant>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Participant)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Participant)
    MergeFrom(*source);
  }
}

void Participant::MergeFrom(const Participant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Participant)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_.MergeFrom(from.role_);
  if (from.has_individual()) {
    _internal_mutable_individual()->::patient::Reference::MergeFrom(from._internal_individual());
  }
  if (from.has_member()) {
    _internal_mutable_member()->::patient::Reference::MergeFrom(from._internal_member());
  }
}

void Participant::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Participant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Participant::CopyFrom(const Participant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Participant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Participant::IsInitialized() const {
  return true;
}

void Participant::InternalSwap(Participant* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  role_.InternalSwap(&other->role_);
  swap(individual_, other->individual_);
  swap(member_, other->member_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Participant::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Payment::InitAsDefaultInstance() {
  ::patient::_Payment_default_instance_._instance.get_mutable()->amount_ = const_cast< ::patient::Amount*>(
      ::patient::Amount::internal_default_instance());
}
class Payment::_Internal {
 public:
  static const ::patient::Amount& amount(const Payment* msg);
};

const ::patient::Amount&
Payment::_Internal::amount(const Payment* msg) {
  return *msg->amount_;
}
Payment::Payment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Payment)
}
Payment::Payment(const Payment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_amount()) {
    amount_ = new ::patient::Amount(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.Payment)
}

void Payment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Payment_customized_2eproto.base);
  amount_ = nullptr;
}

Payment::~Payment() {
  // @@protoc_insertion_point(destructor:patient.Payment)
  SharedDtor();
}

void Payment::SharedDtor() {
  if (this != internal_default_instance()) delete amount_;
}

void Payment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Payment& Payment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Payment_customized_2eproto.base);
  return *internal_default_instance();
}


void Payment::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Payment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Payment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Amount amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Payment::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Payment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Amount amount = 1;
  if (this->has_amount()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::amount(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Payment)
  return target;
}

size_t Payment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Payment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .patient.Amount amount = 1;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Payment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Payment)
  GOOGLE_DCHECK_NE(&from, this);
  const Payment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Payment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Payment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Payment)
    MergeFrom(*source);
  }
}

void Payment::MergeFrom(const Payment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Payment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_amount()) {
    _internal_mutable_amount()->::patient::Amount::MergeFrom(from._internal_amount());
  }
}

void Payment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Payment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Payment::CopyFrom(const Payment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Payment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payment::IsInitialized() const {
  return true;
}

void Payment::InternalSwap(Payment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Payment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Procedure::InitAsDefaultInstance() {
  ::patient::_Procedure_default_instance_._instance.get_mutable()->procedurereference_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class Procedure::_Internal {
 public:
  static const ::patient::Reference& procedurereference(const Procedure* msg);
};

const ::patient::Reference&
Procedure::_Internal::procedurereference(const Procedure* msg) {
  return *msg->procedurereference_;
}
Procedure::Procedure()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Procedure)
}
Procedure::Procedure(const Procedure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_procedurereference()) {
    procedurereference_ = new ::patient::Reference(*from.procedurereference_);
  } else {
    procedurereference_ = nullptr;
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:patient.Procedure)
}

void Procedure::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Procedure_customized_2eproto.base);
  ::memset(&procedurereference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&procedurereference_)) + sizeof(sequence_));
}

Procedure::~Procedure() {
  // @@protoc_insertion_point(destructor:patient.Procedure)
  SharedDtor();
}

void Procedure::SharedDtor() {
  if (this != internal_default_instance()) delete procedurereference_;
}

void Procedure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Procedure& Procedure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Procedure_customized_2eproto.base);
  return *internal_default_instance();
}


void Procedure::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Procedure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && procedurereference_ != nullptr) {
    delete procedurereference_;
  }
  procedurereference_ = nullptr;
  sequence_ = 0;
  _internal_metadata_.Clear();
}

const char* Procedure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Reference procedureReference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_procedurereference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Procedure::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Procedure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Reference procedureReference = 1;
  if (this->has_procedurereference()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::procedurereference(this), target, stream);
  }

  // int32 sequence = 2;
  if (this->sequence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Procedure)
  return target;
}

size_t Procedure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Procedure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .patient.Reference procedureReference = 1;
  if (this->has_procedurereference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *procedurereference_);
  }

  // int32 sequence = 2;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Procedure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Procedure)
  GOOGLE_DCHECK_NE(&from, this);
  const Procedure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Procedure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Procedure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Procedure)
    MergeFrom(*source);
  }
}

void Procedure::MergeFrom(const Procedure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Procedure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_procedurereference()) {
    _internal_mutable_procedurereference()->::patient::Reference::MergeFrom(from._internal_procedurereference());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
}

void Procedure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Procedure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Procedure::CopyFrom(const Procedure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Procedure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Procedure::IsInitialized() const {
  return true;
}

void Procedure::InternalSwap(Procedure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(procedurereference_, other->procedurereference_);
  swap(sequence_, other->sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Procedure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Request::InitAsDefaultInstance() {
}
class Request::_Internal {
 public:
};

Request::Request()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_method().empty()) {
    method_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:patient.Request)
}

void Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_customized_2eproto.base);
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:patient.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_customized_2eproto.base);
  return *internal_default_instance();
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_method(), ptr, ctx, "patient.Request.method");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_url(), ptr, ctx, "patient.Request.url");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string method = 1;
  if (this->method().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Request.method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_method(), target);
  }

  // string url = 2;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Request.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string method = 1;
  if (this->method().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // string url = 2;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.method().size() > 0) {

    method_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  method_.Swap(&other->method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Root::InitAsDefaultInstance() {
}
class Root::_Internal {
 public:
};

Root::Root()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Root)
}
Root::Root(const Root& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      entry_(from.entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  // @@protoc_insertion_point(copy_constructor:patient.Root)
}

void Root::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Root_customized_2eproto.base);
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Root::~Root() {
  // @@protoc_insertion_point(destructor:patient.Root)
  SharedDtor();
}

void Root::SharedDtor() {
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Root::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Root& Root::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Root_customized_2eproto.base);
  return *internal_default_instance();
}


void Root::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Root)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_.Clear();
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Root::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .patient.Entry entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string resourceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.Root.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_type(), ptr, ctx, "patient.Root.type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Root::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Root)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .patient.Entry entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entry_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_entry(i), target, stream);
  }

  // string resourceType = 2;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Root.resourceType");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_resourcetype(), target);
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Root.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Root)
  return target;
}

size_t Root::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Root)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Entry entry = 1;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string resourceType = 2;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  // string type = 3;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Root::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Root)
  GOOGLE_DCHECK_NE(&from, this);
  const Root* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Root>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Root)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Root)
    MergeFrom(*source);
  }
}

void Root::MergeFrom(const Root& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Root)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entry_.MergeFrom(from.entry_);
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
}

void Root::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Root)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Root::CopyFrom(const Root& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Root)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Root::IsInitialized() const {
  return true;
}

void Root::InternalSwap(Root* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entry_.InternalSwap(&other->entry_);
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Root::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SupportingInfo::InitAsDefaultInstance() {
  ::patient::_SupportingInfo_default_instance_._instance.get_mutable()->category_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_SupportingInfo_default_instance_._instance.get_mutable()->valuereference_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class SupportingInfo::_Internal {
 public:
  static const ::patient::Category& category(const SupportingInfo* msg);
  static const ::patient::Reference& valuereference(const SupportingInfo* msg);
};

const ::patient::Category&
SupportingInfo::_Internal::category(const SupportingInfo* msg) {
  return *msg->category_;
}
const ::patient::Reference&
SupportingInfo::_Internal::valuereference(const SupportingInfo* msg) {
  return *msg->valuereference_;
}
SupportingInfo::SupportingInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.SupportingInfo)
}
SupportingInfo::SupportingInfo(const SupportingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_category()) {
    category_ = new ::patient::Category(*from.category_);
  } else {
    category_ = nullptr;
  }
  if (from._internal_has_valuereference()) {
    valuereference_ = new ::patient::Reference(*from.valuereference_);
  } else {
    valuereference_ = nullptr;
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:patient.SupportingInfo)
}

void SupportingInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SupportingInfo_customized_2eproto.base);
  ::memset(&category_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&category_)) + sizeof(sequence_));
}

SupportingInfo::~SupportingInfo() {
  // @@protoc_insertion_point(destructor:patient.SupportingInfo)
  SharedDtor();
}

void SupportingInfo::SharedDtor() {
  if (this != internal_default_instance()) delete category_;
  if (this != internal_default_instance()) delete valuereference_;
}

void SupportingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SupportingInfo& SupportingInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SupportingInfo_customized_2eproto.base);
  return *internal_default_instance();
}


void SupportingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.SupportingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && category_ != nullptr) {
    delete category_;
  }
  category_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && valuereference_ != nullptr) {
    delete valuereference_;
  }
  valuereference_ = nullptr;
  sequence_ = 0;
  _internal_metadata_.Clear();
}

const char* SupportingInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Category category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference valueReference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_valuereference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SupportingInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.SupportingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Category category = 1;
  if (this->has_category()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::category(this), target, stream);
  }

  // int32 sequence = 2;
  if (this->sequence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sequence(), target);
  }

  // .patient.Reference valueReference = 3;
  if (this->has_valuereference()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::valuereference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.SupportingInfo)
  return target;
}

size_t SupportingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.SupportingInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .patient.Category category = 1;
  if (this->has_category()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *category_);
  }

  // .patient.Reference valueReference = 3;
  if (this->has_valuereference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *valuereference_);
  }

  // int32 sequence = 2;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SupportingInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.SupportingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SupportingInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SupportingInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.SupportingInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.SupportingInfo)
    MergeFrom(*source);
  }
}

void SupportingInfo::MergeFrom(const SupportingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.SupportingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_category()) {
    _internal_mutable_category()->::patient::Category::MergeFrom(from._internal_category());
  }
  if (from.has_valuereference()) {
    _internal_mutable_valuereference()->::patient::Reference::MergeFrom(from._internal_valuereference());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
}

void SupportingInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.SupportingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupportingInfo::CopyFrom(const SupportingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.SupportingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupportingInfo::IsInitialized() const {
  return true;
}

void SupportingInfo::InternalSwap(SupportingInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(category_, other->category_);
  swap(valuereference_, other->valuereference_);
  swap(sequence_, other->sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SupportingInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Telecom::InitAsDefaultInstance() {
}
class Telecom::_Internal {
 public:
};

Telecom::Telecom()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Telecom)
}
Telecom::Telecom(const Telecom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_system().empty()) {
    system_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.system_);
  }
  use_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_use().empty()) {
    use_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.use_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:patient.Telecom)
}

void Telecom::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Telecom_customized_2eproto.base);
  system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Telecom::~Telecom() {
  // @@protoc_insertion_point(destructor:patient.Telecom)
  SharedDtor();
}

void Telecom::SharedDtor() {
  system_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Telecom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Telecom& Telecom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Telecom_customized_2eproto.base);
  return *internal_default_instance();
}


void Telecom::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Telecom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  system_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Telecom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string system = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_system(), ptr, ctx, "patient.Telecom.system");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string use = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_use(), ptr, ctx, "patient.Telecom.use");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_value(), ptr, ctx, "patient.Telecom.value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Telecom::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Telecom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string system = 1;
  if (this->system().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_system().data(), static_cast<int>(this->_internal_system().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Telecom.system");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_system(), target);
  }

  // string use = 2;
  if (this->use().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_use().data(), static_cast<int>(this->_internal_use().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Telecom.use");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_use(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Telecom.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Telecom)
  return target;
}

size_t Telecom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Telecom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string system = 1;
  if (this->system().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_system());
  }

  // string use = 2;
  if (this->use().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_use());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Telecom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Telecom)
  GOOGLE_DCHECK_NE(&from, this);
  const Telecom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Telecom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Telecom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Telecom)
    MergeFrom(*source);
  }
}

void Telecom::MergeFrom(const Telecom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Telecom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.system().size() > 0) {

    system_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.system_);
  }
  if (from.use().size() > 0) {

    use_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.use_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Telecom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Telecom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Telecom::CopyFrom(const Telecom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Telecom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telecom::IsInitialized() const {
  return true;
}

void Telecom::InternalSwap(Telecom* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  system_.Swap(&other->system_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  use_.Swap(&other->use_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Telecom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Text::InitAsDefaultInstance() {
}
class Text::_Internal {
 public:
};

Text::Text()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Text)
}
Text::Text(const Text& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  div_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_div().empty()) {
    div_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.div_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  // @@protoc_insertion_point(copy_constructor:patient.Text)
}

void Text::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Text_customized_2eproto.base);
  div_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Text::~Text() {
  // @@protoc_insertion_point(destructor:patient.Text)
  SharedDtor();
}

void Text::SharedDtor() {
  div_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Text::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Text& Text::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Text_customized_2eproto.base);
  return *internal_default_instance();
}


void Text::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Text)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  div_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Text::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string div = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_div(), ptr, ctx, "patient.Text.div");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_status(), ptr, ctx, "patient.Text.status");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Text::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Text)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string div = 1;
  if (this->div().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_div().data(), static_cast<int>(this->_internal_div().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Text.div");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_div(), target);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Text.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Text)
  return target;
}

size_t Text::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Text)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string div = 1;
  if (this->div().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_div());
  }

  // string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Text::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Text)
  GOOGLE_DCHECK_NE(&from, this);
  const Text* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Text>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Text)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Text)
    MergeFrom(*source);
  }
}

void Text::MergeFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Text)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.div().size() > 0) {

    div_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.div_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void Text::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Text::CopyFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text::IsInitialized() const {
  return true;
}

void Text::InternalSwap(Text* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  div_.Swap(&other->div_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Text::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Total::InitAsDefaultInstance() {
  ::patient::_Total_default_instance_._instance.get_mutable()->amount_ = const_cast< ::patient::Amount*>(
      ::patient::Amount::internal_default_instance());
  ::patient::_Total_default_instance_._instance.get_mutable()->category_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
}
class Total::_Internal {
 public:
  static const ::patient::Amount& amount(const Total* msg);
  static const ::patient::Category& category(const Total* msg);
};

const ::patient::Amount&
Total::_Internal::amount(const Total* msg) {
  return *msg->amount_;
}
const ::patient::Category&
Total::_Internal::category(const Total* msg) {
  return *msg->category_;
}
Total::Total()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Total)
}
Total::Total(const Total& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from._internal_has_amount()) {
    amount_ = new ::patient::Amount(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  if (from._internal_has_category()) {
    category_ = new ::patient::Category(*from.category_);
  } else {
    category_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:patient.Total)
}

void Total::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Total_customized_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(value_));
}

Total::~Total() {
  // @@protoc_insertion_point(destructor:patient.Total)
  SharedDtor();
}

void Total::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amount_;
  if (this != internal_default_instance()) delete category_;
}

void Total::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Total& Total::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Total_customized_2eproto.base);
  return *internal_default_instance();
}


void Total::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Total)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && category_ != nullptr) {
    delete category_;
  }
  category_ = nullptr;
  value_ = 0;
  _internal_metadata_.Clear();
}

const char* Total::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_currency(), ptr, ctx, "patient.Total.currency");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .patient.Amount amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category category = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Total::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Total)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Total.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  // .patient.Amount amount = 3;
  if (this->has_amount()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::amount(this), target, stream);
  }

  // .patient.Category category = 4;
  if (this->has_category()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::category(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Total)
  return target;
}

size_t Total::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Total)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // .patient.Amount amount = 3;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  // .patient.Category category = 4;
  if (this->has_category()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *category_);
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Total::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Total)
  GOOGLE_DCHECK_NE(&from, this);
  const Total* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Total>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Total)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Total)
    MergeFrom(*source);
  }
}

void Total::MergeFrom(const Total& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Total)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.has_amount()) {
    _internal_mutable_amount()->::patient::Amount::MergeFrom(from._internal_amount());
  }
  if (from.has_category()) {
    _internal_mutable_category()->::patient::Category::MergeFrom(from._internal_category());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void Total::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Total)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Total::CopyFrom(const Total& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Total)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Total::IsInitialized() const {
  return true;
}

void Total::InternalSwap(Total* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(category_, other->category_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Total::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Coding::InitAsDefaultInstance() {
}
class Coding::_Internal {
 public:
};

Coding::Coding()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Coding)
}
Coding::Coding(const Coding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  display_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_display().empty()) {
    display_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_);
  }
  system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_system().empty()) {
    system_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.system_);
  }
  // @@protoc_insertion_point(copy_constructor:patient.Coding)
}

void Coding::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Coding_customized_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Coding::~Coding() {
  // @@protoc_insertion_point(destructor:patient.Coding)
  SharedDtor();
}

void Coding::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Coding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Coding& Coding::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Coding_customized_2eproto.base);
  return *internal_default_instance();
}


void Coding::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Coding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Coding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_code(), ptr, ctx, "patient.Coding.code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string display = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_display(), ptr, ctx, "patient.Coding.display");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string system = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_system(), ptr, ctx, "patient.Coding.system");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Coding::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Coding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Coding.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string display = 2;
  if (this->display().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display().data(), static_cast<int>(this->_internal_display().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Coding.display");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_display(), target);
  }

  // string system = 3;
  if (this->system().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_system().data(), static_cast<int>(this->_internal_system().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Coding.system");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_system(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Coding)
  return target;
}

size_t Coding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Coding)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string display = 2;
  if (this->display().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display());
  }

  // string system = 3;
  if (this->system().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_system());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Coding::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Coding)
  GOOGLE_DCHECK_NE(&from, this);
  const Coding* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Coding>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Coding)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Coding)
    MergeFrom(*source);
  }
}

void Coding::MergeFrom(const Coding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Coding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.display().size() > 0) {

    display_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_);
  }
  if (from.system().size() > 0) {

    system_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.system_);
  }
}

void Coding::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Coding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coding::CopyFrom(const Coding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Coding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coding::IsInitialized() const {
  return true;
}

void Coding::InternalSwap(Coding* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_.Swap(&other->display_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  system_.Swap(&other->system_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Coding::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Quantity::InitAsDefaultInstance() {
}
class Quantity::_Internal {
 public:
};

Quantity::Quantity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Quantity)
}
Quantity::Quantity(const Quantity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_system().empty()) {
    system_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.system_);
  }
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unit().empty()) {
    unit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:patient.Quantity)
}

void Quantity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Quantity_customized_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

Quantity::~Quantity() {
  // @@protoc_insertion_point(destructor:patient.Quantity)
  SharedDtor();
}

void Quantity::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Quantity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Quantity& Quantity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Quantity_customized_2eproto.base);
  return *internal_default_instance();
}


void Quantity::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Quantity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  _internal_metadata_.Clear();
}

const char* Quantity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_code(), ptr, ctx, "patient.Quantity.code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string system = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_system(), ptr, ctx, "patient.Quantity.system");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_unit(), ptr, ctx, "patient.Quantity.unit");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quantity::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Quantity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Quantity.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string system = 2;
  if (this->system().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_system().data(), static_cast<int>(this->_internal_system().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Quantity.system");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_system(), target);
  }

  // string unit = 3;
  if (this->unit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unit().data(), static_cast<int>(this->_internal_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Quantity.unit");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_unit(), target);
  }

  // float value = 4;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Quantity)
  return target;
}

size_t Quantity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Quantity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string system = 2;
  if (this->system().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_system());
  }

  // string unit = 3;
  if (this->unit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unit());
  }

  // float value = 4;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quantity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Quantity)
  GOOGLE_DCHECK_NE(&from, this);
  const Quantity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Quantity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Quantity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Quantity)
    MergeFrom(*source);
  }
}

void Quantity::MergeFrom(const Quantity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Quantity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.system().size() > 0) {

    system_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.system_);
  }
  if (from.unit().size() > 0) {

    unit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void Quantity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Quantity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quantity::CopyFrom(const Quantity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Quantity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quantity::IsInitialized() const {
  return true;
}

void Quantity::InternalSwap(Quantity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  system_.Swap(&other->system_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unit_.Swap(&other->unit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Quantity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Reference::InitAsDefaultInstance() {
}
class Reference::_Internal {
 public:
};

Reference::Reference()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Reference)
}
Reference::Reference(const Reference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  display_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_display().empty()) {
    display_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_);
  }
  // @@protoc_insertion_point(copy_constructor:patient.Reference)
}

void Reference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Reference_customized_2eproto.base);
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Reference::~Reference() {
  // @@protoc_insertion_point(destructor:patient.Reference)
  SharedDtor();
}

void Reference::SharedDtor() {
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Reference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Reference& Reference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Reference_customized_2eproto.base);
  return *internal_default_instance();
}


void Reference::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Reference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Reference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_reference(), ptr, ctx, "patient.Reference.reference");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string display = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_display(), ptr, ctx, "patient.Reference.display");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Reference::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Reference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference = 1;
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Reference.reference");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reference(), target);
  }

  // string display = 2;
  if (this->display().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display().data(), static_cast<int>(this->_internal_display().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Reference.display");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_display(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Reference)
  return target;
}

size_t Reference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Reference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reference = 1;
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  // string display = 2;
  if (this->display().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Reference)
  GOOGLE_DCHECK_NE(&from, this);
  const Reference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Reference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Reference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Reference)
    MergeFrom(*source);
  }
}

void Reference::MergeFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Reference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference().size() > 0) {

    reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  if (from.display().size() > 0) {

    display_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_);
  }
}

void Reference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reference::CopyFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reference::IsInitialized() const {
  return true;
}

void Reference::InternalSwap(Reference* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_.Swap(&other->display_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Reference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Category::InitAsDefaultInstance() {
}
class Category::_Internal {
 public:
};

Category::Category()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Category)
}
Category::Category(const Category& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      coding_(from.coding_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:patient.Category)
}

void Category::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Category_customized_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Category::~Category() {
  // @@protoc_insertion_point(destructor:patient.Category)
  SharedDtor();
}

void Category::SharedDtor() {
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Category::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Category& Category::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Category_customized_2eproto.base);
  return *internal_default_instance();
}


void Category::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Category)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coding_.Clear();
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Category::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .patient.Coding coding = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coding(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_text(), ptr, ctx, "patient.Category.text");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Category::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Category)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .patient.Coding coding = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_coding_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_coding(i), target, stream);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Category.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Category)
  return target;
}

size_t Category::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Category)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Coding coding = 1;
  total_size += 1UL * this->_internal_coding_size();
  for (const auto& msg : this->coding_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Category::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Category)
  GOOGLE_DCHECK_NE(&from, this);
  const Category* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Category>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Category)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Category)
    MergeFrom(*source);
  }
}

void Category::MergeFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Category)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coding_.MergeFrom(from.coding_);
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void Category::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Category::CopyFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Category::IsInitialized() const {
  return true;
}

void Category::InternalSwap(Category* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  coding_.InternalSwap(&other->coding_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Category::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Period::InitAsDefaultInstance() {
}
class Period::_Internal {
 public:
};

Period::Period()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Period)
}
Period::Period(const Period& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end().empty()) {
    end_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_);
  }
  start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start().empty()) {
    start_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_);
  }
  // @@protoc_insertion_point(copy_constructor:patient.Period)
}

void Period::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Period_customized_2eproto.base);
  end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Period::~Period() {
  // @@protoc_insertion_point(destructor:patient.Period)
  SharedDtor();
}

void Period::SharedDtor() {
  end_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Period::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Period& Period::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Period_customized_2eproto.base);
  return *internal_default_instance();
}


void Period::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Period)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  end_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Period::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string end = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_end(), ptr, ctx, "patient.Period.end");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_start(), ptr, ctx, "patient.Period.start");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Period::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Period)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string end = 1;
  if (this->end().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end().data(), static_cast<int>(this->_internal_end().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Period.end");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_end(), target);
  }

  // string start = 2;
  if (this->start().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start().data(), static_cast<int>(this->_internal_start().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Period.start");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_start(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Period)
  return target;
}

size_t Period::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Period)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string end = 1;
  if (this->end().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end());
  }

  // string start = 2;
  if (this->start().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Period::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Period)
  GOOGLE_DCHECK_NE(&from, this);
  const Period* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Period>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Period)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Period)
    MergeFrom(*source);
  }
}

void Period::MergeFrom(const Period& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Period)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.end().size() > 0) {

    end_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_);
  }
  if (from.start().size() > 0) {

    start_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_);
  }
}

void Period::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Period)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Period::CopyFrom(const Period& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Period)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Period::IsInitialized() const {
  return true;
}

void Period::InternalSwap(Period* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  end_.Swap(&other->end_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_.Swap(&other->start_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Period::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Resource::InitAsDefaultInstance() {
  ::patient::_Resource_default_instance_.careplan_ = const_cast< ::patient::CarePlanObject*>(
      ::patient::CarePlanObject::internal_default_instance());
  ::patient::_Resource_default_instance_.careteam_ = const_cast< ::patient::CareTeamObject*>(
      ::patient::CareTeamObject::internal_default_instance());
  ::patient::_Resource_default_instance_.claim_ = const_cast< ::patient::ClaimObject*>(
      ::patient::ClaimObject::internal_default_instance());
  ::patient::_Resource_default_instance_.condition_ = const_cast< ::patient::ConditionObject*>(
      ::patient::ConditionObject::internal_default_instance());
  ::patient::_Resource_default_instance_.diagnosticreport_ = const_cast< ::patient::DiagnosticReportObject*>(
      ::patient::DiagnosticReportObject::internal_default_instance());
  ::patient::_Resource_default_instance_.encounter_ = const_cast< ::patient::EncounterObject*>(
      ::patient::EncounterObject::internal_default_instance());
  ::patient::_Resource_default_instance_.explanationofbenefit_ = const_cast< ::patient::ExplanationOfBenefitObject*>(
      ::patient::ExplanationOfBenefitObject::internal_default_instance());
  ::patient::_Resource_default_instance_.immunization_ = const_cast< ::patient::ImmunizationObject*>(
      ::patient::ImmunizationObject::internal_default_instance());
  ::patient::_Resource_default_instance_.medicationrequest_ = const_cast< ::patient::MedicationRequestObject*>(
      ::patient::MedicationRequestObject::internal_default_instance());
  ::patient::_Resource_default_instance_.observation_ = const_cast< ::patient::ObservationObject*>(
      ::patient::ObservationObject::internal_default_instance());
  ::patient::_Resource_default_instance_.organization_ = const_cast< ::patient::OrganizationObject*>(
      ::patient::OrganizationObject::internal_default_instance());
  ::patient::_Resource_default_instance_.patient_ = const_cast< ::patient::PatientObject*>(
      ::patient::PatientObject::internal_default_instance());
  ::patient::_Resource_default_instance_.practitioner_ = const_cast< ::patient::PractitionerObject*>(
      ::patient::PractitionerObject::internal_default_instance());
  ::patient::_Resource_default_instance_.procedure_ = const_cast< ::patient::ProcedureObject*>(
      ::patient::ProcedureObject::internal_default_instance());
}
class Resource::_Internal {
 public:
  static const ::patient::CarePlanObject& careplan(const Resource* msg);
  static const ::patient::CareTeamObject& careteam(const Resource* msg);
  static const ::patient::ClaimObject& claim(const Resource* msg);
  static const ::patient::ConditionObject& condition(const Resource* msg);
  static const ::patient::DiagnosticReportObject& diagnosticreport(const Resource* msg);
  static const ::patient::EncounterObject& encounter(const Resource* msg);
  static const ::patient::ExplanationOfBenefitObject& explanationofbenefit(const Resource* msg);
  static const ::patient::ImmunizationObject& immunization(const Resource* msg);
  static const ::patient::MedicationRequestObject& medicationrequest(const Resource* msg);
  static const ::patient::ObservationObject& observation(const Resource* msg);
  static const ::patient::OrganizationObject& organization(const Resource* msg);
  static const ::patient::PatientObject& patient(const Resource* msg);
  static const ::patient::PractitionerObject& practitioner(const Resource* msg);
  static const ::patient::ProcedureObject& procedure(const Resource* msg);
};

const ::patient::CarePlanObject&
Resource::_Internal::careplan(const Resource* msg) {
  return *msg->resource_.careplan_;
}
const ::patient::CareTeamObject&
Resource::_Internal::careteam(const Resource* msg) {
  return *msg->resource_.careteam_;
}
const ::patient::ClaimObject&
Resource::_Internal::claim(const Resource* msg) {
  return *msg->resource_.claim_;
}
const ::patient::ConditionObject&
Resource::_Internal::condition(const Resource* msg) {
  return *msg->resource_.condition_;
}
const ::patient::DiagnosticReportObject&
Resource::_Internal::diagnosticreport(const Resource* msg) {
  return *msg->resource_.diagnosticreport_;
}
const ::patient::EncounterObject&
Resource::_Internal::encounter(const Resource* msg) {
  return *msg->resource_.encounter_;
}
const ::patient::ExplanationOfBenefitObject&
Resource::_Internal::explanationofbenefit(const Resource* msg) {
  return *msg->resource_.explanationofbenefit_;
}
const ::patient::ImmunizationObject&
Resource::_Internal::immunization(const Resource* msg) {
  return *msg->resource_.immunization_;
}
const ::patient::MedicationRequestObject&
Resource::_Internal::medicationrequest(const Resource* msg) {
  return *msg->resource_.medicationrequest_;
}
const ::patient::ObservationObject&
Resource::_Internal::observation(const Resource* msg) {
  return *msg->resource_.observation_;
}
const ::patient::OrganizationObject&
Resource::_Internal::organization(const Resource* msg) {
  return *msg->resource_.organization_;
}
const ::patient::PatientObject&
Resource::_Internal::patient(const Resource* msg) {
  return *msg->resource_.patient_;
}
const ::patient::PractitionerObject&
Resource::_Internal::practitioner(const Resource* msg) {
  return *msg->resource_.practitioner_;
}
const ::patient::ProcedureObject&
Resource::_Internal::procedure(const Resource* msg) {
  return *msg->resource_.procedure_;
}
void Resource::set_allocated_careplan(::patient::CarePlanObject* careplan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (careplan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      careplan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, careplan, submessage_arena);
    }
    set_has_careplan();
    resource_.careplan_ = careplan;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.carePlan)
}
void Resource::set_allocated_careteam(::patient::CareTeamObject* careteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (careteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      careteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, careteam, submessage_arena);
    }
    set_has_careteam();
    resource_.careteam_ = careteam;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.careTeam)
}
void Resource::set_allocated_claim(::patient::ClaimObject* claim) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (claim) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      claim = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, claim, submessage_arena);
    }
    set_has_claim();
    resource_.claim_ = claim;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.claim)
}
void Resource::set_allocated_condition(::patient::ConditionObject* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    set_has_condition();
    resource_.condition_ = condition;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.condition)
}
void Resource::set_allocated_diagnosticreport(::patient::DiagnosticReportObject* diagnosticreport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (diagnosticreport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      diagnosticreport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diagnosticreport, submessage_arena);
    }
    set_has_diagnosticreport();
    resource_.diagnosticreport_ = diagnosticreport;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.diagnosticReport)
}
void Resource::set_allocated_encounter(::patient::EncounterObject* encounter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (encounter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      encounter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encounter, submessage_arena);
    }
    set_has_encounter();
    resource_.encounter_ = encounter;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.encounter)
}
void Resource::set_allocated_explanationofbenefit(::patient::ExplanationOfBenefitObject* explanationofbenefit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (explanationofbenefit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      explanationofbenefit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, explanationofbenefit, submessage_arena);
    }
    set_has_explanationofbenefit();
    resource_.explanationofbenefit_ = explanationofbenefit;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.explanationOfBenefit)
}
void Resource::set_allocated_immunization(::patient::ImmunizationObject* immunization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (immunization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      immunization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, immunization, submessage_arena);
    }
    set_has_immunization();
    resource_.immunization_ = immunization;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.immunization)
}
void Resource::set_allocated_medicationrequest(::patient::MedicationRequestObject* medicationrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (medicationrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      medicationrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, medicationrequest, submessage_arena);
    }
    set_has_medicationrequest();
    resource_.medicationrequest_ = medicationrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.medicationRequest)
}
void Resource::set_allocated_observation(::patient::ObservationObject* observation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (observation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      observation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observation, submessage_arena);
    }
    set_has_observation();
    resource_.observation_ = observation;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.observation)
}
void Resource::set_allocated_organization(::patient::OrganizationObject* organization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (organization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      organization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, organization, submessage_arena);
    }
    set_has_organization();
    resource_.organization_ = organization;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.organization)
}
void Resource::set_allocated_patient(::patient::PatientObject* patient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (patient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      patient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patient, submessage_arena);
    }
    set_has_patient();
    resource_.patient_ = patient;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.patient)
}
void Resource::set_allocated_practitioner(::patient::PractitionerObject* practitioner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (practitioner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      practitioner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, practitioner, submessage_arena);
    }
    set_has_practitioner();
    resource_.practitioner_ = practitioner;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.practitioner)
}
void Resource::set_allocated_procedure(::patient::ProcedureObject* procedure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (procedure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      procedure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, procedure, submessage_arena);
    }
    set_has_procedure();
    resource_.procedure_ = procedure;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.procedure)
}
Resource::Resource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Resource)
}
Resource::Resource(const Resource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  clear_has_resource();
  switch (from.resource_case()) {
    case kCarePlan: {
      _internal_mutable_careplan()->::patient::CarePlanObject::MergeFrom(from._internal_careplan());
      break;
    }
    case kCareTeam: {
      _internal_mutable_careteam()->::patient::CareTeamObject::MergeFrom(from._internal_careteam());
      break;
    }
    case kClaim: {
      _internal_mutable_claim()->::patient::ClaimObject::MergeFrom(from._internal_claim());
      break;
    }
    case kCondition: {
      _internal_mutable_condition()->::patient::ConditionObject::MergeFrom(from._internal_condition());
      break;
    }
    case kDiagnosticReport: {
      _internal_mutable_diagnosticreport()->::patient::DiagnosticReportObject::MergeFrom(from._internal_diagnosticreport());
      break;
    }
    case kEncounter: {
      _internal_mutable_encounter()->::patient::EncounterObject::MergeFrom(from._internal_encounter());
      break;
    }
    case kExplanationOfBenefit: {
      _internal_mutable_explanationofbenefit()->::patient::ExplanationOfBenefitObject::MergeFrom(from._internal_explanationofbenefit());
      break;
    }
    case kImmunization: {
      _internal_mutable_immunization()->::patient::ImmunizationObject::MergeFrom(from._internal_immunization());
      break;
    }
    case kMedicationRequest: {
      _internal_mutable_medicationrequest()->::patient::MedicationRequestObject::MergeFrom(from._internal_medicationrequest());
      break;
    }
    case kObservation: {
      _internal_mutable_observation()->::patient::ObservationObject::MergeFrom(from._internal_observation());
      break;
    }
    case kOrganization: {
      _internal_mutable_organization()->::patient::OrganizationObject::MergeFrom(from._internal_organization());
      break;
    }
    case kPatient: {
      _internal_mutable_patient()->::patient::PatientObject::MergeFrom(from._internal_patient());
      break;
    }
    case kPractitioner: {
      _internal_mutable_practitioner()->::patient::PractitionerObject::MergeFrom(from._internal_practitioner());
      break;
    }
    case kProcedure: {
      _internal_mutable_procedure()->::patient::ProcedureObject::MergeFrom(from._internal_procedure());
      break;
    }
    case RESOURCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:patient.Resource)
}

void Resource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Resource_customized_2eproto.base);
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_resource();
}

Resource::~Resource() {
  // @@protoc_insertion_point(destructor:patient.Resource)
  SharedDtor();
}

void Resource::SharedDtor() {
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_resource()) {
    clear_resource();
  }
}

void Resource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Resource& Resource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Resource_customized_2eproto.base);
  return *internal_default_instance();
}


void Resource::clear_resource() {
// @@protoc_insertion_point(one_of_clear_start:patient.Resource)
  switch (resource_case()) {
    case kCarePlan: {
      delete resource_.careplan_;
      break;
    }
    case kCareTeam: {
      delete resource_.careteam_;
      break;
    }
    case kClaim: {
      delete resource_.claim_;
      break;
    }
    case kCondition: {
      delete resource_.condition_;
      break;
    }
    case kDiagnosticReport: {
      delete resource_.diagnosticreport_;
      break;
    }
    case kEncounter: {
      delete resource_.encounter_;
      break;
    }
    case kExplanationOfBenefit: {
      delete resource_.explanationofbenefit_;
      break;
    }
    case kImmunization: {
      delete resource_.immunization_;
      break;
    }
    case kMedicationRequest: {
      delete resource_.medicationrequest_;
      break;
    }
    case kObservation: {
      delete resource_.observation_;
      break;
    }
    case kOrganization: {
      delete resource_.organization_;
      break;
    }
    case kPatient: {
      delete resource_.patient_;
      break;
    }
    case kPractitioner: {
      delete resource_.practitioner_;
      break;
    }
    case kProcedure: {
      delete resource_.procedure_;
      break;
    }
    case RESOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESOURCE_NOT_SET;
}


void Resource::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Resource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_resource();
  _internal_metadata_.Clear();
}

const char* Resource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string resourceType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.Resource.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.CarePlanObject carePlan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_careplan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.CareTeamObject careTeam = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_careteam(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.ClaimObject claim = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_claim(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.ConditionObject condition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.DiagnosticReportObject diagnosticReport = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_diagnosticreport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.EncounterObject encounter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_encounter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.ExplanationOfBenefitObject explanationOfBenefit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_explanationofbenefit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.ImmunizationObject immunization = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_immunization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.MedicationRequestObject medicationRequest = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_medicationrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.ObservationObject observation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_observation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.OrganizationObject organization = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_organization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.PatientObject patient = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_patient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.PractitionerObject practitioner = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_practitioner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.ProcedureObject procedure = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_procedure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Resource::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Resource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string resourceType = 1;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Resource.resourceType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_resourcetype(), target);
  }

  // .patient.CarePlanObject carePlan = 2;
  if (_internal_has_careplan()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::careplan(this), target, stream);
  }

  // .patient.CareTeamObject careTeam = 3;
  if (_internal_has_careteam()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::careteam(this), target, stream);
  }

  // .patient.ClaimObject claim = 4;
  if (_internal_has_claim()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::claim(this), target, stream);
  }

  // .patient.ConditionObject condition = 5;
  if (_internal_has_condition()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::condition(this), target, stream);
  }

  // .patient.DiagnosticReportObject diagnosticReport = 6;
  if (_internal_has_diagnosticreport()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::diagnosticreport(this), target, stream);
  }

  // .patient.EncounterObject encounter = 7;
  if (_internal_has_encounter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::encounter(this), target, stream);
  }

  // .patient.ExplanationOfBenefitObject explanationOfBenefit = 8;
  if (_internal_has_explanationofbenefit()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::explanationofbenefit(this), target, stream);
  }

  // .patient.ImmunizationObject immunization = 9;
  if (_internal_has_immunization()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::immunization(this), target, stream);
  }

  // .patient.MedicationRequestObject medicationRequest = 10;
  if (_internal_has_medicationrequest()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::medicationrequest(this), target, stream);
  }

  // .patient.ObservationObject observation = 11;
  if (_internal_has_observation()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::observation(this), target, stream);
  }

  // .patient.OrganizationObject organization = 12;
  if (_internal_has_organization()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::organization(this), target, stream);
  }

  // .patient.PatientObject patient = 13;
  if (_internal_has_patient()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::patient(this), target, stream);
  }

  // .patient.PractitionerObject practitioner = 14;
  if (_internal_has_practitioner()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::practitioner(this), target, stream);
  }

  // .patient.ProcedureObject procedure = 15;
  if (_internal_has_procedure()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::procedure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Resource)
  return target;
}

size_t Resource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Resource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resourceType = 1;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  switch (resource_case()) {
    // .patient.CarePlanObject carePlan = 2;
    case kCarePlan: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.careplan_);
      break;
    }
    // .patient.CareTeamObject careTeam = 3;
    case kCareTeam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.careteam_);
      break;
    }
    // .patient.ClaimObject claim = 4;
    case kClaim: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.claim_);
      break;
    }
    // .patient.ConditionObject condition = 5;
    case kCondition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.condition_);
      break;
    }
    // .patient.DiagnosticReportObject diagnosticReport = 6;
    case kDiagnosticReport: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.diagnosticreport_);
      break;
    }
    // .patient.EncounterObject encounter = 7;
    case kEncounter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.encounter_);
      break;
    }
    // .patient.ExplanationOfBenefitObject explanationOfBenefit = 8;
    case kExplanationOfBenefit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.explanationofbenefit_);
      break;
    }
    // .patient.ImmunizationObject immunization = 9;
    case kImmunization: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.immunization_);
      break;
    }
    // .patient.MedicationRequestObject medicationRequest = 10;
    case kMedicationRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.medicationrequest_);
      break;
    }
    // .patient.ObservationObject observation = 11;
    case kObservation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.observation_);
      break;
    }
    // .patient.OrganizationObject organization = 12;
    case kOrganization: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.organization_);
      break;
    }
    // .patient.PatientObject patient = 13;
    case kPatient: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.patient_);
      break;
    }
    // .patient.PractitionerObject practitioner = 14;
    case kPractitioner: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.practitioner_);
      break;
    }
    // .patient.ProcedureObject procedure = 15;
    case kProcedure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.procedure_);
      break;
    }
    case RESOURCE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Resource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Resource)
  GOOGLE_DCHECK_NE(&from, this);
  const Resource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Resource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Resource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Resource)
    MergeFrom(*source);
  }
}

void Resource::MergeFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Resource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  switch (from.resource_case()) {
    case kCarePlan: {
      _internal_mutable_careplan()->::patient::CarePlanObject::MergeFrom(from._internal_careplan());
      break;
    }
    case kCareTeam: {
      _internal_mutable_careteam()->::patient::CareTeamObject::MergeFrom(from._internal_careteam());
      break;
    }
    case kClaim: {
      _internal_mutable_claim()->::patient::ClaimObject::MergeFrom(from._internal_claim());
      break;
    }
    case kCondition: {
      _internal_mutable_condition()->::patient::ConditionObject::MergeFrom(from._internal_condition());
      break;
    }
    case kDiagnosticReport: {
      _internal_mutable_diagnosticreport()->::patient::DiagnosticReportObject::MergeFrom(from._internal_diagnosticreport());
      break;
    }
    case kEncounter: {
      _internal_mutable_encounter()->::patient::EncounterObject::MergeFrom(from._internal_encounter());
      break;
    }
    case kExplanationOfBenefit: {
      _internal_mutable_explanationofbenefit()->::patient::ExplanationOfBenefitObject::MergeFrom(from._internal_explanationofbenefit());
      break;
    }
    case kImmunization: {
      _internal_mutable_immunization()->::patient::ImmunizationObject::MergeFrom(from._internal_immunization());
      break;
    }
    case kMedicationRequest: {
      _internal_mutable_medicationrequest()->::patient::MedicationRequestObject::MergeFrom(from._internal_medicationrequest());
      break;
    }
    case kObservation: {
      _internal_mutable_observation()->::patient::ObservationObject::MergeFrom(from._internal_observation());
      break;
    }
    case kOrganization: {
      _internal_mutable_organization()->::patient::OrganizationObject::MergeFrom(from._internal_organization());
      break;
    }
    case kPatient: {
      _internal_mutable_patient()->::patient::PatientObject::MergeFrom(from._internal_patient());
      break;
    }
    case kPractitioner: {
      _internal_mutable_practitioner()->::patient::PractitionerObject::MergeFrom(from._internal_practitioner());
      break;
    }
    case kProcedure: {
      _internal_mutable_procedure()->::patient::ProcedureObject::MergeFrom(from._internal_procedure());
      break;
    }
    case RESOURCE_NOT_SET: {
      break;
    }
  }
}

void Resource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource::CopyFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {
  return true;
}

void Resource::InternalSwap(Resource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(resource_, other->resource_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Resource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DosageInstruction::InitAsDefaultInstance() {
  ::patient::_DosageInstruction_default_instance_._instance.get_mutable()->timing_ = const_cast< ::patient::Timing*>(
      ::patient::Timing::internal_default_instance());
}
class DosageInstruction::_Internal {
 public:
  static const ::patient::Timing& timing(const DosageInstruction* msg);
};

const ::patient::Timing&
DosageInstruction::_Internal::timing(const DosageInstruction* msg) {
  return *msg->timing_;
}
DosageInstruction::DosageInstruction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.DosageInstruction)
}
DosageInstruction::DosageInstruction(const DosageInstruction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      doseandrate_(from.doseandrate_),
      additionalinstruction_(from.additionalinstruction_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_timing()) {
    timing_ = new ::patient::Timing(*from.timing_);
  } else {
    timing_ = nullptr;
  }
  ::memcpy(&sequence_, &from.sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&asneededboolean_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(asneededboolean_));
  // @@protoc_insertion_point(copy_constructor:patient.DosageInstruction)
}

void DosageInstruction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DosageInstruction_customized_2eproto.base);
  ::memset(&timing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&asneededboolean_) -
      reinterpret_cast<char*>(&timing_)) + sizeof(asneededboolean_));
}

DosageInstruction::~DosageInstruction() {
  // @@protoc_insertion_point(destructor:patient.DosageInstruction)
  SharedDtor();
}

void DosageInstruction::SharedDtor() {
  if (this != internal_default_instance()) delete timing_;
}

void DosageInstruction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DosageInstruction& DosageInstruction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DosageInstruction_customized_2eproto.base);
  return *internal_default_instance();
}


void DosageInstruction::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.DosageInstruction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doseandrate_.Clear();
  additionalinstruction_.Clear();
  if (GetArenaNoVirtual() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&asneededboolean_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(asneededboolean_));
  _internal_metadata_.Clear();
}

const char* DosageInstruction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool asNeededBoolean = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          asneededboolean_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.DoseAndRate doseAndRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_doseandrate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Timing timing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_timing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Category additionalInstruction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additionalinstruction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DosageInstruction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.DosageInstruction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence = 1;
  if (this->sequence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sequence(), target);
  }

  // bool asNeededBoolean = 2;
  if (this->asneededboolean() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_asneededboolean(), target);
  }

  // repeated .patient.DoseAndRate doseAndRate = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_doseandrate_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_doseandrate(i), target, stream);
  }

  // .patient.Timing timing = 4;
  if (this->has_timing()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::timing(this), target, stream);
  }

  // repeated .patient.Category additionalInstruction = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additionalinstruction_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_additionalinstruction(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.DosageInstruction)
  return target;
}

size_t DosageInstruction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.DosageInstruction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.DoseAndRate doseAndRate = 3;
  total_size += 1UL * this->_internal_doseandrate_size();
  for (const auto& msg : this->doseandrate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Category additionalInstruction = 5;
  total_size += 1UL * this->_internal_additionalinstruction_size();
  for (const auto& msg : this->additionalinstruction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .patient.Timing timing = 4;
  if (this->has_timing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timing_);
  }

  // int32 sequence = 1;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence());
  }

  // bool asNeededBoolean = 2;
  if (this->asneededboolean() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DosageInstruction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.DosageInstruction)
  GOOGLE_DCHECK_NE(&from, this);
  const DosageInstruction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DosageInstruction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.DosageInstruction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.DosageInstruction)
    MergeFrom(*source);
  }
}

void DosageInstruction::MergeFrom(const DosageInstruction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.DosageInstruction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  doseandrate_.MergeFrom(from.doseandrate_);
  additionalinstruction_.MergeFrom(from.additionalinstruction_);
  if (from.has_timing()) {
    _internal_mutable_timing()->::patient::Timing::MergeFrom(from._internal_timing());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from.asneededboolean() != 0) {
    _internal_set_asneededboolean(from._internal_asneededboolean());
  }
}

void DosageInstruction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.DosageInstruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DosageInstruction::CopyFrom(const DosageInstruction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.DosageInstruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DosageInstruction::IsInitialized() const {
  return true;
}

void DosageInstruction::InternalSwap(DosageInstruction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  doseandrate_.InternalSwap(&other->doseandrate_);
  additionalinstruction_.InternalSwap(&other->additionalinstruction_);
  swap(timing_, other->timing_);
  swap(sequence_, other->sequence_);
  swap(asneededboolean_, other->asneededboolean_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DosageInstruction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Repeat::InitAsDefaultInstance() {
}
class Repeat::_Internal {
 public:
};

Repeat::Repeat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Repeat)
}
Repeat::Repeat(const Repeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  periodunit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_periodunit().empty()) {
    periodunit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.periodunit_);
  }
  ::memcpy(&frequency_, &from.frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&period_) -
    reinterpret_cast<char*>(&frequency_)) + sizeof(period_));
  // @@protoc_insertion_point(copy_constructor:patient.Repeat)
}

void Repeat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Repeat_customized_2eproto.base);
  periodunit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_) -
      reinterpret_cast<char*>(&frequency_)) + sizeof(period_));
}

Repeat::~Repeat() {
  // @@protoc_insertion_point(destructor:patient.Repeat)
  SharedDtor();
}

void Repeat::SharedDtor() {
  periodunit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Repeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Repeat& Repeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Repeat_customized_2eproto.base);
  return *internal_default_instance();
}


void Repeat::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Repeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  periodunit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_) -
      reinterpret_cast<char*>(&frequency_)) + sizeof(period_));
  _internal_metadata_.Clear();
}

const char* Repeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 frequency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float period = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string periodUnit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_periodunit(), ptr, ctx, "patient.Repeat.periodUnit");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Repeat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Repeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frequency = 1;
  if (this->frequency() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_frequency(), target);
  }

  // float period = 2;
  if (!(this->period() <= 0 && this->period() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_period(), target);
  }

  // string periodUnit = 3;
  if (this->periodunit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_periodunit().data(), static_cast<int>(this->_internal_periodunit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Repeat.periodUnit");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_periodunit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Repeat)
  return target;
}

size_t Repeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Repeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string periodUnit = 3;
  if (this->periodunit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_periodunit());
  }

  // int32 frequency = 1;
  if (this->frequency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frequency());
  }

  // float period = 2;
  if (!(this->period() <= 0 && this->period() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Repeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Repeat)
  GOOGLE_DCHECK_NE(&from, this);
  const Repeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Repeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Repeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Repeat)
    MergeFrom(*source);
  }
}

void Repeat::MergeFrom(const Repeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Repeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.periodunit().size() > 0) {

    periodunit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.periodunit_);
  }
  if (from.frequency() != 0) {
    _internal_set_frequency(from._internal_frequency());
  }
  if (!(from.period() <= 0 && from.period() >= 0)) {
    _internal_set_period(from._internal_period());
  }
}

void Repeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Repeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Repeat::CopyFrom(const Repeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Repeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Repeat::IsInitialized() const {
  return true;
}

void Repeat::InternalSwap(Repeat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  periodunit_.Swap(&other->periodunit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(frequency_, other->frequency_);
  swap(period_, other->period_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Repeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Timing::InitAsDefaultInstance() {
  ::patient::_Timing_default_instance_._instance.get_mutable()->repeat_ = const_cast< ::patient::Repeat*>(
      ::patient::Repeat::internal_default_instance());
}
class Timing::_Internal {
 public:
  static const ::patient::Repeat& repeat(const Timing* msg);
};

const ::patient::Repeat&
Timing::_Internal::repeat(const Timing* msg) {
  return *msg->repeat_;
}
Timing::Timing()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Timing)
}
Timing::Timing(const Timing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_repeat()) {
    repeat_ = new ::patient::Repeat(*from.repeat_);
  } else {
    repeat_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.Timing)
}

void Timing::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Timing_customized_2eproto.base);
  repeat_ = nullptr;
}

Timing::~Timing() {
  // @@protoc_insertion_point(destructor:patient.Timing)
  SharedDtor();
}

void Timing::SharedDtor() {
  if (this != internal_default_instance()) delete repeat_;
}

void Timing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Timing& Timing::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Timing_customized_2eproto.base);
  return *internal_default_instance();
}


void Timing::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Timing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && repeat_ != nullptr) {
    delete repeat_;
  }
  repeat_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Timing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Repeat repeat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_repeat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Timing::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Timing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Repeat repeat = 1;
  if (this->has_repeat()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::repeat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Timing)
  return target;
}

size_t Timing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Timing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .patient.Repeat repeat = 1;
  if (this->has_repeat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *repeat_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Timing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Timing)
  GOOGLE_DCHECK_NE(&from, this);
  const Timing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Timing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Timing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Timing)
    MergeFrom(*source);
  }
}

void Timing::MergeFrom(const Timing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Timing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_repeat()) {
    _internal_mutable_repeat()->::patient::Repeat::MergeFrom(from._internal_repeat());
  }
}

void Timing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Timing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timing::CopyFrom(const Timing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Timing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timing::IsInitialized() const {
  return true;
}

void Timing::InternalSwap(Timing* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(repeat_, other->repeat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Timing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DoseAndRate::InitAsDefaultInstance() {
  ::patient::_DoseAndRate_default_instance_._instance.get_mutable()->type_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_DoseAndRate_default_instance_._instance.get_mutable()->dosequantity_ = const_cast< ::patient::Quantity*>(
      ::patient::Quantity::internal_default_instance());
}
class DoseAndRate::_Internal {
 public:
  static const ::patient::Category& type(const DoseAndRate* msg);
  static const ::patient::Quantity& dosequantity(const DoseAndRate* msg);
};

const ::patient::Category&
DoseAndRate::_Internal::type(const DoseAndRate* msg) {
  return *msg->type_;
}
const ::patient::Quantity&
DoseAndRate::_Internal::dosequantity(const DoseAndRate* msg) {
  return *msg->dosequantity_;
}
DoseAndRate::DoseAndRate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.DoseAndRate)
}
DoseAndRate::DoseAndRate(const DoseAndRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_type()) {
    type_ = new ::patient::Category(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from._internal_has_dosequantity()) {
    dosequantity_ = new ::patient::Quantity(*from.dosequantity_);
  } else {
    dosequantity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.DoseAndRate)
}

void DoseAndRate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoseAndRate_customized_2eproto.base);
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dosequantity_) -
      reinterpret_cast<char*>(&type_)) + sizeof(dosequantity_));
}

DoseAndRate::~DoseAndRate() {
  // @@protoc_insertion_point(destructor:patient.DoseAndRate)
  SharedDtor();
}

void DoseAndRate::SharedDtor() {
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete dosequantity_;
}

void DoseAndRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoseAndRate& DoseAndRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoseAndRate_customized_2eproto.base);
  return *internal_default_instance();
}


void DoseAndRate::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.DoseAndRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dosequantity_ != nullptr) {
    delete dosequantity_;
  }
  dosequantity_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DoseAndRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Category type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Quantity doseQuantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dosequantity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoseAndRate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.DoseAndRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Category type = 1;
  if (this->has_type()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::type(this), target, stream);
  }

  // .patient.Quantity doseQuantity = 2;
  if (this->has_dosequantity()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::dosequantity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.DoseAndRate)
  return target;
}

size_t DoseAndRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.DoseAndRate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .patient.Category type = 1;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // .patient.Quantity doseQuantity = 2;
  if (this->has_dosequantity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dosequantity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoseAndRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.DoseAndRate)
  GOOGLE_DCHECK_NE(&from, this);
  const DoseAndRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoseAndRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.DoseAndRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.DoseAndRate)
    MergeFrom(*source);
  }
}

void DoseAndRate::MergeFrom(const DoseAndRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.DoseAndRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    _internal_mutable_type()->::patient::Category::MergeFrom(from._internal_type());
  }
  if (from.has_dosequantity()) {
    _internal_mutable_dosequantity()->::patient::Quantity::MergeFrom(from._internal_dosequantity());
  }
}

void DoseAndRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.DoseAndRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoseAndRate::CopyFrom(const DoseAndRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.DoseAndRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoseAndRate::IsInitialized() const {
  return true;
}

void DoseAndRate::InternalSwap(DoseAndRate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(dosequantity_, other->dosequantity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoseAndRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Onset::InitAsDefaultInstance() {
  ::patient::_Onset_default_instance_._instance.get_mutable()->onsetperiod_ = const_cast< ::patient::Period*>(
      ::patient::Period::internal_default_instance());
}
class Onset::_Internal {
 public:
  static const ::patient::Period& onsetperiod(const Onset* msg);
};

const ::patient::Period&
Onset::_Internal::onsetperiod(const Onset* msg) {
  return *msg->onsetperiod_;
}
Onset::Onset()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Onset)
}
Onset::Onset(const Onset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  onsetdatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_onsetdatetime().empty()) {
    onsetdatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.onsetdatetime_);
  }
  onsetstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_onsetstring().empty()) {
    onsetstring_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.onsetstring_);
  }
  if (from._internal_has_onsetperiod()) {
    onsetperiod_ = new ::patient::Period(*from.onsetperiod_);
  } else {
    onsetperiod_ = nullptr;
  }
  onsetage_ = from.onsetage_;
  // @@protoc_insertion_point(copy_constructor:patient.Onset)
}

void Onset::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Onset_customized_2eproto.base);
  onsetdatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  onsetstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&onsetperiod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&onsetage_) -
      reinterpret_cast<char*>(&onsetperiod_)) + sizeof(onsetage_));
}

Onset::~Onset() {
  // @@protoc_insertion_point(destructor:patient.Onset)
  SharedDtor();
}

void Onset::SharedDtor() {
  onsetdatetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  onsetstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete onsetperiod_;
}

void Onset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Onset& Onset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Onset_customized_2eproto.base);
  return *internal_default_instance();
}


void Onset::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Onset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  onsetdatetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  onsetstring_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && onsetperiod_ != nullptr) {
    delete onsetperiod_;
  }
  onsetperiod_ = nullptr;
  onsetage_ = 0;
  _internal_metadata_.Clear();
}

const char* Onset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string onsetDateTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_onsetdatetime(), ptr, ctx, "patient.Onset.onsetDateTime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 onsetAge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          onsetage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Period onsetPeriod = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_onsetperiod(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string onsetString = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_onsetstring(), ptr, ctx, "patient.Onset.onsetString");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Onset::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Onset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string onsetDateTime = 1;
  if (this->onsetdatetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_onsetdatetime().data(), static_cast<int>(this->_internal_onsetdatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Onset.onsetDateTime");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_onsetdatetime(), target);
  }

  // int32 onsetAge = 2;
  if (this->onsetage() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_onsetage(), target);
  }

  // .patient.Period onsetPeriod = 3;
  if (this->has_onsetperiod()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::onsetperiod(this), target, stream);
  }

  // string onsetString = 4;
  if (this->onsetstring().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_onsetstring().data(), static_cast<int>(this->_internal_onsetstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Onset.onsetString");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_onsetstring(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Onset)
  return target;
}

size_t Onset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Onset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string onsetDateTime = 1;
  if (this->onsetdatetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_onsetdatetime());
  }

  // string onsetString = 4;
  if (this->onsetstring().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_onsetstring());
  }

  // .patient.Period onsetPeriod = 3;
  if (this->has_onsetperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *onsetperiod_);
  }

  // int32 onsetAge = 2;
  if (this->onsetage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_onsetage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Onset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Onset)
  GOOGLE_DCHECK_NE(&from, this);
  const Onset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Onset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Onset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Onset)
    MergeFrom(*source);
  }
}

void Onset::MergeFrom(const Onset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Onset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.onsetdatetime().size() > 0) {

    onsetdatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.onsetdatetime_);
  }
  if (from.onsetstring().size() > 0) {

    onsetstring_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.onsetstring_);
  }
  if (from.has_onsetperiod()) {
    _internal_mutable_onsetperiod()->::patient::Period::MergeFrom(from._internal_onsetperiod());
  }
  if (from.onsetage() != 0) {
    _internal_set_onsetage(from._internal_onsetage());
  }
}

void Onset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Onset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Onset::CopyFrom(const Onset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Onset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Onset::IsInitialized() const {
  return true;
}

void Onset::InternalSwap(Onset* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  onsetdatetime_.Swap(&other->onsetdatetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  onsetstring_.Swap(&other->onsetstring_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(onsetperiod_, other->onsetperiod_);
  swap(onsetage_, other->onsetage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Onset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Reaction::InitAsDefaultInstance() {
  ::patient::_Reaction_default_instance_._instance.get_mutable()->substance_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_Reaction_default_instance_._instance.get_mutable()->manifestation_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_Reaction_default_instance_._instance.get_mutable()->severity_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_Reaction_default_instance_._instance.get_mutable()->exposureroute_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
}
class Reaction::_Internal {
 public:
  static const ::patient::Category& substance(const Reaction* msg);
  static const ::patient::Category& manifestation(const Reaction* msg);
  static const ::patient::Category& severity(const Reaction* msg);
  static const ::patient::Category& exposureroute(const Reaction* msg);
};

const ::patient::Category&
Reaction::_Internal::substance(const Reaction* msg) {
  return *msg->substance_;
}
const ::patient::Category&
Reaction::_Internal::manifestation(const Reaction* msg) {
  return *msg->manifestation_;
}
const ::patient::Category&
Reaction::_Internal::severity(const Reaction* msg) {
  return *msg->severity_;
}
const ::patient::Category&
Reaction::_Internal::exposureroute(const Reaction* msg) {
  return *msg->exposureroute_;
}
Reaction::Reaction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Reaction)
}
Reaction::Reaction(const Reaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  onset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_onset().empty()) {
    onset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.onset_);
  }
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_note().empty()) {
    note_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.note_);
  }
  if (from._internal_has_substance()) {
    substance_ = new ::patient::Category(*from.substance_);
  } else {
    substance_ = nullptr;
  }
  if (from._internal_has_manifestation()) {
    manifestation_ = new ::patient::Category(*from.manifestation_);
  } else {
    manifestation_ = nullptr;
  }
  if (from._internal_has_severity()) {
    severity_ = new ::patient::Category(*from.severity_);
  } else {
    severity_ = nullptr;
  }
  if (from._internal_has_exposureroute()) {
    exposureroute_ = new ::patient::Category(*from.exposureroute_);
  } else {
    exposureroute_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.Reaction)
}

void Reaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Reaction_customized_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  onset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&substance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exposureroute_) -
      reinterpret_cast<char*>(&substance_)) + sizeof(exposureroute_));
}

Reaction::~Reaction() {
  // @@protoc_insertion_point(destructor:patient.Reaction)
  SharedDtor();
}

void Reaction::SharedDtor() {
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  onset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete substance_;
  if (this != internal_default_instance()) delete manifestation_;
  if (this != internal_default_instance()) delete severity_;
  if (this != internal_default_instance()) delete exposureroute_;
}

void Reaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Reaction& Reaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Reaction_customized_2eproto.base);
  return *internal_default_instance();
}


void Reaction::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Reaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  onset_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && substance_ != nullptr) {
    delete substance_;
  }
  substance_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && manifestation_ != nullptr) {
    delete manifestation_;
  }
  manifestation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && severity_ != nullptr) {
    delete severity_;
  }
  severity_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && exposureroute_ != nullptr) {
    delete exposureroute_;
  }
  exposureroute_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Reaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Category substance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_substance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category manifestation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_manifestation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_description(), ptr, ctx, "patient.Reaction.description");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string onset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_onset(), ptr, ctx, "patient.Reaction.onset");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category severity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_severity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category exposureRoute = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_exposureroute(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string note = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_note(), ptr, ctx, "patient.Reaction.note");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Reaction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Reaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Category substance = 1;
  if (this->has_substance()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::substance(this), target, stream);
  }

  // .patient.Category manifestation = 2;
  if (this->has_manifestation()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::manifestation(this), target, stream);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Reaction.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // string onset = 4;
  if (this->onset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_onset().data(), static_cast<int>(this->_internal_onset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Reaction.onset");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_onset(), target);
  }

  // .patient.Category severity = 5;
  if (this->has_severity()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::severity(this), target, stream);
  }

  // .patient.Category exposureRoute = 6;
  if (this->has_exposureroute()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::exposureroute(this), target, stream);
  }

  // string note = 7;
  if (this->note().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_note().data(), static_cast<int>(this->_internal_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Reaction.note");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_note(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Reaction)
  return target;
}

size_t Reaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Reaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string onset = 4;
  if (this->onset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_onset());
  }

  // string note = 7;
  if (this->note().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_note());
  }

  // .patient.Category substance = 1;
  if (this->has_substance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *substance_);
  }

  // .patient.Category manifestation = 2;
  if (this->has_manifestation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *manifestation_);
  }

  // .patient.Category severity = 5;
  if (this->has_severity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *severity_);
  }

  // .patient.Category exposureRoute = 6;
  if (this->has_exposureroute()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exposureroute_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Reaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Reaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Reaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Reaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Reaction)
    MergeFrom(*source);
  }
}

void Reaction::MergeFrom(const Reaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Reaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.onset().size() > 0) {

    onset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.onset_);
  }
  if (from.note().size() > 0) {

    note_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.note_);
  }
  if (from.has_substance()) {
    _internal_mutable_substance()->::patient::Category::MergeFrom(from._internal_substance());
  }
  if (from.has_manifestation()) {
    _internal_mutable_manifestation()->::patient::Category::MergeFrom(from._internal_manifestation());
  }
  if (from.has_severity()) {
    _internal_mutable_severity()->::patient::Category::MergeFrom(from._internal_severity());
  }
  if (from.has_exposureroute()) {
    _internal_mutable_exposureroute()->::patient::Category::MergeFrom(from._internal_exposureroute());
  }
}

void Reaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Reaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reaction::CopyFrom(const Reaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Reaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reaction::IsInitialized() const {
  return true;
}

void Reaction::InternalSwap(Reaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  onset_.Swap(&other->onset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  note_.Swap(&other->note_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(substance_, other->substance_);
  swap(manifestation_, other->manifestation_);
  swap(severity_, other->severity_);
  swap(exposureroute_, other->exposureroute_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Reaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Instance::InitAsDefaultInstance() {
  ::patient::_Instance_default_instance_._instance.get_mutable()->sopclass_ = const_cast< ::patient::Coding*>(
      ::patient::Coding::internal_default_instance());
}
class Instance::_Internal {
 public:
  static const ::patient::Coding& sopclass(const Instance* msg);
};

const ::patient::Coding&
Instance::_Internal::sopclass(const Instance* msg) {
  return *msg->sopclass_;
}
Instance::Instance()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Instance)
}
Instance::Instance(const Instance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uid().empty()) {
    uid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from._internal_has_sopclass()) {
    sopclass_ = new ::patient::Coding(*from.sopclass_);
  } else {
    sopclass_ = nullptr;
  }
  number_ = from.number_;
  // @@protoc_insertion_point(copy_constructor:patient.Instance)
}

void Instance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Instance_customized_2eproto.base);
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sopclass_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&sopclass_)) + sizeof(number_));
}

Instance::~Instance() {
  // @@protoc_insertion_point(destructor:patient.Instance)
  SharedDtor();
}

void Instance::SharedDtor() {
  uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sopclass_;
}

void Instance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Instance& Instance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Instance_customized_2eproto.base);
  return *internal_default_instance();
}


void Instance::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Instance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && sopclass_ != nullptr) {
    delete sopclass_;
  }
  sopclass_ = nullptr;
  number_ = 0;
  _internal_metadata_.Clear();
}

const char* Instance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_uid(), ptr, ctx, "patient.Instance.uid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Coding sopClass = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sopclass(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_title(), ptr, ctx, "patient.Instance.title");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Instance::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Instance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (this->uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Instance.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // .patient.Coding sopClass = 2;
  if (this->has_sopclass()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::sopclass(this), target, stream);
  }

  // int32 number = 3;
  if (this->number() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_number(), target);
  }

  // string title = 4;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Instance.title");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Instance)
  return target;
}

size_t Instance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Instance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string title = 4;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // .patient.Coding sopClass = 2;
  if (this->has_sopclass()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sopclass_);
  }

  // int32 number = 3;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Instance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Instance)
  GOOGLE_DCHECK_NE(&from, this);
  const Instance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Instance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Instance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Instance)
    MergeFrom(*source);
  }
}

void Instance::MergeFrom(const Instance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Instance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.has_sopclass()) {
    _internal_mutable_sopclass()->::patient::Coding::MergeFrom(from._internal_sopclass());
  }
  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
}

void Instance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Instance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Instance::CopyFrom(const Instance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Instance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instance::IsInitialized() const {
  return true;
}

void Instance::InternalSwap(Instance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uid_.Swap(&other->uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sopclass_, other->sopclass_);
  swap(number_, other->number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Instance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Series::InitAsDefaultInstance() {
  ::patient::_Series_default_instance_._instance.get_mutable()->modality_ = const_cast< ::patient::Coding*>(
      ::patient::Coding::internal_default_instance());
  ::patient::_Series_default_instance_._instance.get_mutable()->bodysite_ = const_cast< ::patient::Coding*>(
      ::patient::Coding::internal_default_instance());
}
class Series::_Internal {
 public:
  static const ::patient::Coding& modality(const Series* msg);
  static const ::patient::Coding& bodysite(const Series* msg);
};

const ::patient::Coding&
Series::_Internal::modality(const Series* msg) {
  return *msg->modality_;
}
const ::patient::Coding&
Series::_Internal::bodysite(const Series* msg) {
  return *msg->bodysite_;
}
Series::Series()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Series)
}
Series::Series(const Series& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      instance_(from.instance_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uid().empty()) {
    uid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  started_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_started().empty()) {
    started_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.started_);
  }
  if (from._internal_has_modality()) {
    modality_ = new ::patient::Coding(*from.modality_);
  } else {
    modality_ = nullptr;
  }
  if (from._internal_has_bodysite()) {
    bodysite_ = new ::patient::Coding(*from.bodysite_);
  } else {
    bodysite_ = nullptr;
  }
  ::memcpy(&number_, &from.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&numberofinstances_) -
    reinterpret_cast<char*>(&number_)) + sizeof(numberofinstances_));
  // @@protoc_insertion_point(copy_constructor:patient.Series)
}

void Series::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Series_customized_2eproto.base);
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  started_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&modality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numberofinstances_) -
      reinterpret_cast<char*>(&modality_)) + sizeof(numberofinstances_));
}

Series::~Series() {
  // @@protoc_insertion_point(destructor:patient.Series)
  SharedDtor();
}

void Series::SharedDtor() {
  uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  started_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete modality_;
  if (this != internal_default_instance()) delete bodysite_;
}

void Series::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Series& Series::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Series_customized_2eproto.base);
  return *internal_default_instance();
}


void Series::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Series)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_.Clear();
  uid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  started_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && modality_ != nullptr) {
    delete modality_;
  }
  modality_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bodysite_ != nullptr) {
    delete bodysite_;
  }
  bodysite_ = nullptr;
  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numberofinstances_) -
      reinterpret_cast<char*>(&number_)) + sizeof(numberofinstances_));
  _internal_metadata_.Clear();
}

const char* Series::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_uid(), ptr, ctx, "patient.Series.uid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Coding modality = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_modality(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 numberOfInstances = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          numberofinstances_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Coding bodySite = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bodysite(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string started = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_started(), ptr, ctx, "patient.Series.started");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Instance instance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instance(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Series::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Series)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (this->uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Series.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // int32 number = 2;
  if (this->number() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_number(), target);
  }

  // .patient.Coding modality = 3;
  if (this->has_modality()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::modality(this), target, stream);
  }

  // int32 numberOfInstances = 4;
  if (this->numberofinstances() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_numberofinstances(), target);
  }

  // .patient.Coding bodySite = 5;
  if (this->has_bodysite()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::bodysite(this), target, stream);
  }

  // string started = 6;
  if (this->started().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_started().data(), static_cast<int>(this->_internal_started().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Series.started");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_started(), target);
  }

  // repeated .patient.Instance instance = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instance_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(7, this->_internal_instance(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Series)
  return target;
}

size_t Series::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Series)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Instance instance = 7;
  total_size += 1UL * this->_internal_instance_size();
  for (const auto& msg : this->instance_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string uid = 1;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string started = 6;
  if (this->started().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_started());
  }

  // .patient.Coding modality = 3;
  if (this->has_modality()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modality_);
  }

  // .patient.Coding bodySite = 5;
  if (this->has_bodysite()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bodysite_);
  }

  // int32 number = 2;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number());
  }

  // int32 numberOfInstances = 4;
  if (this->numberofinstances() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_numberofinstances());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Series::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Series)
  GOOGLE_DCHECK_NE(&from, this);
  const Series* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Series>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Series)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Series)
    MergeFrom(*source);
  }
}

void Series::MergeFrom(const Series& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Series)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instance_.MergeFrom(from.instance_);
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.started().size() > 0) {

    started_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.started_);
  }
  if (from.has_modality()) {
    _internal_mutable_modality()->::patient::Coding::MergeFrom(from._internal_modality());
  }
  if (from.has_bodysite()) {
    _internal_mutable_bodysite()->::patient::Coding::MergeFrom(from._internal_bodysite());
  }
  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
  if (from.numberofinstances() != 0) {
    _internal_set_numberofinstances(from._internal_numberofinstances());
  }
}

void Series::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Series)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Series::CopyFrom(const Series& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Series)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Series::IsInitialized() const {
  return true;
}

void Series::InternalSwap(Series* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  instance_.InternalSwap(&other->instance_);
  uid_.Swap(&other->uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  started_.Swap(&other->started_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(modality_, other->modality_);
  swap(bodysite_, other->bodysite_);
  swap(number_, other->number_);
  swap(numberofinstances_, other->numberofinstances_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Series::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Hospitalization::InitAsDefaultInstance() {
  ::patient::_Hospitalization_default_instance_._instance.get_mutable()->dischargedisposition_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
}
class Hospitalization::_Internal {
 public:
  static const ::patient::Category& dischargedisposition(const Hospitalization* msg);
};

const ::patient::Category&
Hospitalization::_Internal::dischargedisposition(const Hospitalization* msg) {
  return *msg->dischargedisposition_;
}
Hospitalization::Hospitalization()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Hospitalization)
}
Hospitalization::Hospitalization(const Hospitalization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_dischargedisposition()) {
    dischargedisposition_ = new ::patient::Category(*from.dischargedisposition_);
  } else {
    dischargedisposition_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.Hospitalization)
}

void Hospitalization::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Hospitalization_customized_2eproto.base);
  dischargedisposition_ = nullptr;
}

Hospitalization::~Hospitalization() {
  // @@protoc_insertion_point(destructor:patient.Hospitalization)
  SharedDtor();
}

void Hospitalization::SharedDtor() {
  if (this != internal_default_instance()) delete dischargedisposition_;
}

void Hospitalization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hospitalization& Hospitalization::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Hospitalization_customized_2eproto.base);
  return *internal_default_instance();
}


void Hospitalization::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Hospitalization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && dischargedisposition_ != nullptr) {
    delete dischargedisposition_;
  }
  dischargedisposition_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Hospitalization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Category dischargeDisposition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dischargedisposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hospitalization::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Hospitalization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Category dischargeDisposition = 1;
  if (this->has_dischargedisposition()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::dischargedisposition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Hospitalization)
  return target;
}

size_t Hospitalization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Hospitalization)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .patient.Category dischargeDisposition = 1;
  if (this->has_dischargedisposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dischargedisposition_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hospitalization::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Hospitalization)
  GOOGLE_DCHECK_NE(&from, this);
  const Hospitalization* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hospitalization>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Hospitalization)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Hospitalization)
    MergeFrom(*source);
  }
}

void Hospitalization::MergeFrom(const Hospitalization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Hospitalization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dischargedisposition()) {
    _internal_mutable_dischargedisposition()->::patient::Category::MergeFrom(from._internal_dischargedisposition());
  }
}

void Hospitalization::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Hospitalization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hospitalization::CopyFrom(const Hospitalization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Hospitalization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hospitalization::IsInitialized() const {
  return true;
}

void Hospitalization::InternalSwap(Hospitalization* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dischargedisposition_, other->dischargedisposition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hospitalization::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Carrier::InitAsDefaultInstance() {
}
class Carrier::_Internal {
 public:
};

Carrier::Carrier()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Carrier)
}
Carrier::Carrier(const Carrier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceidentifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceidentifier().empty()) {
    deviceidentifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceidentifier_);
  }
  carrierhrf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_carrierhrf().empty()) {
    carrierhrf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.carrierhrf_);
  }
  // @@protoc_insertion_point(copy_constructor:patient.Carrier)
}

void Carrier::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Carrier_customized_2eproto.base);
  deviceidentifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  carrierhrf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Carrier::~Carrier() {
  // @@protoc_insertion_point(destructor:patient.Carrier)
  SharedDtor();
}

void Carrier::SharedDtor() {
  deviceidentifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  carrierhrf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Carrier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Carrier& Carrier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Carrier_customized_2eproto.base);
  return *internal_default_instance();
}


void Carrier::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Carrier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceidentifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  carrierhrf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Carrier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string deviceIdentifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_deviceidentifier(), ptr, ctx, "patient.Carrier.deviceIdentifier");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string carrierHRF = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_carrierhrf(), ptr, ctx, "patient.Carrier.carrierHRF");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Carrier::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Carrier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceIdentifier = 1;
  if (this->deviceidentifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceidentifier().data(), static_cast<int>(this->_internal_deviceidentifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Carrier.deviceIdentifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deviceidentifier(), target);
  }

  // string carrierHRF = 2;
  if (this->carrierhrf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_carrierhrf().data(), static_cast<int>(this->_internal_carrierhrf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Carrier.carrierHRF");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_carrierhrf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Carrier)
  return target;
}

size_t Carrier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Carrier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceIdentifier = 1;
  if (this->deviceidentifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceidentifier());
  }

  // string carrierHRF = 2;
  if (this->carrierhrf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_carrierhrf());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Carrier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Carrier)
  GOOGLE_DCHECK_NE(&from, this);
  const Carrier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Carrier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Carrier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Carrier)
    MergeFrom(*source);
  }
}

void Carrier::MergeFrom(const Carrier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Carrier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deviceidentifier().size() > 0) {

    deviceidentifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceidentifier_);
  }
  if (from.carrierhrf().size() > 0) {

    carrierhrf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.carrierhrf_);
  }
}

void Carrier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Carrier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Carrier::CopyFrom(const Carrier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Carrier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Carrier::IsInitialized() const {
  return true;
}

void Carrier::InternalSwap(Carrier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  deviceidentifier_.Swap(&other->deviceidentifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  carrierhrf_.Swap(&other->carrierhrf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Carrier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceName::InitAsDefaultInstance() {
}
class DeviceName::_Internal {
 public:
};

DeviceName::DeviceName()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.DeviceName)
}
DeviceName::DeviceName(const DeviceName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  // @@protoc_insertion_point(copy_constructor:patient.DeviceName)
}

void DeviceName::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceName_customized_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceName::~DeviceName() {
  // @@protoc_insertion_point(destructor:patient.DeviceName)
  SharedDtor();
}

void DeviceName::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceName& DeviceName::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceName_customized_2eproto.base);
  return *internal_default_instance();
}


void DeviceName::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.DeviceName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DeviceName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "patient.DeviceName.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_type(), ptr, ctx, "patient.DeviceName.type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceName::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.DeviceName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.DeviceName.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.DeviceName.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.DeviceName)
  return target;
}

size_t DeviceName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.DeviceName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.DeviceName)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.DeviceName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.DeviceName)
    MergeFrom(*source);
  }
}

void DeviceName::MergeFrom(const DeviceName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.DeviceName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
}

void DeviceName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.DeviceName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceName::CopyFrom(const DeviceName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.DeviceName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceName::IsInitialized() const {
  return true;
}

void DeviceName::InternalSwap(DeviceName* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceName::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AllergyIntoleranceObject::InitAsDefaultInstance() {
  ::patient::_AllergyIntoleranceObject_default_instance_._instance.get_mutable()->identifier_ = const_cast< ::patient::Identifier*>(
      ::patient::Identifier::internal_default_instance());
  ::patient::_AllergyIntoleranceObject_default_instance_._instance.get_mutable()->clinicalstatus_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_AllergyIntoleranceObject_default_instance_._instance.get_mutable()->verificationstatus_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_AllergyIntoleranceObject_default_instance_._instance.get_mutable()->code_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_AllergyIntoleranceObject_default_instance_._instance.get_mutable()->patient_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_AllergyIntoleranceObject_default_instance_._instance.get_mutable()->encounter_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_AllergyIntoleranceObject_default_instance_._instance.get_mutable()->onset_ = const_cast< ::patient::Onset*>(
      ::patient::Onset::internal_default_instance());
  ::patient::_AllergyIntoleranceObject_default_instance_._instance.get_mutable()->recorder_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_AllergyIntoleranceObject_default_instance_._instance.get_mutable()->asserter_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_AllergyIntoleranceObject_default_instance_._instance.get_mutable()->reaction_ = const_cast< ::patient::Reaction*>(
      ::patient::Reaction::internal_default_instance());
}
class AllergyIntoleranceObject::_Internal {
 public:
  static const ::patient::Identifier& identifier(const AllergyIntoleranceObject* msg);
  static const ::patient::Category& clinicalstatus(const AllergyIntoleranceObject* msg);
  static const ::patient::Category& verificationstatus(const AllergyIntoleranceObject* msg);
  static const ::patient::Category& code(const AllergyIntoleranceObject* msg);
  static const ::patient::Reference& patient(const AllergyIntoleranceObject* msg);
  static const ::patient::Reference& encounter(const AllergyIntoleranceObject* msg);
  static const ::patient::Onset& onset(const AllergyIntoleranceObject* msg);
  static const ::patient::Reference& recorder(const AllergyIntoleranceObject* msg);
  static const ::patient::Reference& asserter(const AllergyIntoleranceObject* msg);
  static const ::patient::Reaction& reaction(const AllergyIntoleranceObject* msg);
};

const ::patient::Identifier&
AllergyIntoleranceObject::_Internal::identifier(const AllergyIntoleranceObject* msg) {
  return *msg->identifier_;
}
const ::patient::Category&
AllergyIntoleranceObject::_Internal::clinicalstatus(const AllergyIntoleranceObject* msg) {
  return *msg->clinicalstatus_;
}
const ::patient::Category&
AllergyIntoleranceObject::_Internal::verificationstatus(const AllergyIntoleranceObject* msg) {
  return *msg->verificationstatus_;
}
const ::patient::Category&
AllergyIntoleranceObject::_Internal::code(const AllergyIntoleranceObject* msg) {
  return *msg->code_;
}
const ::patient::Reference&
AllergyIntoleranceObject::_Internal::patient(const AllergyIntoleranceObject* msg) {
  return *msg->patient_;
}
const ::patient::Reference&
AllergyIntoleranceObject::_Internal::encounter(const AllergyIntoleranceObject* msg) {
  return *msg->encounter_;
}
const ::patient::Onset&
AllergyIntoleranceObject::_Internal::onset(const AllergyIntoleranceObject* msg) {
  return *msg->onset_;
}
const ::patient::Reference&
AllergyIntoleranceObject::_Internal::recorder(const AllergyIntoleranceObject* msg) {
  return *msg->recorder_;
}
const ::patient::Reference&
AllergyIntoleranceObject::_Internal::asserter(const AllergyIntoleranceObject* msg) {
  return *msg->asserter_;
}
const ::patient::Reaction&
AllergyIntoleranceObject::_Internal::reaction(const AllergyIntoleranceObject* msg) {
  return *msg->reaction_;
}
AllergyIntoleranceObject::AllergyIntoleranceObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.AllergyIntoleranceObject)
}
AllergyIntoleranceObject::AllergyIntoleranceObject(const AllergyIntoleranceObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      category_(from.category_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  criticality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_criticality().empty()) {
    criticality_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.criticality_);
  }
  recordeddate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordeddate().empty()) {
    recordeddate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recordeddate_);
  }
  lastoccurrence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lastoccurrence().empty()) {
    lastoccurrence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lastoccurrence_);
  }
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_note().empty()) {
    note_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.note_);
  }
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_identifier()) {
    identifier_ = new ::patient::Identifier(*from.identifier_);
  } else {
    identifier_ = nullptr;
  }
  if (from._internal_has_clinicalstatus()) {
    clinicalstatus_ = new ::patient::Category(*from.clinicalstatus_);
  } else {
    clinicalstatus_ = nullptr;
  }
  if (from._internal_has_verificationstatus()) {
    verificationstatus_ = new ::patient::Category(*from.verificationstatus_);
  } else {
    verificationstatus_ = nullptr;
  }
  if (from._internal_has_code()) {
    code_ = new ::patient::Category(*from.code_);
  } else {
    code_ = nullptr;
  }
  if (from._internal_has_patient()) {
    patient_ = new ::patient::Reference(*from.patient_);
  } else {
    patient_ = nullptr;
  }
  if (from._internal_has_encounter()) {
    encounter_ = new ::patient::Reference(*from.encounter_);
  } else {
    encounter_ = nullptr;
  }
  if (from._internal_has_onset()) {
    onset_ = new ::patient::Onset(*from.onset_);
  } else {
    onset_ = nullptr;
  }
  if (from._internal_has_recorder()) {
    recorder_ = new ::patient::Reference(*from.recorder_);
  } else {
    recorder_ = nullptr;
  }
  if (from._internal_has_asserter()) {
    asserter_ = new ::patient::Reference(*from.asserter_);
  } else {
    asserter_ = nullptr;
  }
  if (from._internal_has_reaction()) {
    reaction_ = new ::patient::Reaction(*from.reaction_);
  } else {
    reaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.AllergyIntoleranceObject)
}

void AllergyIntoleranceObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllergyIntoleranceObject_customized_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  criticality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recordeddate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lastoccurrence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reaction_) -
      reinterpret_cast<char*>(&identifier_)) + sizeof(reaction_));
}

AllergyIntoleranceObject::~AllergyIntoleranceObject() {
  // @@protoc_insertion_point(destructor:patient.AllergyIntoleranceObject)
  SharedDtor();
}

void AllergyIntoleranceObject::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  criticality_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recordeddate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lastoccurrence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete identifier_;
  if (this != internal_default_instance()) delete clinicalstatus_;
  if (this != internal_default_instance()) delete verificationstatus_;
  if (this != internal_default_instance()) delete code_;
  if (this != internal_default_instance()) delete patient_;
  if (this != internal_default_instance()) delete encounter_;
  if (this != internal_default_instance()) delete onset_;
  if (this != internal_default_instance()) delete recorder_;
  if (this != internal_default_instance()) delete asserter_;
  if (this != internal_default_instance()) delete reaction_;
}

void AllergyIntoleranceObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllergyIntoleranceObject& AllergyIntoleranceObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllergyIntoleranceObject_customized_2eproto.base);
  return *internal_default_instance();
}


void AllergyIntoleranceObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.AllergyIntoleranceObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  category_.Clear();
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  criticality_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recordeddate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lastoccurrence_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && identifier_ != nullptr) {
    delete identifier_;
  }
  identifier_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && clinicalstatus_ != nullptr) {
    delete clinicalstatus_;
  }
  clinicalstatus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && verificationstatus_ != nullptr) {
    delete verificationstatus_;
  }
  verificationstatus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && patient_ != nullptr) {
    delete patient_;
  }
  patient_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && onset_ != nullptr) {
    delete onset_;
  }
  onset_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && recorder_ != nullptr) {
    delete recorder_;
  }
  recorder_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && asserter_ != nullptr) {
    delete asserter_;
  }
  asserter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && reaction_ != nullptr) {
    delete reaction_;
  }
  reaction_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AllergyIntoleranceObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Identifier identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category clinicalStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_clinicalstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category verificationStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_verificationstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_type(), ptr, ctx, "patient.AllergyIntoleranceObject.type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string category = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_category(), ptr, ctx, "patient.AllergyIntoleranceObject.category");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // string criticality = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_criticality(), ptr, ctx, "patient.AllergyIntoleranceObject.criticality");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference patient = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_patient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference encounter = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_encounter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Onset onset = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_onset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordedDate = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_recordeddate(), ptr, ctx, "patient.AllergyIntoleranceObject.recordedDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference recorder = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_recorder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference asserter = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_asserter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lastOccurrence = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_lastoccurrence(), ptr, ctx, "patient.AllergyIntoleranceObject.lastOccurrence");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string note = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_note(), ptr, ctx, "patient.AllergyIntoleranceObject.note");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resourceType = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.AllergyIntoleranceObject.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reaction reaction = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_reaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.AllergyIntoleranceObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllergyIntoleranceObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.AllergyIntoleranceObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Identifier identifier = 1;
  if (this->has_identifier()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::identifier(this), target, stream);
  }

  // .patient.Category clinicalStatus = 2;
  if (this->has_clinicalstatus()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::clinicalstatus(this), target, stream);
  }

  // .patient.Category verificationStatus = 3;
  if (this->has_verificationstatus()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::verificationstatus(this), target, stream);
  }

  // string type = 4;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.AllergyIntoleranceObject.type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_type(), target);
  }

  // repeated string category = 5;
  for (int i = 0, n = this->_internal_category_size(); i < n; i++) {
    const auto& s = this->_internal_category(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.AllergyIntoleranceObject.category");
    target = stream->WriteString(5, s, target);
  }

  // string criticality = 6;
  if (this->criticality().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_criticality().data(), static_cast<int>(this->_internal_criticality().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.AllergyIntoleranceObject.criticality");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_criticality(), target);
  }

  // .patient.Category code = 7;
  if (this->has_code()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::code(this), target, stream);
  }

  // .patient.Reference patient = 8;
  if (this->has_patient()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::patient(this), target, stream);
  }

  // .patient.Reference encounter = 9;
  if (this->has_encounter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::encounter(this), target, stream);
  }

  // .patient.Onset onset = 10;
  if (this->has_onset()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::onset(this), target, stream);
  }

  // string recordedDate = 11;
  if (this->recordeddate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordeddate().data(), static_cast<int>(this->_internal_recordeddate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.AllergyIntoleranceObject.recordedDate");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_recordeddate(), target);
  }

  // .patient.Reference recorder = 12;
  if (this->has_recorder()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::recorder(this), target, stream);
  }

  // .patient.Reference asserter = 13;
  if (this->has_asserter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::asserter(this), target, stream);
  }

  // string lastOccurrence = 14;
  if (this->lastoccurrence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lastoccurrence().data(), static_cast<int>(this->_internal_lastoccurrence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.AllergyIntoleranceObject.lastOccurrence");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_lastoccurrence(), target);
  }

  // string note = 15;
  if (this->note().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_note().data(), static_cast<int>(this->_internal_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.AllergyIntoleranceObject.note");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_note(), target);
  }

  // string resourceType = 16;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.AllergyIntoleranceObject.resourceType");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_resourcetype(), target);
  }

  // .patient.Reaction reaction = 17;
  if (this->has_reaction()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, _Internal::reaction(this), target, stream);
  }

  // string id = 18;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.AllergyIntoleranceObject.id");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.AllergyIntoleranceObject)
  return target;
}

size_t AllergyIntoleranceObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.AllergyIntoleranceObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string category = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(category_.size());
  for (int i = 0, n = category_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      category_.Get(i));
  }

  // string type = 4;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string criticality = 6;
  if (this->criticality().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_criticality());
  }

  // string recordedDate = 11;
  if (this->recordeddate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordeddate());
  }

  // string lastOccurrence = 14;
  if (this->lastoccurrence().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lastoccurrence());
  }

  // string note = 15;
  if (this->note().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_note());
  }

  // string resourceType = 16;
  if (this->resourcetype().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  // string id = 18;
  if (this->id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .patient.Identifier identifier = 1;
  if (this->has_identifier()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identifier_);
  }

  // .patient.Category clinicalStatus = 2;
  if (this->has_clinicalstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clinicalstatus_);
  }

  // .patient.Category verificationStatus = 3;
  if (this->has_verificationstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *verificationstatus_);
  }

  // .patient.Category code = 7;
  if (this->has_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *code_);
  }

  // .patient.Reference patient = 8;
  if (this->has_patient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patient_);
  }

  // .patient.Reference encounter = 9;
  if (this->has_encounter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encounter_);
  }

  // .patient.Onset onset = 10;
  if (this->has_onset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *onset_);
  }

  // .patient.Reference recorder = 12;
  if (this->has_recorder()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recorder_);
  }

  // .patient.Reference asserter = 13;
  if (this->has_asserter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asserter_);
  }

  // .patient.Reaction reaction = 17;
  if (this->has_reaction()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reaction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllergyIntoleranceObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.AllergyIntoleranceObject)
  GOOGLE_DCHECK_NE(&from, this);
  const AllergyIntoleranceObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllergyIntoleranceObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.AllergyIntoleranceObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.AllergyIntoleranceObject)
    MergeFrom(*source);
  }
}

void AllergyIntoleranceObject::MergeFrom(const AllergyIntoleranceObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.AllergyIntoleranceObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  category_.MergeFrom(from.category_);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.criticality().size() > 0) {

    criticality_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.criticality_);
  }
  if (from.recordeddate().size() > 0) {

    recordeddate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recordeddate_);
  }
  if (from.lastoccurrence().size() > 0) {

    lastoccurrence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lastoccurrence_);
  }
  if (from.note().size() > 0) {

    note_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.note_);
  }
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_identifier()) {
    _internal_mutable_identifier()->::patient::Identifier::MergeFrom(from._internal_identifier());
  }
  if (from.has_clinicalstatus()) {
    _internal_mutable_clinicalstatus()->::patient::Category::MergeFrom(from._internal_clinicalstatus());
  }
  if (from.has_verificationstatus()) {
    _internal_mutable_verificationstatus()->::patient::Category::MergeFrom(from._internal_verificationstatus());
  }
  if (from.has_code()) {
    _internal_mutable_code()->::patient::Category::MergeFrom(from._internal_code());
  }
  if (from.has_patient()) {
    _internal_mutable_patient()->::patient::Reference::MergeFrom(from._internal_patient());
  }
  if (from.has_encounter()) {
    _internal_mutable_encounter()->::patient::Reference::MergeFrom(from._internal_encounter());
  }
  if (from.has_onset()) {
    _internal_mutable_onset()->::patient::Onset::MergeFrom(from._internal_onset());
  }
  if (from.has_recorder()) {
    _internal_mutable_recorder()->::patient::Reference::MergeFrom(from._internal_recorder());
  }
  if (from.has_asserter()) {
    _internal_mutable_asserter()->::patient::Reference::MergeFrom(from._internal_asserter());
  }
  if (from.has_reaction()) {
    _internal_mutable_reaction()->::patient::Reaction::MergeFrom(from._internal_reaction());
  }
}

void AllergyIntoleranceObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.AllergyIntoleranceObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllergyIntoleranceObject::CopyFrom(const AllergyIntoleranceObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.AllergyIntoleranceObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllergyIntoleranceObject::IsInitialized() const {
  return true;
}

void AllergyIntoleranceObject::InternalSwap(AllergyIntoleranceObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  category_.InternalSwap(&other->category_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  criticality_.Swap(&other->criticality_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recordeddate_.Swap(&other->recordeddate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lastoccurrence_.Swap(&other->lastoccurrence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  note_.Swap(&other->note_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(identifier_, other->identifier_);
  swap(clinicalstatus_, other->clinicalstatus_);
  swap(verificationstatus_, other->verificationstatus_);
  swap(code_, other->code_);
  swap(patient_, other->patient_);
  swap(encounter_, other->encounter_);
  swap(onset_, other->onset_);
  swap(recorder_, other->recorder_);
  swap(asserter_, other->asserter_);
  swap(reaction_, other->reaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllergyIntoleranceObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CarePlanObject::InitAsDefaultInstance() {
  ::patient::_CarePlanObject_default_instance_._instance.get_mutable()->encounter_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_CarePlanObject_default_instance_._instance.get_mutable()->period_ = const_cast< ::patient::Period*>(
      ::patient::Period::internal_default_instance());
  ::patient::_CarePlanObject_default_instance_._instance.get_mutable()->subject_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_CarePlanObject_default_instance_._instance.get_mutable()->text_ = const_cast< ::patient::Text*>(
      ::patient::Text::internal_default_instance());
}
class CarePlanObject::_Internal {
 public:
  static const ::patient::Reference& encounter(const CarePlanObject* msg);
  static const ::patient::Period& period(const CarePlanObject* msg);
  static const ::patient::Reference& subject(const CarePlanObject* msg);
  static const ::patient::Text& text(const CarePlanObject* msg);
};

const ::patient::Reference&
CarePlanObject::_Internal::encounter(const CarePlanObject* msg) {
  return *msg->encounter_;
}
const ::patient::Period&
CarePlanObject::_Internal::period(const CarePlanObject* msg) {
  return *msg->period_;
}
const ::patient::Reference&
CarePlanObject::_Internal::subject(const CarePlanObject* msg) {
  return *msg->subject_;
}
const ::patient::Text&
CarePlanObject::_Internal::text(const CarePlanObject* msg) {
  return *msg->text_;
}
CarePlanObject::CarePlanObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.CarePlanObject)
}
CarePlanObject::CarePlanObject(const CarePlanObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      activity_(from.activity_),
      addresses_(from.addresses_),
      careteam_(from.careteam_),
      category_(from.category_),
      goal_(from.goal_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  intent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_intent().empty()) {
    intent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.intent_);
  }
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from._internal_has_encounter()) {
    encounter_ = new ::patient::Reference(*from.encounter_);
  } else {
    encounter_ = nullptr;
  }
  if (from._internal_has_period()) {
    period_ = new ::patient::Period(*from.period_);
  } else {
    period_ = nullptr;
  }
  if (from._internal_has_subject()) {
    subject_ = new ::patient::Reference(*from.subject_);
  } else {
    subject_ = nullptr;
  }
  if (from._internal_has_text()) {
    text_ = new ::patient::Text(*from.text_);
  } else {
    text_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.CarePlanObject)
}

void CarePlanObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CarePlanObject_customized_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&encounter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&text_) -
      reinterpret_cast<char*>(&encounter_)) + sizeof(text_));
}

CarePlanObject::~CarePlanObject() {
  // @@protoc_insertion_point(destructor:patient.CarePlanObject)
  SharedDtor();
}

void CarePlanObject::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete encounter_;
  if (this != internal_default_instance()) delete period_;
  if (this != internal_default_instance()) delete subject_;
  if (this != internal_default_instance()) delete text_;
}

void CarePlanObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CarePlanObject& CarePlanObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CarePlanObject_customized_2eproto.base);
  return *internal_default_instance();
}


void CarePlanObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.CarePlanObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activity_.Clear();
  addresses_.Clear();
  careteam_.Clear();
  category_.Clear();
  goal_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && period_ != nullptr) {
    delete period_;
  }
  period_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CarePlanObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .patient.Activity activity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_activity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.Reference addresses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.CareTeam careTeam = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_careteam(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.Category category = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Reference encounter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_encounter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.CarePlanObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string intent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_intent(), ptr, ctx, "patient.CarePlanObject.intent");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Period period = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_period(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resourceType = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.CarePlanObject.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_status(), ptr, ctx, "patient.CarePlanObject.status");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference subject = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Text text = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Reference goal = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_goal(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CarePlanObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.CarePlanObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .patient.Activity activity = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_activity_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_activity(i), target, stream);
  }

  // repeated .patient.Reference addresses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_addresses_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_addresses(i), target, stream);
  }

  // repeated .patient.CareTeam careTeam = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_careteam_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_careteam(i), target, stream);
  }

  // repeated .patient.Category category = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_category_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_category(i), target, stream);
  }

  // .patient.Reference encounter = 5;
  if (this->has_encounter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::encounter(this), target, stream);
  }

  // string id = 6;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.CarePlanObject.id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_id(), target);
  }

  // string intent = 7;
  if (this->intent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_intent().data(), static_cast<int>(this->_internal_intent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.CarePlanObject.intent");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_intent(), target);
  }

  // .patient.Period period = 8;
  if (this->has_period()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::period(this), target, stream);
  }

  // string resourceType = 9;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.CarePlanObject.resourceType");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_resourcetype(), target);
  }

  // string status = 10;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.CarePlanObject.status");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_status(), target);
  }

  // .patient.Reference subject = 11;
  if (this->has_subject()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::subject(this), target, stream);
  }

  // .patient.Text text = 12;
  if (this->has_text()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::text(this), target, stream);
  }

  // repeated .patient.Reference goal = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_goal_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(13, this->_internal_goal(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.CarePlanObject)
  return target;
}

size_t CarePlanObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.CarePlanObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Activity activity = 1;
  total_size += 1UL * this->_internal_activity_size();
  for (const auto& msg : this->activity_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Reference addresses = 2;
  total_size += 1UL * this->_internal_addresses_size();
  for (const auto& msg : this->addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.CareTeam careTeam = 3;
  total_size += 1UL * this->_internal_careteam_size();
  for (const auto& msg : this->careteam_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Category category = 4;
  total_size += 1UL * this->_internal_category_size();
  for (const auto& msg : this->category_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Reference goal = 13;
  total_size += 1UL * this->_internal_goal_size();
  for (const auto& msg : this->goal_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 6;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string intent = 7;
  if (this->intent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_intent());
  }

  // string resourceType = 9;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  // string status = 10;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .patient.Reference encounter = 5;
  if (this->has_encounter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encounter_);
  }

  // .patient.Period period = 8;
  if (this->has_period()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *period_);
  }

  // .patient.Reference subject = 11;
  if (this->has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_);
  }

  // .patient.Text text = 12;
  if (this->has_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CarePlanObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.CarePlanObject)
  GOOGLE_DCHECK_NE(&from, this);
  const CarePlanObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CarePlanObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.CarePlanObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.CarePlanObject)
    MergeFrom(*source);
  }
}

void CarePlanObject::MergeFrom(const CarePlanObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.CarePlanObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activity_.MergeFrom(from.activity_);
  addresses_.MergeFrom(from.addresses_);
  careteam_.MergeFrom(from.careteam_);
  category_.MergeFrom(from.category_);
  goal_.MergeFrom(from.goal_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.intent().size() > 0) {

    intent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.intent_);
  }
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.has_encounter()) {
    _internal_mutable_encounter()->::patient::Reference::MergeFrom(from._internal_encounter());
  }
  if (from.has_period()) {
    _internal_mutable_period()->::patient::Period::MergeFrom(from._internal_period());
  }
  if (from.has_subject()) {
    _internal_mutable_subject()->::patient::Reference::MergeFrom(from._internal_subject());
  }
  if (from.has_text()) {
    _internal_mutable_text()->::patient::Text::MergeFrom(from._internal_text());
  }
}

void CarePlanObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.CarePlanObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarePlanObject::CopyFrom(const CarePlanObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.CarePlanObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarePlanObject::IsInitialized() const {
  return true;
}

void CarePlanObject::InternalSwap(CarePlanObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  activity_.InternalSwap(&other->activity_);
  addresses_.InternalSwap(&other->addresses_);
  careteam_.InternalSwap(&other->careteam_);
  category_.InternalSwap(&other->category_);
  goal_.InternalSwap(&other->goal_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  intent_.Swap(&other->intent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(encounter_, other->encounter_);
  swap(period_, other->period_);
  swap(subject_, other->subject_);
  swap(text_, other->text_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CarePlanObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CareTeamObject::InitAsDefaultInstance() {
  ::patient::_CareTeamObject_default_instance_._instance.get_mutable()->encounter_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_CareTeamObject_default_instance_._instance.get_mutable()->period_ = const_cast< ::patient::Period*>(
      ::patient::Period::internal_default_instance());
  ::patient::_CareTeamObject_default_instance_._instance.get_mutable()->subject_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class CareTeamObject::_Internal {
 public:
  static const ::patient::Reference& encounter(const CareTeamObject* msg);
  static const ::patient::Period& period(const CareTeamObject* msg);
  static const ::patient::Reference& subject(const CareTeamObject* msg);
};

const ::patient::Reference&
CareTeamObject::_Internal::encounter(const CareTeamObject* msg) {
  return *msg->encounter_;
}
const ::patient::Period&
CareTeamObject::_Internal::period(const CareTeamObject* msg) {
  return *msg->period_;
}
const ::patient::Reference&
CareTeamObject::_Internal::subject(const CareTeamObject* msg) {
  return *msg->subject_;
}
CareTeamObject::CareTeamObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.CareTeamObject)
}
CareTeamObject::CareTeamObject(const CareTeamObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      managingorganization_(from.managingorganization_),
      participant_(from.participant_),
      reasoncode_(from.reasoncode_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from._internal_has_encounter()) {
    encounter_ = new ::patient::Reference(*from.encounter_);
  } else {
    encounter_ = nullptr;
  }
  if (from._internal_has_period()) {
    period_ = new ::patient::Period(*from.period_);
  } else {
    period_ = nullptr;
  }
  if (from._internal_has_subject()) {
    subject_ = new ::patient::Reference(*from.subject_);
  } else {
    subject_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.CareTeamObject)
}

void CareTeamObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CareTeamObject_customized_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&encounter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subject_) -
      reinterpret_cast<char*>(&encounter_)) + sizeof(subject_));
}

CareTeamObject::~CareTeamObject() {
  // @@protoc_insertion_point(destructor:patient.CareTeamObject)
  SharedDtor();
}

void CareTeamObject::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete encounter_;
  if (this != internal_default_instance()) delete period_;
  if (this != internal_default_instance()) delete subject_;
}

void CareTeamObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CareTeamObject& CareTeamObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CareTeamObject_customized_2eproto.base);
  return *internal_default_instance();
}


void CareTeamObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.CareTeamObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  managingorganization_.Clear();
  participant_.Clear();
  reasoncode_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && period_ != nullptr) {
    delete period_;
  }
  period_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CareTeamObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Reference encounter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_encounter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.CareTeamObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Reference managingOrganization = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_managingorganization(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.Participant participant = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_participant(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Period period = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_period(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Category reasonCode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reasoncode(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // string resourceType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.CareTeamObject.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_status(), ptr, ctx, "patient.CareTeamObject.status");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference subject = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CareTeamObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.CareTeamObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Reference encounter = 1;
  if (this->has_encounter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::encounter(this), target, stream);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.CareTeamObject.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // repeated .patient.Reference managingOrganization = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_managingorganization_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_managingorganization(i), target, stream);
  }

  // repeated .patient.Participant participant = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_participant_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_participant(i), target, stream);
  }

  // .patient.Period period = 5;
  if (this->has_period()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::period(this), target, stream);
  }

  // repeated .patient.Category reasonCode = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reasoncode_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_reasoncode(i), target, stream);
  }

  // string resourceType = 7;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.CareTeamObject.resourceType");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_resourcetype(), target);
  }

  // string status = 8;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.CareTeamObject.status");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_status(), target);
  }

  // .patient.Reference subject = 9;
  if (this->has_subject()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::subject(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.CareTeamObject)
  return target;
}

size_t CareTeamObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.CareTeamObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Reference managingOrganization = 3;
  total_size += 1UL * this->_internal_managingorganization_size();
  for (const auto& msg : this->managingorganization_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Participant participant = 4;
  total_size += 1UL * this->_internal_participant_size();
  for (const auto& msg : this->participant_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Category reasonCode = 6;
  total_size += 1UL * this->_internal_reasoncode_size();
  for (const auto& msg : this->reasoncode_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string resourceType = 7;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  // string status = 8;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .patient.Reference encounter = 1;
  if (this->has_encounter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encounter_);
  }

  // .patient.Period period = 5;
  if (this->has_period()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *period_);
  }

  // .patient.Reference subject = 9;
  if (this->has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CareTeamObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.CareTeamObject)
  GOOGLE_DCHECK_NE(&from, this);
  const CareTeamObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CareTeamObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.CareTeamObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.CareTeamObject)
    MergeFrom(*source);
  }
}

void CareTeamObject::MergeFrom(const CareTeamObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.CareTeamObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  managingorganization_.MergeFrom(from.managingorganization_);
  participant_.MergeFrom(from.participant_);
  reasoncode_.MergeFrom(from.reasoncode_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.has_encounter()) {
    _internal_mutable_encounter()->::patient::Reference::MergeFrom(from._internal_encounter());
  }
  if (from.has_period()) {
    _internal_mutable_period()->::patient::Period::MergeFrom(from._internal_period());
  }
  if (from.has_subject()) {
    _internal_mutable_subject()->::patient::Reference::MergeFrom(from._internal_subject());
  }
}

void CareTeamObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.CareTeamObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CareTeamObject::CopyFrom(const CareTeamObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.CareTeamObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CareTeamObject::IsInitialized() const {
  return true;
}

void CareTeamObject::InternalSwap(CareTeamObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  managingorganization_.InternalSwap(&other->managingorganization_);
  participant_.InternalSwap(&other->participant_);
  reasoncode_.InternalSwap(&other->reasoncode_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(encounter_, other->encounter_);
  swap(period_, other->period_);
  swap(subject_, other->subject_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CareTeamObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClaimObject::InitAsDefaultInstance() {
  ::patient::_ClaimObject_default_instance_._instance.get_mutable()->billableperiod_ = const_cast< ::patient::Period*>(
      ::patient::Period::internal_default_instance());
  ::patient::_ClaimObject_default_instance_._instance.get_mutable()->patient_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ClaimObject_default_instance_._instance.get_mutable()->prescription_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ClaimObject_default_instance_._instance.get_mutable()->priority_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_ClaimObject_default_instance_._instance.get_mutable()->provider_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ClaimObject_default_instance_._instance.get_mutable()->total_ = const_cast< ::patient::Total*>(
      ::patient::Total::internal_default_instance());
  ::patient::_ClaimObject_default_instance_._instance.get_mutable()->type_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
}
class ClaimObject::_Internal {
 public:
  static const ::patient::Period& billableperiod(const ClaimObject* msg);
  static const ::patient::Reference& patient(const ClaimObject* msg);
  static const ::patient::Reference& prescription(const ClaimObject* msg);
  static const ::patient::Category& priority(const ClaimObject* msg);
  static const ::patient::Reference& provider(const ClaimObject* msg);
  static const ::patient::Total& total(const ClaimObject* msg);
  static const ::patient::Category& type(const ClaimObject* msg);
};

const ::patient::Period&
ClaimObject::_Internal::billableperiod(const ClaimObject* msg) {
  return *msg->billableperiod_;
}
const ::patient::Reference&
ClaimObject::_Internal::patient(const ClaimObject* msg) {
  return *msg->patient_;
}
const ::patient::Reference&
ClaimObject::_Internal::prescription(const ClaimObject* msg) {
  return *msg->prescription_;
}
const ::patient::Category&
ClaimObject::_Internal::priority(const ClaimObject* msg) {
  return *msg->priority_;
}
const ::patient::Reference&
ClaimObject::_Internal::provider(const ClaimObject* msg) {
  return *msg->provider_;
}
const ::patient::Total&
ClaimObject::_Internal::total(const ClaimObject* msg) {
  return *msg->total_;
}
const ::patient::Category&
ClaimObject::_Internal::type(const ClaimObject* msg) {
  return *msg->type_;
}
ClaimObject::ClaimObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.ClaimObject)
}
ClaimObject::ClaimObject(const ClaimObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      diagnosis_(from.diagnosis_),
      insurance_(from.insurance_),
      item_(from.item_),
      procedure_(from.procedure_),
      supportinginfo_(from.supportinginfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  created_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_created().empty()) {
    created_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.created_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  use_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_use().empty()) {
    use_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.use_);
  }
  if (from._internal_has_billableperiod()) {
    billableperiod_ = new ::patient::Period(*from.billableperiod_);
  } else {
    billableperiod_ = nullptr;
  }
  if (from._internal_has_patient()) {
    patient_ = new ::patient::Reference(*from.patient_);
  } else {
    patient_ = nullptr;
  }
  if (from._internal_has_prescription()) {
    prescription_ = new ::patient::Reference(*from.prescription_);
  } else {
    prescription_ = nullptr;
  }
  if (from._internal_has_priority()) {
    priority_ = new ::patient::Category(*from.priority_);
  } else {
    priority_ = nullptr;
  }
  if (from._internal_has_provider()) {
    provider_ = new ::patient::Reference(*from.provider_);
  } else {
    provider_ = nullptr;
  }
  if (from._internal_has_total()) {
    total_ = new ::patient::Total(*from.total_);
  } else {
    total_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::patient::Category(*from.type_);
  } else {
    type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.ClaimObject)
}

void ClaimObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClaimObject_customized_2eproto.base);
  created_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&billableperiod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&billableperiod_)) + sizeof(type_));
}

ClaimObject::~ClaimObject() {
  // @@protoc_insertion_point(destructor:patient.ClaimObject)
  SharedDtor();
}

void ClaimObject::SharedDtor() {
  created_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete billableperiod_;
  if (this != internal_default_instance()) delete patient_;
  if (this != internal_default_instance()) delete prescription_;
  if (this != internal_default_instance()) delete priority_;
  if (this != internal_default_instance()) delete provider_;
  if (this != internal_default_instance()) delete total_;
  if (this != internal_default_instance()) delete type_;
}

void ClaimObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClaimObject& ClaimObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClaimObject_customized_2eproto.base);
  return *internal_default_instance();
}


void ClaimObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.ClaimObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diagnosis_.Clear();
  insurance_.Clear();
  item_.Clear();
  procedure_.Clear();
  supportinginfo_.Clear();
  created_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && billableperiod_ != nullptr) {
    delete billableperiod_;
  }
  billableperiod_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && patient_ != nullptr) {
    delete patient_;
  }
  patient_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && prescription_ != nullptr) {
    delete prescription_;
  }
  prescription_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && priority_ != nullptr) {
    delete priority_;
  }
  priority_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && provider_ != nullptr) {
    delete provider_;
  }
  provider_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && total_ != nullptr) {
    delete total_;
  }
  total_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ClaimObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Period billablePeriod = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_billableperiod(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string created = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_created(), ptr, ctx, "patient.ClaimObject.created");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Diagnosis diagnosis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_diagnosis(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.ClaimObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Insurance insurance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_insurance(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.Item item = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Reference patient = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_patient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference prescription = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_prescription(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category priority = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_priority(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Procedure procedure = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_procedure(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Reference provider = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_provider(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resourceType = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.ClaimObject.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_status(), ptr, ctx, "patient.ClaimObject.status");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.SupportingInfo supportingInfo = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_supportinginfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Total total = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_total(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category type = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string use = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_use(), ptr, ctx, "patient.ClaimObject.use");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClaimObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.ClaimObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Period billablePeriod = 1;
  if (this->has_billableperiod()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::billableperiod(this), target, stream);
  }

  // string created = 2;
  if (this->created().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created().data(), static_cast<int>(this->_internal_created().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ClaimObject.created");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_created(), target);
  }

  // repeated .patient.Diagnosis diagnosis = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_diagnosis_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_diagnosis(i), target, stream);
  }

  // string id = 4;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ClaimObject.id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_id(), target);
  }

  // repeated .patient.Insurance insurance = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_insurance_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_insurance(i), target, stream);
  }

  // repeated .patient.Item item = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_item(i), target, stream);
  }

  // .patient.Reference patient = 7;
  if (this->has_patient()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::patient(this), target, stream);
  }

  // .patient.Reference prescription = 8;
  if (this->has_prescription()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::prescription(this), target, stream);
  }

  // .patient.Category priority = 9;
  if (this->has_priority()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::priority(this), target, stream);
  }

  // repeated .patient.Procedure procedure = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_procedure_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(10, this->_internal_procedure(i), target, stream);
  }

  // .patient.Reference provider = 11;
  if (this->has_provider()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::provider(this), target, stream);
  }

  // string resourceType = 12;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ClaimObject.resourceType");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_resourcetype(), target);
  }

  // string status = 13;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ClaimObject.status");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_status(), target);
  }

  // repeated .patient.SupportingInfo supportingInfo = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_supportinginfo_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(14, this->_internal_supportinginfo(i), target, stream);
  }

  // .patient.Total total = 15;
  if (this->has_total()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::total(this), target, stream);
  }

  // .patient.Category type = 16;
  if (this->has_type()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, _Internal::type(this), target, stream);
  }

  // string use = 17;
  if (this->use().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_use().data(), static_cast<int>(this->_internal_use().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ClaimObject.use");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_use(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.ClaimObject)
  return target;
}

size_t ClaimObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.ClaimObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Diagnosis diagnosis = 3;
  total_size += 1UL * this->_internal_diagnosis_size();
  for (const auto& msg : this->diagnosis_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Insurance insurance = 5;
  total_size += 1UL * this->_internal_insurance_size();
  for (const auto& msg : this->insurance_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Item item = 6;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Procedure procedure = 10;
  total_size += 1UL * this->_internal_procedure_size();
  for (const auto& msg : this->procedure_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.SupportingInfo supportingInfo = 14;
  total_size += 1UL * this->_internal_supportinginfo_size();
  for (const auto& msg : this->supportinginfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string created = 2;
  if (this->created().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created());
  }

  // string id = 4;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string resourceType = 12;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  // string status = 13;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string use = 17;
  if (this->use().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_use());
  }

  // .patient.Period billablePeriod = 1;
  if (this->has_billableperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *billableperiod_);
  }

  // .patient.Reference patient = 7;
  if (this->has_patient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patient_);
  }

  // .patient.Reference prescription = 8;
  if (this->has_prescription()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prescription_);
  }

  // .patient.Category priority = 9;
  if (this->has_priority()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *priority_);
  }

  // .patient.Reference provider = 11;
  if (this->has_provider()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *provider_);
  }

  // .patient.Total total = 15;
  if (this->has_total()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *total_);
  }

  // .patient.Category type = 16;
  if (this->has_type()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClaimObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.ClaimObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ClaimObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClaimObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.ClaimObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.ClaimObject)
    MergeFrom(*source);
  }
}

void ClaimObject::MergeFrom(const ClaimObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.ClaimObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  diagnosis_.MergeFrom(from.diagnosis_);
  insurance_.MergeFrom(from.insurance_);
  item_.MergeFrom(from.item_);
  procedure_.MergeFrom(from.procedure_);
  supportinginfo_.MergeFrom(from.supportinginfo_);
  if (from.created().size() > 0) {

    created_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.created_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.use().size() > 0) {

    use_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.use_);
  }
  if (from.has_billableperiod()) {
    _internal_mutable_billableperiod()->::patient::Period::MergeFrom(from._internal_billableperiod());
  }
  if (from.has_patient()) {
    _internal_mutable_patient()->::patient::Reference::MergeFrom(from._internal_patient());
  }
  if (from.has_prescription()) {
    _internal_mutable_prescription()->::patient::Reference::MergeFrom(from._internal_prescription());
  }
  if (from.has_priority()) {
    _internal_mutable_priority()->::patient::Category::MergeFrom(from._internal_priority());
  }
  if (from.has_provider()) {
    _internal_mutable_provider()->::patient::Reference::MergeFrom(from._internal_provider());
  }
  if (from.has_total()) {
    _internal_mutable_total()->::patient::Total::MergeFrom(from._internal_total());
  }
  if (from.has_type()) {
    _internal_mutable_type()->::patient::Category::MergeFrom(from._internal_type());
  }
}

void ClaimObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.ClaimObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClaimObject::CopyFrom(const ClaimObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.ClaimObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClaimObject::IsInitialized() const {
  return true;
}

void ClaimObject::InternalSwap(ClaimObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  diagnosis_.InternalSwap(&other->diagnosis_);
  insurance_.InternalSwap(&other->insurance_);
  item_.InternalSwap(&other->item_);
  procedure_.InternalSwap(&other->procedure_);
  supportinginfo_.InternalSwap(&other->supportinginfo_);
  created_.Swap(&other->created_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  use_.Swap(&other->use_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(billableperiod_, other->billableperiod_);
  swap(patient_, other->patient_);
  swap(prescription_, other->prescription_);
  swap(priority_, other->priority_);
  swap(provider_, other->provider_);
  swap(total_, other->total_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClaimObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConditionObject::InitAsDefaultInstance() {
  ::patient::_ConditionObject_default_instance_._instance.get_mutable()->clinicalstatus_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_ConditionObject_default_instance_._instance.get_mutable()->code_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_ConditionObject_default_instance_._instance.get_mutable()->encounter_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ConditionObject_default_instance_._instance.get_mutable()->subject_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ConditionObject_default_instance_._instance.get_mutable()->verificationstatus_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
}
class ConditionObject::_Internal {
 public:
  static const ::patient::Category& clinicalstatus(const ConditionObject* msg);
  static const ::patient::Category& code(const ConditionObject* msg);
  static const ::patient::Reference& encounter(const ConditionObject* msg);
  static const ::patient::Reference& subject(const ConditionObject* msg);
  static const ::patient::Category& verificationstatus(const ConditionObject* msg);
};

const ::patient::Category&
ConditionObject::_Internal::clinicalstatus(const ConditionObject* msg) {
  return *msg->clinicalstatus_;
}
const ::patient::Category&
ConditionObject::_Internal::code(const ConditionObject* msg) {
  return *msg->code_;
}
const ::patient::Reference&
ConditionObject::_Internal::encounter(const ConditionObject* msg) {
  return *msg->encounter_;
}
const ::patient::Reference&
ConditionObject::_Internal::subject(const ConditionObject* msg) {
  return *msg->subject_;
}
const ::patient::Category&
ConditionObject::_Internal::verificationstatus(const ConditionObject* msg) {
  return *msg->verificationstatus_;
}
ConditionObject::ConditionObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.ConditionObject)
}
ConditionObject::ConditionObject(const ConditionObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  abatementdatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_abatementdatetime().empty()) {
    abatementdatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.abatementdatetime_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  onsetdatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_onsetdatetime().empty()) {
    onsetdatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.onsetdatetime_);
  }
  recordeddate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordeddate().empty()) {
    recordeddate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recordeddate_);
  }
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from._internal_has_clinicalstatus()) {
    clinicalstatus_ = new ::patient::Category(*from.clinicalstatus_);
  } else {
    clinicalstatus_ = nullptr;
  }
  if (from._internal_has_code()) {
    code_ = new ::patient::Category(*from.code_);
  } else {
    code_ = nullptr;
  }
  if (from._internal_has_encounter()) {
    encounter_ = new ::patient::Reference(*from.encounter_);
  } else {
    encounter_ = nullptr;
  }
  if (from._internal_has_subject()) {
    subject_ = new ::patient::Reference(*from.subject_);
  } else {
    subject_ = nullptr;
  }
  if (from._internal_has_verificationstatus()) {
    verificationstatus_ = new ::patient::Category(*from.verificationstatus_);
  } else {
    verificationstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.ConditionObject)
}

void ConditionObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConditionObject_customized_2eproto.base);
  abatementdatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  onsetdatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recordeddate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&clinicalstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verificationstatus_) -
      reinterpret_cast<char*>(&clinicalstatus_)) + sizeof(verificationstatus_));
}

ConditionObject::~ConditionObject() {
  // @@protoc_insertion_point(destructor:patient.ConditionObject)
  SharedDtor();
}

void ConditionObject::SharedDtor() {
  abatementdatetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  onsetdatetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recordeddate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete clinicalstatus_;
  if (this != internal_default_instance()) delete code_;
  if (this != internal_default_instance()) delete encounter_;
  if (this != internal_default_instance()) delete subject_;
  if (this != internal_default_instance()) delete verificationstatus_;
}

void ConditionObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionObject& ConditionObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConditionObject_customized_2eproto.base);
  return *internal_default_instance();
}


void ConditionObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.ConditionObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  abatementdatetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  onsetdatetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recordeddate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && clinicalstatus_ != nullptr) {
    delete clinicalstatus_;
  }
  clinicalstatus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && verificationstatus_ != nullptr) {
    delete verificationstatus_;
  }
  verificationstatus_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ConditionObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string abatementDateTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_abatementdatetime(), ptr, ctx, "patient.ConditionObject.abatementDateTime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category clinicalStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_clinicalstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference encounter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_encounter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.ConditionObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string onsetDateTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_onsetdatetime(), ptr, ctx, "patient.ConditionObject.onsetDateTime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordedDate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_recordeddate(), ptr, ctx, "patient.ConditionObject.recordedDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resourceType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.ConditionObject.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference subject = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category verificationStatus = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_verificationstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConditionObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.ConditionObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string abatementDateTime = 1;
  if (this->abatementdatetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_abatementdatetime().data(), static_cast<int>(this->_internal_abatementdatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ConditionObject.abatementDateTime");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_abatementdatetime(), target);
  }

  // .patient.Category clinicalStatus = 2;
  if (this->has_clinicalstatus()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::clinicalstatus(this), target, stream);
  }

  // .patient.Category code = 3;
  if (this->has_code()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::code(this), target, stream);
  }

  // .patient.Reference encounter = 4;
  if (this->has_encounter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::encounter(this), target, stream);
  }

  // string id = 5;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ConditionObject.id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_id(), target);
  }

  // string onsetDateTime = 6;
  if (this->onsetdatetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_onsetdatetime().data(), static_cast<int>(this->_internal_onsetdatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ConditionObject.onsetDateTime");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_onsetdatetime(), target);
  }

  // string recordedDate = 7;
  if (this->recordeddate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordeddate().data(), static_cast<int>(this->_internal_recordeddate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ConditionObject.recordedDate");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_recordeddate(), target);
  }

  // string resourceType = 8;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ConditionObject.resourceType");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_resourcetype(), target);
  }

  // .patient.Reference subject = 9;
  if (this->has_subject()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::subject(this), target, stream);
  }

  // .patient.Category verificationStatus = 10;
  if (this->has_verificationstatus()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::verificationstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.ConditionObject)
  return target;
}

size_t ConditionObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.ConditionObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string abatementDateTime = 1;
  if (this->abatementdatetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_abatementdatetime());
  }

  // string id = 5;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string onsetDateTime = 6;
  if (this->onsetdatetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_onsetdatetime());
  }

  // string recordedDate = 7;
  if (this->recordeddate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordeddate());
  }

  // string resourceType = 8;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  // .patient.Category clinicalStatus = 2;
  if (this->has_clinicalstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clinicalstatus_);
  }

  // .patient.Category code = 3;
  if (this->has_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *code_);
  }

  // .patient.Reference encounter = 4;
  if (this->has_encounter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encounter_);
  }

  // .patient.Reference subject = 9;
  if (this->has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_);
  }

  // .patient.Category verificationStatus = 10;
  if (this->has_verificationstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *verificationstatus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.ConditionObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConditionObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.ConditionObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.ConditionObject)
    MergeFrom(*source);
  }
}

void ConditionObject::MergeFrom(const ConditionObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.ConditionObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.abatementdatetime().size() > 0) {

    abatementdatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.abatementdatetime_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.onsetdatetime().size() > 0) {

    onsetdatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.onsetdatetime_);
  }
  if (from.recordeddate().size() > 0) {

    recordeddate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recordeddate_);
  }
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.has_clinicalstatus()) {
    _internal_mutable_clinicalstatus()->::patient::Category::MergeFrom(from._internal_clinicalstatus());
  }
  if (from.has_code()) {
    _internal_mutable_code()->::patient::Category::MergeFrom(from._internal_code());
  }
  if (from.has_encounter()) {
    _internal_mutable_encounter()->::patient::Reference::MergeFrom(from._internal_encounter());
  }
  if (from.has_subject()) {
    _internal_mutable_subject()->::patient::Reference::MergeFrom(from._internal_subject());
  }
  if (from.has_verificationstatus()) {
    _internal_mutable_verificationstatus()->::patient::Category::MergeFrom(from._internal_verificationstatus());
  }
}

void ConditionObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.ConditionObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionObject::CopyFrom(const ConditionObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.ConditionObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionObject::IsInitialized() const {
  return true;
}

void ConditionObject::InternalSwap(ConditionObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  abatementdatetime_.Swap(&other->abatementdatetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  onsetdatetime_.Swap(&other->onsetdatetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recordeddate_.Swap(&other->recordeddate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clinicalstatus_, other->clinicalstatus_);
  swap(code_, other->code_);
  swap(encounter_, other->encounter_);
  swap(subject_, other->subject_);
  swap(verificationstatus_, other->verificationstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceObject::InitAsDefaultInstance() {
  ::patient::_DeviceObject_default_instance_._instance.get_mutable()->type_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_DeviceObject_default_instance_._instance.get_mutable()->patient_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class DeviceObject::_Internal {
 public:
  static const ::patient::Category& type(const DeviceObject* msg);
  static const ::patient::Reference& patient(const DeviceObject* msg);
};

const ::patient::Category&
DeviceObject::_Internal::type(const DeviceObject* msg) {
  return *msg->type_;
}
const ::patient::Reference&
DeviceObject::_Internal::patient(const DeviceObject* msg) {
  return *msg->patient_;
}
DeviceObject::DeviceObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.DeviceObject)
}
DeviceObject::DeviceObject(const DeviceObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      udicarrier_(from.udicarrier_),
      devicename_(from.devicename_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  distinctidentifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_distinctidentifier().empty()) {
    distinctidentifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.distinctidentifier_);
  }
  manufacturedate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_manufacturedate().empty()) {
    manufacturedate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manufacturedate_);
  }
  expirationdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_expirationdate().empty()) {
    expirationdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expirationdate_);
  }
  lotnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lotnumber().empty()) {
    lotnumber_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lotnumber_);
  }
  serialnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serialnumber().empty()) {
    serialnumber_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serialnumber_);
  }
  if (from._internal_has_type()) {
    type_ = new ::patient::Category(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from._internal_has_patient()) {
    patient_ = new ::patient::Reference(*from.patient_);
  } else {
    patient_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.DeviceObject)
}

void DeviceObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceObject_customized_2eproto.base);
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  distinctidentifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufacturedate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expirationdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lotnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patient_) -
      reinterpret_cast<char*>(&type_)) + sizeof(patient_));
}

DeviceObject::~DeviceObject() {
  // @@protoc_insertion_point(destructor:patient.DeviceObject)
  SharedDtor();
}

void DeviceObject::SharedDtor() {
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  distinctidentifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufacturedate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expirationdate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lotnumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialnumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete patient_;
}

void DeviceObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceObject& DeviceObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceObject_customized_2eproto.base);
  return *internal_default_instance();
}


void DeviceObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.DeviceObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  udicarrier_.Clear();
  devicename_.Clear();
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  distinctidentifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufacturedate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expirationdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lotnumber_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialnumber_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && patient_ != nullptr) {
    delete patient_;
  }
  patient_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeviceObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string resourceType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.DeviceObject.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.DeviceObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Carrier udiCarrier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_udicarrier(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_status(), ptr, ctx, "patient.DeviceObject.status");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string distinctIdentifier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_distinctidentifier(), ptr, ctx, "patient.DeviceObject.distinctIdentifier");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string manufactureDate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_manufacturedate(), ptr, ctx, "patient.DeviceObject.manufactureDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string expirationDate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_expirationdate(), ptr, ctx, "patient.DeviceObject.expirationDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lotNumber = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_lotnumber(), ptr, ctx, "patient.DeviceObject.lotNumber");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serialNumber = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_serialnumber(), ptr, ctx, "patient.DeviceObject.serialNumber");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.DeviceName deviceName = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devicename(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Category type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference patient = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_patient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.DeviceObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string resourceType = 1;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.DeviceObject.resourceType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_resourcetype(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.DeviceObject.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // repeated .patient.Carrier udiCarrier = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_udicarrier_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_udicarrier(i), target, stream);
  }

  // string status = 4;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.DeviceObject.status");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_status(), target);
  }

  // string distinctIdentifier = 5;
  if (this->distinctidentifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_distinctidentifier().data(), static_cast<int>(this->_internal_distinctidentifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.DeviceObject.distinctIdentifier");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_distinctidentifier(), target);
  }

  // string manufactureDate = 6;
  if (this->manufacturedate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_manufacturedate().data(), static_cast<int>(this->_internal_manufacturedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.DeviceObject.manufactureDate");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_manufacturedate(), target);
  }

  // string expirationDate = 7;
  if (this->expirationdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expirationdate().data(), static_cast<int>(this->_internal_expirationdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.DeviceObject.expirationDate");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_expirationdate(), target);
  }

  // string lotNumber = 8;
  if (this->lotnumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lotnumber().data(), static_cast<int>(this->_internal_lotnumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.DeviceObject.lotNumber");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_lotnumber(), target);
  }

  // string serialNumber = 9;
  if (this->serialnumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serialnumber().data(), static_cast<int>(this->_internal_serialnumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.DeviceObject.serialNumber");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_serialnumber(), target);
  }

  // repeated .patient.DeviceName deviceName = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devicename_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(10, this->_internal_devicename(i), target, stream);
  }

  // .patient.Category type = 11;
  if (this->has_type()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::type(this), target, stream);
  }

  // .patient.Reference patient = 12;
  if (this->has_patient()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::patient(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.DeviceObject)
  return target;
}

size_t DeviceObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.DeviceObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Carrier udiCarrier = 3;
  total_size += 1UL * this->_internal_udicarrier_size();
  for (const auto& msg : this->udicarrier_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.DeviceName deviceName = 10;
  total_size += 1UL * this->_internal_devicename_size();
  for (const auto& msg : this->devicename_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string resourceType = 1;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string status = 4;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string distinctIdentifier = 5;
  if (this->distinctidentifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_distinctidentifier());
  }

  // string manufactureDate = 6;
  if (this->manufacturedate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_manufacturedate());
  }

  // string expirationDate = 7;
  if (this->expirationdate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expirationdate());
  }

  // string lotNumber = 8;
  if (this->lotnumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lotnumber());
  }

  // string serialNumber = 9;
  if (this->serialnumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serialnumber());
  }

  // .patient.Category type = 11;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // .patient.Reference patient = 12;
  if (this->has_patient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patient_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.DeviceObject)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.DeviceObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.DeviceObject)
    MergeFrom(*source);
  }
}

void DeviceObject::MergeFrom(const DeviceObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.DeviceObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  udicarrier_.MergeFrom(from.udicarrier_);
  devicename_.MergeFrom(from.devicename_);
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.distinctidentifier().size() > 0) {

    distinctidentifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.distinctidentifier_);
  }
  if (from.manufacturedate().size() > 0) {

    manufacturedate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manufacturedate_);
  }
  if (from.expirationdate().size() > 0) {

    expirationdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.expirationdate_);
  }
  if (from.lotnumber().size() > 0) {

    lotnumber_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lotnumber_);
  }
  if (from.serialnumber().size() > 0) {

    serialnumber_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serialnumber_);
  }
  if (from.has_type()) {
    _internal_mutable_type()->::patient::Category::MergeFrom(from._internal_type());
  }
  if (from.has_patient()) {
    _internal_mutable_patient()->::patient::Reference::MergeFrom(from._internal_patient());
  }
}

void DeviceObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.DeviceObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceObject::CopyFrom(const DeviceObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.DeviceObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceObject::IsInitialized() const {
  return true;
}

void DeviceObject::InternalSwap(DeviceObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  udicarrier_.InternalSwap(&other->udicarrier_);
  devicename_.InternalSwap(&other->devicename_);
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  distinctidentifier_.Swap(&other->distinctidentifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  manufacturedate_.Swap(&other->manufacturedate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  expirationdate_.Swap(&other->expirationdate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lotnumber_.Swap(&other->lotnumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serialnumber_.Swap(&other->serialnumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(patient_, other->patient_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DiagnosticReportObject::InitAsDefaultInstance() {
  ::patient::_DiagnosticReportObject_default_instance_._instance.get_mutable()->code_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_DiagnosticReportObject_default_instance_._instance.get_mutable()->encounter_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_DiagnosticReportObject_default_instance_._instance.get_mutable()->subject_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class DiagnosticReportObject::_Internal {
 public:
  static const ::patient::Category& code(const DiagnosticReportObject* msg);
  static const ::patient::Reference& encounter(const DiagnosticReportObject* msg);
  static const ::patient::Reference& subject(const DiagnosticReportObject* msg);
};

const ::patient::Category&
DiagnosticReportObject::_Internal::code(const DiagnosticReportObject* msg) {
  return *msg->code_;
}
const ::patient::Reference&
DiagnosticReportObject::_Internal::encounter(const DiagnosticReportObject* msg) {
  return *msg->encounter_;
}
const ::patient::Reference&
DiagnosticReportObject::_Internal::subject(const DiagnosticReportObject* msg) {
  return *msg->subject_;
}
DiagnosticReportObject::DiagnosticReportObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.DiagnosticReportObject)
}
DiagnosticReportObject::DiagnosticReportObject(const DiagnosticReportObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      category_(from.category_),
      result_(from.result_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  effectivedatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_effectivedatetime().empty()) {
    effectivedatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.effectivedatetime_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  issued_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_issued().empty()) {
    issued_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.issued_);
  }
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from._internal_has_code()) {
    code_ = new ::patient::Category(*from.code_);
  } else {
    code_ = nullptr;
  }
  if (from._internal_has_encounter()) {
    encounter_ = new ::patient::Reference(*from.encounter_);
  } else {
    encounter_ = nullptr;
  }
  if (from._internal_has_subject()) {
    subject_ = new ::patient::Reference(*from.subject_);
  } else {
    subject_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.DiagnosticReportObject)
}

void DiagnosticReportObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosticReportObject_customized_2eproto.base);
  effectivedatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issued_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subject_) -
      reinterpret_cast<char*>(&code_)) + sizeof(subject_));
}

DiagnosticReportObject::~DiagnosticReportObject() {
  // @@protoc_insertion_point(destructor:patient.DiagnosticReportObject)
  SharedDtor();
}

void DiagnosticReportObject::SharedDtor() {
  effectivedatetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issued_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete code_;
  if (this != internal_default_instance()) delete encounter_;
  if (this != internal_default_instance()) delete subject_;
}

void DiagnosticReportObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosticReportObject& DiagnosticReportObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosticReportObject_customized_2eproto.base);
  return *internal_default_instance();
}


void DiagnosticReportObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.DiagnosticReportObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  category_.Clear();
  result_.Clear();
  effectivedatetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issued_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DiagnosticReportObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .patient.Category category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Category code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string effectiveDateTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_effectivedatetime(), ptr, ctx, "patient.DiagnosticReportObject.effectiveDateTime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference encounter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_encounter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.DiagnosticReportObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string issued = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_issued(), ptr, ctx, "patient.DiagnosticReportObject.issued");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resourceType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.DiagnosticReportObject.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Reference result = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // string status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_status(), ptr, ctx, "patient.DiagnosticReportObject.status");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference subject = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosticReportObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.DiagnosticReportObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .patient.Category category = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_category_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_category(i), target, stream);
  }

  // .patient.Category code = 2;
  if (this->has_code()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::code(this), target, stream);
  }

  // string effectiveDateTime = 3;
  if (this->effectivedatetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_effectivedatetime().data(), static_cast<int>(this->_internal_effectivedatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.DiagnosticReportObject.effectiveDateTime");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_effectivedatetime(), target);
  }

  // .patient.Reference encounter = 4;
  if (this->has_encounter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::encounter(this), target, stream);
  }

  // string id = 5;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.DiagnosticReportObject.id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_id(), target);
  }

  // string issued = 6;
  if (this->issued().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_issued().data(), static_cast<int>(this->_internal_issued().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.DiagnosticReportObject.issued");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_issued(), target);
  }

  // string resourceType = 7;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.DiagnosticReportObject.resourceType");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_resourcetype(), target);
  }

  // repeated .patient.Reference result = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_result_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(8, this->_internal_result(i), target, stream);
  }

  // string status = 9;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.DiagnosticReportObject.status");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_status(), target);
  }

  // .patient.Reference subject = 10;
  if (this->has_subject()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::subject(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.DiagnosticReportObject)
  return target;
}

size_t DiagnosticReportObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.DiagnosticReportObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Category category = 1;
  total_size += 1UL * this->_internal_category_size();
  for (const auto& msg : this->category_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Reference result = 8;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string effectiveDateTime = 3;
  if (this->effectivedatetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_effectivedatetime());
  }

  // string id = 5;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string issued = 6;
  if (this->issued().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_issued());
  }

  // string resourceType = 7;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  // string status = 9;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .patient.Category code = 2;
  if (this->has_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *code_);
  }

  // .patient.Reference encounter = 4;
  if (this->has_encounter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encounter_);
  }

  // .patient.Reference subject = 10;
  if (this->has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosticReportObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.DiagnosticReportObject)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosticReportObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosticReportObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.DiagnosticReportObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.DiagnosticReportObject)
    MergeFrom(*source);
  }
}

void DiagnosticReportObject::MergeFrom(const DiagnosticReportObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.DiagnosticReportObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  category_.MergeFrom(from.category_);
  result_.MergeFrom(from.result_);
  if (from.effectivedatetime().size() > 0) {

    effectivedatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.effectivedatetime_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.issued().size() > 0) {

    issued_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.issued_);
  }
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.has_code()) {
    _internal_mutable_code()->::patient::Category::MergeFrom(from._internal_code());
  }
  if (from.has_encounter()) {
    _internal_mutable_encounter()->::patient::Reference::MergeFrom(from._internal_encounter());
  }
  if (from.has_subject()) {
    _internal_mutable_subject()->::patient::Reference::MergeFrom(from._internal_subject());
  }
}

void DiagnosticReportObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.DiagnosticReportObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosticReportObject::CopyFrom(const DiagnosticReportObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.DiagnosticReportObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosticReportObject::IsInitialized() const {
  return true;
}

void DiagnosticReportObject::InternalSwap(DiagnosticReportObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  category_.InternalSwap(&other->category_);
  result_.InternalSwap(&other->result_);
  effectivedatetime_.Swap(&other->effectivedatetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  issued_.Swap(&other->issued_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(encounter_, other->encounter_);
  swap(subject_, other->subject_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosticReportObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EncounterObject::InitAsDefaultInstance() {
  ::patient::_EncounterObject_default_instance_._instance.get_mutable()->class__ = const_cast< ::patient::Coding*>(
      ::patient::Coding::internal_default_instance());
  ::patient::_EncounterObject_default_instance_._instance.get_mutable()->period_ = const_cast< ::patient::Period*>(
      ::patient::Period::internal_default_instance());
  ::patient::_EncounterObject_default_instance_._instance.get_mutable()->serviceprovider_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_EncounterObject_default_instance_._instance.get_mutable()->subject_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_EncounterObject_default_instance_._instance.get_mutable()->hospitalization_ = const_cast< ::patient::Hospitalization*>(
      ::patient::Hospitalization::internal_default_instance());
}
class EncounterObject::_Internal {
 public:
  static const ::patient::Coding& class_(const EncounterObject* msg);
  static const ::patient::Period& period(const EncounterObject* msg);
  static const ::patient::Reference& serviceprovider(const EncounterObject* msg);
  static const ::patient::Reference& subject(const EncounterObject* msg);
  static const ::patient::Hospitalization& hospitalization(const EncounterObject* msg);
};

const ::patient::Coding&
EncounterObject::_Internal::class_(const EncounterObject* msg) {
  return *msg->class__;
}
const ::patient::Period&
EncounterObject::_Internal::period(const EncounterObject* msg) {
  return *msg->period_;
}
const ::patient::Reference&
EncounterObject::_Internal::serviceprovider(const EncounterObject* msg) {
  return *msg->serviceprovider_;
}
const ::patient::Reference&
EncounterObject::_Internal::subject(const EncounterObject* msg) {
  return *msg->subject_;
}
const ::patient::Hospitalization&
EncounterObject::_Internal::hospitalization(const EncounterObject* msg) {
  return *msg->hospitalization_;
}
EncounterObject::EncounterObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.EncounterObject)
}
EncounterObject::EncounterObject(const EncounterObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      participant_(from.participant_),
      reasoncode_(from.reasoncode_),
      type_(from.type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from._internal_has_class_()) {
    class__ = new ::patient::Coding(*from.class__);
  } else {
    class__ = nullptr;
  }
  if (from._internal_has_period()) {
    period_ = new ::patient::Period(*from.period_);
  } else {
    period_ = nullptr;
  }
  if (from._internal_has_serviceprovider()) {
    serviceprovider_ = new ::patient::Reference(*from.serviceprovider_);
  } else {
    serviceprovider_ = nullptr;
  }
  if (from._internal_has_subject()) {
    subject_ = new ::patient::Reference(*from.subject_);
  } else {
    subject_ = nullptr;
  }
  if (from._internal_has_hospitalization()) {
    hospitalization_ = new ::patient::Hospitalization(*from.hospitalization_);
  } else {
    hospitalization_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.EncounterObject)
}

void EncounterObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EncounterObject_customized_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&class__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hospitalization_) -
      reinterpret_cast<char*>(&class__)) + sizeof(hospitalization_));
}

EncounterObject::~EncounterObject() {
  // @@protoc_insertion_point(destructor:patient.EncounterObject)
  SharedDtor();
}

void EncounterObject::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete class__;
  if (this != internal_default_instance()) delete period_;
  if (this != internal_default_instance()) delete serviceprovider_;
  if (this != internal_default_instance()) delete subject_;
  if (this != internal_default_instance()) delete hospitalization_;
}

void EncounterObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EncounterObject& EncounterObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EncounterObject_customized_2eproto.base);
  return *internal_default_instance();
}


void EncounterObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.EncounterObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  participant_.Clear();
  reasoncode_.Clear();
  type_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && class__ != nullptr) {
    delete class__;
  }
  class__ = nullptr;
  if (GetArenaNoVirtual() == nullptr && period_ != nullptr) {
    delete period_;
  }
  period_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && serviceprovider_ != nullptr) {
    delete serviceprovider_;
  }
  serviceprovider_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && hospitalization_ != nullptr) {
    delete hospitalization_;
  }
  hospitalization_ = nullptr;
  _internal_metadata_.Clear();
}

const char* EncounterObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Coding class = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_class_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.EncounterObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Participant participant = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_participant(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Period period = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_period(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Category reasonCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reasoncode(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // string resourceType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.EncounterObject.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference serviceProvider = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_serviceprovider(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_status(), ptr, ctx, "patient.EncounterObject.status");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference subject = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Category type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Hospitalization hospitalization = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_hospitalization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EncounterObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.EncounterObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Coding class = 1;
  if (this->has_class_()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::class_(this), target, stream);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.EncounterObject.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // repeated .patient.Participant participant = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_participant_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_participant(i), target, stream);
  }

  // .patient.Period period = 4;
  if (this->has_period()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::period(this), target, stream);
  }

  // repeated .patient.Category reasonCode = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reasoncode_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_reasoncode(i), target, stream);
  }

  // string resourceType = 6;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.EncounterObject.resourceType");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_resourcetype(), target);
  }

  // .patient.Reference serviceProvider = 7;
  if (this->has_serviceprovider()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::serviceprovider(this), target, stream);
  }

  // string status = 8;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.EncounterObject.status");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_status(), target);
  }

  // .patient.Reference subject = 9;
  if (this->has_subject()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::subject(this), target, stream);
  }

  // repeated .patient.Category type = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_type_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(10, this->_internal_type(i), target, stream);
  }

  // .patient.Hospitalization hospitalization = 11;
  if (this->has_hospitalization()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::hospitalization(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.EncounterObject)
  return target;
}

size_t EncounterObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.EncounterObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Participant participant = 3;
  total_size += 1UL * this->_internal_participant_size();
  for (const auto& msg : this->participant_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Category reasonCode = 5;
  total_size += 1UL * this->_internal_reasoncode_size();
  for (const auto& msg : this->reasoncode_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Category type = 10;
  total_size += 1UL * this->_internal_type_size();
  for (const auto& msg : this->type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string resourceType = 6;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  // string status = 8;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .patient.Coding class = 1;
  if (this->has_class_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *class__);
  }

  // .patient.Period period = 4;
  if (this->has_period()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *period_);
  }

  // .patient.Reference serviceProvider = 7;
  if (this->has_serviceprovider()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *serviceprovider_);
  }

  // .patient.Reference subject = 9;
  if (this->has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_);
  }

  // .patient.Hospitalization hospitalization = 11;
  if (this->has_hospitalization()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hospitalization_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncounterObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.EncounterObject)
  GOOGLE_DCHECK_NE(&from, this);
  const EncounterObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EncounterObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.EncounterObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.EncounterObject)
    MergeFrom(*source);
  }
}

void EncounterObject::MergeFrom(const EncounterObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.EncounterObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  participant_.MergeFrom(from.participant_);
  reasoncode_.MergeFrom(from.reasoncode_);
  type_.MergeFrom(from.type_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.has_class_()) {
    _internal_mutable_class_()->::patient::Coding::MergeFrom(from._internal_class_());
  }
  if (from.has_period()) {
    _internal_mutable_period()->::patient::Period::MergeFrom(from._internal_period());
  }
  if (from.has_serviceprovider()) {
    _internal_mutable_serviceprovider()->::patient::Reference::MergeFrom(from._internal_serviceprovider());
  }
  if (from.has_subject()) {
    _internal_mutable_subject()->::patient::Reference::MergeFrom(from._internal_subject());
  }
  if (from.has_hospitalization()) {
    _internal_mutable_hospitalization()->::patient::Hospitalization::MergeFrom(from._internal_hospitalization());
  }
}

void EncounterObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.EncounterObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncounterObject::CopyFrom(const EncounterObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.EncounterObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncounterObject::IsInitialized() const {
  return true;
}

void EncounterObject::InternalSwap(EncounterObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  participant_.InternalSwap(&other->participant_);
  reasoncode_.InternalSwap(&other->reasoncode_);
  type_.InternalSwap(&other->type_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(class__, other->class__);
  swap(period_, other->period_);
  swap(serviceprovider_, other->serviceprovider_);
  swap(subject_, other->subject_);
  swap(hospitalization_, other->hospitalization_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EncounterObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExplanationOfBenefitObject::InitAsDefaultInstance() {
  ::patient::_ExplanationOfBenefitObject_default_instance_._instance.get_mutable()->billableperiod_ = const_cast< ::patient::Period*>(
      ::patient::Period::internal_default_instance());
  ::patient::_ExplanationOfBenefitObject_default_instance_._instance.get_mutable()->claim_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ExplanationOfBenefitObject_default_instance_._instance.get_mutable()->insurer_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ExplanationOfBenefitObject_default_instance_._instance.get_mutable()->patient_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ExplanationOfBenefitObject_default_instance_._instance.get_mutable()->payment_ = const_cast< ::patient::Payment*>(
      ::patient::Payment::internal_default_instance());
  ::patient::_ExplanationOfBenefitObject_default_instance_._instance.get_mutable()->provider_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ExplanationOfBenefitObject_default_instance_._instance.get_mutable()->referral_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ExplanationOfBenefitObject_default_instance_._instance.get_mutable()->type_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
}
class ExplanationOfBenefitObject::_Internal {
 public:
  static const ::patient::Period& billableperiod(const ExplanationOfBenefitObject* msg);
  static const ::patient::Reference& claim(const ExplanationOfBenefitObject* msg);
  static const ::patient::Reference& insurer(const ExplanationOfBenefitObject* msg);
  static const ::patient::Reference& patient(const ExplanationOfBenefitObject* msg);
  static const ::patient::Payment& payment(const ExplanationOfBenefitObject* msg);
  static const ::patient::Reference& provider(const ExplanationOfBenefitObject* msg);
  static const ::patient::Reference& referral(const ExplanationOfBenefitObject* msg);
  static const ::patient::Category& type(const ExplanationOfBenefitObject* msg);
};

const ::patient::Period&
ExplanationOfBenefitObject::_Internal::billableperiod(const ExplanationOfBenefitObject* msg) {
  return *msg->billableperiod_;
}
const ::patient::Reference&
ExplanationOfBenefitObject::_Internal::claim(const ExplanationOfBenefitObject* msg) {
  return *msg->claim_;
}
const ::patient::Reference&
ExplanationOfBenefitObject::_Internal::insurer(const ExplanationOfBenefitObject* msg) {
  return *msg->insurer_;
}
const ::patient::Reference&
ExplanationOfBenefitObject::_Internal::patient(const ExplanationOfBenefitObject* msg) {
  return *msg->patient_;
}
const ::patient::Payment&
ExplanationOfBenefitObject::_Internal::payment(const ExplanationOfBenefitObject* msg) {
  return *msg->payment_;
}
const ::patient::Reference&
ExplanationOfBenefitObject::_Internal::provider(const ExplanationOfBenefitObject* msg) {
  return *msg->provider_;
}
const ::patient::Reference&
ExplanationOfBenefitObject::_Internal::referral(const ExplanationOfBenefitObject* msg) {
  return *msg->referral_;
}
const ::patient::Category&
ExplanationOfBenefitObject::_Internal::type(const ExplanationOfBenefitObject* msg) {
  return *msg->type_;
}
ExplanationOfBenefitObject::ExplanationOfBenefitObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.ExplanationOfBenefitObject)
}
ExplanationOfBenefitObject::ExplanationOfBenefitObject(const ExplanationOfBenefitObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      careteam_(from.careteam_),
      contained_(from.contained_),
      diagnosis_(from.diagnosis_),
      identifier_(from.identifier_),
      insurance_(from.insurance_),
      item_(from.item_),
      total_(from.total_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  created_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_created().empty()) {
    created_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.created_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  outcome_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_outcome().empty()) {
    outcome_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.outcome_);
  }
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  use_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_use().empty()) {
    use_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.use_);
  }
  if (from._internal_has_billableperiod()) {
    billableperiod_ = new ::patient::Period(*from.billableperiod_);
  } else {
    billableperiod_ = nullptr;
  }
  if (from._internal_has_claim()) {
    claim_ = new ::patient::Reference(*from.claim_);
  } else {
    claim_ = nullptr;
  }
  if (from._internal_has_insurer()) {
    insurer_ = new ::patient::Reference(*from.insurer_);
  } else {
    insurer_ = nullptr;
  }
  if (from._internal_has_patient()) {
    patient_ = new ::patient::Reference(*from.patient_);
  } else {
    patient_ = nullptr;
  }
  if (from._internal_has_payment()) {
    payment_ = new ::patient::Payment(*from.payment_);
  } else {
    payment_ = nullptr;
  }
  if (from._internal_has_provider()) {
    provider_ = new ::patient::Reference(*from.provider_);
  } else {
    provider_ = nullptr;
  }
  if (from._internal_has_referral()) {
    referral_ = new ::patient::Reference(*from.referral_);
  } else {
    referral_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::patient::Category(*from.type_);
  } else {
    type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.ExplanationOfBenefitObject)
}

void ExplanationOfBenefitObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExplanationOfBenefitObject_customized_2eproto.base);
  created_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outcome_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&billableperiod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&billableperiod_)) + sizeof(type_));
}

ExplanationOfBenefitObject::~ExplanationOfBenefitObject() {
  // @@protoc_insertion_point(destructor:patient.ExplanationOfBenefitObject)
  SharedDtor();
}

void ExplanationOfBenefitObject::SharedDtor() {
  created_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outcome_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete billableperiod_;
  if (this != internal_default_instance()) delete claim_;
  if (this != internal_default_instance()) delete insurer_;
  if (this != internal_default_instance()) delete patient_;
  if (this != internal_default_instance()) delete payment_;
  if (this != internal_default_instance()) delete provider_;
  if (this != internal_default_instance()) delete referral_;
  if (this != internal_default_instance()) delete type_;
}

void ExplanationOfBenefitObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExplanationOfBenefitObject& ExplanationOfBenefitObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExplanationOfBenefitObject_customized_2eproto.base);
  return *internal_default_instance();
}


void ExplanationOfBenefitObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.ExplanationOfBenefitObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  careteam_.Clear();
  contained_.Clear();
  diagnosis_.Clear();
  identifier_.Clear();
  insurance_.Clear();
  item_.Clear();
  total_.Clear();
  created_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outcome_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && billableperiod_ != nullptr) {
    delete billableperiod_;
  }
  billableperiod_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && claim_ != nullptr) {
    delete claim_;
  }
  claim_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && insurer_ != nullptr) {
    delete insurer_;
  }
  insurer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && patient_ != nullptr) {
    delete patient_;
  }
  patient_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && payment_ != nullptr) {
    delete payment_;
  }
  payment_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && provider_ != nullptr) {
    delete provider_;
  }
  provider_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && referral_ != nullptr) {
    delete referral_;
  }
  referral_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ExplanationOfBenefitObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Period billablePeriod = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_billableperiod(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.CareTeam careTeam = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_careteam(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Reference claim = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_claim(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Contained contained = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contained(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string created = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_created(), ptr, ctx, "patient.ExplanationOfBenefitObject.created");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Diagnosis diagnosis = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_diagnosis(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // string id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.ExplanationOfBenefitObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Identifier identifier = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifier(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.Insurance insurance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_insurance(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Reference insurer = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_insurer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Item item = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // string outcome = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_outcome(), ptr, ctx, "patient.ExplanationOfBenefitObject.outcome");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference patient = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_patient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Payment payment = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_payment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference provider = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_provider(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference referral = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_referral(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resourceType = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.ExplanationOfBenefitObject.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_status(), ptr, ctx, "patient.ExplanationOfBenefitObject.status");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Total total = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_total(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Category type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string use = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_use(), ptr, ctx, "patient.ExplanationOfBenefitObject.use");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExplanationOfBenefitObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.ExplanationOfBenefitObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Period billablePeriod = 1;
  if (this->has_billableperiod()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::billableperiod(this), target, stream);
  }

  // repeated .patient.CareTeam careTeam = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_careteam_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_careteam(i), target, stream);
  }

  // .patient.Reference claim = 3;
  if (this->has_claim()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::claim(this), target, stream);
  }

  // repeated .patient.Contained contained = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contained_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_contained(i), target, stream);
  }

  // string created = 5;
  if (this->created().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created().data(), static_cast<int>(this->_internal_created().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ExplanationOfBenefitObject.created");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_created(), target);
  }

  // repeated .patient.Diagnosis diagnosis = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_diagnosis_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_diagnosis(i), target, stream);
  }

  // string id = 7;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ExplanationOfBenefitObject.id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_id(), target);
  }

  // repeated .patient.Identifier identifier = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifier_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(8, this->_internal_identifier(i), target, stream);
  }

  // repeated .patient.Insurance insurance = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_insurance_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(9, this->_internal_insurance(i), target, stream);
  }

  // .patient.Reference insurer = 10;
  if (this->has_insurer()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::insurer(this), target, stream);
  }

  // repeated .patient.Item item = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(11, this->_internal_item(i), target, stream);
  }

  // string outcome = 12;
  if (this->outcome().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outcome().data(), static_cast<int>(this->_internal_outcome().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ExplanationOfBenefitObject.outcome");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_outcome(), target);
  }

  // .patient.Reference patient = 13;
  if (this->has_patient()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::patient(this), target, stream);
  }

  // .patient.Payment payment = 14;
  if (this->has_payment()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::payment(this), target, stream);
  }

  // .patient.Reference provider = 15;
  if (this->has_provider()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::provider(this), target, stream);
  }

  // .patient.Reference referral = 16;
  if (this->has_referral()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, _Internal::referral(this), target, stream);
  }

  // string resourceType = 17;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ExplanationOfBenefitObject.resourceType");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_resourcetype(), target);
  }

  // string status = 18;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ExplanationOfBenefitObject.status");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_status(), target);
  }

  // repeated .patient.Total total = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_total_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(19, this->_internal_total(i), target, stream);
  }

  // .patient.Category type = 20;
  if (this->has_type()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, _Internal::type(this), target, stream);
  }

  // string use = 21;
  if (this->use().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_use().data(), static_cast<int>(this->_internal_use().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ExplanationOfBenefitObject.use");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_use(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.ExplanationOfBenefitObject)
  return target;
}

size_t ExplanationOfBenefitObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.ExplanationOfBenefitObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.CareTeam careTeam = 2;
  total_size += 1UL * this->_internal_careteam_size();
  for (const auto& msg : this->careteam_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Contained contained = 4;
  total_size += 1UL * this->_internal_contained_size();
  for (const auto& msg : this->contained_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Diagnosis diagnosis = 6;
  total_size += 1UL * this->_internal_diagnosis_size();
  for (const auto& msg : this->diagnosis_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Identifier identifier = 8;
  total_size += 1UL * this->_internal_identifier_size();
  for (const auto& msg : this->identifier_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Insurance insurance = 9;
  total_size += 1UL * this->_internal_insurance_size();
  for (const auto& msg : this->insurance_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Item item = 11;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Total total = 19;
  total_size += 2UL * this->_internal_total_size();
  for (const auto& msg : this->total_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string created = 5;
  if (this->created().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created());
  }

  // string id = 7;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string outcome = 12;
  if (this->outcome().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outcome());
  }

  // string resourceType = 17;
  if (this->resourcetype().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  // string status = 18;
  if (this->status().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string use = 21;
  if (this->use().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_use());
  }

  // .patient.Period billablePeriod = 1;
  if (this->has_billableperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *billableperiod_);
  }

  // .patient.Reference claim = 3;
  if (this->has_claim()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *claim_);
  }

  // .patient.Reference insurer = 10;
  if (this->has_insurer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *insurer_);
  }

  // .patient.Reference patient = 13;
  if (this->has_patient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patient_);
  }

  // .patient.Payment payment = 14;
  if (this->has_payment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payment_);
  }

  // .patient.Reference provider = 15;
  if (this->has_provider()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *provider_);
  }

  // .patient.Reference referral = 16;
  if (this->has_referral()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *referral_);
  }

  // .patient.Category type = 20;
  if (this->has_type()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExplanationOfBenefitObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.ExplanationOfBenefitObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ExplanationOfBenefitObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExplanationOfBenefitObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.ExplanationOfBenefitObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.ExplanationOfBenefitObject)
    MergeFrom(*source);
  }
}

void ExplanationOfBenefitObject::MergeFrom(const ExplanationOfBenefitObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.ExplanationOfBenefitObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  careteam_.MergeFrom(from.careteam_);
  contained_.MergeFrom(from.contained_);
  diagnosis_.MergeFrom(from.diagnosis_);
  identifier_.MergeFrom(from.identifier_);
  insurance_.MergeFrom(from.insurance_);
  item_.MergeFrom(from.item_);
  total_.MergeFrom(from.total_);
  if (from.created().size() > 0) {

    created_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.created_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.outcome().size() > 0) {

    outcome_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.outcome_);
  }
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.use().size() > 0) {

    use_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.use_);
  }
  if (from.has_billableperiod()) {
    _internal_mutable_billableperiod()->::patient::Period::MergeFrom(from._internal_billableperiod());
  }
  if (from.has_claim()) {
    _internal_mutable_claim()->::patient::Reference::MergeFrom(from._internal_claim());
  }
  if (from.has_insurer()) {
    _internal_mutable_insurer()->::patient::Reference::MergeFrom(from._internal_insurer());
  }
  if (from.has_patient()) {
    _internal_mutable_patient()->::patient::Reference::MergeFrom(from._internal_patient());
  }
  if (from.has_payment()) {
    _internal_mutable_payment()->::patient::Payment::MergeFrom(from._internal_payment());
  }
  if (from.has_provider()) {
    _internal_mutable_provider()->::patient::Reference::MergeFrom(from._internal_provider());
  }
  if (from.has_referral()) {
    _internal_mutable_referral()->::patient::Reference::MergeFrom(from._internal_referral());
  }
  if (from.has_type()) {
    _internal_mutable_type()->::patient::Category::MergeFrom(from._internal_type());
  }
}

void ExplanationOfBenefitObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.ExplanationOfBenefitObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExplanationOfBenefitObject::CopyFrom(const ExplanationOfBenefitObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.ExplanationOfBenefitObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExplanationOfBenefitObject::IsInitialized() const {
  return true;
}

void ExplanationOfBenefitObject::InternalSwap(ExplanationOfBenefitObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  careteam_.InternalSwap(&other->careteam_);
  contained_.InternalSwap(&other->contained_);
  diagnosis_.InternalSwap(&other->diagnosis_);
  identifier_.InternalSwap(&other->identifier_);
  insurance_.InternalSwap(&other->insurance_);
  item_.InternalSwap(&other->item_);
  total_.InternalSwap(&other->total_);
  created_.Swap(&other->created_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  outcome_.Swap(&other->outcome_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  use_.Swap(&other->use_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(billableperiod_, other->billableperiod_);
  swap(claim_, other->claim_);
  swap(insurer_, other->insurer_);
  swap(patient_, other->patient_);
  swap(payment_, other->payment_);
  swap(provider_, other->provider_);
  swap(referral_, other->referral_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExplanationOfBenefitObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GoalObject::InitAsDefaultInstance() {
  ::patient::_GoalObject_default_instance_._instance.get_mutable()->achievementstatus_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_GoalObject_default_instance_._instance.get_mutable()->description_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_GoalObject_default_instance_._instance.get_mutable()->subject_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class GoalObject::_Internal {
 public:
  static const ::patient::Category& achievementstatus(const GoalObject* msg);
  static const ::patient::Category& description(const GoalObject* msg);
  static const ::patient::Reference& subject(const GoalObject* msg);
};

const ::patient::Category&
GoalObject::_Internal::achievementstatus(const GoalObject* msg) {
  return *msg->achievementstatus_;
}
const ::patient::Category&
GoalObject::_Internal::description(const GoalObject* msg) {
  return *msg->description_;
}
const ::patient::Reference&
GoalObject::_Internal::subject(const GoalObject* msg) {
  return *msg->subject_;
}
GoalObject::GoalObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.GoalObject)
}
GoalObject::GoalObject(const GoalObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  lifecyclestatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lifecyclestatus().empty()) {
    lifecyclestatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lifecyclestatus_);
  }
  if (from._internal_has_achievementstatus()) {
    achievementstatus_ = new ::patient::Category(*from.achievementstatus_);
  } else {
    achievementstatus_ = nullptr;
  }
  if (from._internal_has_description()) {
    description_ = new ::patient::Category(*from.description_);
  } else {
    description_ = nullptr;
  }
  if (from._internal_has_subject()) {
    subject_ = new ::patient::Reference(*from.subject_);
  } else {
    subject_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.GoalObject)
}

void GoalObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GoalObject_customized_2eproto.base);
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lifecyclestatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&achievementstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subject_) -
      reinterpret_cast<char*>(&achievementstatus_)) + sizeof(subject_));
}

GoalObject::~GoalObject() {
  // @@protoc_insertion_point(destructor:patient.GoalObject)
  SharedDtor();
}

void GoalObject::SharedDtor() {
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lifecyclestatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete achievementstatus_;
  if (this != internal_default_instance()) delete description_;
  if (this != internal_default_instance()) delete subject_;
}

void GoalObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GoalObject& GoalObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GoalObject_customized_2eproto.base);
  return *internal_default_instance();
}


void GoalObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.GoalObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lifecyclestatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && achievementstatus_ != nullptr) {
    delete achievementstatus_;
  }
  achievementstatus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && description_ != nullptr) {
    delete description_;
  }
  description_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GoalObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string resourceType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.GoalObject.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.GoalObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lifecycleStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_lifecyclestatus(), ptr, ctx, "patient.GoalObject.lifecycleStatus");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category achievementStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_achievementstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference subject = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GoalObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.GoalObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string resourceType = 1;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.GoalObject.resourceType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_resourcetype(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.GoalObject.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // string lifecycleStatus = 3;
  if (this->lifecyclestatus().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lifecyclestatus().data(), static_cast<int>(this->_internal_lifecyclestatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.GoalObject.lifecycleStatus");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_lifecyclestatus(), target);
  }

  // .patient.Category achievementStatus = 4;
  if (this->has_achievementstatus()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::achievementstatus(this), target, stream);
  }

  // .patient.Category description = 5;
  if (this->has_description()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::description(this), target, stream);
  }

  // .patient.Reference subject = 6;
  if (this->has_subject()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::subject(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.GoalObject)
  return target;
}

size_t GoalObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.GoalObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resourceType = 1;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string lifecycleStatus = 3;
  if (this->lifecyclestatus().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lifecyclestatus());
  }

  // .patient.Category achievementStatus = 4;
  if (this->has_achievementstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *achievementstatus_);
  }

  // .patient.Category description = 5;
  if (this->has_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *description_);
  }

  // .patient.Reference subject = 6;
  if (this->has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GoalObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.GoalObject)
  GOOGLE_DCHECK_NE(&from, this);
  const GoalObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GoalObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.GoalObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.GoalObject)
    MergeFrom(*source);
  }
}

void GoalObject::MergeFrom(const GoalObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.GoalObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.lifecyclestatus().size() > 0) {

    lifecyclestatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lifecyclestatus_);
  }
  if (from.has_achievementstatus()) {
    _internal_mutable_achievementstatus()->::patient::Category::MergeFrom(from._internal_achievementstatus());
  }
  if (from.has_description()) {
    _internal_mutable_description()->::patient::Category::MergeFrom(from._internal_description());
  }
  if (from.has_subject()) {
    _internal_mutable_subject()->::patient::Reference::MergeFrom(from._internal_subject());
  }
}

void GoalObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.GoalObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoalObject::CopyFrom(const GoalObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.GoalObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoalObject::IsInitialized() const {
  return true;
}

void GoalObject::InternalSwap(GoalObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lifecyclestatus_.Swap(&other->lifecyclestatus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(achievementstatus_, other->achievementstatus_);
  swap(description_, other->description_);
  swap(subject_, other->subject_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GoalObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImagingStudyObject::InitAsDefaultInstance() {
  ::patient::_ImagingStudyObject_default_instance_._instance.get_mutable()->subject_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ImagingStudyObject_default_instance_._instance.get_mutable()->encounter_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class ImagingStudyObject::_Internal {
 public:
  static const ::patient::Reference& subject(const ImagingStudyObject* msg);
  static const ::patient::Reference& encounter(const ImagingStudyObject* msg);
};

const ::patient::Reference&
ImagingStudyObject::_Internal::subject(const ImagingStudyObject* msg) {
  return *msg->subject_;
}
const ::patient::Reference&
ImagingStudyObject::_Internal::encounter(const ImagingStudyObject* msg) {
  return *msg->encounter_;
}
ImagingStudyObject::ImagingStudyObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.ImagingStudyObject)
}
ImagingStudyObject::ImagingStudyObject(const ImagingStudyObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      identifier_(from.identifier_),
      series_(from.series_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  started_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_started().empty()) {
    started_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.started_);
  }
  if (from._internal_has_subject()) {
    subject_ = new ::patient::Reference(*from.subject_);
  } else {
    subject_ = nullptr;
  }
  if (from._internal_has_encounter()) {
    encounter_ = new ::patient::Reference(*from.encounter_);
  } else {
    encounter_ = nullptr;
  }
  ::memcpy(&numberofseries_, &from.numberofseries_,
    static_cast<size_t>(reinterpret_cast<char*>(&numberofinstances_) -
    reinterpret_cast<char*>(&numberofseries_)) + sizeof(numberofinstances_));
  // @@protoc_insertion_point(copy_constructor:patient.ImagingStudyObject)
}

void ImagingStudyObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImagingStudyObject_customized_2eproto.base);
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  started_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&subject_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numberofinstances_) -
      reinterpret_cast<char*>(&subject_)) + sizeof(numberofinstances_));
}

ImagingStudyObject::~ImagingStudyObject() {
  // @@protoc_insertion_point(destructor:patient.ImagingStudyObject)
  SharedDtor();
}

void ImagingStudyObject::SharedDtor() {
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  started_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete subject_;
  if (this != internal_default_instance()) delete encounter_;
}

void ImagingStudyObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImagingStudyObject& ImagingStudyObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImagingStudyObject_customized_2eproto.base);
  return *internal_default_instance();
}


void ImagingStudyObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.ImagingStudyObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifier_.Clear();
  series_.Clear();
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  started_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
  ::memset(&numberofseries_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numberofinstances_) -
      reinterpret_cast<char*>(&numberofseries_)) + sizeof(numberofinstances_));
  _internal_metadata_.Clear();
}

const char* ImagingStudyObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string resourceType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.ImagingStudyObject.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.ImagingStudyObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Identifier identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifier(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_status(), ptr, ctx, "patient.ImagingStudyObject.status");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference subject = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference encounter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_encounter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string started = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_started(), ptr, ctx, "patient.ImagingStudyObject.started");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 numberOfSeries = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          numberofseries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 numberOfInstances = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          numberofinstances_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Series series = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_series(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImagingStudyObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.ImagingStudyObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string resourceType = 1;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ImagingStudyObject.resourceType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_resourcetype(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ImagingStudyObject.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // repeated .patient.Identifier identifier = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifier_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_identifier(i), target, stream);
  }

  // string status = 4;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ImagingStudyObject.status");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_status(), target);
  }

  // .patient.Reference subject = 5;
  if (this->has_subject()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::subject(this), target, stream);
  }

  // .patient.Reference encounter = 6;
  if (this->has_encounter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::encounter(this), target, stream);
  }

  // string started = 7;
  if (this->started().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_started().data(), static_cast<int>(this->_internal_started().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ImagingStudyObject.started");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_started(), target);
  }

  // int32 numberOfSeries = 8;
  if (this->numberofseries() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_numberofseries(), target);
  }

  // int32 numberOfInstances = 9;
  if (this->numberofinstances() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_numberofinstances(), target);
  }

  // repeated .patient.Series series = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_series_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(10, this->_internal_series(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.ImagingStudyObject)
  return target;
}

size_t ImagingStudyObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.ImagingStudyObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Identifier identifier = 3;
  total_size += 1UL * this->_internal_identifier_size();
  for (const auto& msg : this->identifier_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Series series = 10;
  total_size += 1UL * this->_internal_series_size();
  for (const auto& msg : this->series_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string resourceType = 1;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string status = 4;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string started = 7;
  if (this->started().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_started());
  }

  // .patient.Reference subject = 5;
  if (this->has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_);
  }

  // .patient.Reference encounter = 6;
  if (this->has_encounter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encounter_);
  }

  // int32 numberOfSeries = 8;
  if (this->numberofseries() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_numberofseries());
  }

  // int32 numberOfInstances = 9;
  if (this->numberofinstances() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_numberofinstances());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImagingStudyObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.ImagingStudyObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ImagingStudyObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImagingStudyObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.ImagingStudyObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.ImagingStudyObject)
    MergeFrom(*source);
  }
}

void ImagingStudyObject::MergeFrom(const ImagingStudyObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.ImagingStudyObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  identifier_.MergeFrom(from.identifier_);
  series_.MergeFrom(from.series_);
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.started().size() > 0) {

    started_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.started_);
  }
  if (from.has_subject()) {
    _internal_mutable_subject()->::patient::Reference::MergeFrom(from._internal_subject());
  }
  if (from.has_encounter()) {
    _internal_mutable_encounter()->::patient::Reference::MergeFrom(from._internal_encounter());
  }
  if (from.numberofseries() != 0) {
    _internal_set_numberofseries(from._internal_numberofseries());
  }
  if (from.numberofinstances() != 0) {
    _internal_set_numberofinstances(from._internal_numberofinstances());
  }
}

void ImagingStudyObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.ImagingStudyObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImagingStudyObject::CopyFrom(const ImagingStudyObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.ImagingStudyObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImagingStudyObject::IsInitialized() const {
  return true;
}

void ImagingStudyObject::InternalSwap(ImagingStudyObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  identifier_.InternalSwap(&other->identifier_);
  series_.InternalSwap(&other->series_);
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  started_.Swap(&other->started_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(subject_, other->subject_);
  swap(encounter_, other->encounter_);
  swap(numberofseries_, other->numberofseries_);
  swap(numberofinstances_, other->numberofinstances_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImagingStudyObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImmunizationObject::InitAsDefaultInstance() {
  ::patient::_ImmunizationObject_default_instance_._instance.get_mutable()->encounter_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ImmunizationObject_default_instance_._instance.get_mutable()->patient_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ImmunizationObject_default_instance_._instance.get_mutable()->vaccinecode_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
}
class ImmunizationObject::_Internal {
 public:
  static const ::patient::Reference& encounter(const ImmunizationObject* msg);
  static const ::patient::Reference& patient(const ImmunizationObject* msg);
  static const ::patient::Category& vaccinecode(const ImmunizationObject* msg);
};

const ::patient::Reference&
ImmunizationObject::_Internal::encounter(const ImmunizationObject* msg) {
  return *msg->encounter_;
}
const ::patient::Reference&
ImmunizationObject::_Internal::patient(const ImmunizationObject* msg) {
  return *msg->patient_;
}
const ::patient::Category&
ImmunizationObject::_Internal::vaccinecode(const ImmunizationObject* msg) {
  return *msg->vaccinecode_;
}
ImmunizationObject::ImmunizationObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.ImmunizationObject)
}
ImmunizationObject::ImmunizationObject(const ImmunizationObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  occurrencedatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_occurrencedatetime().empty()) {
    occurrencedatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.occurrencedatetime_);
  }
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from._internal_has_encounter()) {
    encounter_ = new ::patient::Reference(*from.encounter_);
  } else {
    encounter_ = nullptr;
  }
  if (from._internal_has_patient()) {
    patient_ = new ::patient::Reference(*from.patient_);
  } else {
    patient_ = nullptr;
  }
  if (from._internal_has_vaccinecode()) {
    vaccinecode_ = new ::patient::Category(*from.vaccinecode_);
  } else {
    vaccinecode_ = nullptr;
  }
  primarysource_ = from.primarysource_;
  // @@protoc_insertion_point(copy_constructor:patient.ImmunizationObject)
}

void ImmunizationObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImmunizationObject_customized_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  occurrencedatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&encounter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primarysource_) -
      reinterpret_cast<char*>(&encounter_)) + sizeof(primarysource_));
}

ImmunizationObject::~ImmunizationObject() {
  // @@protoc_insertion_point(destructor:patient.ImmunizationObject)
  SharedDtor();
}

void ImmunizationObject::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  occurrencedatetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete encounter_;
  if (this != internal_default_instance()) delete patient_;
  if (this != internal_default_instance()) delete vaccinecode_;
}

void ImmunizationObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImmunizationObject& ImmunizationObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImmunizationObject_customized_2eproto.base);
  return *internal_default_instance();
}


void ImmunizationObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.ImmunizationObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  occurrencedatetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && patient_ != nullptr) {
    delete patient_;
  }
  patient_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && vaccinecode_ != nullptr) {
    delete vaccinecode_;
  }
  vaccinecode_ = nullptr;
  primarysource_ = false;
  _internal_metadata_.Clear();
}

const char* ImmunizationObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Reference encounter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_encounter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.ImmunizationObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string occurrenceDateTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_occurrencedatetime(), ptr, ctx, "patient.ImmunizationObject.occurrenceDateTime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference patient = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_patient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool primarySource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          primarysource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resourceType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.ImmunizationObject.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_status(), ptr, ctx, "patient.ImmunizationObject.status");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category vaccineCode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_vaccinecode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImmunizationObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.ImmunizationObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Reference encounter = 1;
  if (this->has_encounter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::encounter(this), target, stream);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ImmunizationObject.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // string occurrenceDateTime = 3;
  if (this->occurrencedatetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_occurrencedatetime().data(), static_cast<int>(this->_internal_occurrencedatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ImmunizationObject.occurrenceDateTime");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_occurrencedatetime(), target);
  }

  // .patient.Reference patient = 4;
  if (this->has_patient()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::patient(this), target, stream);
  }

  // bool primarySource = 5;
  if (this->primarysource() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_primarysource(), target);
  }

  // string resourceType = 6;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ImmunizationObject.resourceType");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_resourcetype(), target);
  }

  // string status = 7;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ImmunizationObject.status");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_status(), target);
  }

  // .patient.Category vaccineCode = 8;
  if (this->has_vaccinecode()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::vaccinecode(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.ImmunizationObject)
  return target;
}

size_t ImmunizationObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.ImmunizationObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string occurrenceDateTime = 3;
  if (this->occurrencedatetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_occurrencedatetime());
  }

  // string resourceType = 6;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  // string status = 7;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .patient.Reference encounter = 1;
  if (this->has_encounter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encounter_);
  }

  // .patient.Reference patient = 4;
  if (this->has_patient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patient_);
  }

  // .patient.Category vaccineCode = 8;
  if (this->has_vaccinecode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vaccinecode_);
  }

  // bool primarySource = 5;
  if (this->primarysource() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImmunizationObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.ImmunizationObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ImmunizationObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImmunizationObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.ImmunizationObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.ImmunizationObject)
    MergeFrom(*source);
  }
}

void ImmunizationObject::MergeFrom(const ImmunizationObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.ImmunizationObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.occurrencedatetime().size() > 0) {

    occurrencedatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.occurrencedatetime_);
  }
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.has_encounter()) {
    _internal_mutable_encounter()->::patient::Reference::MergeFrom(from._internal_encounter());
  }
  if (from.has_patient()) {
    _internal_mutable_patient()->::patient::Reference::MergeFrom(from._internal_patient());
  }
  if (from.has_vaccinecode()) {
    _internal_mutable_vaccinecode()->::patient::Category::MergeFrom(from._internal_vaccinecode());
  }
  if (from.primarysource() != 0) {
    _internal_set_primarysource(from._internal_primarysource());
  }
}

void ImmunizationObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.ImmunizationObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImmunizationObject::CopyFrom(const ImmunizationObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.ImmunizationObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImmunizationObject::IsInitialized() const {
  return true;
}

void ImmunizationObject::InternalSwap(ImmunizationObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  occurrencedatetime_.Swap(&other->occurrencedatetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(encounter_, other->encounter_);
  swap(patient_, other->patient_);
  swap(vaccinecode_, other->vaccinecode_);
  swap(primarysource_, other->primarysource_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImmunizationObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MedicationRequestObject::InitAsDefaultInstance() {
  ::patient::_MedicationRequestObject_default_instance_._instance.get_mutable()->encounter_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_MedicationRequestObject_default_instance_._instance.get_mutable()->medicationcodeableconcept_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_MedicationRequestObject_default_instance_._instance.get_mutable()->requester_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_MedicationRequestObject_default_instance_._instance.get_mutable()->subject_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class MedicationRequestObject::_Internal {
 public:
  static const ::patient::Reference& encounter(const MedicationRequestObject* msg);
  static const ::patient::Category& medicationcodeableconcept(const MedicationRequestObject* msg);
  static const ::patient::Reference& requester(const MedicationRequestObject* msg);
  static const ::patient::Reference& subject(const MedicationRequestObject* msg);
};

const ::patient::Reference&
MedicationRequestObject::_Internal::encounter(const MedicationRequestObject* msg) {
  return *msg->encounter_;
}
const ::patient::Category&
MedicationRequestObject::_Internal::medicationcodeableconcept(const MedicationRequestObject* msg) {
  return *msg->medicationcodeableconcept_;
}
const ::patient::Reference&
MedicationRequestObject::_Internal::requester(const MedicationRequestObject* msg) {
  return *msg->requester_;
}
const ::patient::Reference&
MedicationRequestObject::_Internal::subject(const MedicationRequestObject* msg) {
  return *msg->subject_;
}
MedicationRequestObject::MedicationRequestObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.MedicationRequestObject)
}
MedicationRequestObject::MedicationRequestObject(const MedicationRequestObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      reasonreference_(from.reasonreference_),
      dosageinstruction_(from.dosageinstruction_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  authoredon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_authoredon().empty()) {
    authoredon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.authoredon_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  intent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_intent().empty()) {
    intent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.intent_);
  }
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from._internal_has_encounter()) {
    encounter_ = new ::patient::Reference(*from.encounter_);
  } else {
    encounter_ = nullptr;
  }
  if (from._internal_has_medicationcodeableconcept()) {
    medicationcodeableconcept_ = new ::patient::Category(*from.medicationcodeableconcept_);
  } else {
    medicationcodeableconcept_ = nullptr;
  }
  if (from._internal_has_requester()) {
    requester_ = new ::patient::Reference(*from.requester_);
  } else {
    requester_ = nullptr;
  }
  if (from._internal_has_subject()) {
    subject_ = new ::patient::Reference(*from.subject_);
  } else {
    subject_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.MedicationRequestObject)
}

void MedicationRequestObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MedicationRequestObject_customized_2eproto.base);
  authoredon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&encounter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subject_) -
      reinterpret_cast<char*>(&encounter_)) + sizeof(subject_));
}

MedicationRequestObject::~MedicationRequestObject() {
  // @@protoc_insertion_point(destructor:patient.MedicationRequestObject)
  SharedDtor();
}

void MedicationRequestObject::SharedDtor() {
  authoredon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete encounter_;
  if (this != internal_default_instance()) delete medicationcodeableconcept_;
  if (this != internal_default_instance()) delete requester_;
  if (this != internal_default_instance()) delete subject_;
}

void MedicationRequestObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MedicationRequestObject& MedicationRequestObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MedicationRequestObject_customized_2eproto.base);
  return *internal_default_instance();
}


void MedicationRequestObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.MedicationRequestObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reasonreference_.Clear();
  dosageinstruction_.Clear();
  authoredon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && medicationcodeableconcept_ != nullptr) {
    delete medicationcodeableconcept_;
  }
  medicationcodeableconcept_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && requester_ != nullptr) {
    delete requester_;
  }
  requester_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MedicationRequestObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string authoredOn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_authoredon(), ptr, ctx, "patient.MedicationRequestObject.authoredOn");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference encounter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_encounter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.MedicationRequestObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string intent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_intent(), ptr, ctx, "patient.MedicationRequestObject.intent");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category medicationCodeableConcept = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_medicationcodeableconcept(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Reference reasonReference = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reasonreference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Reference requester = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_requester(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resourceType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.MedicationRequestObject.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_status(), ptr, ctx, "patient.MedicationRequestObject.status");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference subject = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.DosageInstruction dosageInstruction = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dosageinstruction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MedicationRequestObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.MedicationRequestObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string authoredOn = 1;
  if (this->authoredon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_authoredon().data(), static_cast<int>(this->_internal_authoredon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.MedicationRequestObject.authoredOn");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_authoredon(), target);
  }

  // .patient.Reference encounter = 2;
  if (this->has_encounter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::encounter(this), target, stream);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.MedicationRequestObject.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // string intent = 4;
  if (this->intent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_intent().data(), static_cast<int>(this->_internal_intent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.MedicationRequestObject.intent");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_intent(), target);
  }

  // .patient.Category medicationCodeableConcept = 5;
  if (this->has_medicationcodeableconcept()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::medicationcodeableconcept(this), target, stream);
  }

  // repeated .patient.Reference reasonReference = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reasonreference_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_reasonreference(i), target, stream);
  }

  // .patient.Reference requester = 7;
  if (this->has_requester()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::requester(this), target, stream);
  }

  // string resourceType = 8;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.MedicationRequestObject.resourceType");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_resourcetype(), target);
  }

  // string status = 9;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.MedicationRequestObject.status");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_status(), target);
  }

  // .patient.Reference subject = 10;
  if (this->has_subject()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::subject(this), target, stream);
  }

  // repeated .patient.DosageInstruction dosageInstruction = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dosageinstruction_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(11, this->_internal_dosageinstruction(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.MedicationRequestObject)
  return target;
}

size_t MedicationRequestObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.MedicationRequestObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Reference reasonReference = 6;
  total_size += 1UL * this->_internal_reasonreference_size();
  for (const auto& msg : this->reasonreference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.DosageInstruction dosageInstruction = 11;
  total_size += 1UL * this->_internal_dosageinstruction_size();
  for (const auto& msg : this->dosageinstruction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string authoredOn = 1;
  if (this->authoredon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_authoredon());
  }

  // string id = 3;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string intent = 4;
  if (this->intent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_intent());
  }

  // string resourceType = 8;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  // string status = 9;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .patient.Reference encounter = 2;
  if (this->has_encounter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encounter_);
  }

  // .patient.Category medicationCodeableConcept = 5;
  if (this->has_medicationcodeableconcept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *medicationcodeableconcept_);
  }

  // .patient.Reference requester = 7;
  if (this->has_requester()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requester_);
  }

  // .patient.Reference subject = 10;
  if (this->has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MedicationRequestObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.MedicationRequestObject)
  GOOGLE_DCHECK_NE(&from, this);
  const MedicationRequestObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MedicationRequestObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.MedicationRequestObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.MedicationRequestObject)
    MergeFrom(*source);
  }
}

void MedicationRequestObject::MergeFrom(const MedicationRequestObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.MedicationRequestObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reasonreference_.MergeFrom(from.reasonreference_);
  dosageinstruction_.MergeFrom(from.dosageinstruction_);
  if (from.authoredon().size() > 0) {

    authoredon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.authoredon_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.intent().size() > 0) {

    intent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.intent_);
  }
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.has_encounter()) {
    _internal_mutable_encounter()->::patient::Reference::MergeFrom(from._internal_encounter());
  }
  if (from.has_medicationcodeableconcept()) {
    _internal_mutable_medicationcodeableconcept()->::patient::Category::MergeFrom(from._internal_medicationcodeableconcept());
  }
  if (from.has_requester()) {
    _internal_mutable_requester()->::patient::Reference::MergeFrom(from._internal_requester());
  }
  if (from.has_subject()) {
    _internal_mutable_subject()->::patient::Reference::MergeFrom(from._internal_subject());
  }
}

void MedicationRequestObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.MedicationRequestObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedicationRequestObject::CopyFrom(const MedicationRequestObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.MedicationRequestObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedicationRequestObject::IsInitialized() const {
  return true;
}

void MedicationRequestObject::InternalSwap(MedicationRequestObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reasonreference_.InternalSwap(&other->reasonreference_);
  dosageinstruction_.InternalSwap(&other->dosageinstruction_);
  authoredon_.Swap(&other->authoredon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  intent_.Swap(&other->intent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(encounter_, other->encounter_);
  swap(medicationcodeableconcept_, other->medicationcodeableconcept_);
  swap(requester_, other->requester_);
  swap(subject_, other->subject_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MedicationRequestObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MedicationAdministrationObject::InitAsDefaultInstance() {
  ::patient::_MedicationAdministrationObject_default_instance_._instance.get_mutable()->medicationcodeableconcept_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_MedicationAdministrationObject_default_instance_._instance.get_mutable()->subject_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_MedicationAdministrationObject_default_instance_._instance.get_mutable()->context_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class MedicationAdministrationObject::_Internal {
 public:
  static const ::patient::Category& medicationcodeableconcept(const MedicationAdministrationObject* msg);
  static const ::patient::Reference& subject(const MedicationAdministrationObject* msg);
  static const ::patient::Reference& context(const MedicationAdministrationObject* msg);
};

const ::patient::Category&
MedicationAdministrationObject::_Internal::medicationcodeableconcept(const MedicationAdministrationObject* msg) {
  return *msg->medicationcodeableconcept_;
}
const ::patient::Reference&
MedicationAdministrationObject::_Internal::subject(const MedicationAdministrationObject* msg) {
  return *msg->subject_;
}
const ::patient::Reference&
MedicationAdministrationObject::_Internal::context(const MedicationAdministrationObject* msg) {
  return *msg->context_;
}
MedicationAdministrationObject::MedicationAdministrationObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.MedicationAdministrationObject)
}
MedicationAdministrationObject::MedicationAdministrationObject(const MedicationAdministrationObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      reasonreference_(from.reasonreference_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  effectivedatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_effectivedatetime().empty()) {
    effectivedatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.effectivedatetime_);
  }
  if (from._internal_has_medicationcodeableconcept()) {
    medicationcodeableconcept_ = new ::patient::Category(*from.medicationcodeableconcept_);
  } else {
    medicationcodeableconcept_ = nullptr;
  }
  if (from._internal_has_subject()) {
    subject_ = new ::patient::Reference(*from.subject_);
  } else {
    subject_ = nullptr;
  }
  if (from._internal_has_context()) {
    context_ = new ::patient::Reference(*from.context_);
  } else {
    context_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.MedicationAdministrationObject)
}

void MedicationAdministrationObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MedicationAdministrationObject_customized_2eproto.base);
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  effectivedatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&medicationcodeableconcept_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&context_) -
      reinterpret_cast<char*>(&medicationcodeableconcept_)) + sizeof(context_));
}

MedicationAdministrationObject::~MedicationAdministrationObject() {
  // @@protoc_insertion_point(destructor:patient.MedicationAdministrationObject)
  SharedDtor();
}

void MedicationAdministrationObject::SharedDtor() {
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  effectivedatetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete medicationcodeableconcept_;
  if (this != internal_default_instance()) delete subject_;
  if (this != internal_default_instance()) delete context_;
}

void MedicationAdministrationObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MedicationAdministrationObject& MedicationAdministrationObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MedicationAdministrationObject_customized_2eproto.base);
  return *internal_default_instance();
}


void MedicationAdministrationObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.MedicationAdministrationObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reasonreference_.Clear();
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  effectivedatetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && medicationcodeableconcept_ != nullptr) {
    delete medicationcodeableconcept_;
  }
  medicationcodeableconcept_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MedicationAdministrationObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string resourceType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.MedicationAdministrationObject.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.MedicationAdministrationObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_status(), ptr, ctx, "patient.MedicationAdministrationObject.status");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category medicationCodeableConcept = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_medicationcodeableconcept(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference subject = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference context = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string effectiveDateTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_effectivedatetime(), ptr, ctx, "patient.MedicationAdministrationObject.effectiveDateTime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Reference reasonReference = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reasonreference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MedicationAdministrationObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.MedicationAdministrationObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string resourceType = 1;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.MedicationAdministrationObject.resourceType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_resourcetype(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.MedicationAdministrationObject.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // string status = 3;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.MedicationAdministrationObject.status");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_status(), target);
  }

  // .patient.Category medicationCodeableConcept = 4;
  if (this->has_medicationcodeableconcept()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::medicationcodeableconcept(this), target, stream);
  }

  // .patient.Reference subject = 5;
  if (this->has_subject()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::subject(this), target, stream);
  }

  // .patient.Reference context = 6;
  if (this->has_context()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::context(this), target, stream);
  }

  // string effectiveDateTime = 7;
  if (this->effectivedatetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_effectivedatetime().data(), static_cast<int>(this->_internal_effectivedatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.MedicationAdministrationObject.effectiveDateTime");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_effectivedatetime(), target);
  }

  // repeated .patient.Reference reasonReference = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reasonreference_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(8, this->_internal_reasonreference(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.MedicationAdministrationObject)
  return target;
}

size_t MedicationAdministrationObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.MedicationAdministrationObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Reference reasonReference = 8;
  total_size += 1UL * this->_internal_reasonreference_size();
  for (const auto& msg : this->reasonreference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string resourceType = 1;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string status = 3;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string effectiveDateTime = 7;
  if (this->effectivedatetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_effectivedatetime());
  }

  // .patient.Category medicationCodeableConcept = 4;
  if (this->has_medicationcodeableconcept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *medicationcodeableconcept_);
  }

  // .patient.Reference subject = 5;
  if (this->has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_);
  }

  // .patient.Reference context = 6;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MedicationAdministrationObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.MedicationAdministrationObject)
  GOOGLE_DCHECK_NE(&from, this);
  const MedicationAdministrationObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MedicationAdministrationObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.MedicationAdministrationObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.MedicationAdministrationObject)
    MergeFrom(*source);
  }
}

void MedicationAdministrationObject::MergeFrom(const MedicationAdministrationObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.MedicationAdministrationObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reasonreference_.MergeFrom(from.reasonreference_);
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.effectivedatetime().size() > 0) {

    effectivedatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.effectivedatetime_);
  }
  if (from.has_medicationcodeableconcept()) {
    _internal_mutable_medicationcodeableconcept()->::patient::Category::MergeFrom(from._internal_medicationcodeableconcept());
  }
  if (from.has_subject()) {
    _internal_mutable_subject()->::patient::Reference::MergeFrom(from._internal_subject());
  }
  if (from.has_context()) {
    _internal_mutable_context()->::patient::Reference::MergeFrom(from._internal_context());
  }
}

void MedicationAdministrationObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.MedicationAdministrationObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedicationAdministrationObject::CopyFrom(const MedicationAdministrationObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.MedicationAdministrationObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedicationAdministrationObject::IsInitialized() const {
  return true;
}

void MedicationAdministrationObject::InternalSwap(MedicationAdministrationObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reasonreference_.InternalSwap(&other->reasonreference_);
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  effectivedatetime_.Swap(&other->effectivedatetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(medicationcodeableconcept_, other->medicationcodeableconcept_);
  swap(subject_, other->subject_);
  swap(context_, other->context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MedicationAdministrationObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObservationObject::InitAsDefaultInstance() {
  ::patient::_ObservationObject_default_instance_._instance.get_mutable()->code_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_ObservationObject_default_instance_._instance.get_mutable()->encounter_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ObservationObject_default_instance_._instance.get_mutable()->subject_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ObservationObject_default_instance_._instance.get_mutable()->valuecodeableconcept_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_ObservationObject_default_instance_._instance.get_mutable()->valuequantity_ = const_cast< ::patient::Quantity*>(
      ::patient::Quantity::internal_default_instance());
}
class ObservationObject::_Internal {
 public:
  static const ::patient::Category& code(const ObservationObject* msg);
  static const ::patient::Reference& encounter(const ObservationObject* msg);
  static const ::patient::Reference& subject(const ObservationObject* msg);
  static const ::patient::Category& valuecodeableconcept(const ObservationObject* msg);
  static const ::patient::Quantity& valuequantity(const ObservationObject* msg);
};

const ::patient::Category&
ObservationObject::_Internal::code(const ObservationObject* msg) {
  return *msg->code_;
}
const ::patient::Reference&
ObservationObject::_Internal::encounter(const ObservationObject* msg) {
  return *msg->encounter_;
}
const ::patient::Reference&
ObservationObject::_Internal::subject(const ObservationObject* msg) {
  return *msg->subject_;
}
const ::patient::Category&
ObservationObject::_Internal::valuecodeableconcept(const ObservationObject* msg) {
  return *msg->valuecodeableconcept_;
}
const ::patient::Quantity&
ObservationObject::_Internal::valuequantity(const ObservationObject* msg) {
  return *msg->valuequantity_;
}
ObservationObject::ObservationObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.ObservationObject)
}
ObservationObject::ObservationObject(const ObservationObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      category_(from.category_),
      component_(from.component_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  effectivedatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_effectivedatetime().empty()) {
    effectivedatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.effectivedatetime_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  issued_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_issued().empty()) {
    issued_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.issued_);
  }
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  valuestring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_valuestring().empty()) {
    valuestring_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.valuestring_);
  }
  if (from._internal_has_code()) {
    code_ = new ::patient::Category(*from.code_);
  } else {
    code_ = nullptr;
  }
  if (from._internal_has_encounter()) {
    encounter_ = new ::patient::Reference(*from.encounter_);
  } else {
    encounter_ = nullptr;
  }
  if (from._internal_has_subject()) {
    subject_ = new ::patient::Reference(*from.subject_);
  } else {
    subject_ = nullptr;
  }
  if (from._internal_has_valuecodeableconcept()) {
    valuecodeableconcept_ = new ::patient::Category(*from.valuecodeableconcept_);
  } else {
    valuecodeableconcept_ = nullptr;
  }
  if (from._internal_has_valuequantity()) {
    valuequantity_ = new ::patient::Quantity(*from.valuequantity_);
  } else {
    valuequantity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.ObservationObject)
}

void ObservationObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObservationObject_customized_2eproto.base);
  effectivedatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issued_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  valuestring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valuequantity_) -
      reinterpret_cast<char*>(&code_)) + sizeof(valuequantity_));
}

ObservationObject::~ObservationObject() {
  // @@protoc_insertion_point(destructor:patient.ObservationObject)
  SharedDtor();
}

void ObservationObject::SharedDtor() {
  effectivedatetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issued_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  valuestring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete code_;
  if (this != internal_default_instance()) delete encounter_;
  if (this != internal_default_instance()) delete subject_;
  if (this != internal_default_instance()) delete valuecodeableconcept_;
  if (this != internal_default_instance()) delete valuequantity_;
}

void ObservationObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObservationObject& ObservationObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObservationObject_customized_2eproto.base);
  return *internal_default_instance();
}


void ObservationObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.ObservationObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  category_.Clear();
  component_.Clear();
  effectivedatetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issued_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  valuestring_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && valuecodeableconcept_ != nullptr) {
    delete valuecodeableconcept_;
  }
  valuecodeableconcept_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && valuequantity_ != nullptr) {
    delete valuequantity_;
  }
  valuequantity_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ObservationObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .patient.Category category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Category code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Component component = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_component(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string effectiveDateTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_effectivedatetime(), ptr, ctx, "patient.ObservationObject.effectiveDateTime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference encounter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_encounter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.ObservationObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string issued = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_issued(), ptr, ctx, "patient.ObservationObject.issued");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resourceType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.ObservationObject.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_status(), ptr, ctx, "patient.ObservationObject.status");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference subject = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category valueCodeableConcept = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_valuecodeableconcept(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Quantity valueQuantity = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_valuequantity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string valueString = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_valuestring(), ptr, ctx, "patient.ObservationObject.valueString");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObservationObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.ObservationObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .patient.Category category = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_category_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_category(i), target, stream);
  }

  // .patient.Category code = 2;
  if (this->has_code()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::code(this), target, stream);
  }

  // repeated .patient.Component component = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_component_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_component(i), target, stream);
  }

  // string effectiveDateTime = 4;
  if (this->effectivedatetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_effectivedatetime().data(), static_cast<int>(this->_internal_effectivedatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ObservationObject.effectiveDateTime");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_effectivedatetime(), target);
  }

  // .patient.Reference encounter = 5;
  if (this->has_encounter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::encounter(this), target, stream);
  }

  // string id = 6;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ObservationObject.id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_id(), target);
  }

  // string issued = 7;
  if (this->issued().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_issued().data(), static_cast<int>(this->_internal_issued().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ObservationObject.issued");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_issued(), target);
  }

  // string resourceType = 8;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ObservationObject.resourceType");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_resourcetype(), target);
  }

  // string status = 9;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ObservationObject.status");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_status(), target);
  }

  // .patient.Reference subject = 10;
  if (this->has_subject()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::subject(this), target, stream);
  }

  // .patient.Category valueCodeableConcept = 11;
  if (this->has_valuecodeableconcept()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::valuecodeableconcept(this), target, stream);
  }

  // .patient.Quantity valueQuantity = 12;
  if (this->has_valuequantity()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::valuequantity(this), target, stream);
  }

  // string valueString = 13;
  if (this->valuestring().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valuestring().data(), static_cast<int>(this->_internal_valuestring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ObservationObject.valueString");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_valuestring(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.ObservationObject)
  return target;
}

size_t ObservationObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.ObservationObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Category category = 1;
  total_size += 1UL * this->_internal_category_size();
  for (const auto& msg : this->category_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Component component = 3;
  total_size += 1UL * this->_internal_component_size();
  for (const auto& msg : this->component_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string effectiveDateTime = 4;
  if (this->effectivedatetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_effectivedatetime());
  }

  // string id = 6;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string issued = 7;
  if (this->issued().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_issued());
  }

  // string resourceType = 8;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  // string status = 9;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string valueString = 13;
  if (this->valuestring().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valuestring());
  }

  // .patient.Category code = 2;
  if (this->has_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *code_);
  }

  // .patient.Reference encounter = 5;
  if (this->has_encounter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encounter_);
  }

  // .patient.Reference subject = 10;
  if (this->has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_);
  }

  // .patient.Category valueCodeableConcept = 11;
  if (this->has_valuecodeableconcept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *valuecodeableconcept_);
  }

  // .patient.Quantity valueQuantity = 12;
  if (this->has_valuequantity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *valuequantity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObservationObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.ObservationObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ObservationObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObservationObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.ObservationObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.ObservationObject)
    MergeFrom(*source);
  }
}

void ObservationObject::MergeFrom(const ObservationObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.ObservationObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  category_.MergeFrom(from.category_);
  component_.MergeFrom(from.component_);
  if (from.effectivedatetime().size() > 0) {

    effectivedatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.effectivedatetime_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.issued().size() > 0) {

    issued_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.issued_);
  }
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.valuestring().size() > 0) {

    valuestring_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.valuestring_);
  }
  if (from.has_code()) {
    _internal_mutable_code()->::patient::Category::MergeFrom(from._internal_code());
  }
  if (from.has_encounter()) {
    _internal_mutable_encounter()->::patient::Reference::MergeFrom(from._internal_encounter());
  }
  if (from.has_subject()) {
    _internal_mutable_subject()->::patient::Reference::MergeFrom(from._internal_subject());
  }
  if (from.has_valuecodeableconcept()) {
    _internal_mutable_valuecodeableconcept()->::patient::Category::MergeFrom(from._internal_valuecodeableconcept());
  }
  if (from.has_valuequantity()) {
    _internal_mutable_valuequantity()->::patient::Quantity::MergeFrom(from._internal_valuequantity());
  }
}

void ObservationObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.ObservationObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObservationObject::CopyFrom(const ObservationObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.ObservationObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservationObject::IsInitialized() const {
  return true;
}

void ObservationObject::InternalSwap(ObservationObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  category_.InternalSwap(&other->category_);
  component_.InternalSwap(&other->component_);
  effectivedatetime_.Swap(&other->effectivedatetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  issued_.Swap(&other->issued_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  valuestring_.Swap(&other->valuestring_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(encounter_, other->encounter_);
  swap(subject_, other->subject_);
  swap(valuecodeableconcept_, other->valuecodeableconcept_);
  swap(valuequantity_, other->valuequantity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObservationObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrganizationObject::InitAsDefaultInstance() {
}
class OrganizationObject::_Internal {
 public:
};

OrganizationObject::OrganizationObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.OrganizationObject)
}
OrganizationObject::OrganizationObject(const OrganizationObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      address_(from.address_),
      identifier_(from.identifier_),
      telecom_(from.telecom_),
      type_(from.type_),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  active_ = from.active_;
  // @@protoc_insertion_point(copy_constructor:patient.OrganizationObject)
}

void OrganizationObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrganizationObject_customized_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  active_ = false;
}

OrganizationObject::~OrganizationObject() {
  // @@protoc_insertion_point(destructor:patient.OrganizationObject)
  SharedDtor();
}

void OrganizationObject::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrganizationObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrganizationObject& OrganizationObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrganizationObject_customized_2eproto.base);
  return *internal_default_instance();
}


void OrganizationObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.OrganizationObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.Clear();
  identifier_.Clear();
  telecom_.Clear();
  type_.Clear();
  extension_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  active_ = false;
  _internal_metadata_.Clear();
}

const char* OrganizationObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Address address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_address(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.OrganizationObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Identifier identifier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifier(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "patient.OrganizationObject.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resourceType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.OrganizationObject.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Telecom telecom = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_telecom(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.Category type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.Extension extension = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrganizationObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.OrganizationObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool active = 1;
  if (this->active() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_active(), target);
  }

  // repeated .patient.Address address = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_address_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_address(i), target, stream);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.OrganizationObject.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // repeated .patient.Identifier identifier = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifier_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_identifier(i), target, stream);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.OrganizationObject.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // string resourceType = 6;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.OrganizationObject.resourceType");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_resourcetype(), target);
  }

  // repeated .patient.Telecom telecom = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_telecom_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(7, this->_internal_telecom(i), target, stream);
  }

  // repeated .patient.Category type = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_type_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(8, this->_internal_type(i), target, stream);
  }

  // repeated .patient.Extension extension = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extension_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(9, this->_internal_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.OrganizationObject)
  return target;
}

size_t OrganizationObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.OrganizationObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Address address = 2;
  total_size += 1UL * this->_internal_address_size();
  for (const auto& msg : this->address_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Identifier identifier = 4;
  total_size += 1UL * this->_internal_identifier_size();
  for (const auto& msg : this->identifier_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Telecom telecom = 7;
  total_size += 1UL * this->_internal_telecom_size();
  for (const auto& msg : this->telecom_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Category type = 8;
  total_size += 1UL * this->_internal_type_size();
  for (const auto& msg : this->type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Extension extension = 9;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string resourceType = 6;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  // bool active = 1;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrganizationObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.OrganizationObject)
  GOOGLE_DCHECK_NE(&from, this);
  const OrganizationObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrganizationObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.OrganizationObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.OrganizationObject)
    MergeFrom(*source);
  }
}

void OrganizationObject::MergeFrom(const OrganizationObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.OrganizationObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_.MergeFrom(from.address_);
  identifier_.MergeFrom(from.identifier_);
  telecom_.MergeFrom(from.telecom_);
  type_.MergeFrom(from.type_);
  extension_.MergeFrom(from.extension_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
}

void OrganizationObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.OrganizationObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrganizationObject::CopyFrom(const OrganizationObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.OrganizationObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrganizationObject::IsInitialized() const {
  return true;
}

void OrganizationObject::InternalSwap(OrganizationObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.InternalSwap(&other->address_);
  identifier_.InternalSwap(&other->identifier_);
  telecom_.InternalSwap(&other->telecom_);
  type_.InternalSwap(&other->type_);
  extension_.InternalSwap(&other->extension_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(active_, other->active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrganizationObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatientObject::InitAsDefaultInstance() {
  ::patient::_PatientObject_default_instance_._instance.get_mutable()->maritalstatus_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_PatientObject_default_instance_._instance.get_mutable()->text_ = const_cast< ::patient::Text*>(
      ::patient::Text::internal_default_instance());
}
class PatientObject::_Internal {
 public:
  static const ::patient::Category& maritalstatus(const PatientObject* msg);
  static const ::patient::Text& text(const PatientObject* msg);
};

const ::patient::Category&
PatientObject::_Internal::maritalstatus(const PatientObject* msg) {
  return *msg->maritalstatus_;
}
const ::patient::Text&
PatientObject::_Internal::text(const PatientObject* msg) {
  return *msg->text_;
}
PatientObject::PatientObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.PatientObject)
}
PatientObject::PatientObject(const PatientObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      address_(from.address_),
      communication_(from.communication_),
      extension_(from.extension_),
      identifier_(from.identifier_),
      name_(from.name_),
      telecom_(from.telecom_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  birthdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_birthdate().empty()) {
    birthdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.birthdate_);
  }
  gender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gender().empty()) {
    gender_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gender_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  deceaseddatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deceaseddatetime().empty()) {
    deceaseddatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deceaseddatetime_);
  }
  if (from._internal_has_maritalstatus()) {
    maritalstatus_ = new ::patient::Category(*from.maritalstatus_);
  } else {
    maritalstatus_ = nullptr;
  }
  if (from._internal_has_text()) {
    text_ = new ::patient::Text(*from.text_);
  } else {
    text_ = nullptr;
  }
  ::memcpy(&multiplebirthboolean_, &from.multiplebirthboolean_,
    static_cast<size_t>(reinterpret_cast<char*>(&multiplebirthinteger_) -
    reinterpret_cast<char*>(&multiplebirthboolean_)) + sizeof(multiplebirthinteger_));
  // @@protoc_insertion_point(copy_constructor:patient.PatientObject)
}

void PatientObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatientObject_customized_2eproto.base);
  birthdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deceaseddatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&maritalstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multiplebirthinteger_) -
      reinterpret_cast<char*>(&maritalstatus_)) + sizeof(multiplebirthinteger_));
}

PatientObject::~PatientObject() {
  // @@protoc_insertion_point(destructor:patient.PatientObject)
  SharedDtor();
}

void PatientObject::SharedDtor() {
  birthdate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deceaseddatetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete maritalstatus_;
  if (this != internal_default_instance()) delete text_;
}

void PatientObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatientObject& PatientObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatientObject_customized_2eproto.base);
  return *internal_default_instance();
}


void PatientObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.PatientObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.Clear();
  communication_.Clear();
  extension_.Clear();
  identifier_.Clear();
  name_.Clear();
  telecom_.Clear();
  birthdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gender_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deceaseddatetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && maritalstatus_ != nullptr) {
    delete maritalstatus_;
  }
  maritalstatus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
  ::memset(&multiplebirthboolean_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multiplebirthinteger_) -
      reinterpret_cast<char*>(&multiplebirthboolean_)) + sizeof(multiplebirthinteger_));
  _internal_metadata_.Clear();
}

const char* PatientObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .patient.Address address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_address(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string birthDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_birthdate(), ptr, ctx, "patient.PatientObject.birthDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Communication communication = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_communication(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.Extension extension = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string gender = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_gender(), ptr, ctx, "patient.PatientObject.gender");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.PatientObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Identifier identifier = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifier(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Category maritalStatus = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_maritalstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool multipleBirthBoolean = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          multiplebirthboolean_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Name name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // string resourceType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.PatientObject.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Telecom telecom = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_telecom(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Text text = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string deceasedDateTime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_deceaseddatetime(), ptr, ctx, "patient.PatientObject.deceasedDateTime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 multipleBirthInteger = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          multiplebirthinteger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatientObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.PatientObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .patient.Address address = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_address_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_address(i), target, stream);
  }

  // string birthDate = 2;
  if (this->birthdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_birthdate().data(), static_cast<int>(this->_internal_birthdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.PatientObject.birthDate");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_birthdate(), target);
  }

  // repeated .patient.Communication communication = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_communication_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_communication(i), target, stream);
  }

  // repeated .patient.Extension extension = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extension_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_extension(i), target, stream);
  }

  // string gender = 5;
  if (this->gender().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gender().data(), static_cast<int>(this->_internal_gender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.PatientObject.gender");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_gender(), target);
  }

  // string id = 6;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.PatientObject.id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_id(), target);
  }

  // repeated .patient.Identifier identifier = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifier_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(7, this->_internal_identifier(i), target, stream);
  }

  // .patient.Category maritalStatus = 8;
  if (this->has_maritalstatus()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::maritalstatus(this), target, stream);
  }

  // bool multipleBirthBoolean = 9;
  if (this->multiplebirthboolean() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_multiplebirthboolean(), target);
  }

  // repeated .patient.Name name = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_name_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(10, this->_internal_name(i), target, stream);
  }

  // string resourceType = 11;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.PatientObject.resourceType");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_resourcetype(), target);
  }

  // repeated .patient.Telecom telecom = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_telecom_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(12, this->_internal_telecom(i), target, stream);
  }

  // .patient.Text text = 13;
  if (this->has_text()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::text(this), target, stream);
  }

  // string deceasedDateTime = 14;
  if (this->deceaseddatetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deceaseddatetime().data(), static_cast<int>(this->_internal_deceaseddatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.PatientObject.deceasedDateTime");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_deceaseddatetime(), target);
  }

  // int32 multipleBirthInteger = 15;
  if (this->multiplebirthinteger() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_multiplebirthinteger(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.PatientObject)
  return target;
}

size_t PatientObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.PatientObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Address address = 1;
  total_size += 1UL * this->_internal_address_size();
  for (const auto& msg : this->address_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Communication communication = 3;
  total_size += 1UL * this->_internal_communication_size();
  for (const auto& msg : this->communication_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Extension extension = 4;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Identifier identifier = 7;
  total_size += 1UL * this->_internal_identifier_size();
  for (const auto& msg : this->identifier_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Name name = 10;
  total_size += 1UL * this->_internal_name_size();
  for (const auto& msg : this->name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Telecom telecom = 12;
  total_size += 1UL * this->_internal_telecom_size();
  for (const auto& msg : this->telecom_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string birthDate = 2;
  if (this->birthdate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_birthdate());
  }

  // string gender = 5;
  if (this->gender().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gender());
  }

  // string id = 6;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string resourceType = 11;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  // string deceasedDateTime = 14;
  if (this->deceaseddatetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deceaseddatetime());
  }

  // .patient.Category maritalStatus = 8;
  if (this->has_maritalstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maritalstatus_);
  }

  // .patient.Text text = 13;
  if (this->has_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *text_);
  }

  // bool multipleBirthBoolean = 9;
  if (this->multiplebirthboolean() != 0) {
    total_size += 1 + 1;
  }

  // int32 multipleBirthInteger = 15;
  if (this->multiplebirthinteger() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiplebirthinteger());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatientObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.PatientObject)
  GOOGLE_DCHECK_NE(&from, this);
  const PatientObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatientObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.PatientObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.PatientObject)
    MergeFrom(*source);
  }
}

void PatientObject::MergeFrom(const PatientObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.PatientObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_.MergeFrom(from.address_);
  communication_.MergeFrom(from.communication_);
  extension_.MergeFrom(from.extension_);
  identifier_.MergeFrom(from.identifier_);
  name_.MergeFrom(from.name_);
  telecom_.MergeFrom(from.telecom_);
  if (from.birthdate().size() > 0) {

    birthdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.birthdate_);
  }
  if (from.gender().size() > 0) {

    gender_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gender_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.deceaseddatetime().size() > 0) {

    deceaseddatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deceaseddatetime_);
  }
  if (from.has_maritalstatus()) {
    _internal_mutable_maritalstatus()->::patient::Category::MergeFrom(from._internal_maritalstatus());
  }
  if (from.has_text()) {
    _internal_mutable_text()->::patient::Text::MergeFrom(from._internal_text());
  }
  if (from.multiplebirthboolean() != 0) {
    _internal_set_multiplebirthboolean(from._internal_multiplebirthboolean());
  }
  if (from.multiplebirthinteger() != 0) {
    _internal_set_multiplebirthinteger(from._internal_multiplebirthinteger());
  }
}

void PatientObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.PatientObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatientObject::CopyFrom(const PatientObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.PatientObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatientObject::IsInitialized() const {
  return true;
}

void PatientObject::InternalSwap(PatientObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.InternalSwap(&other->address_);
  communication_.InternalSwap(&other->communication_);
  extension_.InternalSwap(&other->extension_);
  identifier_.InternalSwap(&other->identifier_);
  name_.InternalSwap(&other->name_);
  telecom_.InternalSwap(&other->telecom_);
  birthdate_.Swap(&other->birthdate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gender_.Swap(&other->gender_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deceaseddatetime_.Swap(&other->deceaseddatetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(maritalstatus_, other->maritalstatus_);
  swap(text_, other->text_);
  swap(multiplebirthboolean_, other->multiplebirthboolean_);
  swap(multiplebirthinteger_, other->multiplebirthinteger_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatientObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PractitionerObject::InitAsDefaultInstance() {
}
class PractitionerObject::_Internal {
 public:
};

PractitionerObject::PractitionerObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.PractitionerObject)
}
PractitionerObject::PractitionerObject(const PractitionerObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      address_(from.address_),
      identifier_(from.identifier_),
      name_(from.name_),
      telecom_(from.telecom_),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gender().empty()) {
    gender_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gender_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  active_ = from.active_;
  // @@protoc_insertion_point(copy_constructor:patient.PractitionerObject)
}

void PractitionerObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PractitionerObject_customized_2eproto.base);
  gender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  active_ = false;
}

PractitionerObject::~PractitionerObject() {
  // @@protoc_insertion_point(destructor:patient.PractitionerObject)
  SharedDtor();
}

void PractitionerObject::SharedDtor() {
  gender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PractitionerObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PractitionerObject& PractitionerObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PractitionerObject_customized_2eproto.base);
  return *internal_default_instance();
}


void PractitionerObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.PractitionerObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.Clear();
  identifier_.Clear();
  name_.Clear();
  telecom_.Clear();
  extension_.Clear();
  gender_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  active_ = false;
  _internal_metadata_.Clear();
}

const char* PractitionerObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Address address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_address(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string gender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_gender(), ptr, ctx, "patient.PractitionerObject.gender");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.PractitionerObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Identifier identifier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifier(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.Name name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // string resourceType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.PractitionerObject.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Telecom telecom = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_telecom(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.Extension extension = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PractitionerObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.PractitionerObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool active = 1;
  if (this->active() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_active(), target);
  }

  // repeated .patient.Address address = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_address_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_address(i), target, stream);
  }

  // string gender = 3;
  if (this->gender().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gender().data(), static_cast<int>(this->_internal_gender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.PractitionerObject.gender");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gender(), target);
  }

  // string id = 4;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.PractitionerObject.id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_id(), target);
  }

  // repeated .patient.Identifier identifier = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifier_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_identifier(i), target, stream);
  }

  // repeated .patient.Name name = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_name_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_name(i), target, stream);
  }

  // string resourceType = 7;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.PractitionerObject.resourceType");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_resourcetype(), target);
  }

  // repeated .patient.Telecom telecom = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_telecom_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(8, this->_internal_telecom(i), target, stream);
  }

  // repeated .patient.Extension extension = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extension_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(9, this->_internal_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.PractitionerObject)
  return target;
}

size_t PractitionerObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.PractitionerObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Address address = 2;
  total_size += 1UL * this->_internal_address_size();
  for (const auto& msg : this->address_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Identifier identifier = 5;
  total_size += 1UL * this->_internal_identifier_size();
  for (const auto& msg : this->identifier_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Name name = 6;
  total_size += 1UL * this->_internal_name_size();
  for (const auto& msg : this->name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Telecom telecom = 8;
  total_size += 1UL * this->_internal_telecom_size();
  for (const auto& msg : this->telecom_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Extension extension = 9;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string gender = 3;
  if (this->gender().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gender());
  }

  // string id = 4;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string resourceType = 7;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  // bool active = 1;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PractitionerObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.PractitionerObject)
  GOOGLE_DCHECK_NE(&from, this);
  const PractitionerObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PractitionerObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.PractitionerObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.PractitionerObject)
    MergeFrom(*source);
  }
}

void PractitionerObject::MergeFrom(const PractitionerObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.PractitionerObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_.MergeFrom(from.address_);
  identifier_.MergeFrom(from.identifier_);
  name_.MergeFrom(from.name_);
  telecom_.MergeFrom(from.telecom_);
  extension_.MergeFrom(from.extension_);
  if (from.gender().size() > 0) {

    gender_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gender_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
}

void PractitionerObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.PractitionerObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PractitionerObject::CopyFrom(const PractitionerObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.PractitionerObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PractitionerObject::IsInitialized() const {
  return true;
}

void PractitionerObject::InternalSwap(PractitionerObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.InternalSwap(&other->address_);
  identifier_.InternalSwap(&other->identifier_);
  name_.InternalSwap(&other->name_);
  telecom_.InternalSwap(&other->telecom_);
  extension_.InternalSwap(&other->extension_);
  gender_.Swap(&other->gender_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(active_, other->active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PractitionerObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcedureObject::InitAsDefaultInstance() {
  ::patient::_ProcedureObject_default_instance_._instance.get_mutable()->code_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_ProcedureObject_default_instance_._instance.get_mutable()->encounter_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ProcedureObject_default_instance_._instance.get_mutable()->performedperiod_ = const_cast< ::patient::Period*>(
      ::patient::Period::internal_default_instance());
  ::patient::_ProcedureObject_default_instance_._instance.get_mutable()->subject_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class ProcedureObject::_Internal {
 public:
  static const ::patient::Category& code(const ProcedureObject* msg);
  static const ::patient::Reference& encounter(const ProcedureObject* msg);
  static const ::patient::Period& performedperiod(const ProcedureObject* msg);
  static const ::patient::Reference& subject(const ProcedureObject* msg);
};

const ::patient::Category&
ProcedureObject::_Internal::code(const ProcedureObject* msg) {
  return *msg->code_;
}
const ::patient::Reference&
ProcedureObject::_Internal::encounter(const ProcedureObject* msg) {
  return *msg->encounter_;
}
const ::patient::Period&
ProcedureObject::_Internal::performedperiod(const ProcedureObject* msg) {
  return *msg->performedperiod_;
}
const ::patient::Reference&
ProcedureObject::_Internal::subject(const ProcedureObject* msg) {
  return *msg->subject_;
}
ProcedureObject::ProcedureObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.ProcedureObject)
}
ProcedureObject::ProcedureObject(const ProcedureObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      reasonreference_(from.reasonreference_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from._internal_has_code()) {
    code_ = new ::patient::Category(*from.code_);
  } else {
    code_ = nullptr;
  }
  if (from._internal_has_encounter()) {
    encounter_ = new ::patient::Reference(*from.encounter_);
  } else {
    encounter_ = nullptr;
  }
  if (from._internal_has_performedperiod()) {
    performedperiod_ = new ::patient::Period(*from.performedperiod_);
  } else {
    performedperiod_ = nullptr;
  }
  if (from._internal_has_subject()) {
    subject_ = new ::patient::Reference(*from.subject_);
  } else {
    subject_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.ProcedureObject)
}

void ProcedureObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcedureObject_customized_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subject_) -
      reinterpret_cast<char*>(&code_)) + sizeof(subject_));
}

ProcedureObject::~ProcedureObject() {
  // @@protoc_insertion_point(destructor:patient.ProcedureObject)
  SharedDtor();
}

void ProcedureObject::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete code_;
  if (this != internal_default_instance()) delete encounter_;
  if (this != internal_default_instance()) delete performedperiod_;
  if (this != internal_default_instance()) delete subject_;
}

void ProcedureObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcedureObject& ProcedureObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcedureObject_customized_2eproto.base);
  return *internal_default_instance();
}


void ProcedureObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.ProcedureObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reasonreference_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && performedperiod_ != nullptr) {
    delete performedperiod_;
  }
  performedperiod_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ProcedureObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Category code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference encounter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_encounter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.ProcedureObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Period performedPeriod = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_performedperiod(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Reference reasonReference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reasonreference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // string resourceType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.ProcedureObject.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_status(), ptr, ctx, "patient.ProcedureObject.status");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference subject = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcedureObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.ProcedureObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Category code = 1;
  if (this->has_code()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::code(this), target, stream);
  }

  // .patient.Reference encounter = 2;
  if (this->has_encounter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::encounter(this), target, stream);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ProcedureObject.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // .patient.Period performedPeriod = 4;
  if (this->has_performedperiod()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::performedperiod(this), target, stream);
  }

  // repeated .patient.Reference reasonReference = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reasonreference_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_reasonreference(i), target, stream);
  }

  // string resourceType = 6;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ProcedureObject.resourceType");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_resourcetype(), target);
  }

  // string status = 7;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ProcedureObject.status");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_status(), target);
  }

  // .patient.Reference subject = 8;
  if (this->has_subject()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::subject(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.ProcedureObject)
  return target;
}

size_t ProcedureObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.ProcedureObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Reference reasonReference = 5;
  total_size += 1UL * this->_internal_reasonreference_size();
  for (const auto& msg : this->reasonreference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string resourceType = 6;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  // string status = 7;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .patient.Category code = 1;
  if (this->has_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *code_);
  }

  // .patient.Reference encounter = 2;
  if (this->has_encounter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encounter_);
  }

  // .patient.Period performedPeriod = 4;
  if (this->has_performedperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *performedperiod_);
  }

  // .patient.Reference subject = 8;
  if (this->has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcedureObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.ProcedureObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcedureObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcedureObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.ProcedureObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.ProcedureObject)
    MergeFrom(*source);
  }
}

void ProcedureObject::MergeFrom(const ProcedureObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.ProcedureObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reasonreference_.MergeFrom(from.reasonreference_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.has_code()) {
    _internal_mutable_code()->::patient::Category::MergeFrom(from._internal_code());
  }
  if (from.has_encounter()) {
    _internal_mutable_encounter()->::patient::Reference::MergeFrom(from._internal_encounter());
  }
  if (from.has_performedperiod()) {
    _internal_mutable_performedperiod()->::patient::Period::MergeFrom(from._internal_performedperiod());
  }
  if (from.has_subject()) {
    _internal_mutable_subject()->::patient::Reference::MergeFrom(from._internal_subject());
  }
}

void ProcedureObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.ProcedureObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcedureObject::CopyFrom(const ProcedureObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.ProcedureObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcedureObject::IsInitialized() const {
  return true;
}

void ProcedureObject::InternalSwap(ProcedureObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reasonreference_.InternalSwap(&other->reasonreference_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(encounter_, other->encounter_);
  swap(performedperiod_, other->performedperiod_);
  swap(subject_, other->subject_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcedureObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatientRecord::InitAsDefaultInstance() {
  ::patient::_PatientRecord_default_instance_._instance.get_mutable()->patient_ = const_cast< ::patient::PatientObject*>(
      ::patient::PatientObject::internal_default_instance());
}
class PatientRecord::_Internal {
 public:
  static const ::patient::PatientObject& patient(const PatientRecord* msg);
};

const ::patient::PatientObject&
PatientRecord::_Internal::patient(const PatientRecord* msg) {
  return *msg->patient_;
}
PatientRecord::PatientRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.PatientRecord)
}
PatientRecord::PatientRecord(const PatientRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      careplan_(from.careplan_),
      careteam_(from.careteam_),
      claim_(from.claim_),
      condition_(from.condition_),
      diagnosticreport_(from.diagnosticreport_),
      encounter_(from.encounter_),
      explanationofbenefit_(from.explanationofbenefit_),
      immunization_(from.immunization_),
      medicationrequest_(from.medicationrequest_),
      observation_(from.observation_),
      organization_(from.organization_),
      practitioner_(from.practitioner_),
      procedure_(from.procedure_),
      allergyintolerance_(from.allergyintolerance_),
      goal_(from.goal_),
      imagingstudy_(from.imagingstudy_),
      device_(from.device_),
      medicationadministration_(from.medicationadministration_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_patient()) {
    patient_ = new ::patient::PatientObject(*from.patient_);
  } else {
    patient_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.PatientRecord)
}

void PatientRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatientRecord_customized_2eproto.base);
  patient_ = nullptr;
}

PatientRecord::~PatientRecord() {
  // @@protoc_insertion_point(destructor:patient.PatientRecord)
  SharedDtor();
}

void PatientRecord::SharedDtor() {
  if (this != internal_default_instance()) delete patient_;
}

void PatientRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatientRecord& PatientRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatientRecord_customized_2eproto.base);
  return *internal_default_instance();
}


void PatientRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.PatientRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  careplan_.Clear();
  careteam_.Clear();
  claim_.Clear();
  condition_.Clear();
  diagnosticreport_.Clear();
  encounter_.Clear();
  explanationofbenefit_.Clear();
  immunization_.Clear();
  medicationrequest_.Clear();
  observation_.Clear();
  organization_.Clear();
  practitioner_.Clear();
  procedure_.Clear();
  allergyintolerance_.Clear();
  goal_.Clear();
  imagingstudy_.Clear();
  device_.Clear();
  medicationadministration_.Clear();
  if (GetArenaNoVirtual() == nullptr && patient_ != nullptr) {
    delete patient_;
  }
  patient_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatientRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.PatientObject patient = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.CarePlanObject carePlan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_careplan(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.CareTeamObject careTeam = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_careteam(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.ClaimObject claim = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_claim(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.ConditionObject condition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_condition(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.DiagnosticReportObject diagnosticReport = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_diagnosticreport(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.EncounterObject encounter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_encounter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.ExplanationOfBenefitObject explanationOfBenefit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_explanationofbenefit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.ImmunizationObject immunization = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_immunization(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.MedicationRequestObject medicationRequest = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_medicationrequest(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.ObservationObject observation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_observation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.OrganizationObject organization = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_organization(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.PractitionerObject practitioner = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_practitioner(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.ProcedureObject procedure = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_procedure(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.AllergyIntoleranceObject allergyIntolerance = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_allergyintolerance(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.GoalObject goal = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_goal(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.ImagingStudyObject imagingStudy = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_imagingstudy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.DeviceObject device = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_device(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.MedicationAdministrationObject medicationAdministration = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_medicationadministration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatientRecord::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.PatientRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.PatientObject patient = 1;
  if (this->has_patient()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::patient(this), target, stream);
  }

  // repeated .patient.CarePlanObject carePlan = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_careplan_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_careplan(i), target, stream);
  }

  // repeated .patient.CareTeamObject careTeam = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_careteam_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_careteam(i), target, stream);
  }

  // repeated .patient.ClaimObject claim = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_claim_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_claim(i), target, stream);
  }

  // repeated .patient.ConditionObject condition = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_condition_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_condition(i), target, stream);
  }

  // repeated .patient.DiagnosticReportObject diagnosticReport = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_diagnosticreport_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_diagnosticreport(i), target, stream);
  }

  // repeated .patient.EncounterObject encounter = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_encounter_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(7, this->_internal_encounter(i), target, stream);
  }

  // repeated .patient.ExplanationOfBenefitObject explanationOfBenefit = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_explanationofbenefit_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(8, this->_internal_explanationofbenefit(i), target, stream);
  }

  // repeated .patient.ImmunizationObject immunization = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_immunization_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(9, this->_internal_immunization(i), target, stream);
  }

  // repeated .patient.MedicationRequestObject medicationRequest = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_medicationrequest_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(10, this->_internal_medicationrequest(i), target, stream);
  }

  // repeated .patient.ObservationObject observation = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_observation_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(11, this->_internal_observation(i), target, stream);
  }

  // repeated .patient.OrganizationObject organization = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_organization_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(12, this->_internal_organization(i), target, stream);
  }

  // repeated .patient.PractitionerObject practitioner = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_practitioner_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(13, this->_internal_practitioner(i), target, stream);
  }

  // repeated .patient.ProcedureObject procedure = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_procedure_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(14, this->_internal_procedure(i), target, stream);
  }

  // repeated .patient.AllergyIntoleranceObject allergyIntolerance = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_allergyintolerance_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(15, this->_internal_allergyintolerance(i), target, stream);
  }

  // repeated .patient.GoalObject goal = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_goal_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(16, this->_internal_goal(i), target, stream);
  }

  // repeated .patient.ImagingStudyObject imagingStudy = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_imagingstudy_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(17, this->_internal_imagingstudy(i), target, stream);
  }

  // repeated .patient.DeviceObject device = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_device_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(18, this->_internal_device(i), target, stream);
  }

  // repeated .patient.MedicationAdministrationObject medicationAdministration = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_medicationadministration_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(19, this->_internal_medicationadministration(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.PatientRecord)
  return target;
}

size_t PatientRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.PatientRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.CarePlanObject carePlan = 2;
  total_size += 1UL * this->_internal_careplan_size();
  for (const auto& msg : this->careplan_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.CareTeamObject careTeam = 3;
  total_size += 1UL * this->_internal_careteam_size();
  for (const auto& msg : this->careteam_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.ClaimObject claim = 4;
  total_size += 1UL * this->_internal_claim_size();
  for (const auto& msg : this->claim_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.ConditionObject condition = 5;
  total_size += 1UL * this->_internal_condition_size();
  for (const auto& msg : this->condition_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.DiagnosticReportObject diagnosticReport = 6;
  total_size += 1UL * this->_internal_diagnosticreport_size();
  for (const auto& msg : this->diagnosticreport_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.EncounterObject encounter = 7;
  total_size += 1UL * this->_internal_encounter_size();
  for (const auto& msg : this->encounter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.ExplanationOfBenefitObject explanationOfBenefit = 8;
  total_size += 1UL * this->_internal_explanationofbenefit_size();
  for (const auto& msg : this->explanationofbenefit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.ImmunizationObject immunization = 9;
  total_size += 1UL * this->_internal_immunization_size();
  for (const auto& msg : this->immunization_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.MedicationRequestObject medicationRequest = 10;
  total_size += 1UL * this->_internal_medicationrequest_size();
  for (const auto& msg : this->medicationrequest_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.ObservationObject observation = 11;
  total_size += 1UL * this->_internal_observation_size();
  for (const auto& msg : this->observation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.OrganizationObject organization = 12;
  total_size += 1UL * this->_internal_organization_size();
  for (const auto& msg : this->organization_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.PractitionerObject practitioner = 13;
  total_size += 1UL * this->_internal_practitioner_size();
  for (const auto& msg : this->practitioner_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.ProcedureObject procedure = 14;
  total_size += 1UL * this->_internal_procedure_size();
  for (const auto& msg : this->procedure_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.AllergyIntoleranceObject allergyIntolerance = 15;
  total_size += 1UL * this->_internal_allergyintolerance_size();
  for (const auto& msg : this->allergyintolerance_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.GoalObject goal = 16;
  total_size += 2UL * this->_internal_goal_size();
  for (const auto& msg : this->goal_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.ImagingStudyObject imagingStudy = 17;
  total_size += 2UL * this->_internal_imagingstudy_size();
  for (const auto& msg : this->imagingstudy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.DeviceObject device = 18;
  total_size += 2UL * this->_internal_device_size();
  for (const auto& msg : this->device_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.MedicationAdministrationObject medicationAdministration = 19;
  total_size += 2UL * this->_internal_medicationadministration_size();
  for (const auto& msg : this->medicationadministration_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .patient.PatientObject patient = 1;
  if (this->has_patient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patient_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatientRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.PatientRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const PatientRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatientRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.PatientRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.PatientRecord)
    MergeFrom(*source);
  }
}

void PatientRecord::MergeFrom(const PatientRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.PatientRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  careplan_.MergeFrom(from.careplan_);
  careteam_.MergeFrom(from.careteam_);
  claim_.MergeFrom(from.claim_);
  condition_.MergeFrom(from.condition_);
  diagnosticreport_.MergeFrom(from.diagnosticreport_);
  encounter_.MergeFrom(from.encounter_);
  explanationofbenefit_.MergeFrom(from.explanationofbenefit_);
  immunization_.MergeFrom(from.immunization_);
  medicationrequest_.MergeFrom(from.medicationrequest_);
  observation_.MergeFrom(from.observation_);
  organization_.MergeFrom(from.organization_);
  practitioner_.MergeFrom(from.practitioner_);
  procedure_.MergeFrom(from.procedure_);
  allergyintolerance_.MergeFrom(from.allergyintolerance_);
  goal_.MergeFrom(from.goal_);
  imagingstudy_.MergeFrom(from.imagingstudy_);
  device_.MergeFrom(from.device_);
  medicationadministration_.MergeFrom(from.medicationadministration_);
  if (from.has_patient()) {
    _internal_mutable_patient()->::patient::PatientObject::MergeFrom(from._internal_patient());
  }
}

void PatientRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.PatientRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatientRecord::CopyFrom(const PatientRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.PatientRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatientRecord::IsInitialized() const {
  return true;
}

void PatientRecord::InternalSwap(PatientRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  careplan_.InternalSwap(&other->careplan_);
  careteam_.InternalSwap(&other->careteam_);
  claim_.InternalSwap(&other->claim_);
  condition_.InternalSwap(&other->condition_);
  diagnosticreport_.InternalSwap(&other->diagnosticreport_);
  encounter_.InternalSwap(&other->encounter_);
  explanationofbenefit_.InternalSwap(&other->explanationofbenefit_);
  immunization_.InternalSwap(&other->immunization_);
  medicationrequest_.InternalSwap(&other->medicationrequest_);
  observation_.InternalSwap(&other->observation_);
  organization_.InternalSwap(&other->organization_);
  practitioner_.InternalSwap(&other->practitioner_);
  procedure_.InternalSwap(&other->procedure_);
  allergyintolerance_.InternalSwap(&other->allergyintolerance_);
  goal_.InternalSwap(&other->goal_);
  imagingstudy_.InternalSwap(&other->imagingstudy_);
  device_.InternalSwap(&other->device_);
  medicationadministration_.InternalSwap(&other->medicationadministration_);
  swap(patient_, other->patient_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatientRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace patient
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::patient::Activity* Arena::CreateMaybeMessage< ::patient::Activity >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Activity >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Address* Arena::CreateMaybeMessage< ::patient::Address >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Address >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Adjudication* Arena::CreateMaybeMessage< ::patient::Adjudication >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Adjudication >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Amount* Arena::CreateMaybeMessage< ::patient::Amount >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Amount >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::CareTeam* Arena::CreateMaybeMessage< ::patient::CareTeam >(Arena* arena) {
  return Arena::CreateInternal< ::patient::CareTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Communication* Arena::CreateMaybeMessage< ::patient::Communication >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Communication >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Component* Arena::CreateMaybeMessage< ::patient::Component >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Component >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Contained* Arena::CreateMaybeMessage< ::patient::Contained >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Contained >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Detail* Arena::CreateMaybeMessage< ::patient::Detail >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Detail >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Diagnosis* Arena::CreateMaybeMessage< ::patient::Diagnosis >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Diagnosis >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Entry* Arena::CreateMaybeMessage< ::patient::Entry >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Extension* Arena::CreateMaybeMessage< ::patient::Extension >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Extension >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Identifier* Arena::CreateMaybeMessage< ::patient::Identifier >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Identifier >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Insurance* Arena::CreateMaybeMessage< ::patient::Insurance >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Insurance >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Item* Arena::CreateMaybeMessage< ::patient::Item >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Item >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Name* Arena::CreateMaybeMessage< ::patient::Name >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Name >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Participant* Arena::CreateMaybeMessage< ::patient::Participant >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Participant >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Payment* Arena::CreateMaybeMessage< ::patient::Payment >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Payment >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Procedure* Arena::CreateMaybeMessage< ::patient::Procedure >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Procedure >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Request* Arena::CreateMaybeMessage< ::patient::Request >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Root* Arena::CreateMaybeMessage< ::patient::Root >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Root >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::SupportingInfo* Arena::CreateMaybeMessage< ::patient::SupportingInfo >(Arena* arena) {
  return Arena::CreateInternal< ::patient::SupportingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Telecom* Arena::CreateMaybeMessage< ::patient::Telecom >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Telecom >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Text* Arena::CreateMaybeMessage< ::patient::Text >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Text >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Total* Arena::CreateMaybeMessage< ::patient::Total >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Total >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Coding* Arena::CreateMaybeMessage< ::patient::Coding >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Coding >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Quantity* Arena::CreateMaybeMessage< ::patient::Quantity >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Quantity >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Reference* Arena::CreateMaybeMessage< ::patient::Reference >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Reference >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Category* Arena::CreateMaybeMessage< ::patient::Category >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Category >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Period* Arena::CreateMaybeMessage< ::patient::Period >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Period >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Resource* Arena::CreateMaybeMessage< ::patient::Resource >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Resource >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::DosageInstruction* Arena::CreateMaybeMessage< ::patient::DosageInstruction >(Arena* arena) {
  return Arena::CreateInternal< ::patient::DosageInstruction >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Repeat* Arena::CreateMaybeMessage< ::patient::Repeat >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Repeat >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Timing* Arena::CreateMaybeMessage< ::patient::Timing >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Timing >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::DoseAndRate* Arena::CreateMaybeMessage< ::patient::DoseAndRate >(Arena* arena) {
  return Arena::CreateInternal< ::patient::DoseAndRate >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Onset* Arena::CreateMaybeMessage< ::patient::Onset >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Onset >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Reaction* Arena::CreateMaybeMessage< ::patient::Reaction >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Reaction >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Instance* Arena::CreateMaybeMessage< ::patient::Instance >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Instance >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Series* Arena::CreateMaybeMessage< ::patient::Series >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Series >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Hospitalization* Arena::CreateMaybeMessage< ::patient::Hospitalization >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Hospitalization >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Carrier* Arena::CreateMaybeMessage< ::patient::Carrier >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Carrier >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::DeviceName* Arena::CreateMaybeMessage< ::patient::DeviceName >(Arena* arena) {
  return Arena::CreateInternal< ::patient::DeviceName >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::AllergyIntoleranceObject* Arena::CreateMaybeMessage< ::patient::AllergyIntoleranceObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::AllergyIntoleranceObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::CarePlanObject* Arena::CreateMaybeMessage< ::patient::CarePlanObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::CarePlanObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::CareTeamObject* Arena::CreateMaybeMessage< ::patient::CareTeamObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::CareTeamObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::ClaimObject* Arena::CreateMaybeMessage< ::patient::ClaimObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::ClaimObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::ConditionObject* Arena::CreateMaybeMessage< ::patient::ConditionObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::ConditionObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::DeviceObject* Arena::CreateMaybeMessage< ::patient::DeviceObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::DeviceObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::DiagnosticReportObject* Arena::CreateMaybeMessage< ::patient::DiagnosticReportObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::DiagnosticReportObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::EncounterObject* Arena::CreateMaybeMessage< ::patient::EncounterObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::EncounterObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::ExplanationOfBenefitObject* Arena::CreateMaybeMessage< ::patient::ExplanationOfBenefitObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::ExplanationOfBenefitObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::GoalObject* Arena::CreateMaybeMessage< ::patient::GoalObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::GoalObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::ImagingStudyObject* Arena::CreateMaybeMessage< ::patient::ImagingStudyObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::ImagingStudyObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::ImmunizationObject* Arena::CreateMaybeMessage< ::patient::ImmunizationObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::ImmunizationObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::MedicationRequestObject* Arena::CreateMaybeMessage< ::patient::MedicationRequestObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::MedicationRequestObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::MedicationAdministrationObject* Arena::CreateMaybeMessage< ::patient::MedicationAdministrationObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::MedicationAdministrationObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::ObservationObject* Arena::CreateMaybeMessage< ::patient::ObservationObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::ObservationObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::OrganizationObject* Arena::CreateMaybeMessage< ::patient::OrganizationObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::OrganizationObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::PatientObject* Arena::CreateMaybeMessage< ::patient::PatientObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::PatientObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::PractitionerObject* Arena::CreateMaybeMessage< ::patient::PractitionerObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::PractitionerObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::ProcedureObject* Arena::CreateMaybeMessage< ::patient::ProcedureObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::ProcedureObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::PatientRecord* Arena::CreateMaybeMessage< ::patient::PatientRecord >(Arena* arena) {
  return Arena::CreateInternal< ::patient::PatientRecord >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
