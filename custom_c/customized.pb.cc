// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: customized.proto

#include "customized.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Activity_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Address_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Adjudication_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Amount_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_CarePlanObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CareTeam_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CareTeamObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Category_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_ClaimObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coding_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Communication_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Component_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConditionObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Contained_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Detail_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Diagnosis_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DiagnosticReportObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_EncounterObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Entry_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_ExplanationOfBenefitObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Extension_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Identifier_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ImmunizationObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Insurance_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Item_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MedicationRequestObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Name_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ObservationObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_OrganizationObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Participant_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_PatientObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Payment_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Period_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PractitionerObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Procedure_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProcedureObject_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quantity_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Reference_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_Resource_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SupportingInfo_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Telecom_customized_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_customized_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Total_customized_2eproto;
namespace patient {
class ActivityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Activity> _instance;
} _Activity_default_instance_;
class AddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Address> _instance;
} _Address_default_instance_;
class AdjudicationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Adjudication> _instance;
} _Adjudication_default_instance_;
class AmountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Amount> _instance;
} _Amount_default_instance_;
class CareTeamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CareTeam> _instance;
} _CareTeam_default_instance_;
class CommunicationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Communication> _instance;
} _Communication_default_instance_;
class ComponentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Component> _instance;
} _Component_default_instance_;
class ContainedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Contained> _instance;
} _Contained_default_instance_;
class DetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Detail> _instance;
} _Detail_default_instance_;
class DiagnosisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Diagnosis> _instance;
} _Diagnosis_default_instance_;
class EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Entry> _instance;
} _Entry_default_instance_;
class ExtensionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Extension> _instance;
} _Extension_default_instance_;
class IdentifierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Identifier> _instance;
} _Identifier_default_instance_;
class InsuranceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Insurance> _instance;
} _Insurance_default_instance_;
class ItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Item> _instance;
} _Item_default_instance_;
class NameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Name> _instance;
} _Name_default_instance_;
class ParticipantDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Participant> _instance;
} _Participant_default_instance_;
class PaymentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Payment> _instance;
} _Payment_default_instance_;
class ProcedureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Procedure> _instance;
} _Procedure_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request> _instance;
} _Request_default_instance_;
class RootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Root> _instance;
} _Root_default_instance_;
class SupportingInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SupportingInfo> _instance;
} _SupportingInfo_default_instance_;
class TelecomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Telecom> _instance;
} _Telecom_default_instance_;
class TextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Text> _instance;
} _Text_default_instance_;
class TotalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Total> _instance;
} _Total_default_instance_;
class CodingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Coding> _instance;
} _Coding_default_instance_;
class QuantityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Quantity> _instance;
} _Quantity_default_instance_;
class ReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Reference> _instance;
} _Reference_default_instance_;
class CategoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Category> _instance;
} _Category_default_instance_;
class PeriodDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Period> _instance;
} _Period_default_instance_;
class ResourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Resource> _instance;
  const ::patient::CarePlanObject* careplan_;
  const ::patient::CareTeamObject* careteam_;
  const ::patient::ClaimObject* claim_;
  const ::patient::ConditionObject* condition_;
  const ::patient::DiagnosticReportObject* diagnosticreport_;
  const ::patient::EncounterObject* encounter_;
  const ::patient::ExplanationOfBenefitObject* explanationofbenefit_;
  const ::patient::ImmunizationObject* immunization_;
  const ::patient::MedicationRequestObject* medicationrequest_;
  const ::patient::ObservationObject* observation_;
  const ::patient::OrganizationObject* organiation_;
  const ::patient::PatientObject* patient_;
  const ::patient::PractitionerObject* practitioner_;
  const ::patient::ProcedureObject* procedure_;
} _Resource_default_instance_;
class CarePlanObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CarePlanObject> _instance;
} _CarePlanObject_default_instance_;
class CareTeamObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CareTeamObject> _instance;
} _CareTeamObject_default_instance_;
class ClaimObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClaimObject> _instance;
} _ClaimObject_default_instance_;
class ConditionObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConditionObject> _instance;
} _ConditionObject_default_instance_;
class DiagnosticReportObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosticReportObject> _instance;
} _DiagnosticReportObject_default_instance_;
class EncounterObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EncounterObject> _instance;
} _EncounterObject_default_instance_;
class ExplanationOfBenefitObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExplanationOfBenefitObject> _instance;
} _ExplanationOfBenefitObject_default_instance_;
class ImmunizationObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImmunizationObject> _instance;
} _ImmunizationObject_default_instance_;
class MedicationRequestObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MedicationRequestObject> _instance;
} _MedicationRequestObject_default_instance_;
class ObservationObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObservationObject> _instance;
} _ObservationObject_default_instance_;
class OrganizationObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrganizationObject> _instance;
} _OrganizationObject_default_instance_;
class PatientObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatientObject> _instance;
} _PatientObject_default_instance_;
class PractitionerObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PractitionerObject> _instance;
} _PractitionerObject_default_instance_;
class ProcedureObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcedureObject> _instance;
} _ProcedureObject_default_instance_;
class PatientRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatientRecord> _instance;
} _PatientRecord_default_instance_;
}  // namespace patient
static void InitDefaultsscc_info_Activity_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Activity_default_instance_;
    new (ptr) ::patient::Activity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Activity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Activity_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Activity_customized_2eproto}, {
      &scc_info_Detail_customized_2eproto.base,}};

static void InitDefaultsscc_info_Address_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Address_default_instance_;
    new (ptr) ::patient::Address();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Address::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Address_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Address_customized_2eproto}, {
      &scc_info_Extension_customized_2eproto.base,}};

static void InitDefaultsscc_info_Adjudication_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Adjudication_default_instance_;
    new (ptr) ::patient::Adjudication();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Adjudication::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Adjudication_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Adjudication_customized_2eproto}, {
      &scc_info_Amount_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_Amount_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Amount_default_instance_;
    new (ptr) ::patient::Amount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Amount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Amount_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Amount_customized_2eproto}, {}};

static void InitDefaultsscc_info_CarePlanObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_CarePlanObject_default_instance_;
    new (ptr) ::patient::CarePlanObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::CarePlanObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_CarePlanObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_CarePlanObject_customized_2eproto}, {
      &scc_info_Activity_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_CareTeam_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Period_customized_2eproto.base,}};

static void InitDefaultsscc_info_CareTeam_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_CareTeam_default_instance_;
    new (ptr) ::patient::CareTeam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::CareTeam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CareTeam_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CareTeam_customized_2eproto}, {
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_CareTeamObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_CareTeamObject_default_instance_;
    new (ptr) ::patient::CareTeamObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::CareTeamObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CareTeamObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_CareTeamObject_customized_2eproto}, {
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Participant_customized_2eproto.base,
      &scc_info_Period_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_Category_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Category_default_instance_;
    new (ptr) ::patient::Category();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Category::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Category_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Category_customized_2eproto}, {
      &scc_info_Coding_customized_2eproto.base,}};

static void InitDefaultsscc_info_ClaimObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_ClaimObject_default_instance_;
    new (ptr) ::patient::ClaimObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::ClaimObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_ClaimObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_ClaimObject_customized_2eproto}, {
      &scc_info_Period_customized_2eproto.base,
      &scc_info_Diagnosis_customized_2eproto.base,
      &scc_info_Insurance_customized_2eproto.base,
      &scc_info_Item_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Procedure_customized_2eproto.base,
      &scc_info_SupportingInfo_customized_2eproto.base,
      &scc_info_Total_customized_2eproto.base,}};

static void InitDefaultsscc_info_Coding_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Coding_default_instance_;
    new (ptr) ::patient::Coding();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Coding::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coding_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Coding_customized_2eproto}, {}};

static void InitDefaultsscc_info_Communication_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Communication_default_instance_;
    new (ptr) ::patient::Communication();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Communication::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Communication_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Communication_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_Component_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Component_default_instance_;
    new (ptr) ::patient::Component();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Component::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Component_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Component_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Quantity_customized_2eproto.base,}};

static void InitDefaultsscc_info_ConditionObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_ConditionObject_default_instance_;
    new (ptr) ::patient::ConditionObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::ConditionObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConditionObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ConditionObject_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,}};

static void InitDefaultsscc_info_Contained_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Contained_default_instance_;
    new (ptr) ::patient::Contained();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Contained::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Contained_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Contained_customized_2eproto}, {
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_Detail_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Detail_default_instance_;
    new (ptr) ::patient::Detail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Detail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Detail_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Detail_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,}};

static void InitDefaultsscc_info_Diagnosis_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Diagnosis_default_instance_;
    new (ptr) ::patient::Diagnosis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Diagnosis::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Diagnosis_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Diagnosis_customized_2eproto}, {
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_DiagnosticReportObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_DiagnosticReportObject_default_instance_;
    new (ptr) ::patient::DiagnosticReportObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::DiagnosticReportObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DiagnosticReportObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DiagnosticReportObject_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,}};

static void InitDefaultsscc_info_EncounterObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_EncounterObject_default_instance_;
    new (ptr) ::patient::EncounterObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::EncounterObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_EncounterObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_EncounterObject_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Participant_customized_2eproto.base,
      &scc_info_Period_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,}};

static void InitDefaultsscc_info_Entry_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Entry_default_instance_;
    new (ptr) ::patient::Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Entry_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Entry_customized_2eproto}, {
      &scc_info_Request_customized_2eproto.base,
      &scc_info_Resource_customized_2eproto.base,}};

static void InitDefaultsscc_info_ExplanationOfBenefitObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_ExplanationOfBenefitObject_default_instance_;
    new (ptr) ::patient::ExplanationOfBenefitObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::ExplanationOfBenefitObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_ExplanationOfBenefitObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0, InitDefaultsscc_info_ExplanationOfBenefitObject_customized_2eproto}, {
      &scc_info_Period_customized_2eproto.base,
      &scc_info_CareTeam_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Contained_customized_2eproto.base,
      &scc_info_Diagnosis_customized_2eproto.base,
      &scc_info_Identifier_customized_2eproto.base,
      &scc_info_Insurance_customized_2eproto.base,
      &scc_info_Item_customized_2eproto.base,
      &scc_info_Payment_customized_2eproto.base,
      &scc_info_Total_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_Extension_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Extension_default_instance_;
    new (ptr) ::patient::Extension();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Extension::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Extension_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Extension_customized_2eproto}, {
      &scc_info_Coding_customized_2eproto.base,}};

static void InitDefaultsscc_info_Identifier_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Identifier_default_instance_;
    new (ptr) ::patient::Identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Identifier::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Identifier_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Identifier_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_ImmunizationObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_ImmunizationObject_default_instance_;
    new (ptr) ::patient::ImmunizationObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::ImmunizationObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ImmunizationObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ImmunizationObject_customized_2eproto}, {
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_Insurance_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Insurance_default_instance_;
    new (ptr) ::patient::Insurance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Insurance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Insurance_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Insurance_customized_2eproto}, {
      &scc_info_Reference_customized_2eproto.base,}};

static void InitDefaultsscc_info_Item_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Item_default_instance_;
    new (ptr) ::patient::Item();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Item::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Item_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Item_customized_2eproto}, {
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Amount_customized_2eproto.base,
      &scc_info_Period_customized_2eproto.base,
      &scc_info_Adjudication_customized_2eproto.base,}};

static void InitDefaultsscc_info_MedicationRequestObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_MedicationRequestObject_default_instance_;
    new (ptr) ::patient::MedicationRequestObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::MedicationRequestObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MedicationRequestObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MedicationRequestObject_customized_2eproto}, {
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_Name_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Name_default_instance_;
    new (ptr) ::patient::Name();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Name::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Name_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Name_customized_2eproto}, {}};

static void InitDefaultsscc_info_ObservationObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_ObservationObject_default_instance_;
    new (ptr) ::patient::ObservationObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::ObservationObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ObservationObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ObservationObject_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Component_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Quantity_customized_2eproto.base,}};

static void InitDefaultsscc_info_OrganizationObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_OrganizationObject_default_instance_;
    new (ptr) ::patient::OrganizationObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::OrganizationObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_OrganizationObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_OrganizationObject_customized_2eproto}, {
      &scc_info_Address_customized_2eproto.base,
      &scc_info_Identifier_customized_2eproto.base,
      &scc_info_Telecom_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_Participant_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Participant_default_instance_;
    new (ptr) ::patient::Participant();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Participant::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Participant_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Participant_customized_2eproto}, {
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,}};

static void InitDefaultsscc_info_PatientObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_PatientObject_default_instance_;
    new (ptr) ::patient::PatientObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::PatientObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_PatientObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_PatientObject_customized_2eproto}, {
      &scc_info_Address_customized_2eproto.base,
      &scc_info_Communication_customized_2eproto.base,
      &scc_info_Extension_customized_2eproto.base,
      &scc_info_Identifier_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Name_customized_2eproto.base,
      &scc_info_Telecom_customized_2eproto.base,}};

static void InitDefaultsscc_info_PatientRecord_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_PatientRecord_default_instance_;
    new (ptr) ::patient::PatientRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::PatientRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_PatientRecord_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 14, 0, InitDefaultsscc_info_PatientRecord_customized_2eproto}, {
      &scc_info_PatientObject_customized_2eproto.base,
      &scc_info_CarePlanObject_customized_2eproto.base,
      &scc_info_CareTeamObject_customized_2eproto.base,
      &scc_info_ClaimObject_customized_2eproto.base,
      &scc_info_ConditionObject_customized_2eproto.base,
      &scc_info_DiagnosticReportObject_customized_2eproto.base,
      &scc_info_EncounterObject_customized_2eproto.base,
      &scc_info_ExplanationOfBenefitObject_customized_2eproto.base,
      &scc_info_ImmunizationObject_customized_2eproto.base,
      &scc_info_MedicationRequestObject_customized_2eproto.base,
      &scc_info_ObservationObject_customized_2eproto.base,
      &scc_info_OrganizationObject_customized_2eproto.base,
      &scc_info_PractitionerObject_customized_2eproto.base,
      &scc_info_ProcedureObject_customized_2eproto.base,}};

static void InitDefaultsscc_info_Payment_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Payment_default_instance_;
    new (ptr) ::patient::Payment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Payment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Payment_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Payment_customized_2eproto}, {
      &scc_info_Amount_customized_2eproto.base,}};

static void InitDefaultsscc_info_Period_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Period_default_instance_;
    new (ptr) ::patient::Period();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Period::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Period_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Period_customized_2eproto}, {}};

static void InitDefaultsscc_info_PractitionerObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_PractitionerObject_default_instance_;
    new (ptr) ::patient::PractitionerObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::PractitionerObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PractitionerObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PractitionerObject_customized_2eproto}, {
      &scc_info_Address_customized_2eproto.base,
      &scc_info_Identifier_customized_2eproto.base,
      &scc_info_Name_customized_2eproto.base,
      &scc_info_Telecom_customized_2eproto.base,}};

static void InitDefaultsscc_info_Procedure_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Procedure_default_instance_;
    new (ptr) ::patient::Procedure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Procedure::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Procedure_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Procedure_customized_2eproto}, {
      &scc_info_Reference_customized_2eproto.base,}};

static void InitDefaultsscc_info_ProcedureObject_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_ProcedureObject_default_instance_;
    new (ptr) ::patient::ProcedureObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::ProcedureObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProcedureObject_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ProcedureObject_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,
      &scc_info_Period_customized_2eproto.base,}};

static void InitDefaultsscc_info_Quantity_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Quantity_default_instance_;
    new (ptr) ::patient::Quantity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Quantity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quantity_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Quantity_customized_2eproto}, {}};

static void InitDefaultsscc_info_Reference_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Reference_default_instance_;
    new (ptr) ::patient::Reference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Reference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Reference_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Reference_customized_2eproto}, {}};

static void InitDefaultsscc_info_Request_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Request_default_instance_;
    new (ptr) ::patient::Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Request_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Request_customized_2eproto}, {}};

static void InitDefaultsscc_info_Resource_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Resource_default_instance_;
    new (ptr) ::patient::Resource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Resource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_Resource_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 14, 0, InitDefaultsscc_info_Resource_customized_2eproto}, {
      &scc_info_CarePlanObject_customized_2eproto.base,
      &scc_info_CareTeamObject_customized_2eproto.base,
      &scc_info_ClaimObject_customized_2eproto.base,
      &scc_info_ConditionObject_customized_2eproto.base,
      &scc_info_DiagnosticReportObject_customized_2eproto.base,
      &scc_info_EncounterObject_customized_2eproto.base,
      &scc_info_ExplanationOfBenefitObject_customized_2eproto.base,
      &scc_info_ImmunizationObject_customized_2eproto.base,
      &scc_info_MedicationRequestObject_customized_2eproto.base,
      &scc_info_ObservationObject_customized_2eproto.base,
      &scc_info_OrganizationObject_customized_2eproto.base,
      &scc_info_PatientObject_customized_2eproto.base,
      &scc_info_PractitionerObject_customized_2eproto.base,
      &scc_info_ProcedureObject_customized_2eproto.base,}};

static void InitDefaultsscc_info_Root_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Root_default_instance_;
    new (ptr) ::patient::Root();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Root::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Root_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Root_customized_2eproto}, {
      &scc_info_Entry_customized_2eproto.base,}};

static void InitDefaultsscc_info_SupportingInfo_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_SupportingInfo_default_instance_;
    new (ptr) ::patient::SupportingInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::SupportingInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SupportingInfo_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SupportingInfo_customized_2eproto}, {
      &scc_info_Category_customized_2eproto.base,
      &scc_info_Reference_customized_2eproto.base,}};

static void InitDefaultsscc_info_Telecom_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Telecom_default_instance_;
    new (ptr) ::patient::Telecom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Telecom::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Telecom_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Telecom_customized_2eproto}, {}};

static void InitDefaultsscc_info_Text_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Text_default_instance_;
    new (ptr) ::patient::Text();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Text::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Text_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Text_customized_2eproto}, {}};

static void InitDefaultsscc_info_Total_customized_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::patient::_Total_default_instance_;
    new (ptr) ::patient::Total();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patient::Total::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Total_customized_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Total_customized_2eproto}, {
      &scc_info_Amount_customized_2eproto.base,
      &scc_info_Category_customized_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_customized_2eproto[46];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_customized_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_customized_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_customized_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Activity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Activity, detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Address, city_),
  PROTOBUF_FIELD_OFFSET(::patient::Address, country_),
  PROTOBUF_FIELD_OFFSET(::patient::Address, extension_),
  PROTOBUF_FIELD_OFFSET(::patient::Address, line_),
  PROTOBUF_FIELD_OFFSET(::patient::Address, postalcode_),
  PROTOBUF_FIELD_OFFSET(::patient::Address, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Adjudication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Adjudication, amount_),
  PROTOBUF_FIELD_OFFSET(::patient::Adjudication, category_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Amount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Amount, currency_),
  PROTOBUF_FIELD_OFFSET(::patient::Amount, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::CareTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::CareTeam, provider_),
  PROTOBUF_FIELD_OFFSET(::patient::CareTeam, role_),
  PROTOBUF_FIELD_OFFSET(::patient::CareTeam, sequence_),
  PROTOBUF_FIELD_OFFSET(::patient::CareTeam, reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Communication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Communication, language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Component, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Component, code_),
  PROTOBUF_FIELD_OFFSET(::patient::Component, valuequantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Contained, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Contained, id_),
  PROTOBUF_FIELD_OFFSET(::patient::Contained, intent_),
  PROTOBUF_FIELD_OFFSET(::patient::Contained, performer_),
  PROTOBUF_FIELD_OFFSET(::patient::Contained, requester_),
  PROTOBUF_FIELD_OFFSET(::patient::Contained, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::Contained, status_),
  PROTOBUF_FIELD_OFFSET(::patient::Contained, subject_),
  PROTOBUF_FIELD_OFFSET(::patient::Contained, beneficiary_),
  PROTOBUF_FIELD_OFFSET(::patient::Contained, payor_),
  PROTOBUF_FIELD_OFFSET(::patient::Contained, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Detail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Detail, code_),
  PROTOBUF_FIELD_OFFSET(::patient::Detail, location_),
  PROTOBUF_FIELD_OFFSET(::patient::Detail, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Diagnosis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Diagnosis, diagnosisreference_),
  PROTOBUF_FIELD_OFFSET(::patient::Diagnosis, sequence_),
  PROTOBUF_FIELD_OFFSET(::patient::Diagnosis, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Entry, fullurl_),
  PROTOBUF_FIELD_OFFSET(::patient::Entry, request_),
  PROTOBUF_FIELD_OFFSET(::patient::Entry, resource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Extension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Extension, extension_),
  PROTOBUF_FIELD_OFFSET(::patient::Extension, url_),
  PROTOBUF_FIELD_OFFSET(::patient::Extension, valuecoding_),
  PROTOBUF_FIELD_OFFSET(::patient::Extension, valuestring_),
  PROTOBUF_FIELD_OFFSET(::patient::Extension, valuedecimal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Identifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Identifier, system_),
  PROTOBUF_FIELD_OFFSET(::patient::Identifier, value_),
  PROTOBUF_FIELD_OFFSET(::patient::Identifier, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Insurance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Insurance, coverage_),
  PROTOBUF_FIELD_OFFSET(::patient::Insurance, focal_),
  PROTOBUF_FIELD_OFFSET(::patient::Insurance, sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Item, encounter_),
  PROTOBUF_FIELD_OFFSET(::patient::Item, productorservice_),
  PROTOBUF_FIELD_OFFSET(::patient::Item, sequence_),
  PROTOBUF_FIELD_OFFSET(::patient::Item, informationsequence_),
  PROTOBUF_FIELD_OFFSET(::patient::Item, net_),
  PROTOBUF_FIELD_OFFSET(::patient::Item, category_),
  PROTOBUF_FIELD_OFFSET(::patient::Item, locationcodeableconcept_),
  PROTOBUF_FIELD_OFFSET(::patient::Item, servicedperiod_),
  PROTOBUF_FIELD_OFFSET(::patient::Item, adjudication_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Name, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Name, family_),
  PROTOBUF_FIELD_OFFSET(::patient::Name, given_),
  PROTOBUF_FIELD_OFFSET(::patient::Name, prefix_),
  PROTOBUF_FIELD_OFFSET(::patient::Name, use_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Participant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Participant, individual_),
  PROTOBUF_FIELD_OFFSET(::patient::Participant, member_),
  PROTOBUF_FIELD_OFFSET(::patient::Participant, role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Payment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Payment, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Procedure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Procedure, procedurereference_),
  PROTOBUF_FIELD_OFFSET(::patient::Procedure, sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Request, method_),
  PROTOBUF_FIELD_OFFSET(::patient::Request, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Root, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Root, entry_),
  PROTOBUF_FIELD_OFFSET(::patient::Root, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::Root, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::SupportingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::SupportingInfo, category_),
  PROTOBUF_FIELD_OFFSET(::patient::SupportingInfo, sequence_),
  PROTOBUF_FIELD_OFFSET(::patient::SupportingInfo, valuereference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Telecom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Telecom, system_),
  PROTOBUF_FIELD_OFFSET(::patient::Telecom, use_),
  PROTOBUF_FIELD_OFFSET(::patient::Telecom, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Text, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Text, div_),
  PROTOBUF_FIELD_OFFSET(::patient::Text, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Total, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Total, currency_),
  PROTOBUF_FIELD_OFFSET(::patient::Total, value_),
  PROTOBUF_FIELD_OFFSET(::patient::Total, amount_),
  PROTOBUF_FIELD_OFFSET(::patient::Total, category_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Coding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Coding, code_),
  PROTOBUF_FIELD_OFFSET(::patient::Coding, display_),
  PROTOBUF_FIELD_OFFSET(::patient::Coding, system_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Quantity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Quantity, code_),
  PROTOBUF_FIELD_OFFSET(::patient::Quantity, system_),
  PROTOBUF_FIELD_OFFSET(::patient::Quantity, unit_),
  PROTOBUF_FIELD_OFFSET(::patient::Quantity, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Reference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Reference, reference_),
  PROTOBUF_FIELD_OFFSET(::patient::Reference, display_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Category, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Category, coding_),
  PROTOBUF_FIELD_OFFSET(::patient::Category, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Period, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Period, end_),
  PROTOBUF_FIELD_OFFSET(::patient::Period, start_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::Resource, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::patient::Resource, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::Resource, resourcetype_),
  offsetof(::patient::ResourceDefaultTypeInternal, careplan_),
  offsetof(::patient::ResourceDefaultTypeInternal, careteam_),
  offsetof(::patient::ResourceDefaultTypeInternal, claim_),
  offsetof(::patient::ResourceDefaultTypeInternal, condition_),
  offsetof(::patient::ResourceDefaultTypeInternal, diagnosticreport_),
  offsetof(::patient::ResourceDefaultTypeInternal, encounter_),
  offsetof(::patient::ResourceDefaultTypeInternal, explanationofbenefit_),
  offsetof(::patient::ResourceDefaultTypeInternal, immunization_),
  offsetof(::patient::ResourceDefaultTypeInternal, medicationrequest_),
  offsetof(::patient::ResourceDefaultTypeInternal, observation_),
  offsetof(::patient::ResourceDefaultTypeInternal, organiation_),
  offsetof(::patient::ResourceDefaultTypeInternal, patient_),
  offsetof(::patient::ResourceDefaultTypeInternal, practitioner_),
  offsetof(::patient::ResourceDefaultTypeInternal, procedure_),
  PROTOBUF_FIELD_OFFSET(::patient::Resource, resource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, activity_),
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, addresses_),
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, careteam_),
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, category_),
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, encounter_),
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, intent_),
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, period_),
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, status_),
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, subject_),
  PROTOBUF_FIELD_OFFSET(::patient::CarePlanObject, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::CareTeamObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::CareTeamObject, encounter_),
  PROTOBUF_FIELD_OFFSET(::patient::CareTeamObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::CareTeamObject, managingorganization_),
  PROTOBUF_FIELD_OFFSET(::patient::CareTeamObject, participant_),
  PROTOBUF_FIELD_OFFSET(::patient::CareTeamObject, period_),
  PROTOBUF_FIELD_OFFSET(::patient::CareTeamObject, reasoncode_),
  PROTOBUF_FIELD_OFFSET(::patient::CareTeamObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::CareTeamObject, status_),
  PROTOBUF_FIELD_OFFSET(::patient::CareTeamObject, subject_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, billableperiod_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, created_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, diagnosis_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, insurance_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, item_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, patient_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, prescription_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, priority_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, procedure_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, provider_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, status_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, supportinginfo_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, total_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, type_),
  PROTOBUF_FIELD_OFFSET(::patient::ClaimObject, use_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::ConditionObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::ConditionObject, abatementdatetime_),
  PROTOBUF_FIELD_OFFSET(::patient::ConditionObject, clinicalstatus_),
  PROTOBUF_FIELD_OFFSET(::patient::ConditionObject, code_),
  PROTOBUF_FIELD_OFFSET(::patient::ConditionObject, encounter_),
  PROTOBUF_FIELD_OFFSET(::patient::ConditionObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::ConditionObject, onsetdatetime_),
  PROTOBUF_FIELD_OFFSET(::patient::ConditionObject, recordeddate_),
  PROTOBUF_FIELD_OFFSET(::patient::ConditionObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::ConditionObject, subject_),
  PROTOBUF_FIELD_OFFSET(::patient::ConditionObject, verificationstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::DiagnosticReportObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::DiagnosticReportObject, category_),
  PROTOBUF_FIELD_OFFSET(::patient::DiagnosticReportObject, code_),
  PROTOBUF_FIELD_OFFSET(::patient::DiagnosticReportObject, effectivedatetime_),
  PROTOBUF_FIELD_OFFSET(::patient::DiagnosticReportObject, encounter_),
  PROTOBUF_FIELD_OFFSET(::patient::DiagnosticReportObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::DiagnosticReportObject, issued_),
  PROTOBUF_FIELD_OFFSET(::patient::DiagnosticReportObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::DiagnosticReportObject, result_),
  PROTOBUF_FIELD_OFFSET(::patient::DiagnosticReportObject, status_),
  PROTOBUF_FIELD_OFFSET(::patient::DiagnosticReportObject, subject_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::EncounterObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::EncounterObject, class__),
  PROTOBUF_FIELD_OFFSET(::patient::EncounterObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::EncounterObject, participant_),
  PROTOBUF_FIELD_OFFSET(::patient::EncounterObject, period_),
  PROTOBUF_FIELD_OFFSET(::patient::EncounterObject, reasoncode_),
  PROTOBUF_FIELD_OFFSET(::patient::EncounterObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::EncounterObject, serviceprovider_),
  PROTOBUF_FIELD_OFFSET(::patient::EncounterObject, status_),
  PROTOBUF_FIELD_OFFSET(::patient::EncounterObject, subject_),
  PROTOBUF_FIELD_OFFSET(::patient::EncounterObject, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, billableperiod_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, careteam_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, claim_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, contained_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, created_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, diagnosis_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, identifier_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, insurance_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, insurer_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, item_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, outcome_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, patient_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, payment_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, provider_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, referral_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, status_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, total_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, type_),
  PROTOBUF_FIELD_OFFSET(::patient::ExplanationOfBenefitObject, use_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::ImmunizationObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::ImmunizationObject, encounter_),
  PROTOBUF_FIELD_OFFSET(::patient::ImmunizationObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::ImmunizationObject, occurencedatetime_),
  PROTOBUF_FIELD_OFFSET(::patient::ImmunizationObject, patient_),
  PROTOBUF_FIELD_OFFSET(::patient::ImmunizationObject, primarysource_),
  PROTOBUF_FIELD_OFFSET(::patient::ImmunizationObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::ImmunizationObject, status_),
  PROTOBUF_FIELD_OFFSET(::patient::ImmunizationObject, vaccinecode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::MedicationRequestObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::MedicationRequestObject, authoredon_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationRequestObject, encounter_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationRequestObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationRequestObject, intent_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationRequestObject, medicationcodeableconcept_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationRequestObject, reasonreference_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationRequestObject, requester_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationRequestObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationRequestObject, status_),
  PROTOBUF_FIELD_OFFSET(::patient::MedicationRequestObject, subject_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, category_),
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, code_),
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, component_),
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, effectivedatetime_),
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, encounter_),
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, issued_),
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, status_),
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, subject_),
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, valuecodeableconcept_),
  PROTOBUF_FIELD_OFFSET(::patient::ObservationObject, valuequantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::OrganizationObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::OrganizationObject, active_),
  PROTOBUF_FIELD_OFFSET(::patient::OrganizationObject, address_),
  PROTOBUF_FIELD_OFFSET(::patient::OrganizationObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::OrganizationObject, identifier_),
  PROTOBUF_FIELD_OFFSET(::patient::OrganizationObject, name_),
  PROTOBUF_FIELD_OFFSET(::patient::OrganizationObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::OrganizationObject, telecom_),
  PROTOBUF_FIELD_OFFSET(::patient::OrganizationObject, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, address_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, birthdate_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, communication_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, extension_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, gender_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, identifier_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, maritalstatus_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, multiplebirthboolean_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, name_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, telecom_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientObject, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::PractitionerObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::PractitionerObject, active_),
  PROTOBUF_FIELD_OFFSET(::patient::PractitionerObject, address_),
  PROTOBUF_FIELD_OFFSET(::patient::PractitionerObject, gender_),
  PROTOBUF_FIELD_OFFSET(::patient::PractitionerObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::PractitionerObject, identifier_),
  PROTOBUF_FIELD_OFFSET(::patient::PractitionerObject, name_),
  PROTOBUF_FIELD_OFFSET(::patient::PractitionerObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::PractitionerObject, telecom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::ProcedureObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::ProcedureObject, code_),
  PROTOBUF_FIELD_OFFSET(::patient::ProcedureObject, encounter_),
  PROTOBUF_FIELD_OFFSET(::patient::ProcedureObject, id_),
  PROTOBUF_FIELD_OFFSET(::patient::ProcedureObject, performedperiod_),
  PROTOBUF_FIELD_OFFSET(::patient::ProcedureObject, reasonreference_),
  PROTOBUF_FIELD_OFFSET(::patient::ProcedureObject, resourcetype_),
  PROTOBUF_FIELD_OFFSET(::patient::ProcedureObject, status_),
  PROTOBUF_FIELD_OFFSET(::patient::ProcedureObject, subject_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, patient_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, careplan_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, careteam_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, claim_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, condition_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, diagnosticreport_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, encounter_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, explanationofbenefit_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, immunization_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, medicationrequest_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, observation_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, organiation_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, practitioner_),
  PROTOBUF_FIELD_OFFSET(::patient::PatientRecord, procedure_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::patient::Activity)},
  { 6, -1, sizeof(::patient::Address)},
  { 17, -1, sizeof(::patient::Adjudication)},
  { 24, -1, sizeof(::patient::Amount)},
  { 31, -1, sizeof(::patient::CareTeam)},
  { 40, -1, sizeof(::patient::Communication)},
  { 46, -1, sizeof(::patient::Component)},
  { 53, -1, sizeof(::patient::Contained)},
  { 68, -1, sizeof(::patient::Detail)},
  { 76, -1, sizeof(::patient::Diagnosis)},
  { 84, -1, sizeof(::patient::Entry)},
  { 92, -1, sizeof(::patient::Extension)},
  { 102, -1, sizeof(::patient::Identifier)},
  { 110, -1, sizeof(::patient::Insurance)},
  { 118, -1, sizeof(::patient::Item)},
  { 132, -1, sizeof(::patient::Name)},
  { 141, -1, sizeof(::patient::Participant)},
  { 149, -1, sizeof(::patient::Payment)},
  { 155, -1, sizeof(::patient::Procedure)},
  { 162, -1, sizeof(::patient::Request)},
  { 169, -1, sizeof(::patient::Root)},
  { 177, -1, sizeof(::patient::SupportingInfo)},
  { 185, -1, sizeof(::patient::Telecom)},
  { 193, -1, sizeof(::patient::Text)},
  { 200, -1, sizeof(::patient::Total)},
  { 209, -1, sizeof(::patient::Coding)},
  { 217, -1, sizeof(::patient::Quantity)},
  { 226, -1, sizeof(::patient::Reference)},
  { 233, -1, sizeof(::patient::Category)},
  { 240, -1, sizeof(::patient::Period)},
  { 247, -1, sizeof(::patient::Resource)},
  { 268, -1, sizeof(::patient::CarePlanObject)},
  { 285, -1, sizeof(::patient::CareTeamObject)},
  { 299, -1, sizeof(::patient::ClaimObject)},
  { 321, -1, sizeof(::patient::ConditionObject)},
  { 336, -1, sizeof(::patient::DiagnosticReportObject)},
  { 351, -1, sizeof(::patient::EncounterObject)},
  { 366, -1, sizeof(::patient::ExplanationOfBenefitObject)},
  { 392, -1, sizeof(::patient::ImmunizationObject)},
  { 405, -1, sizeof(::patient::MedicationRequestObject)},
  { 420, -1, sizeof(::patient::ObservationObject)},
  { 437, -1, sizeof(::patient::OrganizationObject)},
  { 450, -1, sizeof(::patient::PatientObject)},
  { 468, -1, sizeof(::patient::PractitionerObject)},
  { 481, -1, sizeof(::patient::ProcedureObject)},
  { 494, -1, sizeof(::patient::PatientRecord)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Activity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Address_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Adjudication_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Amount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_CareTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Communication_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Component_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Contained_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Detail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Diagnosis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Extension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Identifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Insurance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Name_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Participant_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Payment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Procedure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Root_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_SupportingInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Telecom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Text_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Total_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Coding_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Quantity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Reference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Category_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Period_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_Resource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_CarePlanObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_CareTeamObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_ClaimObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_ConditionObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_DiagnosticReportObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_EncounterObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_ExplanationOfBenefitObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_ImmunizationObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_MedicationRequestObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_ObservationObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_OrganizationObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_PatientObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_PractitionerObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_ProcedureObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::patient::_PatientRecord_default_instance_),
};

const char descriptor_table_protodef_customized_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020customized.proto\022\007patient\"+\n\010Activity\022"
  "\037\n\006detail\030\001 \003(\0132\017.patient.Detail\"\200\001\n\007Add"
  "ress\022\014\n\004city\030\001 \001(\t\022\017\n\007country\030\002 \001(\t\022%\n\te"
  "xtension\030\003 \003(\0132\022.patient.Extension\022\014\n\004li"
  "ne\030\004 \003(\t\022\022\n\npostalCode\030\005 \001(\t\022\r\n\005state\030\006 "
  "\001(\t\"T\n\014Adjudication\022\037\n\006amount\030\001 \001(\0132\017.pa"
  "tient.Amount\022#\n\010category\030\002 \001(\0132\021.patient"
  ".Category\")\n\006Amount\022\020\n\010currency\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\002\"v\n\010CareTeam\022$\n\010provider\030\001 \001"
  "(\0132\022.patient.Reference\022\037\n\004role\030\002 \001(\0132\021.p"
  "atient.Category\022\020\n\010sequence\030\003 \001(\005\022\021\n\tref"
  "erence\030\004 \001(\t\"4\n\rCommunication\022#\n\010languag"
  "e\030\001 \001(\0132\021.patient.Category\"V\n\tComponent\022"
  "\037\n\004code\030\001 \001(\0132\021.patient.Category\022(\n\rvalu"
  "eQuantity\030\002 \001(\0132\021.patient.Quantity\"\276\002\n\tC"
  "ontained\022\n\n\002id\030\001 \001(\t\022\016\n\006intent\030\002 \001(\t\022%\n\t"
  "performer\030\003 \003(\0132\022.patient.Reference\022%\n\tr"
  "equester\030\004 \001(\0132\022.patient.Reference\022\024\n\014re"
  "sourceType\030\005 \001(\t\022\037\n\006status\030\006 \001(\0162\017.patie"
  "nt.Status\022#\n\007subject\030\007 \001(\0132\022.patient.Ref"
  "erence\022\'\n\013beneficiary\030\010 \001(\0132\022.patient.Re"
  "ference\022!\n\005payor\030\t \003(\0132\022.patient.Referen"
  "ce\022\037\n\004type\030\n \001(\0132\021.patient.Category\"p\n\006D"
  "etail\022\037\n\004code\030\001 \001(\0132\021.patient.Category\022$"
  "\n\010location\030\002 \001(\0132\022.patient.Reference\022\037\n\006"
  "status\030\003 \001(\0162\017.patient.Status\"n\n\tDiagnos"
  "is\022.\n\022diagnosisReference\030\001 \001(\0132\022.patient"
  ".Reference\022\020\n\010sequence\030\002 \001(\005\022\037\n\004type\030\003 \003"
  "(\0132\021.patient.Category\"`\n\005Entry\022\017\n\007fullUr"
  "l\030\001 \001(\t\022!\n\007request\030\002 \001(\0132\020.patient.Reque"
  "st\022#\n\010resource\030\003 \003(\0132\021.patient.Resource\""
  "\220\001\n\tExtension\022%\n\textension\030\001 \003(\0132\022.patie"
  "nt.Extension\022\013\n\003url\030\002 \001(\t\022$\n\013valueCoding"
  "\030\003 \001(\0132\017.patient.Coding\022\023\n\013valueString\030\004"
  " \001(\t\022\024\n\014valueDecimal\030\005 \001(\002\"L\n\nIdentifier"
  "\022\016\n\006system\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022\037\n\004type\030"
  "\003 \001(\0132\021.patient.Category\"R\n\tInsurance\022$\n"
  "\010coverage\030\001 \001(\0132\022.patient.Reference\022\r\n\005f"
  "ocal\030\002 \001(\010\022\020\n\010sequence\030\003 \001(\005\"\326\002\n\004Item\022%\n"
  "\tencounter\030\001 \003(\0132\022.patient.Reference\022+\n\020"
  "productOrService\030\002 \001(\0132\021.patient.Categor"
  "y\022\020\n\010sequence\030\003 \001(\005\022\033\n\023informationSequen"
  "ce\030\004 \003(\005\022\034\n\003net\030\005 \001(\0132\017.patient.Amount\022#"
  "\n\010category\030\006 \001(\0132\021.patient.Category\0222\n\027l"
  "ocationCodeableConcept\030\007 \001(\0132\021.patient.C"
  "ategory\022\'\n\016servicedPeriod\030\010 \001(\0132\017.patien"
  "t.Period\022+\n\014adjudication\030\t \003(\0132\025.patient"
  ".Adjudication\"B\n\004Name\022\016\n\006family\030\001 \001(\t\022\r\n"
  "\005given\030\002 \003(\t\022\016\n\006prefix\030\003 \003(\t\022\013\n\003use\030\004 \001("
  "\t\"z\n\013Participant\022&\n\nindividual\030\001 \001(\0132\022.p"
  "atient.Reference\022\"\n\006member\030\002 \001(\0132\022.patie"
  "nt.Reference\022\037\n\004role\030\003 \003(\0132\021.patient.Cat"
  "egory\"*\n\007Payment\022\037\n\006amount\030\001 \001(\0132\017.patie"
  "nt.Amount\"M\n\tProcedure\022.\n\022procedureRefer"
  "ence\030\001 \001(\0132\022.patient.Reference\022\020\n\010sequen"
  "ce\030\002 \001(\005\"&\n\007Request\022\016\n\006method\030\001 \001(\t\022\013\n\003u"
  "rl\030\002 \001(\t\"I\n\004Root\022\035\n\005entry\030\001 \003(\0132\016.patien"
  "t.Entry\022\024\n\014resourceType\030\002 \001(\t\022\014\n\004type\030\003 "
  "\001(\t\"s\n\016SupportingInfo\022#\n\010category\030\001 \001(\0132"
  "\021.patient.Category\022\020\n\010sequence\030\002 \001(\005\022*\n\016"
  "valueReference\030\003 \001(\0132\022.patient.Reference"
  "\"5\n\007Telecom\022\016\n\006system\030\001 \001(\t\022\013\n\003use\030\002 \001(\t"
  "\022\r\n\005value\030\003 \001(\t\"#\n\004Text\022\013\n\003div\030\001 \001(\t\022\016\n\006"
  "status\030\002 \001(\t\"n\n\005Total\022\020\n\010currency\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\002\022\037\n\006amount\030\003 \001(\0132\017.patient"
  ".Amount\022#\n\010category\030\004 \001(\0132\021.patient.Cate"
  "gory\"7\n\006Coding\022\014\n\004code\030\001 \001(\t\022\017\n\007display\030"
  "\002 \001(\t\022\016\n\006system\030\003 \001(\t\"E\n\010Quantity\022\014\n\004cod"
  "e\030\001 \001(\t\022\016\n\006system\030\002 \001(\t\022\014\n\004unit\030\003 \001(\t\022\r\n"
  "\005value\030\004 \001(\002\"/\n\tReference\022\021\n\treference\030\001"
  " \001(\t\022\017\n\007display\030\002 \001(\t\"9\n\010Category\022\037\n\006cod"
  "ing\030\001 \003(\0132\017.patient.Coding\022\014\n\004text\030\002 \001(\t"
  "\"$\n\006Period\022\013\n\003end\030\001 \001(\t\022\r\n\005start\030\002 \001(\t\"\216"
  "\006\n\010Resource\022+\n\014resourceType\030\001 \001(\0162\025.pati"
  "ent.ResourceType\022+\n\010carePlan\030\002 \001(\0132\027.pat"
  "ient.CarePlanObjectH\000\022+\n\010careTeam\030\003 \001(\0132"
  "\027.patient.CareTeamObjectH\000\022%\n\005claim\030\004 \001("
  "\0132\024.patient.ClaimObjectH\000\022-\n\tcondition\030\005"
  " \001(\0132\030.patient.ConditionObjectH\000\022;\n\020diag"
  "nosticReport\030\006 \001(\0132\037.patient.DiagnosticR"
  "eportObjectH\000\022-\n\tencounter\030\007 \001(\0132\030.patie"
  "nt.EncounterObjectH\000\022C\n\024explanationOfBen"
  "efit\030\010 \001(\0132#.patient.ExplanationOfBenefi"
  "tObjectH\000\0223\n\014immunization\030\t \001(\0132\033.patien"
  "t.ImmunizationObjectH\000\022=\n\021medicationRequ"
  "est\030\n \001(\0132 .patient.MedicationRequestObj"
  "ectH\000\0221\n\013observation\030\013 \001(\0132\032.patient.Obs"
  "ervationObjectH\000\0222\n\013organiation\030\014 \001(\0132\033."
  "patient.OrganizationObjectH\000\022)\n\007patient\030"
  "\r \001(\0132\026.patient.PatientObjectH\000\0223\n\014pract"
  "itioner\030\016 \001(\0132\033.patient.PractitionerObje"
  "ctH\000\022-\n\tprocedure\030\017 \001(\0132\030.patient.Proced"
  "ureObjectH\000B\n\n\010resource\"\213\003\n\016CarePlanObje"
  "ct\022#\n\010activity\030\001 \003(\0132\021.patient.Activity\022"
  "%\n\taddresses\030\002 \003(\0132\022.patient.Reference\022#"
  "\n\010careTeam\030\003 \003(\0132\021.patient.CareTeam\022#\n\010c"
  "ategory\030\004 \003(\0132\021.patient.Category\022%\n\tEnco"
  "unter\030\005 \001(\0132\022.patient.Reference\022\n\n\002id\030\006 "
  "\001(\t\022\016\n\006intent\030\007 \001(\t\022\037\n\006period\030\010 \001(\0132\017.pa"
  "tient.Period\022+\n\014resourceType\030\t \001(\0162\025.pat"
  "ient.ResourceType\022\037\n\006status\030\n \001(\0162\017.pati"
  "ent.Status\022#\n\007subject\030\013 \001(\0132\022.patient.Re"
  "ference\022\014\n\004text\030\014 \001(\t\"\333\002\n\016CareTeamObject"
  "\022%\n\tEncounter\030\001 \001(\0132\022.patient.Reference\022"
  "\n\n\002id\030\002 \001(\t\0220\n\024managingOrganization\030\003 \003("
  "\0132\022.patient.Reference\022)\n\013participant\030\004 \003"
  "(\0132\024.patient.Participant\022\037\n\006period\030\005 \001(\013"
  "2\017.patient.Period\022%\n\nreasonCode\030\006 \003(\0132\021."
  "patient.Category\022+\n\014resourceType\030\007 \001(\0162\025"
  ".patient.ResourceType\022\037\n\006status\030\010 \001(\0162\017."
  "patient.Status\022#\n\007subject\030\t \001(\0132\022.patien"
  "t.Reference\"\313\004\n\013ClaimObject\022\'\n\016billableP"
  "eriod\030\001 \001(\0132\017.patient.Period\022\017\n\007created\030"
  "\002 \001(\t\022%\n\tdiagnosis\030\003 \003(\0132\022.patient.Diagn"
  "osis\022\n\n\002id\030\004 \001(\t\022%\n\tinsurance\030\005 \003(\0132\022.pa"
  "tient.Insurance\022\033\n\004item\030\006 \003(\0132\r.patient."
  "Item\022#\n\007patient\030\007 \001(\0132\022.patient.Referenc"
  "e\022(\n\014prescription\030\010 \001(\0132\022.patient.Refere"
  "nce\022#\n\010priority\030\t \001(\0132\021.patient.Category"
  "\022%\n\tprocedure\030\n \003(\0132\022.patient.Procedure\022"
  "$\n\010provider\030\013 \001(\0132\022.patient.Reference\022+\n"
  "\014resourceType\030\014 \001(\0162\025.patient.ResourceTy"
  "pe\022\037\n\006status\030\r \001(\0162\017.patient.Status\022/\n\016s"
  "upportingInfo\030\016 \003(\0132\027.patient.Supporting"
  "Info\022\035\n\005total\030\017 \001(\0132\016.patient.Total\022\037\n\004t"
  "ype\030\020 \001(\0132\021.patient.Category\022\013\n\003use\030\021 \001("
  "\t\"\331\002\n\017ConditionObject\022\031\n\021abatementDateTi"
  "me\030\001 \001(\t\022)\n\016clinicalStatus\030\002 \001(\0132\021.patie"
  "nt.Category\022\037\n\004code\030\003 \001(\0132\021.patient.Cate"
  "gory\022%\n\tencounter\030\004 \001(\0132\022.patient.Refere"
  "nce\022\n\n\002id\030\005 \001(\t\022\025\n\ronsetDateTime\030\006 \001(\t\022\024"
  "\n\014recordedDate\030\007 \001(\t\022+\n\014resourceType\030\010 \001"
  "(\0162\025.patient.ResourceType\022#\n\007subject\030\t \001"
  "(\0132\022.patient.Reference\022-\n\022verificationSt"
  "atus\030\n \001(\0132\021.patient.Category\"\323\002\n\026Diagno"
  "sticReportObject\022#\n\010category\030\001 \003(\0132\021.pat"
  "ient.Category\022\037\n\004code\030\002 \001(\0132\021.patient.Ca"
  "tegory\022\031\n\021effectiveDateTime\030\003 \001(\t\022%\n\tenc"
  "ounter\030\004 \001(\0132\022.patient.Reference\022\n\n\002id\030\005"
  " \001(\t\022\016\n\006issued\030\006 \001(\t\022+\n\014resourceType\030\007 \001"
  "(\0162\025.patient.ResourceType\022\"\n\006result\030\010 \003("
  "\0132\022.patient.Reference\022\037\n\006status\030\t \001(\0162\017."
  "patient.Status\022#\n\007Subject\030\n \001(\0132\022.patien"
  "t.Reference\"\363\002\n\017EncounterObject\022 \n\005class"
  "\030\001 \001(\0132\021.patient.Category\022\n\n\002id\030\002 \001(\t\022)\n"
  "\013participant\030\003 \003(\0132\024.patient.Participant"
  "\022\037\n\006period\030\004 \001(\0132\017.patient.Period\022%\n\nrea"
  "sonCode\030\005 \003(\0132\021.patient.Category\022+\n\014reso"
  "urceType\030\006 \001(\0162\025.patient.ResourceType\022+\n"
  "\017serviceProvider\030\007 \001(\0132\022.patient.Referen"
  "ce\022\037\n\006status\030\010 \001(\0162\017.patient.Status\022#\n\007s"
  "ubject\030\t \001(\0132\022.patient.Reference\022\037\n\004type"
  "\030\n \003(\0132\021.patient.Category\"\312\005\n\032Explanatio"
  "nOfBenefitObject\022\'\n\016billablePeriod\030\001 \001(\013"
  "2\017.patient.Period\022#\n\010careteam\030\002 \003(\0132\021.pa"
  "tient.CareTeam\022!\n\005claim\030\003 \001(\0132\022.patient."
  "Reference\022%\n\tcontained\030\004 \003(\0132\022.patient.C"
  "ontained\022\017\n\007created\030\005 \001(\t\022%\n\tdiagnosis\030\006"
  " \003(\0132\022.patient.Diagnosis\022\n\n\002id\030\007 \001(\t\022\'\n\n"
  "identifier\030\010 \003(\0132\023.patient.Identifier\022%\n"
  "\tinsurance\030\t \003(\0132\022.patient.Insurance\022#\n\007"
  "insurer\030\n \001(\0132\022.patient.Reference\022\033\n\004ite"
  "m\030\013 \003(\0132\r.patient.Item\022\017\n\007outcome\030\014 \001(\t\022"
  "#\n\007patient\030\r \001(\0132\022.patient.Reference\022!\n\007"
  "payment\030\016 \001(\0132\020.patient.Payment\022$\n\010provi"
  "der\030\017 \001(\0132\022.patient.Reference\022$\n\010referra"
  "l\030\020 \001(\0132\022.patient.Reference\022+\n\014resourceT"
  "ype\030\021 \001(\0162\025.patient.ResourceType\022\037\n\006stat"
  "us\030\022 \001(\0162\017.patient.Status\022\035\n\005total\030\023 \003(\013"
  "2\016.patient.Total\022\037\n\004type\030\024 \001(\0132\021.patient"
  ".Category\022\013\n\003use\030\025 \001(\t\"\224\002\n\022ImmunizationO"
  "bject\022%\n\tencounter\030\001 \001(\0132\022.patient.Refer"
  "ence\022\n\n\002id\030\002 \001(\t\022\031\n\021occurenceDateTime\030\003 "
  "\001(\t\022#\n\007patient\030\004 \001(\0132\022.patient.Reference"
  "\022\025\n\rprimarySource\030\005 \001(\010\022+\n\014resourceType\030"
  "\006 \001(\0162\025.patient.ResourceType\022\037\n\006status\030\007"
  " \001(\0162\017.patient.Status\022&\n\013vaccineCode\030\010 \001"
  "(\0132\021.patient.Category\"\355\002\n\027MedicationRequ"
  "estObject\022\022\n\nauthoredOn\030\001 \001(\t\022%\n\tencount"
  "er\030\002 \001(\0132\022.patient.Reference\022\n\n\002id\030\003 \001(\t"
  "\022\016\n\006intent\030\004 \001(\t\0224\n\031medicationCodeableCo"
  "ncept\030\005 \001(\0132\021.patient.Category\022+\n\017reason"
  "Reference\030\006 \003(\0132\022.patient.Reference\022%\n\tr"
  "equester\030\007 \001(\0132\022.patient.Reference\022+\n\014re"
  "sourceType\030\010 \001(\0162\025.patient.ResourceType\022"
  "\037\n\006status\030\t \001(\0162\017.patient.Status\022#\n\007subj"
  "ect\030\n \001(\0132\022.patient.Reference\"\254\003\n\021Observ"
  "ationObject\022#\n\010category\030\001 \003(\0132\021.patient."
  "Category\022\037\n\004code\030\002 \001(\0132\021.patient.Categor"
  "y\022%\n\tcomponent\030\003 \003(\0132\022.patient.Component"
  "\022\031\n\021effectiveDateTime\030\004 \001(\t\022%\n\tencounter"
  "\030\005 \001(\0132\022.patient.Reference\022\n\n\002id\030\006 \001(\t\022\016"
  "\n\006issued\030\007 \001(\t\022+\n\014resourceType\030\010 \001(\0162\025.p"
  "atient.ResourceType\022\037\n\006status\030\t \001(\0162\017.pa"
  "tient.Status\022#\n\007subject\030\n \001(\0132\022.patient."
  "Reference\022/\n\024valueCodeableConcept\030\013 \001(\0132"
  "\021.patient.Category\022(\n\rvalueQuantity\030\014 \001("
  "\0132\021.patient.Quantity\"\373\001\n\022OrganizationObj"
  "ect\022\016\n\006active\030\001 \001(\010\022!\n\007address\030\002 \003(\0132\020.p"
  "atient.Address\022\n\n\002id\030\003 \001(\t\022\'\n\nidentifier"
  "\030\004 \003(\0132\023.patient.Identifier\022\014\n\004name\030\005 \001("
  "\t\022+\n\014resourceType\030\006 \001(\0162\025.patient.Resour"
  "ceType\022!\n\007telecom\030\007 \003(\0132\020.patient.Teleco"
  "m\022\037\n\004type\030\010 \003(\0132\021.patient.Category\"\264\003\n\rP"
  "atientObject\022!\n\007address\030\001 \003(\0132\020.patient."
  "Address\022\021\n\tbirthDate\030\002 \001(\t\022-\n\rcommunicat"
  "ion\030\003 \003(\0132\026.patient.Communication\022%\n\text"
  "ension\030\004 \003(\0132\022.patient.Extension\022\037\n\006gend"
  "er\030\005 \001(\0162\017.patient.Gender\022\n\n\002id\030\006 \001(\t\022\'\n"
  "\nidentifier\030\007 \003(\0132\023.patient.Identifier\022("
  "\n\rmaritalStatus\030\010 \001(\0132\021.patient.Category"
  "\022\034\n\024multipleBirthBoolean\030\t \001(\010\022\033\n\004name\030\n"
  " \003(\0132\r.patient.Name\022+\n\014resourceType\030\013 \001("
  "\0162\025.patient.ResourceType\022!\n\007telecom\030\014 \003("
  "\0132\020.patient.Telecom\022\014\n\004text\030\r \001(\t\"\212\002\n\022Pr"
  "actitionerObject\022\016\n\006active\030\001 \001(\010\022!\n\007addr"
  "ess\030\002 \003(\0132\020.patient.Address\022\037\n\006gender\030\003 "
  "\001(\0162\017.patient.Gender\022\n\n\002id\030\004 \001(\t\022\'\n\niden"
  "tifier\030\005 \003(\0132\023.patient.Identifier\022\033\n\004nam"
  "e\030\006 \003(\0132\r.patient.Name\022+\n\014resourceType\030\007"
  " \001(\0162\025.patient.ResourceType\022!\n\007telecom\030\010"
  " \003(\0132\020.patient.Telecom\"\257\002\n\017ProcedureObje"
  "ct\022\037\n\004code\030\001 \001(\0132\021.patient.Category\022%\n\te"
  "ncounter\030\002 \001(\0132\022.patient.Reference\022\n\n\002id"
  "\030\003 \001(\t\022(\n\017performedPeriod\030\004 \001(\0132\017.patien"
  "t.Period\022+\n\017reasonReference\030\005 \003(\0132\022.pati"
  "ent.Reference\022+\n\014resourceType\030\006 \001(\0162\025.pa"
  "tient.ResourceType\022\037\n\006status\030\007 \001(\0162\017.pat"
  "ient.Status\022#\n\007subject\030\010 \001(\0132\022.patient.R"
  "eference\"\276\005\n\rPatientRecord\022\'\n\007patient\030\001 "
  "\001(\0132\026.patient.PatientObject\022)\n\010carePlan\030"
  "\002 \003(\0132\027.patient.CarePlanObject\022)\n\010careTe"
  "am\030\003 \003(\0132\027.patient.CareTeamObject\022#\n\005cla"
  "im\030\004 \003(\0132\024.patient.ClaimObject\022+\n\tcondit"
  "ion\030\005 \003(\0132\030.patient.ConditionObject\0229\n\020d"
  "iagnosticReport\030\006 \003(\0132\037.patient.Diagnost"
  "icReportObject\022+\n\tencounter\030\007 \003(\0132\030.pati"
  "ent.EncounterObject\022A\n\024explanationOfBene"
  "fit\030\010 \003(\0132#.patient.ExplanationOfBenefit"
  "Object\0221\n\014immunization\030\t \003(\0132\033.patient.I"
  "mmunizationObject\022;\n\021medicationRequest\030\n"
  " \003(\0132 .patient.MedicationRequestObject\022/"
  "\n\013observation\030\013 \003(\0132\032.patient.Observatio"
  "nObject\0220\n\013organiation\030\014 \003(\0132\033.patient.O"
  "rganizationObject\0221\n\014practitioner\030\r \003(\0132"
  "\033.patient.PractitionerObject\022+\n\tprocedur"
  "e\030\016 \003(\0132\030.patient.ProcedureObject*W\n\006Sta"
  "tus\022\n\n\006ACTIVE\020\000\022\r\n\tCOMPLETED\020\001\022\t\n\005FINAL\020"
  "\002\022\013\n\007STOPPED\020\003\022\014\n\010INACTIVE\020\004\022\014\n\010FINISHED"
  "\020\005*)\n\006Gender\022\010\n\004MALE\020\000\022\n\n\006FEMALE\020\001\022\t\n\005OT"
  "HER\020\002*\203\002\n\014ResourceType\022\r\n\tCARE_PLAN\020\000\022\r\n"
  "\tCARE_TEAM\020\001\022\t\n\005CLAIM\020\002\022\r\n\tCONDITION\020\003\022\025"
  "\n\021DIAGNOSTIC_REPORT\020\004\022\r\n\tENCOUNTER\020\005\022\032\n\026"
  "EXPLANATION_OF_BENEFIT\020\006\022\020\n\014IMMUNIZATION"
  "\020\007\022\026\n\022MEDICATION_REQUEST\020\010\022\017\n\013OBSERVATIO"
  "N\020\t\022\020\n\014ORGANIZATION\020\n\022\013\n\007PATIENT\020\013\022\020\n\014PR"
  "ACTITIONER\020\014\022\r\n\tPROCEDURE\020\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_customized_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_customized_2eproto_sccs[46] = {
  &scc_info_Activity_customized_2eproto.base,
  &scc_info_Address_customized_2eproto.base,
  &scc_info_Adjudication_customized_2eproto.base,
  &scc_info_Amount_customized_2eproto.base,
  &scc_info_CarePlanObject_customized_2eproto.base,
  &scc_info_CareTeam_customized_2eproto.base,
  &scc_info_CareTeamObject_customized_2eproto.base,
  &scc_info_Category_customized_2eproto.base,
  &scc_info_ClaimObject_customized_2eproto.base,
  &scc_info_Coding_customized_2eproto.base,
  &scc_info_Communication_customized_2eproto.base,
  &scc_info_Component_customized_2eproto.base,
  &scc_info_ConditionObject_customized_2eproto.base,
  &scc_info_Contained_customized_2eproto.base,
  &scc_info_Detail_customized_2eproto.base,
  &scc_info_Diagnosis_customized_2eproto.base,
  &scc_info_DiagnosticReportObject_customized_2eproto.base,
  &scc_info_EncounterObject_customized_2eproto.base,
  &scc_info_Entry_customized_2eproto.base,
  &scc_info_ExplanationOfBenefitObject_customized_2eproto.base,
  &scc_info_Extension_customized_2eproto.base,
  &scc_info_Identifier_customized_2eproto.base,
  &scc_info_ImmunizationObject_customized_2eproto.base,
  &scc_info_Insurance_customized_2eproto.base,
  &scc_info_Item_customized_2eproto.base,
  &scc_info_MedicationRequestObject_customized_2eproto.base,
  &scc_info_Name_customized_2eproto.base,
  &scc_info_ObservationObject_customized_2eproto.base,
  &scc_info_OrganizationObject_customized_2eproto.base,
  &scc_info_Participant_customized_2eproto.base,
  &scc_info_PatientObject_customized_2eproto.base,
  &scc_info_PatientRecord_customized_2eproto.base,
  &scc_info_Payment_customized_2eproto.base,
  &scc_info_Period_customized_2eproto.base,
  &scc_info_PractitionerObject_customized_2eproto.base,
  &scc_info_Procedure_customized_2eproto.base,
  &scc_info_ProcedureObject_customized_2eproto.base,
  &scc_info_Quantity_customized_2eproto.base,
  &scc_info_Reference_customized_2eproto.base,
  &scc_info_Request_customized_2eproto.base,
  &scc_info_Resource_customized_2eproto.base,
  &scc_info_Root_customized_2eproto.base,
  &scc_info_SupportingInfo_customized_2eproto.base,
  &scc_info_Telecom_customized_2eproto.base,
  &scc_info_Text_customized_2eproto.base,
  &scc_info_Total_customized_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_customized_2eproto_once;
static bool descriptor_table_customized_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_customized_2eproto = {
  &descriptor_table_customized_2eproto_initialized, descriptor_table_protodef_customized_2eproto, "customized.proto", 10275,
  &descriptor_table_customized_2eproto_once, descriptor_table_customized_2eproto_sccs, descriptor_table_customized_2eproto_deps, 46, 0,
  schemas, file_default_instances, TableStruct_customized_2eproto::offsets,
  file_level_metadata_customized_2eproto, 46, file_level_enum_descriptors_customized_2eproto, file_level_service_descriptors_customized_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_customized_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_customized_2eproto), true);
namespace patient {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_customized_2eproto);
  return file_level_enum_descriptors_customized_2eproto[0];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gender_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_customized_2eproto);
  return file_level_enum_descriptors_customized_2eproto[1];
}
bool Gender_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_customized_2eproto);
  return file_level_enum_descriptors_customized_2eproto[2];
}
bool ResourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Activity::InitAsDefaultInstance() {
}
class Activity::_Internal {
 public:
};

Activity::Activity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Activity)
}
Activity::Activity(const Activity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      detail_(from.detail_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:patient.Activity)
}

void Activity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Activity_customized_2eproto.base);
}

Activity::~Activity() {
  // @@protoc_insertion_point(destructor:patient.Activity)
  SharedDtor();
}

void Activity::SharedDtor() {
}

void Activity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Activity& Activity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Activity_customized_2eproto.base);
  return *internal_default_instance();
}


void Activity::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Activity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_.Clear();
  _internal_metadata_.Clear();
}

const char* Activity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .patient.Detail detail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detail(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Activity::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Activity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .patient.Detail detail = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_detail_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_detail(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Activity)
  return target;
}

size_t Activity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Activity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Detail detail = 1;
  total_size += 1UL * this->_internal_detail_size();
  for (const auto& msg : this->detail_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Activity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Activity)
  GOOGLE_DCHECK_NE(&from, this);
  const Activity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Activity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Activity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Activity)
    MergeFrom(*source);
  }
}

void Activity::MergeFrom(const Activity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Activity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detail_.MergeFrom(from.detail_);
}

void Activity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Activity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity::CopyFrom(const Activity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Activity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity::IsInitialized() const {
  return true;
}

void Activity::InternalSwap(Activity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  detail_.InternalSwap(&other->detail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Activity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Address::InitAsDefaultInstance() {
}
class Address::_Internal {
 public:
};

Address::Address()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Address)
}
Address::Address(const Address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      extension_(from.extension_),
      line_(from.line_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_city().empty()) {
    city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  postalcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_postalcode().empty()) {
    postalcode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.postalcode_);
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  // @@protoc_insertion_point(copy_constructor:patient.Address)
}

void Address::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Address_customized_2eproto.base);
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postalcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:patient.Address)
  SharedDtor();
}

void Address::SharedDtor() {
  city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postalcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Address& Address::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Address_customized_2eproto.base);
  return *internal_default_instance();
}


void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extension_.Clear();
  line_.Clear();
  city_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postalcode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Address::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string city = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_city(), ptr, ctx, "patient.Address.city");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_country(), ptr, ctx, "patient.Address.country");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Extension extension = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string line = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_line(), ptr, ctx, "patient.Address.line");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string postalCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_postalcode(), ptr, ctx, "patient.Address.postalCode");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_state(), ptr, ctx, "patient.Address.state");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Address::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string city = 1;
  if (this->city().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Address.city");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_city(), target);
  }

  // string country = 2;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Address.country");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_country(), target);
  }

  // repeated .patient.Extension extension = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extension_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_extension(i), target, stream);
  }

  // repeated string line = 4;
  for (int i = 0, n = this->_internal_line_size(); i < n; i++) {
    const auto& s = this->_internal_line(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Address.line");
    target = stream->WriteString(4, s, target);
  }

  // string postalCode = 5;
  if (this->postalcode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_postalcode().data(), static_cast<int>(this->_internal_postalcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Address.postalCode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_postalcode(), target);
  }

  // string state = 6;
  if (this->state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Address.state");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Address)
  return target;
}

size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Address)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Extension extension = 3;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string line = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(line_.size());
  for (int i = 0, n = line_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      line_.Get(i));
  }

  // string city = 1;
  if (this->city().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city());
  }

  // string country = 2;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string postalCode = 5;
  if (this->postalcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_postalcode());
  }

  // string state = 6;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Address::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Address)
  GOOGLE_DCHECK_NE(&from, this);
  const Address* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Address>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Address)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Address)
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extension_.MergeFrom(from.extension_);
  line_.MergeFrom(from.line_);
  if (from.city().size() > 0) {

    city_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  if (from.country().size() > 0) {

    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  if (from.postalcode().size() > 0) {

    postalcode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.postalcode_);
  }
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
}

void Address::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  return true;
}

void Address::InternalSwap(Address* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  extension_.InternalSwap(&other->extension_);
  line_.InternalSwap(&other->line_);
  city_.Swap(&other->city_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  postalcode_.Swap(&other->postalcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Address::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Adjudication::InitAsDefaultInstance() {
  ::patient::_Adjudication_default_instance_._instance.get_mutable()->amount_ = const_cast< ::patient::Amount*>(
      ::patient::Amount::internal_default_instance());
  ::patient::_Adjudication_default_instance_._instance.get_mutable()->category_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
}
class Adjudication::_Internal {
 public:
  static const ::patient::Amount& amount(const Adjudication* msg);
  static const ::patient::Category& category(const Adjudication* msg);
};

const ::patient::Amount&
Adjudication::_Internal::amount(const Adjudication* msg) {
  return *msg->amount_;
}
const ::patient::Category&
Adjudication::_Internal::category(const Adjudication* msg) {
  return *msg->category_;
}
Adjudication::Adjudication()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Adjudication)
}
Adjudication::Adjudication(const Adjudication& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_amount()) {
    amount_ = new ::patient::Amount(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  if (from._internal_has_category()) {
    category_ = new ::patient::Category(*from.category_);
  } else {
    category_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.Adjudication)
}

void Adjudication::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Adjudication_customized_2eproto.base);
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(category_));
}

Adjudication::~Adjudication() {
  // @@protoc_insertion_point(destructor:patient.Adjudication)
  SharedDtor();
}

void Adjudication::SharedDtor() {
  if (this != internal_default_instance()) delete amount_;
  if (this != internal_default_instance()) delete category_;
}

void Adjudication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Adjudication& Adjudication::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Adjudication_customized_2eproto.base);
  return *internal_default_instance();
}


void Adjudication::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Adjudication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && category_ != nullptr) {
    delete category_;
  }
  category_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Adjudication::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Amount amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Adjudication::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Adjudication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Amount amount = 1;
  if (this->has_amount()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::amount(this), target, stream);
  }

  // .patient.Category category = 2;
  if (this->has_category()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::category(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Adjudication)
  return target;
}

size_t Adjudication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Adjudication)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .patient.Amount amount = 1;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  // .patient.Category category = 2;
  if (this->has_category()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *category_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Adjudication::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Adjudication)
  GOOGLE_DCHECK_NE(&from, this);
  const Adjudication* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Adjudication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Adjudication)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Adjudication)
    MergeFrom(*source);
  }
}

void Adjudication::MergeFrom(const Adjudication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Adjudication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_amount()) {
    _internal_mutable_amount()->::patient::Amount::MergeFrom(from._internal_amount());
  }
  if (from.has_category()) {
    _internal_mutable_category()->::patient::Category::MergeFrom(from._internal_category());
  }
}

void Adjudication::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Adjudication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Adjudication::CopyFrom(const Adjudication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Adjudication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Adjudication::IsInitialized() const {
  return true;
}

void Adjudication::InternalSwap(Adjudication* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(amount_, other->amount_);
  swap(category_, other->category_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Adjudication::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Amount::InitAsDefaultInstance() {
}
class Amount::_Internal {
 public:
};

Amount::Amount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Amount)
}
Amount::Amount(const Amount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:patient.Amount)
}

void Amount::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Amount_customized_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

Amount::~Amount() {
  // @@protoc_insertion_point(destructor:patient.Amount)
  SharedDtor();
}

void Amount::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Amount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Amount& Amount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Amount_customized_2eproto.base);
  return *internal_default_instance();
}


void Amount::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Amount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  _internal_metadata_.Clear();
}

const char* Amount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_currency(), ptr, ctx, "patient.Amount.currency");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Amount::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Amount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Amount.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Amount)
  return target;
}

size_t Amount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Amount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Amount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Amount)
  GOOGLE_DCHECK_NE(&from, this);
  const Amount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Amount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Amount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Amount)
    MergeFrom(*source);
  }
}

void Amount::MergeFrom(const Amount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Amount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void Amount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Amount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Amount::CopyFrom(const Amount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Amount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Amount::IsInitialized() const {
  return true;
}

void Amount::InternalSwap(Amount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Amount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CareTeam::InitAsDefaultInstance() {
  ::patient::_CareTeam_default_instance_._instance.get_mutable()->provider_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_CareTeam_default_instance_._instance.get_mutable()->role_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
}
class CareTeam::_Internal {
 public:
  static const ::patient::Reference& provider(const CareTeam* msg);
  static const ::patient::Category& role(const CareTeam* msg);
};

const ::patient::Reference&
CareTeam::_Internal::provider(const CareTeam* msg) {
  return *msg->provider_;
}
const ::patient::Category&
CareTeam::_Internal::role(const CareTeam* msg) {
  return *msg->role_;
}
CareTeam::CareTeam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.CareTeam)
}
CareTeam::CareTeam(const CareTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  if (from._internal_has_provider()) {
    provider_ = new ::patient::Reference(*from.provider_);
  } else {
    provider_ = nullptr;
  }
  if (from._internal_has_role()) {
    role_ = new ::patient::Category(*from.role_);
  } else {
    role_ = nullptr;
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:patient.CareTeam)
}

void CareTeam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CareTeam_customized_2eproto.base);
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&provider_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&provider_)) + sizeof(sequence_));
}

CareTeam::~CareTeam() {
  // @@protoc_insertion_point(destructor:patient.CareTeam)
  SharedDtor();
}

void CareTeam::SharedDtor() {
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete provider_;
  if (this != internal_default_instance()) delete role_;
}

void CareTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CareTeam& CareTeam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CareTeam_customized_2eproto.base);
  return *internal_default_instance();
}


void CareTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.CareTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && provider_ != nullptr) {
    delete provider_;
  }
  provider_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  sequence_ = 0;
  _internal_metadata_.Clear();
}

const char* CareTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Reference provider = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_provider(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_reference(), ptr, ctx, "patient.CareTeam.reference");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CareTeam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.CareTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Reference provider = 1;
  if (this->has_provider()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::provider(this), target, stream);
  }

  // .patient.Category role = 2;
  if (this->has_role()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::role(this), target, stream);
  }

  // int32 sequence = 3;
  if (this->sequence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sequence(), target);
  }

  // string reference = 4;
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.CareTeam.reference");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.CareTeam)
  return target;
}

size_t CareTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.CareTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reference = 4;
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  // .patient.Reference provider = 1;
  if (this->has_provider()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *provider_);
  }

  // .patient.Category role = 2;
  if (this->has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // int32 sequence = 3;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CareTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.CareTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CareTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CareTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.CareTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.CareTeam)
    MergeFrom(*source);
  }
}

void CareTeam::MergeFrom(const CareTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.CareTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference().size() > 0) {

    reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  if (from.has_provider()) {
    _internal_mutable_provider()->::patient::Reference::MergeFrom(from._internal_provider());
  }
  if (from.has_role()) {
    _internal_mutable_role()->::patient::Category::MergeFrom(from._internal_role());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
}

void CareTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.CareTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CareTeam::CopyFrom(const CareTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.CareTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CareTeam::IsInitialized() const {
  return true;
}

void CareTeam::InternalSwap(CareTeam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(provider_, other->provider_);
  swap(role_, other->role_);
  swap(sequence_, other->sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CareTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Communication::InitAsDefaultInstance() {
  ::patient::_Communication_default_instance_._instance.get_mutable()->language_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
}
class Communication::_Internal {
 public:
  static const ::patient::Category& language(const Communication* msg);
};

const ::patient::Category&
Communication::_Internal::language(const Communication* msg) {
  return *msg->language_;
}
Communication::Communication()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Communication)
}
Communication::Communication(const Communication& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_language()) {
    language_ = new ::patient::Category(*from.language_);
  } else {
    language_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.Communication)
}

void Communication::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Communication_customized_2eproto.base);
  language_ = nullptr;
}

Communication::~Communication() {
  // @@protoc_insertion_point(destructor:patient.Communication)
  SharedDtor();
}

void Communication::SharedDtor() {
  if (this != internal_default_instance()) delete language_;
}

void Communication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Communication& Communication::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Communication_customized_2eproto.base);
  return *internal_default_instance();
}


void Communication::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Communication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && language_ != nullptr) {
    delete language_;
  }
  language_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Communication::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Category language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_language(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Communication::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Communication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Category language = 1;
  if (this->has_language()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::language(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Communication)
  return target;
}

size_t Communication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Communication)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .patient.Category language = 1;
  if (this->has_language()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *language_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Communication::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Communication)
  GOOGLE_DCHECK_NE(&from, this);
  const Communication* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Communication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Communication)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Communication)
    MergeFrom(*source);
  }
}

void Communication::MergeFrom(const Communication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Communication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_language()) {
    _internal_mutable_language()->::patient::Category::MergeFrom(from._internal_language());
  }
}

void Communication::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Communication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Communication::CopyFrom(const Communication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Communication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Communication::IsInitialized() const {
  return true;
}

void Communication::InternalSwap(Communication* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(language_, other->language_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Communication::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Component::InitAsDefaultInstance() {
  ::patient::_Component_default_instance_._instance.get_mutable()->code_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_Component_default_instance_._instance.get_mutable()->valuequantity_ = const_cast< ::patient::Quantity*>(
      ::patient::Quantity::internal_default_instance());
}
class Component::_Internal {
 public:
  static const ::patient::Category& code(const Component* msg);
  static const ::patient::Quantity& valuequantity(const Component* msg);
};

const ::patient::Category&
Component::_Internal::code(const Component* msg) {
  return *msg->code_;
}
const ::patient::Quantity&
Component::_Internal::valuequantity(const Component* msg) {
  return *msg->valuequantity_;
}
Component::Component()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Component)
}
Component::Component(const Component& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_code()) {
    code_ = new ::patient::Category(*from.code_);
  } else {
    code_ = nullptr;
  }
  if (from._internal_has_valuequantity()) {
    valuequantity_ = new ::patient::Quantity(*from.valuequantity_);
  } else {
    valuequantity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.Component)
}

void Component::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Component_customized_2eproto.base);
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valuequantity_) -
      reinterpret_cast<char*>(&code_)) + sizeof(valuequantity_));
}

Component::~Component() {
  // @@protoc_insertion_point(destructor:patient.Component)
  SharedDtor();
}

void Component::SharedDtor() {
  if (this != internal_default_instance()) delete code_;
  if (this != internal_default_instance()) delete valuequantity_;
}

void Component::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Component& Component::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Component_customized_2eproto.base);
  return *internal_default_instance();
}


void Component::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Component)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && valuequantity_ != nullptr) {
    delete valuequantity_;
  }
  valuequantity_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Component::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Category code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Quantity valueQuantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_valuequantity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Component::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Component)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Category code = 1;
  if (this->has_code()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::code(this), target, stream);
  }

  // .patient.Quantity valueQuantity = 2;
  if (this->has_valuequantity()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::valuequantity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Component)
  return target;
}

size_t Component::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Component)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .patient.Category code = 1;
  if (this->has_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *code_);
  }

  // .patient.Quantity valueQuantity = 2;
  if (this->has_valuequantity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *valuequantity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Component::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Component)
  GOOGLE_DCHECK_NE(&from, this);
  const Component* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Component>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Component)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Component)
    MergeFrom(*source);
  }
}

void Component::MergeFrom(const Component& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Component)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_code()) {
    _internal_mutable_code()->::patient::Category::MergeFrom(from._internal_code());
  }
  if (from.has_valuequantity()) {
    _internal_mutable_valuequantity()->::patient::Quantity::MergeFrom(from._internal_valuequantity());
  }
}

void Component::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Component)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Component::CopyFrom(const Component& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Component)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Component::IsInitialized() const {
  return true;
}

void Component::InternalSwap(Component* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(code_, other->code_);
  swap(valuequantity_, other->valuequantity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Component::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Contained::InitAsDefaultInstance() {
  ::patient::_Contained_default_instance_._instance.get_mutable()->requester_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_Contained_default_instance_._instance.get_mutable()->subject_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_Contained_default_instance_._instance.get_mutable()->beneficiary_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_Contained_default_instance_._instance.get_mutable()->type_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
}
class Contained::_Internal {
 public:
  static const ::patient::Reference& requester(const Contained* msg);
  static const ::patient::Reference& subject(const Contained* msg);
  static const ::patient::Reference& beneficiary(const Contained* msg);
  static const ::patient::Category& type(const Contained* msg);
};

const ::patient::Reference&
Contained::_Internal::requester(const Contained* msg) {
  return *msg->requester_;
}
const ::patient::Reference&
Contained::_Internal::subject(const Contained* msg) {
  return *msg->subject_;
}
const ::patient::Reference&
Contained::_Internal::beneficiary(const Contained* msg) {
  return *msg->beneficiary_;
}
const ::patient::Category&
Contained::_Internal::type(const Contained* msg) {
  return *msg->type_;
}
Contained::Contained()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Contained)
}
Contained::Contained(const Contained& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      performer_(from.performer_),
      payor_(from.payor_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  intent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_intent().empty()) {
    intent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.intent_);
  }
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from._internal_has_requester()) {
    requester_ = new ::patient::Reference(*from.requester_);
  } else {
    requester_ = nullptr;
  }
  if (from._internal_has_subject()) {
    subject_ = new ::patient::Reference(*from.subject_);
  } else {
    subject_ = nullptr;
  }
  if (from._internal_has_beneficiary()) {
    beneficiary_ = new ::patient::Reference(*from.beneficiary_);
  } else {
    beneficiary_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::patient::Category(*from.type_);
  } else {
    type_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:patient.Contained)
}

void Contained::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Contained_customized_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&requester_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&requester_)) + sizeof(status_));
}

Contained::~Contained() {
  // @@protoc_insertion_point(destructor:patient.Contained)
  SharedDtor();
}

void Contained::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requester_;
  if (this != internal_default_instance()) delete subject_;
  if (this != internal_default_instance()) delete beneficiary_;
  if (this != internal_default_instance()) delete type_;
}

void Contained::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Contained& Contained::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Contained_customized_2eproto.base);
  return *internal_default_instance();
}


void Contained::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Contained)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  performer_.Clear();
  payor_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && requester_ != nullptr) {
    delete requester_;
  }
  requester_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && beneficiary_ != nullptr) {
    delete beneficiary_;
  }
  beneficiary_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear();
}

const char* Contained::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.Contained.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string intent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_intent(), ptr, ctx, "patient.Contained.intent");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Reference performer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_performer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Reference requester = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_requester(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resourceType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.Contained.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Status status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::patient::Status>(val));
        } else goto handle_unusual;
        continue;
      // .patient.Reference subject = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference beneficiary = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_beneficiary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Reference payor = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_payor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Category type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Contained::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Contained)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Contained.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string intent = 2;
  if (this->intent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_intent().data(), static_cast<int>(this->_internal_intent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Contained.intent");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_intent(), target);
  }

  // repeated .patient.Reference performer = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_performer_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_performer(i), target, stream);
  }

  // .patient.Reference requester = 4;
  if (this->has_requester()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::requester(this), target, stream);
  }

  // string resourceType = 5;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Contained.resourceType");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_resourcetype(), target);
  }

  // .patient.Status status = 6;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_status(), target);
  }

  // .patient.Reference subject = 7;
  if (this->has_subject()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::subject(this), target, stream);
  }

  // .patient.Reference beneficiary = 8;
  if (this->has_beneficiary()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::beneficiary(this), target, stream);
  }

  // repeated .patient.Reference payor = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_payor_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(9, this->_internal_payor(i), target, stream);
  }

  // .patient.Category type = 10;
  if (this->has_type()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Contained)
  return target;
}

size_t Contained::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Contained)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Reference performer = 3;
  total_size += 1UL * this->_internal_performer_size();
  for (const auto& msg : this->performer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Reference payor = 9;
  total_size += 1UL * this->_internal_payor_size();
  for (const auto& msg : this->payor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string intent = 2;
  if (this->intent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_intent());
  }

  // string resourceType = 5;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  // .patient.Reference requester = 4;
  if (this->has_requester()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requester_);
  }

  // .patient.Reference subject = 7;
  if (this->has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_);
  }

  // .patient.Reference beneficiary = 8;
  if (this->has_beneficiary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *beneficiary_);
  }

  // .patient.Category type = 10;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // .patient.Status status = 6;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Contained::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Contained)
  GOOGLE_DCHECK_NE(&from, this);
  const Contained* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Contained>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Contained)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Contained)
    MergeFrom(*source);
  }
}

void Contained::MergeFrom(const Contained& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Contained)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  performer_.MergeFrom(from.performer_);
  payor_.MergeFrom(from.payor_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.intent().size() > 0) {

    intent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.intent_);
  }
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.has_requester()) {
    _internal_mutable_requester()->::patient::Reference::MergeFrom(from._internal_requester());
  }
  if (from.has_subject()) {
    _internal_mutable_subject()->::patient::Reference::MergeFrom(from._internal_subject());
  }
  if (from.has_beneficiary()) {
    _internal_mutable_beneficiary()->::patient::Reference::MergeFrom(from._internal_beneficiary());
  }
  if (from.has_type()) {
    _internal_mutable_type()->::patient::Category::MergeFrom(from._internal_type());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void Contained::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Contained)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contained::CopyFrom(const Contained& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Contained)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contained::IsInitialized() const {
  return true;
}

void Contained::InternalSwap(Contained* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  performer_.InternalSwap(&other->performer_);
  payor_.InternalSwap(&other->payor_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  intent_.Swap(&other->intent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requester_, other->requester_);
  swap(subject_, other->subject_);
  swap(beneficiary_, other->beneficiary_);
  swap(type_, other->type_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Contained::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Detail::InitAsDefaultInstance() {
  ::patient::_Detail_default_instance_._instance.get_mutable()->code_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_Detail_default_instance_._instance.get_mutable()->location_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class Detail::_Internal {
 public:
  static const ::patient::Category& code(const Detail* msg);
  static const ::patient::Reference& location(const Detail* msg);
};

const ::patient::Category&
Detail::_Internal::code(const Detail* msg) {
  return *msg->code_;
}
const ::patient::Reference&
Detail::_Internal::location(const Detail* msg) {
  return *msg->location_;
}
Detail::Detail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Detail)
}
Detail::Detail(const Detail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_code()) {
    code_ = new ::patient::Category(*from.code_);
  } else {
    code_ = nullptr;
  }
  if (from._internal_has_location()) {
    location_ = new ::patient::Reference(*from.location_);
  } else {
    location_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:patient.Detail)
}

void Detail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Detail_customized_2eproto.base);
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&code_)) + sizeof(status_));
}

Detail::~Detail() {
  // @@protoc_insertion_point(destructor:patient.Detail)
  SharedDtor();
}

void Detail::SharedDtor() {
  if (this != internal_default_instance()) delete code_;
  if (this != internal_default_instance()) delete location_;
}

void Detail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Detail& Detail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Detail_customized_2eproto.base);
  return *internal_default_instance();
}


void Detail::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Detail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear();
}

const char* Detail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Category code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::patient::Status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Detail::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Detail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Category code = 1;
  if (this->has_code()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::code(this), target, stream);
  }

  // .patient.Reference location = 2;
  if (this->has_location()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::location(this), target, stream);
  }

  // .patient.Status status = 3;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Detail)
  return target;
}

size_t Detail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Detail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .patient.Category code = 1;
  if (this->has_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *code_);
  }

  // .patient.Reference location = 2;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .patient.Status status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Detail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Detail)
  GOOGLE_DCHECK_NE(&from, this);
  const Detail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Detail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Detail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Detail)
    MergeFrom(*source);
  }
}

void Detail::MergeFrom(const Detail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Detail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_code()) {
    _internal_mutable_code()->::patient::Category::MergeFrom(from._internal_code());
  }
  if (from.has_location()) {
    _internal_mutable_location()->::patient::Reference::MergeFrom(from._internal_location());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void Detail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Detail::CopyFrom(const Detail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detail::IsInitialized() const {
  return true;
}

void Detail::InternalSwap(Detail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(code_, other->code_);
  swap(location_, other->location_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Detail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Diagnosis::InitAsDefaultInstance() {
  ::patient::_Diagnosis_default_instance_._instance.get_mutable()->diagnosisreference_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class Diagnosis::_Internal {
 public:
  static const ::patient::Reference& diagnosisreference(const Diagnosis* msg);
};

const ::patient::Reference&
Diagnosis::_Internal::diagnosisreference(const Diagnosis* msg) {
  return *msg->diagnosisreference_;
}
Diagnosis::Diagnosis()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Diagnosis)
}
Diagnosis::Diagnosis(const Diagnosis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      type_(from.type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_diagnosisreference()) {
    diagnosisreference_ = new ::patient::Reference(*from.diagnosisreference_);
  } else {
    diagnosisreference_ = nullptr;
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:patient.Diagnosis)
}

void Diagnosis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Diagnosis_customized_2eproto.base);
  ::memset(&diagnosisreference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&diagnosisreference_)) + sizeof(sequence_));
}

Diagnosis::~Diagnosis() {
  // @@protoc_insertion_point(destructor:patient.Diagnosis)
  SharedDtor();
}

void Diagnosis::SharedDtor() {
  if (this != internal_default_instance()) delete diagnosisreference_;
}

void Diagnosis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Diagnosis& Diagnosis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Diagnosis_customized_2eproto.base);
  return *internal_default_instance();
}


void Diagnosis::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Diagnosis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.Clear();
  if (GetArenaNoVirtual() == nullptr && diagnosisreference_ != nullptr) {
    delete diagnosisreference_;
  }
  diagnosisreference_ = nullptr;
  sequence_ = 0;
  _internal_metadata_.Clear();
}

const char* Diagnosis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Reference diagnosisReference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_diagnosisreference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Category type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Diagnosis::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Diagnosis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Reference diagnosisReference = 1;
  if (this->has_diagnosisreference()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::diagnosisreference(this), target, stream);
  }

  // int32 sequence = 2;
  if (this->sequence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sequence(), target);
  }

  // repeated .patient.Category type = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_type_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_type(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Diagnosis)
  return target;
}

size_t Diagnosis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Diagnosis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Category type = 3;
  total_size += 1UL * this->_internal_type_size();
  for (const auto& msg : this->type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .patient.Reference diagnosisReference = 1;
  if (this->has_diagnosisreference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diagnosisreference_);
  }

  // int32 sequence = 2;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Diagnosis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Diagnosis)
  GOOGLE_DCHECK_NE(&from, this);
  const Diagnosis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Diagnosis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Diagnosis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Diagnosis)
    MergeFrom(*source);
  }
}

void Diagnosis::MergeFrom(const Diagnosis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Diagnosis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  type_.MergeFrom(from.type_);
  if (from.has_diagnosisreference()) {
    _internal_mutable_diagnosisreference()->::patient::Reference::MergeFrom(from._internal_diagnosisreference());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
}

void Diagnosis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Diagnosis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Diagnosis::CopyFrom(const Diagnosis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Diagnosis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diagnosis::IsInitialized() const {
  return true;
}

void Diagnosis::InternalSwap(Diagnosis* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  type_.InternalSwap(&other->type_);
  swap(diagnosisreference_, other->diagnosisreference_);
  swap(sequence_, other->sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Diagnosis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Entry::InitAsDefaultInstance() {
  ::patient::_Entry_default_instance_._instance.get_mutable()->request_ = const_cast< ::patient::Request*>(
      ::patient::Request::internal_default_instance());
}
class Entry::_Internal {
 public:
  static const ::patient::Request& request(const Entry* msg);
};

const ::patient::Request&
Entry::_Internal::request(const Entry* msg) {
  return *msg->request_;
}
Entry::Entry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Entry)
}
Entry::Entry(const Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      resource_(from.resource_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fullurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fullurl().empty()) {
    fullurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fullurl_);
  }
  if (from._internal_has_request()) {
    request_ = new ::patient::Request(*from.request_);
  } else {
    request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.Entry)
}

void Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Entry_customized_2eproto.base);
  fullurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_ = nullptr;
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:patient.Entry)
  SharedDtor();
}

void Entry::SharedDtor() {
  fullurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete request_;
}

void Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Entry& Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Entry_customized_2eproto.base);
  return *internal_default_instance();
}


void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_.Clear();
  fullurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string fullUrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_fullurl(), ptr, ctx, "patient.Entry.fullUrl");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Request request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Resource resource = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Entry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fullUrl = 1;
  if (this->fullurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fullurl().data(), static_cast<int>(this->_internal_fullurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Entry.fullUrl");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fullurl(), target);
  }

  // .patient.Request request = 2;
  if (this->has_request()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::request(this), target, stream);
  }

  // repeated .patient.Resource resource = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_resource(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Entry)
  return target;
}

size_t Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Resource resource = 3;
  total_size += 1UL * this->_internal_resource_size();
  for (const auto& msg : this->resource_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string fullUrl = 1;
  if (this->fullurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fullurl());
  }

  // .patient.Request request = 2;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Entry)
    MergeFrom(*source);
  }
}

void Entry::MergeFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resource_.MergeFrom(from.resource_);
  if (from.fullurl().size() > 0) {

    fullurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fullurl_);
  }
  if (from.has_request()) {
    _internal_mutable_request()->::patient::Request::MergeFrom(from._internal_request());
  }
}

void Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  return true;
}

void Entry::InternalSwap(Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  resource_.InternalSwap(&other->resource_);
  fullurl_.Swap(&other->fullurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_, other->request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Extension::InitAsDefaultInstance() {
  ::patient::_Extension_default_instance_._instance.get_mutable()->valuecoding_ = const_cast< ::patient::Coding*>(
      ::patient::Coding::internal_default_instance());
}
class Extension::_Internal {
 public:
  static const ::patient::Coding& valuecoding(const Extension* msg);
};

const ::patient::Coding&
Extension::_Internal::valuecoding(const Extension* msg) {
  return *msg->valuecoding_;
}
Extension::Extension()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Extension)
}
Extension::Extension(const Extension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  valuestring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_valuestring().empty()) {
    valuestring_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.valuestring_);
  }
  if (from._internal_has_valuecoding()) {
    valuecoding_ = new ::patient::Coding(*from.valuecoding_);
  } else {
    valuecoding_ = nullptr;
  }
  valuedecimal_ = from.valuedecimal_;
  // @@protoc_insertion_point(copy_constructor:patient.Extension)
}

void Extension::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Extension_customized_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  valuestring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&valuecoding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valuedecimal_) -
      reinterpret_cast<char*>(&valuecoding_)) + sizeof(valuedecimal_));
}

Extension::~Extension() {
  // @@protoc_insertion_point(destructor:patient.Extension)
  SharedDtor();
}

void Extension::SharedDtor() {
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  valuestring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete valuecoding_;
}

void Extension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Extension& Extension::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Extension_customized_2eproto.base);
  return *internal_default_instance();
}


void Extension::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Extension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extension_.Clear();
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  valuestring_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && valuecoding_ != nullptr) {
    delete valuecoding_;
  }
  valuecoding_ = nullptr;
  valuedecimal_ = 0;
  _internal_metadata_.Clear();
}

const char* Extension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .patient.Extension extension = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_url(), ptr, ctx, "patient.Extension.url");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Coding valueCoding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_valuecoding(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string valueString = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_valuestring(), ptr, ctx, "patient.Extension.valueString");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float valueDecimal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          valuedecimal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Extension::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Extension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .patient.Extension extension = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extension_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_extension(i), target, stream);
  }

  // string url = 2;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Extension.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // .patient.Coding valueCoding = 3;
  if (this->has_valuecoding()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::valuecoding(this), target, stream);
  }

  // string valueString = 4;
  if (this->valuestring().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valuestring().data(), static_cast<int>(this->_internal_valuestring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Extension.valueString");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_valuestring(), target);
  }

  // float valueDecimal = 5;
  if (!(this->valuedecimal() <= 0 && this->valuedecimal() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_valuedecimal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Extension)
  return target;
}

size_t Extension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Extension)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Extension extension = 1;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string url = 2;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string valueString = 4;
  if (this->valuestring().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valuestring());
  }

  // .patient.Coding valueCoding = 3;
  if (this->has_valuecoding()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *valuecoding_);
  }

  // float valueDecimal = 5;
  if (!(this->valuedecimal() <= 0 && this->valuedecimal() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Extension::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Extension)
  GOOGLE_DCHECK_NE(&from, this);
  const Extension* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Extension>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Extension)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Extension)
    MergeFrom(*source);
  }
}

void Extension::MergeFrom(const Extension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Extension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extension_.MergeFrom(from.extension_);
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.valuestring().size() > 0) {

    valuestring_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.valuestring_);
  }
  if (from.has_valuecoding()) {
    _internal_mutable_valuecoding()->::patient::Coding::MergeFrom(from._internal_valuecoding());
  }
  if (!(from.valuedecimal() <= 0 && from.valuedecimal() >= 0)) {
    _internal_set_valuedecimal(from._internal_valuedecimal());
  }
}

void Extension::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extension::CopyFrom(const Extension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extension::IsInitialized() const {
  return true;
}

void Extension::InternalSwap(Extension* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  extension_.InternalSwap(&other->extension_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  valuestring_.Swap(&other->valuestring_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(valuecoding_, other->valuecoding_);
  swap(valuedecimal_, other->valuedecimal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Extension::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Identifier::InitAsDefaultInstance() {
  ::patient::_Identifier_default_instance_._instance.get_mutable()->type_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
}
class Identifier::_Internal {
 public:
  static const ::patient::Category& type(const Identifier* msg);
};

const ::patient::Category&
Identifier::_Internal::type(const Identifier* msg) {
  return *msg->type_;
}
Identifier::Identifier()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Identifier)
}
Identifier::Identifier(const Identifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_system().empty()) {
    system_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.system_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from._internal_has_type()) {
    type_ = new ::patient::Category(*from.type_);
  } else {
    type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.Identifier)
}

void Identifier::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Identifier_customized_2eproto.base);
  system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = nullptr;
}

Identifier::~Identifier() {
  // @@protoc_insertion_point(destructor:patient.Identifier)
  SharedDtor();
}

void Identifier::SharedDtor() {
  system_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
}

void Identifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Identifier& Identifier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Identifier_customized_2eproto.base);
  return *internal_default_instance();
}


void Identifier::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Identifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  system_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Identifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string system = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_system(), ptr, ctx, "patient.Identifier.system");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_value(), ptr, ctx, "patient.Identifier.value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Identifier::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Identifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string system = 1;
  if (this->system().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_system().data(), static_cast<int>(this->_internal_system().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Identifier.system");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_system(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Identifier.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // .patient.Category type = 3;
  if (this->has_type()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Identifier)
  return target;
}

size_t Identifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Identifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string system = 1;
  if (this->system().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_system());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .patient.Category type = 3;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Identifier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Identifier)
  GOOGLE_DCHECK_NE(&from, this);
  const Identifier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Identifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Identifier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Identifier)
    MergeFrom(*source);
  }
}

void Identifier::MergeFrom(const Identifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Identifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.system().size() > 0) {

    system_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.system_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_type()) {
    _internal_mutable_type()->::patient::Category::MergeFrom(from._internal_type());
  }
}

void Identifier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Identifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Identifier::CopyFrom(const Identifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Identifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identifier::IsInitialized() const {
  return true;
}

void Identifier::InternalSwap(Identifier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  system_.Swap(&other->system_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Identifier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Insurance::InitAsDefaultInstance() {
  ::patient::_Insurance_default_instance_._instance.get_mutable()->coverage_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class Insurance::_Internal {
 public:
  static const ::patient::Reference& coverage(const Insurance* msg);
};

const ::patient::Reference&
Insurance::_Internal::coverage(const Insurance* msg) {
  return *msg->coverage_;
}
Insurance::Insurance()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Insurance)
}
Insurance::Insurance(const Insurance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_coverage()) {
    coverage_ = new ::patient::Reference(*from.coverage_);
  } else {
    coverage_ = nullptr;
  }
  ::memcpy(&focal_, &from.focal_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&focal_)) + sizeof(sequence_));
  // @@protoc_insertion_point(copy_constructor:patient.Insurance)
}

void Insurance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Insurance_customized_2eproto.base);
  ::memset(&coverage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&coverage_)) + sizeof(sequence_));
}

Insurance::~Insurance() {
  // @@protoc_insertion_point(destructor:patient.Insurance)
  SharedDtor();
}

void Insurance::SharedDtor() {
  if (this != internal_default_instance()) delete coverage_;
}

void Insurance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Insurance& Insurance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Insurance_customized_2eproto.base);
  return *internal_default_instance();
}


void Insurance::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Insurance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && coverage_ != nullptr) {
    delete coverage_;
  }
  coverage_ = nullptr;
  ::memset(&focal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&focal_)) + sizeof(sequence_));
  _internal_metadata_.Clear();
}

const char* Insurance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Reference coverage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coverage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool focal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          focal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Insurance::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Insurance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Reference coverage = 1;
  if (this->has_coverage()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::coverage(this), target, stream);
  }

  // bool focal = 2;
  if (this->focal() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_focal(), target);
  }

  // int32 sequence = 3;
  if (this->sequence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Insurance)
  return target;
}

size_t Insurance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Insurance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .patient.Reference coverage = 1;
  if (this->has_coverage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coverage_);
  }

  // bool focal = 2;
  if (this->focal() != 0) {
    total_size += 1 + 1;
  }

  // int32 sequence = 3;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Insurance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Insurance)
  GOOGLE_DCHECK_NE(&from, this);
  const Insurance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Insurance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Insurance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Insurance)
    MergeFrom(*source);
  }
}

void Insurance::MergeFrom(const Insurance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Insurance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_coverage()) {
    _internal_mutable_coverage()->::patient::Reference::MergeFrom(from._internal_coverage());
  }
  if (from.focal() != 0) {
    _internal_set_focal(from._internal_focal());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
}

void Insurance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Insurance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Insurance::CopyFrom(const Insurance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Insurance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Insurance::IsInitialized() const {
  return true;
}

void Insurance::InternalSwap(Insurance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(coverage_, other->coverage_);
  swap(focal_, other->focal_);
  swap(sequence_, other->sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Insurance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Item::InitAsDefaultInstance() {
  ::patient::_Item_default_instance_._instance.get_mutable()->productorservice_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_Item_default_instance_._instance.get_mutable()->net_ = const_cast< ::patient::Amount*>(
      ::patient::Amount::internal_default_instance());
  ::patient::_Item_default_instance_._instance.get_mutable()->category_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_Item_default_instance_._instance.get_mutable()->locationcodeableconcept_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_Item_default_instance_._instance.get_mutable()->servicedperiod_ = const_cast< ::patient::Period*>(
      ::patient::Period::internal_default_instance());
}
class Item::_Internal {
 public:
  static const ::patient::Category& productorservice(const Item* msg);
  static const ::patient::Amount& net(const Item* msg);
  static const ::patient::Category& category(const Item* msg);
  static const ::patient::Category& locationcodeableconcept(const Item* msg);
  static const ::patient::Period& servicedperiod(const Item* msg);
};

const ::patient::Category&
Item::_Internal::productorservice(const Item* msg) {
  return *msg->productorservice_;
}
const ::patient::Amount&
Item::_Internal::net(const Item* msg) {
  return *msg->net_;
}
const ::patient::Category&
Item::_Internal::category(const Item* msg) {
  return *msg->category_;
}
const ::patient::Category&
Item::_Internal::locationcodeableconcept(const Item* msg) {
  return *msg->locationcodeableconcept_;
}
const ::patient::Period&
Item::_Internal::servicedperiod(const Item* msg) {
  return *msg->servicedperiod_;
}
Item::Item()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Item)
}
Item::Item(const Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      encounter_(from.encounter_),
      informationsequence_(from.informationsequence_),
      adjudication_(from.adjudication_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_productorservice()) {
    productorservice_ = new ::patient::Category(*from.productorservice_);
  } else {
    productorservice_ = nullptr;
  }
  if (from._internal_has_net()) {
    net_ = new ::patient::Amount(*from.net_);
  } else {
    net_ = nullptr;
  }
  if (from._internal_has_category()) {
    category_ = new ::patient::Category(*from.category_);
  } else {
    category_ = nullptr;
  }
  if (from._internal_has_locationcodeableconcept()) {
    locationcodeableconcept_ = new ::patient::Category(*from.locationcodeableconcept_);
  } else {
    locationcodeableconcept_ = nullptr;
  }
  if (from._internal_has_servicedperiod()) {
    servicedperiod_ = new ::patient::Period(*from.servicedperiod_);
  } else {
    servicedperiod_ = nullptr;
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:patient.Item)
}

void Item::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Item_customized_2eproto.base);
  ::memset(&productorservice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&productorservice_)) + sizeof(sequence_));
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:patient.Item)
  SharedDtor();
}

void Item::SharedDtor() {
  if (this != internal_default_instance()) delete productorservice_;
  if (this != internal_default_instance()) delete net_;
  if (this != internal_default_instance()) delete category_;
  if (this != internal_default_instance()) delete locationcodeableconcept_;
  if (this != internal_default_instance()) delete servicedperiod_;
}

void Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Item& Item::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Item_customized_2eproto.base);
  return *internal_default_instance();
}


void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encounter_.Clear();
  informationsequence_.Clear();
  adjudication_.Clear();
  if (GetArenaNoVirtual() == nullptr && productorservice_ != nullptr) {
    delete productorservice_;
  }
  productorservice_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && net_ != nullptr) {
    delete net_;
  }
  net_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && category_ != nullptr) {
    delete category_;
  }
  category_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && locationcodeableconcept_ != nullptr) {
    delete locationcodeableconcept_;
  }
  locationcodeableconcept_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && servicedperiod_ != nullptr) {
    delete servicedperiod_;
  }
  servicedperiod_ = nullptr;
  sequence_ = 0;
  _internal_metadata_.Clear();
}

const char* Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .patient.Reference encounter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_encounter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Category productOrService = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_productorservice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 informationSequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_informationsequence(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_informationsequence(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Amount net = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_net(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category category = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category locationCodeableConcept = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_locationcodeableconcept(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Period servicedPeriod = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_servicedperiod(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Adjudication adjudication = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_adjudication(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Item::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .patient.Reference encounter = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_encounter_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_encounter(i), target, stream);
  }

  // .patient.Category productOrService = 2;
  if (this->has_productorservice()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::productorservice(this), target, stream);
  }

  // int32 sequence = 3;
  if (this->sequence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sequence(), target);
  }

  // repeated int32 informationSequence = 4;
  {
    int byte_size = _informationsequence_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_informationsequence(), byte_size, target);
    }
  }

  // .patient.Amount net = 5;
  if (this->has_net()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::net(this), target, stream);
  }

  // .patient.Category category = 6;
  if (this->has_category()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::category(this), target, stream);
  }

  // .patient.Category locationCodeableConcept = 7;
  if (this->has_locationcodeableconcept()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::locationcodeableconcept(this), target, stream);
  }

  // .patient.Period servicedPeriod = 8;
  if (this->has_servicedperiod()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::servicedperiod(this), target, stream);
  }

  // repeated .patient.Adjudication adjudication = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_adjudication_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(9, this->_internal_adjudication(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Item)
  return target;
}

size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Reference encounter = 1;
  total_size += 1UL * this->_internal_encounter_size();
  for (const auto& msg : this->encounter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 informationSequence = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->informationsequence_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _informationsequence_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .patient.Adjudication adjudication = 9;
  total_size += 1UL * this->_internal_adjudication_size();
  for (const auto& msg : this->adjudication_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .patient.Category productOrService = 2;
  if (this->has_productorservice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *productorservice_);
  }

  // .patient.Amount net = 5;
  if (this->has_net()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *net_);
  }

  // .patient.Category category = 6;
  if (this->has_category()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *category_);
  }

  // .patient.Category locationCodeableConcept = 7;
  if (this->has_locationcodeableconcept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locationcodeableconcept_);
  }

  // .patient.Period servicedPeriod = 8;
  if (this->has_servicedperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *servicedperiod_);
  }

  // int32 sequence = 3;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const Item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Item)
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  encounter_.MergeFrom(from.encounter_);
  informationsequence_.MergeFrom(from.informationsequence_);
  adjudication_.MergeFrom(from.adjudication_);
  if (from.has_productorservice()) {
    _internal_mutable_productorservice()->::patient::Category::MergeFrom(from._internal_productorservice());
  }
  if (from.has_net()) {
    _internal_mutable_net()->::patient::Amount::MergeFrom(from._internal_net());
  }
  if (from.has_category()) {
    _internal_mutable_category()->::patient::Category::MergeFrom(from._internal_category());
  }
  if (from.has_locationcodeableconcept()) {
    _internal_mutable_locationcodeableconcept()->::patient::Category::MergeFrom(from._internal_locationcodeableconcept());
  }
  if (from.has_servicedperiod()) {
    _internal_mutable_servicedperiod()->::patient::Period::MergeFrom(from._internal_servicedperiod());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
}

void Item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  return true;
}

void Item::InternalSwap(Item* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  encounter_.InternalSwap(&other->encounter_);
  informationsequence_.InternalSwap(&other->informationsequence_);
  adjudication_.InternalSwap(&other->adjudication_);
  swap(productorservice_, other->productorservice_);
  swap(net_, other->net_);
  swap(category_, other->category_);
  swap(locationcodeableconcept_, other->locationcodeableconcept_);
  swap(servicedperiod_, other->servicedperiod_);
  swap(sequence_, other->sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Name::InitAsDefaultInstance() {
}
class Name::_Internal {
 public:
};

Name::Name()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Name)
}
Name::Name(const Name& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      given_(from.given_),
      prefix_(from.prefix_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_family().empty()) {
    family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_);
  }
  use_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_use().empty()) {
    use_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.use_);
  }
  // @@protoc_insertion_point(copy_constructor:patient.Name)
}

void Name::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Name_customized_2eproto.base);
  family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Name::~Name() {
  // @@protoc_insertion_point(destructor:patient.Name)
  SharedDtor();
}

void Name::SharedDtor() {
  family_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Name::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Name& Name::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Name_customized_2eproto.base);
  return *internal_default_instance();
}


void Name::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Name)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  given_.Clear();
  prefix_.Clear();
  family_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Name::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_family(), ptr, ctx, "patient.Name.family");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string given = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_given(), ptr, ctx, "patient.Name.given");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string prefix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_prefix(), ptr, ctx, "patient.Name.prefix");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string use = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_use(), ptr, ctx, "patient.Name.use");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Name::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Name)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string family = 1;
  if (this->family().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_family().data(), static_cast<int>(this->_internal_family().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Name.family");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_family(), target);
  }

  // repeated string given = 2;
  for (int i = 0, n = this->_internal_given_size(); i < n; i++) {
    const auto& s = this->_internal_given(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Name.given");
    target = stream->WriteString(2, s, target);
  }

  // repeated string prefix = 3;
  for (int i = 0, n = this->_internal_prefix_size(); i < n; i++) {
    const auto& s = this->_internal_prefix(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Name.prefix");
    target = stream->WriteString(3, s, target);
  }

  // string use = 4;
  if (this->use().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_use().data(), static_cast<int>(this->_internal_use().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Name.use");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_use(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Name)
  return target;
}

size_t Name::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Name)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string given = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(given_.size());
  for (int i = 0, n = given_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      given_.Get(i));
  }

  // repeated string prefix = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(prefix_.size());
  for (int i = 0, n = prefix_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      prefix_.Get(i));
  }

  // string family = 1;
  if (this->family().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_family());
  }

  // string use = 4;
  if (this->use().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_use());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Name::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Name)
  GOOGLE_DCHECK_NE(&from, this);
  const Name* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Name>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Name)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Name)
    MergeFrom(*source);
  }
}

void Name::MergeFrom(const Name& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Name)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  given_.MergeFrom(from.given_);
  prefix_.MergeFrom(from.prefix_);
  if (from.family().size() > 0) {

    family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.family_);
  }
  if (from.use().size() > 0) {

    use_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.use_);
  }
}

void Name::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Name::CopyFrom(const Name& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Name::IsInitialized() const {
  return true;
}

void Name::InternalSwap(Name* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  given_.InternalSwap(&other->given_);
  prefix_.InternalSwap(&other->prefix_);
  family_.Swap(&other->family_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  use_.Swap(&other->use_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Name::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Participant::InitAsDefaultInstance() {
  ::patient::_Participant_default_instance_._instance.get_mutable()->individual_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_Participant_default_instance_._instance.get_mutable()->member_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class Participant::_Internal {
 public:
  static const ::patient::Reference& individual(const Participant* msg);
  static const ::patient::Reference& member(const Participant* msg);
};

const ::patient::Reference&
Participant::_Internal::individual(const Participant* msg) {
  return *msg->individual_;
}
const ::patient::Reference&
Participant::_Internal::member(const Participant* msg) {
  return *msg->member_;
}
Participant::Participant()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Participant)
}
Participant::Participant(const Participant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      role_(from.role_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_individual()) {
    individual_ = new ::patient::Reference(*from.individual_);
  } else {
    individual_ = nullptr;
  }
  if (from._internal_has_member()) {
    member_ = new ::patient::Reference(*from.member_);
  } else {
    member_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.Participant)
}

void Participant::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Participant_customized_2eproto.base);
  ::memset(&individual_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_) -
      reinterpret_cast<char*>(&individual_)) + sizeof(member_));
}

Participant::~Participant() {
  // @@protoc_insertion_point(destructor:patient.Participant)
  SharedDtor();
}

void Participant::SharedDtor() {
  if (this != internal_default_instance()) delete individual_;
  if (this != internal_default_instance()) delete member_;
}

void Participant::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Participant& Participant::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Participant_customized_2eproto.base);
  return *internal_default_instance();
}


void Participant::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Participant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_.Clear();
  if (GetArenaNoVirtual() == nullptr && individual_ != nullptr) {
    delete individual_;
  }
  individual_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && member_ != nullptr) {
    delete member_;
  }
  member_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Participant::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Reference individual = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_individual(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference member = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_member(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Category role = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_role(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Participant::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Participant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Reference individual = 1;
  if (this->has_individual()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::individual(this), target, stream);
  }

  // .patient.Reference member = 2;
  if (this->has_member()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::member(this), target, stream);
  }

  // repeated .patient.Category role = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_role_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_role(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Participant)
  return target;
}

size_t Participant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Participant)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Category role = 3;
  total_size += 1UL * this->_internal_role_size();
  for (const auto& msg : this->role_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .patient.Reference individual = 1;
  if (this->has_individual()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *individual_);
  }

  // .patient.Reference member = 2;
  if (this->has_member()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *member_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Participant::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Participant)
  GOOGLE_DCHECK_NE(&from, this);
  const Participant* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Participant>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Participant)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Participant)
    MergeFrom(*source);
  }
}

void Participant::MergeFrom(const Participant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Participant)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_.MergeFrom(from.role_);
  if (from.has_individual()) {
    _internal_mutable_individual()->::patient::Reference::MergeFrom(from._internal_individual());
  }
  if (from.has_member()) {
    _internal_mutable_member()->::patient::Reference::MergeFrom(from._internal_member());
  }
}

void Participant::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Participant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Participant::CopyFrom(const Participant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Participant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Participant::IsInitialized() const {
  return true;
}

void Participant::InternalSwap(Participant* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  role_.InternalSwap(&other->role_);
  swap(individual_, other->individual_);
  swap(member_, other->member_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Participant::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Payment::InitAsDefaultInstance() {
  ::patient::_Payment_default_instance_._instance.get_mutable()->amount_ = const_cast< ::patient::Amount*>(
      ::patient::Amount::internal_default_instance());
}
class Payment::_Internal {
 public:
  static const ::patient::Amount& amount(const Payment* msg);
};

const ::patient::Amount&
Payment::_Internal::amount(const Payment* msg) {
  return *msg->amount_;
}
Payment::Payment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Payment)
}
Payment::Payment(const Payment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_amount()) {
    amount_ = new ::patient::Amount(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.Payment)
}

void Payment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Payment_customized_2eproto.base);
  amount_ = nullptr;
}

Payment::~Payment() {
  // @@protoc_insertion_point(destructor:patient.Payment)
  SharedDtor();
}

void Payment::SharedDtor() {
  if (this != internal_default_instance()) delete amount_;
}

void Payment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Payment& Payment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Payment_customized_2eproto.base);
  return *internal_default_instance();
}


void Payment::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Payment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Payment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Amount amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Payment::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Payment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Amount amount = 1;
  if (this->has_amount()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::amount(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Payment)
  return target;
}

size_t Payment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Payment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .patient.Amount amount = 1;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Payment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Payment)
  GOOGLE_DCHECK_NE(&from, this);
  const Payment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Payment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Payment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Payment)
    MergeFrom(*source);
  }
}

void Payment::MergeFrom(const Payment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Payment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_amount()) {
    _internal_mutable_amount()->::patient::Amount::MergeFrom(from._internal_amount());
  }
}

void Payment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Payment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Payment::CopyFrom(const Payment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Payment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payment::IsInitialized() const {
  return true;
}

void Payment::InternalSwap(Payment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Payment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Procedure::InitAsDefaultInstance() {
  ::patient::_Procedure_default_instance_._instance.get_mutable()->procedurereference_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class Procedure::_Internal {
 public:
  static const ::patient::Reference& procedurereference(const Procedure* msg);
};

const ::patient::Reference&
Procedure::_Internal::procedurereference(const Procedure* msg) {
  return *msg->procedurereference_;
}
Procedure::Procedure()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Procedure)
}
Procedure::Procedure(const Procedure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_procedurereference()) {
    procedurereference_ = new ::patient::Reference(*from.procedurereference_);
  } else {
    procedurereference_ = nullptr;
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:patient.Procedure)
}

void Procedure::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Procedure_customized_2eproto.base);
  ::memset(&procedurereference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&procedurereference_)) + sizeof(sequence_));
}

Procedure::~Procedure() {
  // @@protoc_insertion_point(destructor:patient.Procedure)
  SharedDtor();
}

void Procedure::SharedDtor() {
  if (this != internal_default_instance()) delete procedurereference_;
}

void Procedure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Procedure& Procedure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Procedure_customized_2eproto.base);
  return *internal_default_instance();
}


void Procedure::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Procedure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && procedurereference_ != nullptr) {
    delete procedurereference_;
  }
  procedurereference_ = nullptr;
  sequence_ = 0;
  _internal_metadata_.Clear();
}

const char* Procedure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Reference procedureReference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_procedurereference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Procedure::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Procedure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Reference procedureReference = 1;
  if (this->has_procedurereference()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::procedurereference(this), target, stream);
  }

  // int32 sequence = 2;
  if (this->sequence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Procedure)
  return target;
}

size_t Procedure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Procedure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .patient.Reference procedureReference = 1;
  if (this->has_procedurereference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *procedurereference_);
  }

  // int32 sequence = 2;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Procedure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Procedure)
  GOOGLE_DCHECK_NE(&from, this);
  const Procedure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Procedure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Procedure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Procedure)
    MergeFrom(*source);
  }
}

void Procedure::MergeFrom(const Procedure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Procedure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_procedurereference()) {
    _internal_mutable_procedurereference()->::patient::Reference::MergeFrom(from._internal_procedurereference());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
}

void Procedure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Procedure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Procedure::CopyFrom(const Procedure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Procedure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Procedure::IsInitialized() const {
  return true;
}

void Procedure::InternalSwap(Procedure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(procedurereference_, other->procedurereference_);
  swap(sequence_, other->sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Procedure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Request::InitAsDefaultInstance() {
}
class Request::_Internal {
 public:
};

Request::Request()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_method().empty()) {
    method_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:patient.Request)
}

void Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_customized_2eproto.base);
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:patient.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_customized_2eproto.base);
  return *internal_default_instance();
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_method(), ptr, ctx, "patient.Request.method");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_url(), ptr, ctx, "patient.Request.url");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string method = 1;
  if (this->method().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Request.method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_method(), target);
  }

  // string url = 2;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Request.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string method = 1;
  if (this->method().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // string url = 2;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.method().size() > 0) {

    method_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  method_.Swap(&other->method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Root::InitAsDefaultInstance() {
}
class Root::_Internal {
 public:
};

Root::Root()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Root)
}
Root::Root(const Root& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      entry_(from.entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourcetype().empty()) {
    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  // @@protoc_insertion_point(copy_constructor:patient.Root)
}

void Root::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Root_customized_2eproto.base);
  resourcetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Root::~Root() {
  // @@protoc_insertion_point(destructor:patient.Root)
  SharedDtor();
}

void Root::SharedDtor() {
  resourcetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Root::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Root& Root::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Root_customized_2eproto.base);
  return *internal_default_instance();
}


void Root::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Root)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_.Clear();
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Root::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .patient.Entry entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string resourceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_resourcetype(), ptr, ctx, "patient.Root.resourceType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_type(), ptr, ctx, "patient.Root.type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Root::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Root)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .patient.Entry entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entry_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_entry(i), target, stream);
  }

  // string resourceType = 2;
  if (this->resourcetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcetype().data(), static_cast<int>(this->_internal_resourcetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Root.resourceType");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_resourcetype(), target);
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Root.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Root)
  return target;
}

size_t Root::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Root)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Entry entry = 1;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string resourceType = 2;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcetype());
  }

  // string type = 3;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Root::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Root)
  GOOGLE_DCHECK_NE(&from, this);
  const Root* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Root>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Root)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Root)
    MergeFrom(*source);
  }
}

void Root::MergeFrom(const Root& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Root)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entry_.MergeFrom(from.entry_);
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
}

void Root::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Root)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Root::CopyFrom(const Root& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Root)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Root::IsInitialized() const {
  return true;
}

void Root::InternalSwap(Root* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entry_.InternalSwap(&other->entry_);
  resourcetype_.Swap(&other->resourcetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Root::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SupportingInfo::InitAsDefaultInstance() {
  ::patient::_SupportingInfo_default_instance_._instance.get_mutable()->category_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_SupportingInfo_default_instance_._instance.get_mutable()->valuereference_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class SupportingInfo::_Internal {
 public:
  static const ::patient::Category& category(const SupportingInfo* msg);
  static const ::patient::Reference& valuereference(const SupportingInfo* msg);
};

const ::patient::Category&
SupportingInfo::_Internal::category(const SupportingInfo* msg) {
  return *msg->category_;
}
const ::patient::Reference&
SupportingInfo::_Internal::valuereference(const SupportingInfo* msg) {
  return *msg->valuereference_;
}
SupportingInfo::SupportingInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.SupportingInfo)
}
SupportingInfo::SupportingInfo(const SupportingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_category()) {
    category_ = new ::patient::Category(*from.category_);
  } else {
    category_ = nullptr;
  }
  if (from._internal_has_valuereference()) {
    valuereference_ = new ::patient::Reference(*from.valuereference_);
  } else {
    valuereference_ = nullptr;
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:patient.SupportingInfo)
}

void SupportingInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SupportingInfo_customized_2eproto.base);
  ::memset(&category_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&category_)) + sizeof(sequence_));
}

SupportingInfo::~SupportingInfo() {
  // @@protoc_insertion_point(destructor:patient.SupportingInfo)
  SharedDtor();
}

void SupportingInfo::SharedDtor() {
  if (this != internal_default_instance()) delete category_;
  if (this != internal_default_instance()) delete valuereference_;
}

void SupportingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SupportingInfo& SupportingInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SupportingInfo_customized_2eproto.base);
  return *internal_default_instance();
}


void SupportingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.SupportingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && category_ != nullptr) {
    delete category_;
  }
  category_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && valuereference_ != nullptr) {
    delete valuereference_;
  }
  valuereference_ = nullptr;
  sequence_ = 0;
  _internal_metadata_.Clear();
}

const char* SupportingInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Category category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference valueReference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_valuereference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SupportingInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.SupportingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Category category = 1;
  if (this->has_category()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::category(this), target, stream);
  }

  // int32 sequence = 2;
  if (this->sequence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sequence(), target);
  }

  // .patient.Reference valueReference = 3;
  if (this->has_valuereference()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::valuereference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.SupportingInfo)
  return target;
}

size_t SupportingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.SupportingInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .patient.Category category = 1;
  if (this->has_category()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *category_);
  }

  // .patient.Reference valueReference = 3;
  if (this->has_valuereference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *valuereference_);
  }

  // int32 sequence = 2;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SupportingInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.SupportingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SupportingInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SupportingInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.SupportingInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.SupportingInfo)
    MergeFrom(*source);
  }
}

void SupportingInfo::MergeFrom(const SupportingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.SupportingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_category()) {
    _internal_mutable_category()->::patient::Category::MergeFrom(from._internal_category());
  }
  if (from.has_valuereference()) {
    _internal_mutable_valuereference()->::patient::Reference::MergeFrom(from._internal_valuereference());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
}

void SupportingInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.SupportingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupportingInfo::CopyFrom(const SupportingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.SupportingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupportingInfo::IsInitialized() const {
  return true;
}

void SupportingInfo::InternalSwap(SupportingInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(category_, other->category_);
  swap(valuereference_, other->valuereference_);
  swap(sequence_, other->sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SupportingInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Telecom::InitAsDefaultInstance() {
}
class Telecom::_Internal {
 public:
};

Telecom::Telecom()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Telecom)
}
Telecom::Telecom(const Telecom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_system().empty()) {
    system_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.system_);
  }
  use_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_use().empty()) {
    use_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.use_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:patient.Telecom)
}

void Telecom::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Telecom_customized_2eproto.base);
  system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Telecom::~Telecom() {
  // @@protoc_insertion_point(destructor:patient.Telecom)
  SharedDtor();
}

void Telecom::SharedDtor() {
  system_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Telecom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Telecom& Telecom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Telecom_customized_2eproto.base);
  return *internal_default_instance();
}


void Telecom::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Telecom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  system_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Telecom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string system = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_system(), ptr, ctx, "patient.Telecom.system");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string use = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_use(), ptr, ctx, "patient.Telecom.use");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_value(), ptr, ctx, "patient.Telecom.value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Telecom::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Telecom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string system = 1;
  if (this->system().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_system().data(), static_cast<int>(this->_internal_system().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Telecom.system");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_system(), target);
  }

  // string use = 2;
  if (this->use().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_use().data(), static_cast<int>(this->_internal_use().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Telecom.use");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_use(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Telecom.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Telecom)
  return target;
}

size_t Telecom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Telecom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string system = 1;
  if (this->system().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_system());
  }

  // string use = 2;
  if (this->use().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_use());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Telecom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Telecom)
  GOOGLE_DCHECK_NE(&from, this);
  const Telecom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Telecom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Telecom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Telecom)
    MergeFrom(*source);
  }
}

void Telecom::MergeFrom(const Telecom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Telecom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.system().size() > 0) {

    system_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.system_);
  }
  if (from.use().size() > 0) {

    use_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.use_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Telecom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Telecom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Telecom::CopyFrom(const Telecom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Telecom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telecom::IsInitialized() const {
  return true;
}

void Telecom::InternalSwap(Telecom* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  system_.Swap(&other->system_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  use_.Swap(&other->use_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Telecom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Text::InitAsDefaultInstance() {
}
class Text::_Internal {
 public:
};

Text::Text()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Text)
}
Text::Text(const Text& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  div_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_div().empty()) {
    div_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.div_);
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  // @@protoc_insertion_point(copy_constructor:patient.Text)
}

void Text::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Text_customized_2eproto.base);
  div_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Text::~Text() {
  // @@protoc_insertion_point(destructor:patient.Text)
  SharedDtor();
}

void Text::SharedDtor() {
  div_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Text::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Text& Text::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Text_customized_2eproto.base);
  return *internal_default_instance();
}


void Text::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Text)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  div_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Text::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string div = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_div(), ptr, ctx, "patient.Text.div");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_status(), ptr, ctx, "patient.Text.status");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Text::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Text)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string div = 1;
  if (this->div().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_div().data(), static_cast<int>(this->_internal_div().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Text.div");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_div(), target);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Text.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Text)
  return target;
}

size_t Text::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Text)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string div = 1;
  if (this->div().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_div());
  }

  // string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Text::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Text)
  GOOGLE_DCHECK_NE(&from, this);
  const Text* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Text>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Text)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Text)
    MergeFrom(*source);
  }
}

void Text::MergeFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Text)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.div().size() > 0) {

    div_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.div_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void Text::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Text::CopyFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text::IsInitialized() const {
  return true;
}

void Text::InternalSwap(Text* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  div_.Swap(&other->div_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Text::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Total::InitAsDefaultInstance() {
  ::patient::_Total_default_instance_._instance.get_mutable()->amount_ = const_cast< ::patient::Amount*>(
      ::patient::Amount::internal_default_instance());
  ::patient::_Total_default_instance_._instance.get_mutable()->category_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
}
class Total::_Internal {
 public:
  static const ::patient::Amount& amount(const Total* msg);
  static const ::patient::Category& category(const Total* msg);
};

const ::patient::Amount&
Total::_Internal::amount(const Total* msg) {
  return *msg->amount_;
}
const ::patient::Category&
Total::_Internal::category(const Total* msg) {
  return *msg->category_;
}
Total::Total()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Total)
}
Total::Total(const Total& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from._internal_has_amount()) {
    amount_ = new ::patient::Amount(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  if (from._internal_has_category()) {
    category_ = new ::patient::Category(*from.category_);
  } else {
    category_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:patient.Total)
}

void Total::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Total_customized_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(value_));
}

Total::~Total() {
  // @@protoc_insertion_point(destructor:patient.Total)
  SharedDtor();
}

void Total::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amount_;
  if (this != internal_default_instance()) delete category_;
}

void Total::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Total& Total::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Total_customized_2eproto.base);
  return *internal_default_instance();
}


void Total::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Total)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && category_ != nullptr) {
    delete category_;
  }
  category_ = nullptr;
  value_ = 0;
  _internal_metadata_.Clear();
}

const char* Total::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_currency(), ptr, ctx, "patient.Total.currency");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .patient.Amount amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category category = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Total::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Total)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Total.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  // .patient.Amount amount = 3;
  if (this->has_amount()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::amount(this), target, stream);
  }

  // .patient.Category category = 4;
  if (this->has_category()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::category(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Total)
  return target;
}

size_t Total::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Total)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // .patient.Amount amount = 3;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  // .patient.Category category = 4;
  if (this->has_category()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *category_);
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Total::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Total)
  GOOGLE_DCHECK_NE(&from, this);
  const Total* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Total>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Total)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Total)
    MergeFrom(*source);
  }
}

void Total::MergeFrom(const Total& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Total)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.has_amount()) {
    _internal_mutable_amount()->::patient::Amount::MergeFrom(from._internal_amount());
  }
  if (from.has_category()) {
    _internal_mutable_category()->::patient::Category::MergeFrom(from._internal_category());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void Total::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Total)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Total::CopyFrom(const Total& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Total)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Total::IsInitialized() const {
  return true;
}

void Total::InternalSwap(Total* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(category_, other->category_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Total::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Coding::InitAsDefaultInstance() {
}
class Coding::_Internal {
 public:
};

Coding::Coding()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Coding)
}
Coding::Coding(const Coding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  display_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_display().empty()) {
    display_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_);
  }
  system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_system().empty()) {
    system_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.system_);
  }
  // @@protoc_insertion_point(copy_constructor:patient.Coding)
}

void Coding::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Coding_customized_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Coding::~Coding() {
  // @@protoc_insertion_point(destructor:patient.Coding)
  SharedDtor();
}

void Coding::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Coding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Coding& Coding::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Coding_customized_2eproto.base);
  return *internal_default_instance();
}


void Coding::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Coding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Coding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_code(), ptr, ctx, "patient.Coding.code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string display = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_display(), ptr, ctx, "patient.Coding.display");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string system = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_system(), ptr, ctx, "patient.Coding.system");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Coding::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Coding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Coding.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string display = 2;
  if (this->display().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display().data(), static_cast<int>(this->_internal_display().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Coding.display");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_display(), target);
  }

  // string system = 3;
  if (this->system().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_system().data(), static_cast<int>(this->_internal_system().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Coding.system");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_system(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Coding)
  return target;
}

size_t Coding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Coding)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string display = 2;
  if (this->display().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display());
  }

  // string system = 3;
  if (this->system().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_system());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Coding::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Coding)
  GOOGLE_DCHECK_NE(&from, this);
  const Coding* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Coding>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Coding)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Coding)
    MergeFrom(*source);
  }
}

void Coding::MergeFrom(const Coding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Coding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.display().size() > 0) {

    display_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_);
  }
  if (from.system().size() > 0) {

    system_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.system_);
  }
}

void Coding::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Coding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coding::CopyFrom(const Coding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Coding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coding::IsInitialized() const {
  return true;
}

void Coding::InternalSwap(Coding* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_.Swap(&other->display_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  system_.Swap(&other->system_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Coding::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Quantity::InitAsDefaultInstance() {
}
class Quantity::_Internal {
 public:
};

Quantity::Quantity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Quantity)
}
Quantity::Quantity(const Quantity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_system().empty()) {
    system_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.system_);
  }
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unit().empty()) {
    unit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:patient.Quantity)
}

void Quantity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Quantity_customized_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

Quantity::~Quantity() {
  // @@protoc_insertion_point(destructor:patient.Quantity)
  SharedDtor();
}

void Quantity::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Quantity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Quantity& Quantity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Quantity_customized_2eproto.base);
  return *internal_default_instance();
}


void Quantity::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Quantity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  _internal_metadata_.Clear();
}

const char* Quantity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_code(), ptr, ctx, "patient.Quantity.code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string system = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_system(), ptr, ctx, "patient.Quantity.system");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_unit(), ptr, ctx, "patient.Quantity.unit");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quantity::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Quantity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Quantity.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string system = 2;
  if (this->system().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_system().data(), static_cast<int>(this->_internal_system().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Quantity.system");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_system(), target);
  }

  // string unit = 3;
  if (this->unit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unit().data(), static_cast<int>(this->_internal_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Quantity.unit");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_unit(), target);
  }

  // float value = 4;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Quantity)
  return target;
}

size_t Quantity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Quantity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string system = 2;
  if (this->system().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_system());
  }

  // string unit = 3;
  if (this->unit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unit());
  }

  // float value = 4;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quantity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Quantity)
  GOOGLE_DCHECK_NE(&from, this);
  const Quantity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Quantity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Quantity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Quantity)
    MergeFrom(*source);
  }
}

void Quantity::MergeFrom(const Quantity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Quantity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.system().size() > 0) {

    system_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.system_);
  }
  if (from.unit().size() > 0) {

    unit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void Quantity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Quantity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quantity::CopyFrom(const Quantity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Quantity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quantity::IsInitialized() const {
  return true;
}

void Quantity::InternalSwap(Quantity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  system_.Swap(&other->system_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unit_.Swap(&other->unit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Quantity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Reference::InitAsDefaultInstance() {
}
class Reference::_Internal {
 public:
};

Reference::Reference()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Reference)
}
Reference::Reference(const Reference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference().empty()) {
    reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  display_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_display().empty()) {
    display_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_);
  }
  // @@protoc_insertion_point(copy_constructor:patient.Reference)
}

void Reference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Reference_customized_2eproto.base);
  reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Reference::~Reference() {
  // @@protoc_insertion_point(destructor:patient.Reference)
  SharedDtor();
}

void Reference::SharedDtor() {
  reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Reference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Reference& Reference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Reference_customized_2eproto.base);
  return *internal_default_instance();
}


void Reference::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Reference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Reference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_reference(), ptr, ctx, "patient.Reference.reference");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string display = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_display(), ptr, ctx, "patient.Reference.display");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Reference::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Reference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference = 1;
  if (this->reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference().data(), static_cast<int>(this->_internal_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Reference.reference");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reference(), target);
  }

  // string display = 2;
  if (this->display().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display().data(), static_cast<int>(this->_internal_display().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Reference.display");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_display(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Reference)
  return target;
}

size_t Reference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Reference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reference = 1;
  if (this->reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference());
  }

  // string display = 2;
  if (this->display().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Reference)
  GOOGLE_DCHECK_NE(&from, this);
  const Reference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Reference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Reference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Reference)
    MergeFrom(*source);
  }
}

void Reference::MergeFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Reference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference().size() > 0) {

    reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_);
  }
  if (from.display().size() > 0) {

    display_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_);
  }
}

void Reference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reference::CopyFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reference::IsInitialized() const {
  return true;
}

void Reference::InternalSwap(Reference* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reference_.Swap(&other->reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_.Swap(&other->display_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Reference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Category::InitAsDefaultInstance() {
}
class Category::_Internal {
 public:
};

Category::Category()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Category)
}
Category::Category(const Category& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      coding_(from.coding_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:patient.Category)
}

void Category::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Category_customized_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Category::~Category() {
  // @@protoc_insertion_point(destructor:patient.Category)
  SharedDtor();
}

void Category::SharedDtor() {
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Category::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Category& Category::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Category_customized_2eproto.base);
  return *internal_default_instance();
}


void Category::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Category)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coding_.Clear();
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Category::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .patient.Coding coding = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coding(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_text(), ptr, ctx, "patient.Category.text");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Category::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Category)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .patient.Coding coding = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_coding_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_coding(i), target, stream);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Category.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Category)
  return target;
}

size_t Category::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Category)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Coding coding = 1;
  total_size += 1UL * this->_internal_coding_size();
  for (const auto& msg : this->coding_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Category::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Category)
  GOOGLE_DCHECK_NE(&from, this);
  const Category* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Category>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Category)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Category)
    MergeFrom(*source);
  }
}

void Category::MergeFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Category)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coding_.MergeFrom(from.coding_);
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void Category::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Category::CopyFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Category::IsInitialized() const {
  return true;
}

void Category::InternalSwap(Category* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  coding_.InternalSwap(&other->coding_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Category::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Period::InitAsDefaultInstance() {
}
class Period::_Internal {
 public:
};

Period::Period()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Period)
}
Period::Period(const Period& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end().empty()) {
    end_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_);
  }
  start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start().empty()) {
    start_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_);
  }
  // @@protoc_insertion_point(copy_constructor:patient.Period)
}

void Period::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Period_customized_2eproto.base);
  end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Period::~Period() {
  // @@protoc_insertion_point(destructor:patient.Period)
  SharedDtor();
}

void Period::SharedDtor() {
  end_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Period::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Period& Period::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Period_customized_2eproto.base);
  return *internal_default_instance();
}


void Period::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Period)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  end_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Period::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string end = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_end(), ptr, ctx, "patient.Period.end");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_start(), ptr, ctx, "patient.Period.start");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Period::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Period)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string end = 1;
  if (this->end().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end().data(), static_cast<int>(this->_internal_end().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Period.end");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_end(), target);
  }

  // string start = 2;
  if (this->start().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start().data(), static_cast<int>(this->_internal_start().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.Period.start");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_start(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Period)
  return target;
}

size_t Period::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Period)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string end = 1;
  if (this->end().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end());
  }

  // string start = 2;
  if (this->start().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Period::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Period)
  GOOGLE_DCHECK_NE(&from, this);
  const Period* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Period>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Period)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Period)
    MergeFrom(*source);
  }
}

void Period::MergeFrom(const Period& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Period)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.end().size() > 0) {

    end_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_);
  }
  if (from.start().size() > 0) {

    start_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_);
  }
}

void Period::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Period)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Period::CopyFrom(const Period& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Period)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Period::IsInitialized() const {
  return true;
}

void Period::InternalSwap(Period* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  end_.Swap(&other->end_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_.Swap(&other->start_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Period::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Resource::InitAsDefaultInstance() {
  ::patient::_Resource_default_instance_.careplan_ = const_cast< ::patient::CarePlanObject*>(
      ::patient::CarePlanObject::internal_default_instance());
  ::patient::_Resource_default_instance_.careteam_ = const_cast< ::patient::CareTeamObject*>(
      ::patient::CareTeamObject::internal_default_instance());
  ::patient::_Resource_default_instance_.claim_ = const_cast< ::patient::ClaimObject*>(
      ::patient::ClaimObject::internal_default_instance());
  ::patient::_Resource_default_instance_.condition_ = const_cast< ::patient::ConditionObject*>(
      ::patient::ConditionObject::internal_default_instance());
  ::patient::_Resource_default_instance_.diagnosticreport_ = const_cast< ::patient::DiagnosticReportObject*>(
      ::patient::DiagnosticReportObject::internal_default_instance());
  ::patient::_Resource_default_instance_.encounter_ = const_cast< ::patient::EncounterObject*>(
      ::patient::EncounterObject::internal_default_instance());
  ::patient::_Resource_default_instance_.explanationofbenefit_ = const_cast< ::patient::ExplanationOfBenefitObject*>(
      ::patient::ExplanationOfBenefitObject::internal_default_instance());
  ::patient::_Resource_default_instance_.immunization_ = const_cast< ::patient::ImmunizationObject*>(
      ::patient::ImmunizationObject::internal_default_instance());
  ::patient::_Resource_default_instance_.medicationrequest_ = const_cast< ::patient::MedicationRequestObject*>(
      ::patient::MedicationRequestObject::internal_default_instance());
  ::patient::_Resource_default_instance_.observation_ = const_cast< ::patient::ObservationObject*>(
      ::patient::ObservationObject::internal_default_instance());
  ::patient::_Resource_default_instance_.organiation_ = const_cast< ::patient::OrganizationObject*>(
      ::patient::OrganizationObject::internal_default_instance());
  ::patient::_Resource_default_instance_.patient_ = const_cast< ::patient::PatientObject*>(
      ::patient::PatientObject::internal_default_instance());
  ::patient::_Resource_default_instance_.practitioner_ = const_cast< ::patient::PractitionerObject*>(
      ::patient::PractitionerObject::internal_default_instance());
  ::patient::_Resource_default_instance_.procedure_ = const_cast< ::patient::ProcedureObject*>(
      ::patient::ProcedureObject::internal_default_instance());
}
class Resource::_Internal {
 public:
  static const ::patient::CarePlanObject& careplan(const Resource* msg);
  static const ::patient::CareTeamObject& careteam(const Resource* msg);
  static const ::patient::ClaimObject& claim(const Resource* msg);
  static const ::patient::ConditionObject& condition(const Resource* msg);
  static const ::patient::DiagnosticReportObject& diagnosticreport(const Resource* msg);
  static const ::patient::EncounterObject& encounter(const Resource* msg);
  static const ::patient::ExplanationOfBenefitObject& explanationofbenefit(const Resource* msg);
  static const ::patient::ImmunizationObject& immunization(const Resource* msg);
  static const ::patient::MedicationRequestObject& medicationrequest(const Resource* msg);
  static const ::patient::ObservationObject& observation(const Resource* msg);
  static const ::patient::OrganizationObject& organiation(const Resource* msg);
  static const ::patient::PatientObject& patient(const Resource* msg);
  static const ::patient::PractitionerObject& practitioner(const Resource* msg);
  static const ::patient::ProcedureObject& procedure(const Resource* msg);
};

const ::patient::CarePlanObject&
Resource::_Internal::careplan(const Resource* msg) {
  return *msg->resource_.careplan_;
}
const ::patient::CareTeamObject&
Resource::_Internal::careteam(const Resource* msg) {
  return *msg->resource_.careteam_;
}
const ::patient::ClaimObject&
Resource::_Internal::claim(const Resource* msg) {
  return *msg->resource_.claim_;
}
const ::patient::ConditionObject&
Resource::_Internal::condition(const Resource* msg) {
  return *msg->resource_.condition_;
}
const ::patient::DiagnosticReportObject&
Resource::_Internal::diagnosticreport(const Resource* msg) {
  return *msg->resource_.diagnosticreport_;
}
const ::patient::EncounterObject&
Resource::_Internal::encounter(const Resource* msg) {
  return *msg->resource_.encounter_;
}
const ::patient::ExplanationOfBenefitObject&
Resource::_Internal::explanationofbenefit(const Resource* msg) {
  return *msg->resource_.explanationofbenefit_;
}
const ::patient::ImmunizationObject&
Resource::_Internal::immunization(const Resource* msg) {
  return *msg->resource_.immunization_;
}
const ::patient::MedicationRequestObject&
Resource::_Internal::medicationrequest(const Resource* msg) {
  return *msg->resource_.medicationrequest_;
}
const ::patient::ObservationObject&
Resource::_Internal::observation(const Resource* msg) {
  return *msg->resource_.observation_;
}
const ::patient::OrganizationObject&
Resource::_Internal::organiation(const Resource* msg) {
  return *msg->resource_.organiation_;
}
const ::patient::PatientObject&
Resource::_Internal::patient(const Resource* msg) {
  return *msg->resource_.patient_;
}
const ::patient::PractitionerObject&
Resource::_Internal::practitioner(const Resource* msg) {
  return *msg->resource_.practitioner_;
}
const ::patient::ProcedureObject&
Resource::_Internal::procedure(const Resource* msg) {
  return *msg->resource_.procedure_;
}
void Resource::set_allocated_careplan(::patient::CarePlanObject* careplan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (careplan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      careplan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, careplan, submessage_arena);
    }
    set_has_careplan();
    resource_.careplan_ = careplan;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.carePlan)
}
void Resource::set_allocated_careteam(::patient::CareTeamObject* careteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (careteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      careteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, careteam, submessage_arena);
    }
    set_has_careteam();
    resource_.careteam_ = careteam;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.careTeam)
}
void Resource::set_allocated_claim(::patient::ClaimObject* claim) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (claim) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      claim = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, claim, submessage_arena);
    }
    set_has_claim();
    resource_.claim_ = claim;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.claim)
}
void Resource::set_allocated_condition(::patient::ConditionObject* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    set_has_condition();
    resource_.condition_ = condition;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.condition)
}
void Resource::set_allocated_diagnosticreport(::patient::DiagnosticReportObject* diagnosticreport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (diagnosticreport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      diagnosticreport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diagnosticreport, submessage_arena);
    }
    set_has_diagnosticreport();
    resource_.diagnosticreport_ = diagnosticreport;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.diagnosticReport)
}
void Resource::set_allocated_encounter(::patient::EncounterObject* encounter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (encounter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      encounter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encounter, submessage_arena);
    }
    set_has_encounter();
    resource_.encounter_ = encounter;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.encounter)
}
void Resource::set_allocated_explanationofbenefit(::patient::ExplanationOfBenefitObject* explanationofbenefit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (explanationofbenefit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      explanationofbenefit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, explanationofbenefit, submessage_arena);
    }
    set_has_explanationofbenefit();
    resource_.explanationofbenefit_ = explanationofbenefit;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.explanationOfBenefit)
}
void Resource::set_allocated_immunization(::patient::ImmunizationObject* immunization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (immunization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      immunization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, immunization, submessage_arena);
    }
    set_has_immunization();
    resource_.immunization_ = immunization;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.immunization)
}
void Resource::set_allocated_medicationrequest(::patient::MedicationRequestObject* medicationrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (medicationrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      medicationrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, medicationrequest, submessage_arena);
    }
    set_has_medicationrequest();
    resource_.medicationrequest_ = medicationrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.medicationRequest)
}
void Resource::set_allocated_observation(::patient::ObservationObject* observation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (observation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      observation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observation, submessage_arena);
    }
    set_has_observation();
    resource_.observation_ = observation;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.observation)
}
void Resource::set_allocated_organiation(::patient::OrganizationObject* organiation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (organiation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      organiation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, organiation, submessage_arena);
    }
    set_has_organiation();
    resource_.organiation_ = organiation;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.organiation)
}
void Resource::set_allocated_patient(::patient::PatientObject* patient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (patient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      patient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patient, submessage_arena);
    }
    set_has_patient();
    resource_.patient_ = patient;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.patient)
}
void Resource::set_allocated_practitioner(::patient::PractitionerObject* practitioner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (practitioner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      practitioner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, practitioner, submessage_arena);
    }
    set_has_practitioner();
    resource_.practitioner_ = practitioner;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.practitioner)
}
void Resource::set_allocated_procedure(::patient::ProcedureObject* procedure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_resource();
  if (procedure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      procedure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, procedure, submessage_arena);
    }
    set_has_procedure();
    resource_.procedure_ = procedure;
  }
  // @@protoc_insertion_point(field_set_allocated:patient.Resource.procedure)
}
Resource::Resource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.Resource)
}
Resource::Resource(const Resource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resourcetype_ = from.resourcetype_;
  clear_has_resource();
  switch (from.resource_case()) {
    case kCarePlan: {
      _internal_mutable_careplan()->::patient::CarePlanObject::MergeFrom(from._internal_careplan());
      break;
    }
    case kCareTeam: {
      _internal_mutable_careteam()->::patient::CareTeamObject::MergeFrom(from._internal_careteam());
      break;
    }
    case kClaim: {
      _internal_mutable_claim()->::patient::ClaimObject::MergeFrom(from._internal_claim());
      break;
    }
    case kCondition: {
      _internal_mutable_condition()->::patient::ConditionObject::MergeFrom(from._internal_condition());
      break;
    }
    case kDiagnosticReport: {
      _internal_mutable_diagnosticreport()->::patient::DiagnosticReportObject::MergeFrom(from._internal_diagnosticreport());
      break;
    }
    case kEncounter: {
      _internal_mutable_encounter()->::patient::EncounterObject::MergeFrom(from._internal_encounter());
      break;
    }
    case kExplanationOfBenefit: {
      _internal_mutable_explanationofbenefit()->::patient::ExplanationOfBenefitObject::MergeFrom(from._internal_explanationofbenefit());
      break;
    }
    case kImmunization: {
      _internal_mutable_immunization()->::patient::ImmunizationObject::MergeFrom(from._internal_immunization());
      break;
    }
    case kMedicationRequest: {
      _internal_mutable_medicationrequest()->::patient::MedicationRequestObject::MergeFrom(from._internal_medicationrequest());
      break;
    }
    case kObservation: {
      _internal_mutable_observation()->::patient::ObservationObject::MergeFrom(from._internal_observation());
      break;
    }
    case kOrganiation: {
      _internal_mutable_organiation()->::patient::OrganizationObject::MergeFrom(from._internal_organiation());
      break;
    }
    case kPatient: {
      _internal_mutable_patient()->::patient::PatientObject::MergeFrom(from._internal_patient());
      break;
    }
    case kPractitioner: {
      _internal_mutable_practitioner()->::patient::PractitionerObject::MergeFrom(from._internal_practitioner());
      break;
    }
    case kProcedure: {
      _internal_mutable_procedure()->::patient::ProcedureObject::MergeFrom(from._internal_procedure());
      break;
    }
    case RESOURCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:patient.Resource)
}

void Resource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Resource_customized_2eproto.base);
  resourcetype_ = 0;
  clear_has_resource();
}

Resource::~Resource() {
  // @@protoc_insertion_point(destructor:patient.Resource)
  SharedDtor();
}

void Resource::SharedDtor() {
  if (has_resource()) {
    clear_resource();
  }
}

void Resource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Resource& Resource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Resource_customized_2eproto.base);
  return *internal_default_instance();
}


void Resource::clear_resource() {
// @@protoc_insertion_point(one_of_clear_start:patient.Resource)
  switch (resource_case()) {
    case kCarePlan: {
      delete resource_.careplan_;
      break;
    }
    case kCareTeam: {
      delete resource_.careteam_;
      break;
    }
    case kClaim: {
      delete resource_.claim_;
      break;
    }
    case kCondition: {
      delete resource_.condition_;
      break;
    }
    case kDiagnosticReport: {
      delete resource_.diagnosticreport_;
      break;
    }
    case kEncounter: {
      delete resource_.encounter_;
      break;
    }
    case kExplanationOfBenefit: {
      delete resource_.explanationofbenefit_;
      break;
    }
    case kImmunization: {
      delete resource_.immunization_;
      break;
    }
    case kMedicationRequest: {
      delete resource_.medicationrequest_;
      break;
    }
    case kObservation: {
      delete resource_.observation_;
      break;
    }
    case kOrganiation: {
      delete resource_.organiation_;
      break;
    }
    case kPatient: {
      delete resource_.patient_;
      break;
    }
    case kPractitioner: {
      delete resource_.practitioner_;
      break;
    }
    case kProcedure: {
      delete resource_.procedure_;
      break;
    }
    case RESOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESOURCE_NOT_SET;
}


void Resource::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.Resource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resourcetype_ = 0;
  clear_resource();
  _internal_metadata_.Clear();
}

const char* Resource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.ResourceType resourceType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_resourcetype(static_cast<::patient::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // .patient.CarePlanObject carePlan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_careplan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.CareTeamObject careTeam = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_careteam(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.ClaimObject claim = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_claim(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.ConditionObject condition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.DiagnosticReportObject diagnosticReport = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_diagnosticreport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.EncounterObject encounter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_encounter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.ExplanationOfBenefitObject explanationOfBenefit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_explanationofbenefit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.ImmunizationObject immunization = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_immunization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.MedicationRequestObject medicationRequest = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_medicationrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.ObservationObject observation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_observation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.OrganizationObject organiation = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_organiation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.PatientObject patient = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_patient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.PractitionerObject practitioner = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_practitioner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.ProcedureObject procedure = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_procedure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Resource::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.Resource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.ResourceType resourceType = 1;
  if (this->resourcetype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_resourcetype(), target);
  }

  // .patient.CarePlanObject carePlan = 2;
  if (_internal_has_careplan()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::careplan(this), target, stream);
  }

  // .patient.CareTeamObject careTeam = 3;
  if (_internal_has_careteam()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::careteam(this), target, stream);
  }

  // .patient.ClaimObject claim = 4;
  if (_internal_has_claim()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::claim(this), target, stream);
  }

  // .patient.ConditionObject condition = 5;
  if (_internal_has_condition()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::condition(this), target, stream);
  }

  // .patient.DiagnosticReportObject diagnosticReport = 6;
  if (_internal_has_diagnosticreport()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::diagnosticreport(this), target, stream);
  }

  // .patient.EncounterObject encounter = 7;
  if (_internal_has_encounter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::encounter(this), target, stream);
  }

  // .patient.ExplanationOfBenefitObject explanationOfBenefit = 8;
  if (_internal_has_explanationofbenefit()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::explanationofbenefit(this), target, stream);
  }

  // .patient.ImmunizationObject immunization = 9;
  if (_internal_has_immunization()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::immunization(this), target, stream);
  }

  // .patient.MedicationRequestObject medicationRequest = 10;
  if (_internal_has_medicationrequest()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::medicationrequest(this), target, stream);
  }

  // .patient.ObservationObject observation = 11;
  if (_internal_has_observation()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::observation(this), target, stream);
  }

  // .patient.OrganizationObject organiation = 12;
  if (_internal_has_organiation()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::organiation(this), target, stream);
  }

  // .patient.PatientObject patient = 13;
  if (_internal_has_patient()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::patient(this), target, stream);
  }

  // .patient.PractitionerObject practitioner = 14;
  if (_internal_has_practitioner()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::practitioner(this), target, stream);
  }

  // .patient.ProcedureObject procedure = 15;
  if (_internal_has_procedure()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::procedure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.Resource)
  return target;
}

size_t Resource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.Resource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .patient.ResourceType resourceType = 1;
  if (this->resourcetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resourcetype());
  }

  switch (resource_case()) {
    // .patient.CarePlanObject carePlan = 2;
    case kCarePlan: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.careplan_);
      break;
    }
    // .patient.CareTeamObject careTeam = 3;
    case kCareTeam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.careteam_);
      break;
    }
    // .patient.ClaimObject claim = 4;
    case kClaim: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.claim_);
      break;
    }
    // .patient.ConditionObject condition = 5;
    case kCondition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.condition_);
      break;
    }
    // .patient.DiagnosticReportObject diagnosticReport = 6;
    case kDiagnosticReport: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.diagnosticreport_);
      break;
    }
    // .patient.EncounterObject encounter = 7;
    case kEncounter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.encounter_);
      break;
    }
    // .patient.ExplanationOfBenefitObject explanationOfBenefit = 8;
    case kExplanationOfBenefit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.explanationofbenefit_);
      break;
    }
    // .patient.ImmunizationObject immunization = 9;
    case kImmunization: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.immunization_);
      break;
    }
    // .patient.MedicationRequestObject medicationRequest = 10;
    case kMedicationRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.medicationrequest_);
      break;
    }
    // .patient.ObservationObject observation = 11;
    case kObservation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.observation_);
      break;
    }
    // .patient.OrganizationObject organiation = 12;
    case kOrganiation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.organiation_);
      break;
    }
    // .patient.PatientObject patient = 13;
    case kPatient: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.patient_);
      break;
    }
    // .patient.PractitionerObject practitioner = 14;
    case kPractitioner: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.practitioner_);
      break;
    }
    // .patient.ProcedureObject procedure = 15;
    case kProcedure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_.procedure_);
      break;
    }
    case RESOURCE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Resource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.Resource)
  GOOGLE_DCHECK_NE(&from, this);
  const Resource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Resource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.Resource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.Resource)
    MergeFrom(*source);
  }
}

void Resource::MergeFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.Resource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resourcetype() != 0) {
    _internal_set_resourcetype(from._internal_resourcetype());
  }
  switch (from.resource_case()) {
    case kCarePlan: {
      _internal_mutable_careplan()->::patient::CarePlanObject::MergeFrom(from._internal_careplan());
      break;
    }
    case kCareTeam: {
      _internal_mutable_careteam()->::patient::CareTeamObject::MergeFrom(from._internal_careteam());
      break;
    }
    case kClaim: {
      _internal_mutable_claim()->::patient::ClaimObject::MergeFrom(from._internal_claim());
      break;
    }
    case kCondition: {
      _internal_mutable_condition()->::patient::ConditionObject::MergeFrom(from._internal_condition());
      break;
    }
    case kDiagnosticReport: {
      _internal_mutable_diagnosticreport()->::patient::DiagnosticReportObject::MergeFrom(from._internal_diagnosticreport());
      break;
    }
    case kEncounter: {
      _internal_mutable_encounter()->::patient::EncounterObject::MergeFrom(from._internal_encounter());
      break;
    }
    case kExplanationOfBenefit: {
      _internal_mutable_explanationofbenefit()->::patient::ExplanationOfBenefitObject::MergeFrom(from._internal_explanationofbenefit());
      break;
    }
    case kImmunization: {
      _internal_mutable_immunization()->::patient::ImmunizationObject::MergeFrom(from._internal_immunization());
      break;
    }
    case kMedicationRequest: {
      _internal_mutable_medicationrequest()->::patient::MedicationRequestObject::MergeFrom(from._internal_medicationrequest());
      break;
    }
    case kObservation: {
      _internal_mutable_observation()->::patient::ObservationObject::MergeFrom(from._internal_observation());
      break;
    }
    case kOrganiation: {
      _internal_mutable_organiation()->::patient::OrganizationObject::MergeFrom(from._internal_organiation());
      break;
    }
    case kPatient: {
      _internal_mutable_patient()->::patient::PatientObject::MergeFrom(from._internal_patient());
      break;
    }
    case kPractitioner: {
      _internal_mutable_practitioner()->::patient::PractitionerObject::MergeFrom(from._internal_practitioner());
      break;
    }
    case kProcedure: {
      _internal_mutable_procedure()->::patient::ProcedureObject::MergeFrom(from._internal_procedure());
      break;
    }
    case RESOURCE_NOT_SET: {
      break;
    }
  }
}

void Resource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource::CopyFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {
  return true;
}

void Resource::InternalSwap(Resource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(resourcetype_, other->resourcetype_);
  swap(resource_, other->resource_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Resource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CarePlanObject::InitAsDefaultInstance() {
  ::patient::_CarePlanObject_default_instance_._instance.get_mutable()->encounter_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_CarePlanObject_default_instance_._instance.get_mutable()->period_ = const_cast< ::patient::Period*>(
      ::patient::Period::internal_default_instance());
  ::patient::_CarePlanObject_default_instance_._instance.get_mutable()->subject_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class CarePlanObject::_Internal {
 public:
  static const ::patient::Reference& encounter(const CarePlanObject* msg);
  static const ::patient::Period& period(const CarePlanObject* msg);
  static const ::patient::Reference& subject(const CarePlanObject* msg);
};

const ::patient::Reference&
CarePlanObject::_Internal::encounter(const CarePlanObject* msg) {
  return *msg->encounter_;
}
const ::patient::Period&
CarePlanObject::_Internal::period(const CarePlanObject* msg) {
  return *msg->period_;
}
const ::patient::Reference&
CarePlanObject::_Internal::subject(const CarePlanObject* msg) {
  return *msg->subject_;
}
CarePlanObject::CarePlanObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.CarePlanObject)
}
CarePlanObject::CarePlanObject(const CarePlanObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      activity_(from.activity_),
      addresses_(from.addresses_),
      careteam_(from.careteam_),
      category_(from.category_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  intent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_intent().empty()) {
    intent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.intent_);
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from._internal_has_encounter()) {
    encounter_ = new ::patient::Reference(*from.encounter_);
  } else {
    encounter_ = nullptr;
  }
  if (from._internal_has_period()) {
    period_ = new ::patient::Period(*from.period_);
  } else {
    period_ = nullptr;
  }
  if (from._internal_has_subject()) {
    subject_ = new ::patient::Reference(*from.subject_);
  } else {
    subject_ = nullptr;
  }
  ::memcpy(&resourcetype_, &from.resourcetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&resourcetype_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:patient.CarePlanObject)
}

void CarePlanObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CarePlanObject_customized_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&encounter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&encounter_)) + sizeof(status_));
}

CarePlanObject::~CarePlanObject() {
  // @@protoc_insertion_point(destructor:patient.CarePlanObject)
  SharedDtor();
}

void CarePlanObject::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete encounter_;
  if (this != internal_default_instance()) delete period_;
  if (this != internal_default_instance()) delete subject_;
}

void CarePlanObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CarePlanObject& CarePlanObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CarePlanObject_customized_2eproto.base);
  return *internal_default_instance();
}


void CarePlanObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.CarePlanObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activity_.Clear();
  addresses_.Clear();
  careteam_.Clear();
  category_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && period_ != nullptr) {
    delete period_;
  }
  period_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
  ::memset(&resourcetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&resourcetype_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* CarePlanObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .patient.Activity activity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_activity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.Reference addresses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.CareTeam careTeam = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_careteam(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.Category category = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Reference Encounter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_encounter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.CarePlanObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string intent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_intent(), ptr, ctx, "patient.CarePlanObject.intent");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Period period = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_period(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.ResourceType resourceType = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_resourcetype(static_cast<::patient::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // .patient.Status status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::patient::Status>(val));
        } else goto handle_unusual;
        continue;
      // .patient.Reference subject = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_text(), ptr, ctx, "patient.CarePlanObject.text");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CarePlanObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.CarePlanObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .patient.Activity activity = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_activity_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_activity(i), target, stream);
  }

  // repeated .patient.Reference addresses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_addresses_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_addresses(i), target, stream);
  }

  // repeated .patient.CareTeam careTeam = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_careteam_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_careteam(i), target, stream);
  }

  // repeated .patient.Category category = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_category_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_category(i), target, stream);
  }

  // .patient.Reference Encounter = 5;
  if (this->has_encounter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::encounter(this), target, stream);
  }

  // string id = 6;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.CarePlanObject.id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_id(), target);
  }

  // string intent = 7;
  if (this->intent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_intent().data(), static_cast<int>(this->_internal_intent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.CarePlanObject.intent");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_intent(), target);
  }

  // .patient.Period period = 8;
  if (this->has_period()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::period(this), target, stream);
  }

  // .patient.ResourceType resourceType = 9;
  if (this->resourcetype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_resourcetype(), target);
  }

  // .patient.Status status = 10;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_status(), target);
  }

  // .patient.Reference subject = 11;
  if (this->has_subject()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::subject(this), target, stream);
  }

  // string text = 12;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.CarePlanObject.text");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.CarePlanObject)
  return target;
}

size_t CarePlanObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.CarePlanObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Activity activity = 1;
  total_size += 1UL * this->_internal_activity_size();
  for (const auto& msg : this->activity_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Reference addresses = 2;
  total_size += 1UL * this->_internal_addresses_size();
  for (const auto& msg : this->addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.CareTeam careTeam = 3;
  total_size += 1UL * this->_internal_careteam_size();
  for (const auto& msg : this->careteam_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Category category = 4;
  total_size += 1UL * this->_internal_category_size();
  for (const auto& msg : this->category_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 6;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string intent = 7;
  if (this->intent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_intent());
  }

  // string text = 12;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .patient.Reference Encounter = 5;
  if (this->has_encounter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encounter_);
  }

  // .patient.Period period = 8;
  if (this->has_period()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *period_);
  }

  // .patient.Reference subject = 11;
  if (this->has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_);
  }

  // .patient.ResourceType resourceType = 9;
  if (this->resourcetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resourcetype());
  }

  // .patient.Status status = 10;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CarePlanObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.CarePlanObject)
  GOOGLE_DCHECK_NE(&from, this);
  const CarePlanObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CarePlanObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.CarePlanObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.CarePlanObject)
    MergeFrom(*source);
  }
}

void CarePlanObject::MergeFrom(const CarePlanObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.CarePlanObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activity_.MergeFrom(from.activity_);
  addresses_.MergeFrom(from.addresses_);
  careteam_.MergeFrom(from.careteam_);
  category_.MergeFrom(from.category_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.intent().size() > 0) {

    intent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.intent_);
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_encounter()) {
    _internal_mutable_encounter()->::patient::Reference::MergeFrom(from._internal_encounter());
  }
  if (from.has_period()) {
    _internal_mutable_period()->::patient::Period::MergeFrom(from._internal_period());
  }
  if (from.has_subject()) {
    _internal_mutable_subject()->::patient::Reference::MergeFrom(from._internal_subject());
  }
  if (from.resourcetype() != 0) {
    _internal_set_resourcetype(from._internal_resourcetype());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void CarePlanObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.CarePlanObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarePlanObject::CopyFrom(const CarePlanObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.CarePlanObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarePlanObject::IsInitialized() const {
  return true;
}

void CarePlanObject::InternalSwap(CarePlanObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  activity_.InternalSwap(&other->activity_);
  addresses_.InternalSwap(&other->addresses_);
  careteam_.InternalSwap(&other->careteam_);
  category_.InternalSwap(&other->category_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  intent_.Swap(&other->intent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(encounter_, other->encounter_);
  swap(period_, other->period_);
  swap(subject_, other->subject_);
  swap(resourcetype_, other->resourcetype_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CarePlanObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CareTeamObject::InitAsDefaultInstance() {
  ::patient::_CareTeamObject_default_instance_._instance.get_mutable()->encounter_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_CareTeamObject_default_instance_._instance.get_mutable()->period_ = const_cast< ::patient::Period*>(
      ::patient::Period::internal_default_instance());
  ::patient::_CareTeamObject_default_instance_._instance.get_mutable()->subject_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class CareTeamObject::_Internal {
 public:
  static const ::patient::Reference& encounter(const CareTeamObject* msg);
  static const ::patient::Period& period(const CareTeamObject* msg);
  static const ::patient::Reference& subject(const CareTeamObject* msg);
};

const ::patient::Reference&
CareTeamObject::_Internal::encounter(const CareTeamObject* msg) {
  return *msg->encounter_;
}
const ::patient::Period&
CareTeamObject::_Internal::period(const CareTeamObject* msg) {
  return *msg->period_;
}
const ::patient::Reference&
CareTeamObject::_Internal::subject(const CareTeamObject* msg) {
  return *msg->subject_;
}
CareTeamObject::CareTeamObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.CareTeamObject)
}
CareTeamObject::CareTeamObject(const CareTeamObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      managingorganization_(from.managingorganization_),
      participant_(from.participant_),
      reasoncode_(from.reasoncode_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_encounter()) {
    encounter_ = new ::patient::Reference(*from.encounter_);
  } else {
    encounter_ = nullptr;
  }
  if (from._internal_has_period()) {
    period_ = new ::patient::Period(*from.period_);
  } else {
    period_ = nullptr;
  }
  if (from._internal_has_subject()) {
    subject_ = new ::patient::Reference(*from.subject_);
  } else {
    subject_ = nullptr;
  }
  ::memcpy(&resourcetype_, &from.resourcetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&resourcetype_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:patient.CareTeamObject)
}

void CareTeamObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CareTeamObject_customized_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&encounter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&encounter_)) + sizeof(status_));
}

CareTeamObject::~CareTeamObject() {
  // @@protoc_insertion_point(destructor:patient.CareTeamObject)
  SharedDtor();
}

void CareTeamObject::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete encounter_;
  if (this != internal_default_instance()) delete period_;
  if (this != internal_default_instance()) delete subject_;
}

void CareTeamObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CareTeamObject& CareTeamObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CareTeamObject_customized_2eproto.base);
  return *internal_default_instance();
}


void CareTeamObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.CareTeamObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  managingorganization_.Clear();
  participant_.Clear();
  reasoncode_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && period_ != nullptr) {
    delete period_;
  }
  period_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
  ::memset(&resourcetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&resourcetype_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* CareTeamObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Reference Encounter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_encounter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.CareTeamObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Reference managingOrganization = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_managingorganization(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.Participant participant = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_participant(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Period period = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_period(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Category reasonCode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reasoncode(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.ResourceType resourceType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_resourcetype(static_cast<::patient::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // .patient.Status status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::patient::Status>(val));
        } else goto handle_unusual;
        continue;
      // .patient.Reference subject = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CareTeamObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.CareTeamObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Reference Encounter = 1;
  if (this->has_encounter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::encounter(this), target, stream);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.CareTeamObject.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // repeated .patient.Reference managingOrganization = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_managingorganization_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_managingorganization(i), target, stream);
  }

  // repeated .patient.Participant participant = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_participant_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_participant(i), target, stream);
  }

  // .patient.Period period = 5;
  if (this->has_period()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::period(this), target, stream);
  }

  // repeated .patient.Category reasonCode = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reasoncode_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_reasoncode(i), target, stream);
  }

  // .patient.ResourceType resourceType = 7;
  if (this->resourcetype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_resourcetype(), target);
  }

  // .patient.Status status = 8;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_status(), target);
  }

  // .patient.Reference subject = 9;
  if (this->has_subject()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::subject(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.CareTeamObject)
  return target;
}

size_t CareTeamObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.CareTeamObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Reference managingOrganization = 3;
  total_size += 1UL * this->_internal_managingorganization_size();
  for (const auto& msg : this->managingorganization_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Participant participant = 4;
  total_size += 1UL * this->_internal_participant_size();
  for (const auto& msg : this->participant_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Category reasonCode = 6;
  total_size += 1UL * this->_internal_reasoncode_size();
  for (const auto& msg : this->reasoncode_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .patient.Reference Encounter = 1;
  if (this->has_encounter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encounter_);
  }

  // .patient.Period period = 5;
  if (this->has_period()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *period_);
  }

  // .patient.Reference subject = 9;
  if (this->has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_);
  }

  // .patient.ResourceType resourceType = 7;
  if (this->resourcetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resourcetype());
  }

  // .patient.Status status = 8;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CareTeamObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.CareTeamObject)
  GOOGLE_DCHECK_NE(&from, this);
  const CareTeamObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CareTeamObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.CareTeamObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.CareTeamObject)
    MergeFrom(*source);
  }
}

void CareTeamObject::MergeFrom(const CareTeamObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.CareTeamObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  managingorganization_.MergeFrom(from.managingorganization_);
  participant_.MergeFrom(from.participant_);
  reasoncode_.MergeFrom(from.reasoncode_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_encounter()) {
    _internal_mutable_encounter()->::patient::Reference::MergeFrom(from._internal_encounter());
  }
  if (from.has_period()) {
    _internal_mutable_period()->::patient::Period::MergeFrom(from._internal_period());
  }
  if (from.has_subject()) {
    _internal_mutable_subject()->::patient::Reference::MergeFrom(from._internal_subject());
  }
  if (from.resourcetype() != 0) {
    _internal_set_resourcetype(from._internal_resourcetype());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void CareTeamObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.CareTeamObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CareTeamObject::CopyFrom(const CareTeamObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.CareTeamObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CareTeamObject::IsInitialized() const {
  return true;
}

void CareTeamObject::InternalSwap(CareTeamObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  managingorganization_.InternalSwap(&other->managingorganization_);
  participant_.InternalSwap(&other->participant_);
  reasoncode_.InternalSwap(&other->reasoncode_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(encounter_, other->encounter_);
  swap(period_, other->period_);
  swap(subject_, other->subject_);
  swap(resourcetype_, other->resourcetype_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CareTeamObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClaimObject::InitAsDefaultInstance() {
  ::patient::_ClaimObject_default_instance_._instance.get_mutable()->billableperiod_ = const_cast< ::patient::Period*>(
      ::patient::Period::internal_default_instance());
  ::patient::_ClaimObject_default_instance_._instance.get_mutable()->patient_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ClaimObject_default_instance_._instance.get_mutable()->prescription_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ClaimObject_default_instance_._instance.get_mutable()->priority_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_ClaimObject_default_instance_._instance.get_mutable()->provider_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ClaimObject_default_instance_._instance.get_mutable()->total_ = const_cast< ::patient::Total*>(
      ::patient::Total::internal_default_instance());
  ::patient::_ClaimObject_default_instance_._instance.get_mutable()->type_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
}
class ClaimObject::_Internal {
 public:
  static const ::patient::Period& billableperiod(const ClaimObject* msg);
  static const ::patient::Reference& patient(const ClaimObject* msg);
  static const ::patient::Reference& prescription(const ClaimObject* msg);
  static const ::patient::Category& priority(const ClaimObject* msg);
  static const ::patient::Reference& provider(const ClaimObject* msg);
  static const ::patient::Total& total(const ClaimObject* msg);
  static const ::patient::Category& type(const ClaimObject* msg);
};

const ::patient::Period&
ClaimObject::_Internal::billableperiod(const ClaimObject* msg) {
  return *msg->billableperiod_;
}
const ::patient::Reference&
ClaimObject::_Internal::patient(const ClaimObject* msg) {
  return *msg->patient_;
}
const ::patient::Reference&
ClaimObject::_Internal::prescription(const ClaimObject* msg) {
  return *msg->prescription_;
}
const ::patient::Category&
ClaimObject::_Internal::priority(const ClaimObject* msg) {
  return *msg->priority_;
}
const ::patient::Reference&
ClaimObject::_Internal::provider(const ClaimObject* msg) {
  return *msg->provider_;
}
const ::patient::Total&
ClaimObject::_Internal::total(const ClaimObject* msg) {
  return *msg->total_;
}
const ::patient::Category&
ClaimObject::_Internal::type(const ClaimObject* msg) {
  return *msg->type_;
}
ClaimObject::ClaimObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.ClaimObject)
}
ClaimObject::ClaimObject(const ClaimObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      diagnosis_(from.diagnosis_),
      insurance_(from.insurance_),
      item_(from.item_),
      procedure_(from.procedure_),
      supportinginfo_(from.supportinginfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  created_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_created().empty()) {
    created_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.created_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  use_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_use().empty()) {
    use_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.use_);
  }
  if (from._internal_has_billableperiod()) {
    billableperiod_ = new ::patient::Period(*from.billableperiod_);
  } else {
    billableperiod_ = nullptr;
  }
  if (from._internal_has_patient()) {
    patient_ = new ::patient::Reference(*from.patient_);
  } else {
    patient_ = nullptr;
  }
  if (from._internal_has_prescription()) {
    prescription_ = new ::patient::Reference(*from.prescription_);
  } else {
    prescription_ = nullptr;
  }
  if (from._internal_has_priority()) {
    priority_ = new ::patient::Category(*from.priority_);
  } else {
    priority_ = nullptr;
  }
  if (from._internal_has_provider()) {
    provider_ = new ::patient::Reference(*from.provider_);
  } else {
    provider_ = nullptr;
  }
  if (from._internal_has_total()) {
    total_ = new ::patient::Total(*from.total_);
  } else {
    total_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::patient::Category(*from.type_);
  } else {
    type_ = nullptr;
  }
  ::memcpy(&resourcetype_, &from.resourcetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&resourcetype_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:patient.ClaimObject)
}

void ClaimObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClaimObject_customized_2eproto.base);
  created_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&billableperiod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&billableperiod_)) + sizeof(status_));
}

ClaimObject::~ClaimObject() {
  // @@protoc_insertion_point(destructor:patient.ClaimObject)
  SharedDtor();
}

void ClaimObject::SharedDtor() {
  created_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete billableperiod_;
  if (this != internal_default_instance()) delete patient_;
  if (this != internal_default_instance()) delete prescription_;
  if (this != internal_default_instance()) delete priority_;
  if (this != internal_default_instance()) delete provider_;
  if (this != internal_default_instance()) delete total_;
  if (this != internal_default_instance()) delete type_;
}

void ClaimObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClaimObject& ClaimObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClaimObject_customized_2eproto.base);
  return *internal_default_instance();
}


void ClaimObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.ClaimObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diagnosis_.Clear();
  insurance_.Clear();
  item_.Clear();
  procedure_.Clear();
  supportinginfo_.Clear();
  created_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && billableperiod_ != nullptr) {
    delete billableperiod_;
  }
  billableperiod_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && patient_ != nullptr) {
    delete patient_;
  }
  patient_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && prescription_ != nullptr) {
    delete prescription_;
  }
  prescription_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && priority_ != nullptr) {
    delete priority_;
  }
  priority_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && provider_ != nullptr) {
    delete provider_;
  }
  provider_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && total_ != nullptr) {
    delete total_;
  }
  total_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  ::memset(&resourcetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&resourcetype_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* ClaimObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Period billablePeriod = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_billableperiod(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string created = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_created(), ptr, ctx, "patient.ClaimObject.created");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Diagnosis diagnosis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_diagnosis(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.ClaimObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Insurance insurance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_insurance(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.Item item = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Reference patient = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_patient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference prescription = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_prescription(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category priority = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_priority(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Procedure procedure = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_procedure(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Reference provider = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_provider(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.ResourceType resourceType = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_resourcetype(static_cast<::patient::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // .patient.Status status = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::patient::Status>(val));
        } else goto handle_unusual;
        continue;
      // repeated .patient.SupportingInfo supportingInfo = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_supportinginfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Total total = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_total(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category type = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string use = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_use(), ptr, ctx, "patient.ClaimObject.use");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClaimObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.ClaimObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Period billablePeriod = 1;
  if (this->has_billableperiod()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::billableperiod(this), target, stream);
  }

  // string created = 2;
  if (this->created().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created().data(), static_cast<int>(this->_internal_created().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ClaimObject.created");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_created(), target);
  }

  // repeated .patient.Diagnosis diagnosis = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_diagnosis_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_diagnosis(i), target, stream);
  }

  // string id = 4;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ClaimObject.id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_id(), target);
  }

  // repeated .patient.Insurance insurance = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_insurance_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_insurance(i), target, stream);
  }

  // repeated .patient.Item item = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_item(i), target, stream);
  }

  // .patient.Reference patient = 7;
  if (this->has_patient()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::patient(this), target, stream);
  }

  // .patient.Reference prescription = 8;
  if (this->has_prescription()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::prescription(this), target, stream);
  }

  // .patient.Category priority = 9;
  if (this->has_priority()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::priority(this), target, stream);
  }

  // repeated .patient.Procedure procedure = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_procedure_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(10, this->_internal_procedure(i), target, stream);
  }

  // .patient.Reference provider = 11;
  if (this->has_provider()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::provider(this), target, stream);
  }

  // .patient.ResourceType resourceType = 12;
  if (this->resourcetype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_resourcetype(), target);
  }

  // .patient.Status status = 13;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_status(), target);
  }

  // repeated .patient.SupportingInfo supportingInfo = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_supportinginfo_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(14, this->_internal_supportinginfo(i), target, stream);
  }

  // .patient.Total total = 15;
  if (this->has_total()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::total(this), target, stream);
  }

  // .patient.Category type = 16;
  if (this->has_type()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, _Internal::type(this), target, stream);
  }

  // string use = 17;
  if (this->use().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_use().data(), static_cast<int>(this->_internal_use().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ClaimObject.use");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_use(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.ClaimObject)
  return target;
}

size_t ClaimObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.ClaimObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Diagnosis diagnosis = 3;
  total_size += 1UL * this->_internal_diagnosis_size();
  for (const auto& msg : this->diagnosis_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Insurance insurance = 5;
  total_size += 1UL * this->_internal_insurance_size();
  for (const auto& msg : this->insurance_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Item item = 6;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Procedure procedure = 10;
  total_size += 1UL * this->_internal_procedure_size();
  for (const auto& msg : this->procedure_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.SupportingInfo supportingInfo = 14;
  total_size += 1UL * this->_internal_supportinginfo_size();
  for (const auto& msg : this->supportinginfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string created = 2;
  if (this->created().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created());
  }

  // string id = 4;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string use = 17;
  if (this->use().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_use());
  }

  // .patient.Period billablePeriod = 1;
  if (this->has_billableperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *billableperiod_);
  }

  // .patient.Reference patient = 7;
  if (this->has_patient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patient_);
  }

  // .patient.Reference prescription = 8;
  if (this->has_prescription()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prescription_);
  }

  // .patient.Category priority = 9;
  if (this->has_priority()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *priority_);
  }

  // .patient.Reference provider = 11;
  if (this->has_provider()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *provider_);
  }

  // .patient.Total total = 15;
  if (this->has_total()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *total_);
  }

  // .patient.Category type = 16;
  if (this->has_type()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // .patient.ResourceType resourceType = 12;
  if (this->resourcetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resourcetype());
  }

  // .patient.Status status = 13;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClaimObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.ClaimObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ClaimObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClaimObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.ClaimObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.ClaimObject)
    MergeFrom(*source);
  }
}

void ClaimObject::MergeFrom(const ClaimObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.ClaimObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  diagnosis_.MergeFrom(from.diagnosis_);
  insurance_.MergeFrom(from.insurance_);
  item_.MergeFrom(from.item_);
  procedure_.MergeFrom(from.procedure_);
  supportinginfo_.MergeFrom(from.supportinginfo_);
  if (from.created().size() > 0) {

    created_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.created_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.use().size() > 0) {

    use_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.use_);
  }
  if (from.has_billableperiod()) {
    _internal_mutable_billableperiod()->::patient::Period::MergeFrom(from._internal_billableperiod());
  }
  if (from.has_patient()) {
    _internal_mutable_patient()->::patient::Reference::MergeFrom(from._internal_patient());
  }
  if (from.has_prescription()) {
    _internal_mutable_prescription()->::patient::Reference::MergeFrom(from._internal_prescription());
  }
  if (from.has_priority()) {
    _internal_mutable_priority()->::patient::Category::MergeFrom(from._internal_priority());
  }
  if (from.has_provider()) {
    _internal_mutable_provider()->::patient::Reference::MergeFrom(from._internal_provider());
  }
  if (from.has_total()) {
    _internal_mutable_total()->::patient::Total::MergeFrom(from._internal_total());
  }
  if (from.has_type()) {
    _internal_mutable_type()->::patient::Category::MergeFrom(from._internal_type());
  }
  if (from.resourcetype() != 0) {
    _internal_set_resourcetype(from._internal_resourcetype());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ClaimObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.ClaimObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClaimObject::CopyFrom(const ClaimObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.ClaimObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClaimObject::IsInitialized() const {
  return true;
}

void ClaimObject::InternalSwap(ClaimObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  diagnosis_.InternalSwap(&other->diagnosis_);
  insurance_.InternalSwap(&other->insurance_);
  item_.InternalSwap(&other->item_);
  procedure_.InternalSwap(&other->procedure_);
  supportinginfo_.InternalSwap(&other->supportinginfo_);
  created_.Swap(&other->created_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  use_.Swap(&other->use_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(billableperiod_, other->billableperiod_);
  swap(patient_, other->patient_);
  swap(prescription_, other->prescription_);
  swap(priority_, other->priority_);
  swap(provider_, other->provider_);
  swap(total_, other->total_);
  swap(type_, other->type_);
  swap(resourcetype_, other->resourcetype_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClaimObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConditionObject::InitAsDefaultInstance() {
  ::patient::_ConditionObject_default_instance_._instance.get_mutable()->clinicalstatus_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_ConditionObject_default_instance_._instance.get_mutable()->code_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_ConditionObject_default_instance_._instance.get_mutable()->encounter_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ConditionObject_default_instance_._instance.get_mutable()->subject_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ConditionObject_default_instance_._instance.get_mutable()->verificationstatus_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
}
class ConditionObject::_Internal {
 public:
  static const ::patient::Category& clinicalstatus(const ConditionObject* msg);
  static const ::patient::Category& code(const ConditionObject* msg);
  static const ::patient::Reference& encounter(const ConditionObject* msg);
  static const ::patient::Reference& subject(const ConditionObject* msg);
  static const ::patient::Category& verificationstatus(const ConditionObject* msg);
};

const ::patient::Category&
ConditionObject::_Internal::clinicalstatus(const ConditionObject* msg) {
  return *msg->clinicalstatus_;
}
const ::patient::Category&
ConditionObject::_Internal::code(const ConditionObject* msg) {
  return *msg->code_;
}
const ::patient::Reference&
ConditionObject::_Internal::encounter(const ConditionObject* msg) {
  return *msg->encounter_;
}
const ::patient::Reference&
ConditionObject::_Internal::subject(const ConditionObject* msg) {
  return *msg->subject_;
}
const ::patient::Category&
ConditionObject::_Internal::verificationstatus(const ConditionObject* msg) {
  return *msg->verificationstatus_;
}
ConditionObject::ConditionObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.ConditionObject)
}
ConditionObject::ConditionObject(const ConditionObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  abatementdatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_abatementdatetime().empty()) {
    abatementdatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.abatementdatetime_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  onsetdatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_onsetdatetime().empty()) {
    onsetdatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.onsetdatetime_);
  }
  recordeddate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recordeddate().empty()) {
    recordeddate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recordeddate_);
  }
  if (from._internal_has_clinicalstatus()) {
    clinicalstatus_ = new ::patient::Category(*from.clinicalstatus_);
  } else {
    clinicalstatus_ = nullptr;
  }
  if (from._internal_has_code()) {
    code_ = new ::patient::Category(*from.code_);
  } else {
    code_ = nullptr;
  }
  if (from._internal_has_encounter()) {
    encounter_ = new ::patient::Reference(*from.encounter_);
  } else {
    encounter_ = nullptr;
  }
  if (from._internal_has_subject()) {
    subject_ = new ::patient::Reference(*from.subject_);
  } else {
    subject_ = nullptr;
  }
  if (from._internal_has_verificationstatus()) {
    verificationstatus_ = new ::patient::Category(*from.verificationstatus_);
  } else {
    verificationstatus_ = nullptr;
  }
  resourcetype_ = from.resourcetype_;
  // @@protoc_insertion_point(copy_constructor:patient.ConditionObject)
}

void ConditionObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConditionObject_customized_2eproto.base);
  abatementdatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  onsetdatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recordeddate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&clinicalstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resourcetype_) -
      reinterpret_cast<char*>(&clinicalstatus_)) + sizeof(resourcetype_));
}

ConditionObject::~ConditionObject() {
  // @@protoc_insertion_point(destructor:patient.ConditionObject)
  SharedDtor();
}

void ConditionObject::SharedDtor() {
  abatementdatetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  onsetdatetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recordeddate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete clinicalstatus_;
  if (this != internal_default_instance()) delete code_;
  if (this != internal_default_instance()) delete encounter_;
  if (this != internal_default_instance()) delete subject_;
  if (this != internal_default_instance()) delete verificationstatus_;
}

void ConditionObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionObject& ConditionObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConditionObject_customized_2eproto.base);
  return *internal_default_instance();
}


void ConditionObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.ConditionObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  abatementdatetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  onsetdatetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recordeddate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && clinicalstatus_ != nullptr) {
    delete clinicalstatus_;
  }
  clinicalstatus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && verificationstatus_ != nullptr) {
    delete verificationstatus_;
  }
  verificationstatus_ = nullptr;
  resourcetype_ = 0;
  _internal_metadata_.Clear();
}

const char* ConditionObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string abatementDateTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_abatementdatetime(), ptr, ctx, "patient.ConditionObject.abatementDateTime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category clinicalStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_clinicalstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference encounter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_encounter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.ConditionObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string onsetDateTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_onsetdatetime(), ptr, ctx, "patient.ConditionObject.onsetDateTime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recordedDate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_recordeddate(), ptr, ctx, "patient.ConditionObject.recordedDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.ResourceType resourceType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_resourcetype(static_cast<::patient::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // .patient.Reference subject = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category verificationStatus = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_verificationstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConditionObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.ConditionObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string abatementDateTime = 1;
  if (this->abatementdatetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_abatementdatetime().data(), static_cast<int>(this->_internal_abatementdatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ConditionObject.abatementDateTime");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_abatementdatetime(), target);
  }

  // .patient.Category clinicalStatus = 2;
  if (this->has_clinicalstatus()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::clinicalstatus(this), target, stream);
  }

  // .patient.Category code = 3;
  if (this->has_code()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::code(this), target, stream);
  }

  // .patient.Reference encounter = 4;
  if (this->has_encounter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::encounter(this), target, stream);
  }

  // string id = 5;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ConditionObject.id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_id(), target);
  }

  // string onsetDateTime = 6;
  if (this->onsetdatetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_onsetdatetime().data(), static_cast<int>(this->_internal_onsetdatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ConditionObject.onsetDateTime");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_onsetdatetime(), target);
  }

  // string recordedDate = 7;
  if (this->recordeddate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recordeddate().data(), static_cast<int>(this->_internal_recordeddate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ConditionObject.recordedDate");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_recordeddate(), target);
  }

  // .patient.ResourceType resourceType = 8;
  if (this->resourcetype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_resourcetype(), target);
  }

  // .patient.Reference subject = 9;
  if (this->has_subject()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::subject(this), target, stream);
  }

  // .patient.Category verificationStatus = 10;
  if (this->has_verificationstatus()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::verificationstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.ConditionObject)
  return target;
}

size_t ConditionObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.ConditionObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string abatementDateTime = 1;
  if (this->abatementdatetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_abatementdatetime());
  }

  // string id = 5;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string onsetDateTime = 6;
  if (this->onsetdatetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_onsetdatetime());
  }

  // string recordedDate = 7;
  if (this->recordeddate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recordeddate());
  }

  // .patient.Category clinicalStatus = 2;
  if (this->has_clinicalstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clinicalstatus_);
  }

  // .patient.Category code = 3;
  if (this->has_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *code_);
  }

  // .patient.Reference encounter = 4;
  if (this->has_encounter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encounter_);
  }

  // .patient.Reference subject = 9;
  if (this->has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_);
  }

  // .patient.Category verificationStatus = 10;
  if (this->has_verificationstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *verificationstatus_);
  }

  // .patient.ResourceType resourceType = 8;
  if (this->resourcetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resourcetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.ConditionObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConditionObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.ConditionObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.ConditionObject)
    MergeFrom(*source);
  }
}

void ConditionObject::MergeFrom(const ConditionObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.ConditionObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.abatementdatetime().size() > 0) {

    abatementdatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.abatementdatetime_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.onsetdatetime().size() > 0) {

    onsetdatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.onsetdatetime_);
  }
  if (from.recordeddate().size() > 0) {

    recordeddate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recordeddate_);
  }
  if (from.has_clinicalstatus()) {
    _internal_mutable_clinicalstatus()->::patient::Category::MergeFrom(from._internal_clinicalstatus());
  }
  if (from.has_code()) {
    _internal_mutable_code()->::patient::Category::MergeFrom(from._internal_code());
  }
  if (from.has_encounter()) {
    _internal_mutable_encounter()->::patient::Reference::MergeFrom(from._internal_encounter());
  }
  if (from.has_subject()) {
    _internal_mutable_subject()->::patient::Reference::MergeFrom(from._internal_subject());
  }
  if (from.has_verificationstatus()) {
    _internal_mutable_verificationstatus()->::patient::Category::MergeFrom(from._internal_verificationstatus());
  }
  if (from.resourcetype() != 0) {
    _internal_set_resourcetype(from._internal_resourcetype());
  }
}

void ConditionObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.ConditionObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionObject::CopyFrom(const ConditionObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.ConditionObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionObject::IsInitialized() const {
  return true;
}

void ConditionObject::InternalSwap(ConditionObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  abatementdatetime_.Swap(&other->abatementdatetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  onsetdatetime_.Swap(&other->onsetdatetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recordeddate_.Swap(&other->recordeddate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clinicalstatus_, other->clinicalstatus_);
  swap(code_, other->code_);
  swap(encounter_, other->encounter_);
  swap(subject_, other->subject_);
  swap(verificationstatus_, other->verificationstatus_);
  swap(resourcetype_, other->resourcetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DiagnosticReportObject::InitAsDefaultInstance() {
  ::patient::_DiagnosticReportObject_default_instance_._instance.get_mutable()->code_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_DiagnosticReportObject_default_instance_._instance.get_mutable()->encounter_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_DiagnosticReportObject_default_instance_._instance.get_mutable()->subject_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class DiagnosticReportObject::_Internal {
 public:
  static const ::patient::Category& code(const DiagnosticReportObject* msg);
  static const ::patient::Reference& encounter(const DiagnosticReportObject* msg);
  static const ::patient::Reference& subject(const DiagnosticReportObject* msg);
};

const ::patient::Category&
DiagnosticReportObject::_Internal::code(const DiagnosticReportObject* msg) {
  return *msg->code_;
}
const ::patient::Reference&
DiagnosticReportObject::_Internal::encounter(const DiagnosticReportObject* msg) {
  return *msg->encounter_;
}
const ::patient::Reference&
DiagnosticReportObject::_Internal::subject(const DiagnosticReportObject* msg) {
  return *msg->subject_;
}
DiagnosticReportObject::DiagnosticReportObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.DiagnosticReportObject)
}
DiagnosticReportObject::DiagnosticReportObject(const DiagnosticReportObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      category_(from.category_),
      result_(from.result_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  effectivedatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_effectivedatetime().empty()) {
    effectivedatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.effectivedatetime_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  issued_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_issued().empty()) {
    issued_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.issued_);
  }
  if (from._internal_has_code()) {
    code_ = new ::patient::Category(*from.code_);
  } else {
    code_ = nullptr;
  }
  if (from._internal_has_encounter()) {
    encounter_ = new ::patient::Reference(*from.encounter_);
  } else {
    encounter_ = nullptr;
  }
  if (from._internal_has_subject()) {
    subject_ = new ::patient::Reference(*from.subject_);
  } else {
    subject_ = nullptr;
  }
  ::memcpy(&resourcetype_, &from.resourcetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&resourcetype_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:patient.DiagnosticReportObject)
}

void DiagnosticReportObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosticReportObject_customized_2eproto.base);
  effectivedatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issued_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&code_)) + sizeof(status_));
}

DiagnosticReportObject::~DiagnosticReportObject() {
  // @@protoc_insertion_point(destructor:patient.DiagnosticReportObject)
  SharedDtor();
}

void DiagnosticReportObject::SharedDtor() {
  effectivedatetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issued_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete code_;
  if (this != internal_default_instance()) delete encounter_;
  if (this != internal_default_instance()) delete subject_;
}

void DiagnosticReportObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosticReportObject& DiagnosticReportObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosticReportObject_customized_2eproto.base);
  return *internal_default_instance();
}


void DiagnosticReportObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.DiagnosticReportObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  category_.Clear();
  result_.Clear();
  effectivedatetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issued_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
  ::memset(&resourcetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&resourcetype_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* DiagnosticReportObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .patient.Category category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Category code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string effectiveDateTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_effectivedatetime(), ptr, ctx, "patient.DiagnosticReportObject.effectiveDateTime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference encounter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_encounter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.DiagnosticReportObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string issued = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_issued(), ptr, ctx, "patient.DiagnosticReportObject.issued");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.ResourceType resourceType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_resourcetype(static_cast<::patient::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .patient.Reference result = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Status status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::patient::Status>(val));
        } else goto handle_unusual;
        continue;
      // .patient.Reference Subject = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosticReportObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.DiagnosticReportObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .patient.Category category = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_category_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_category(i), target, stream);
  }

  // .patient.Category code = 2;
  if (this->has_code()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::code(this), target, stream);
  }

  // string effectiveDateTime = 3;
  if (this->effectivedatetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_effectivedatetime().data(), static_cast<int>(this->_internal_effectivedatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.DiagnosticReportObject.effectiveDateTime");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_effectivedatetime(), target);
  }

  // .patient.Reference encounter = 4;
  if (this->has_encounter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::encounter(this), target, stream);
  }

  // string id = 5;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.DiagnosticReportObject.id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_id(), target);
  }

  // string issued = 6;
  if (this->issued().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_issued().data(), static_cast<int>(this->_internal_issued().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.DiagnosticReportObject.issued");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_issued(), target);
  }

  // .patient.ResourceType resourceType = 7;
  if (this->resourcetype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_resourcetype(), target);
  }

  // repeated .patient.Reference result = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_result_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(8, this->_internal_result(i), target, stream);
  }

  // .patient.Status status = 9;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_status(), target);
  }

  // .patient.Reference Subject = 10;
  if (this->has_subject()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::subject(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.DiagnosticReportObject)
  return target;
}

size_t DiagnosticReportObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.DiagnosticReportObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Category category = 1;
  total_size += 1UL * this->_internal_category_size();
  for (const auto& msg : this->category_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Reference result = 8;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string effectiveDateTime = 3;
  if (this->effectivedatetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_effectivedatetime());
  }

  // string id = 5;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string issued = 6;
  if (this->issued().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_issued());
  }

  // .patient.Category code = 2;
  if (this->has_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *code_);
  }

  // .patient.Reference encounter = 4;
  if (this->has_encounter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encounter_);
  }

  // .patient.Reference Subject = 10;
  if (this->has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_);
  }

  // .patient.ResourceType resourceType = 7;
  if (this->resourcetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resourcetype());
  }

  // .patient.Status status = 9;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosticReportObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.DiagnosticReportObject)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosticReportObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosticReportObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.DiagnosticReportObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.DiagnosticReportObject)
    MergeFrom(*source);
  }
}

void DiagnosticReportObject::MergeFrom(const DiagnosticReportObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.DiagnosticReportObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  category_.MergeFrom(from.category_);
  result_.MergeFrom(from.result_);
  if (from.effectivedatetime().size() > 0) {

    effectivedatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.effectivedatetime_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.issued().size() > 0) {

    issued_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.issued_);
  }
  if (from.has_code()) {
    _internal_mutable_code()->::patient::Category::MergeFrom(from._internal_code());
  }
  if (from.has_encounter()) {
    _internal_mutable_encounter()->::patient::Reference::MergeFrom(from._internal_encounter());
  }
  if (from.has_subject()) {
    _internal_mutable_subject()->::patient::Reference::MergeFrom(from._internal_subject());
  }
  if (from.resourcetype() != 0) {
    _internal_set_resourcetype(from._internal_resourcetype());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void DiagnosticReportObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.DiagnosticReportObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosticReportObject::CopyFrom(const DiagnosticReportObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.DiagnosticReportObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosticReportObject::IsInitialized() const {
  return true;
}

void DiagnosticReportObject::InternalSwap(DiagnosticReportObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  category_.InternalSwap(&other->category_);
  result_.InternalSwap(&other->result_);
  effectivedatetime_.Swap(&other->effectivedatetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  issued_.Swap(&other->issued_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(encounter_, other->encounter_);
  swap(subject_, other->subject_);
  swap(resourcetype_, other->resourcetype_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosticReportObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EncounterObject::InitAsDefaultInstance() {
  ::patient::_EncounterObject_default_instance_._instance.get_mutable()->class__ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_EncounterObject_default_instance_._instance.get_mutable()->period_ = const_cast< ::patient::Period*>(
      ::patient::Period::internal_default_instance());
  ::patient::_EncounterObject_default_instance_._instance.get_mutable()->serviceprovider_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_EncounterObject_default_instance_._instance.get_mutable()->subject_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class EncounterObject::_Internal {
 public:
  static const ::patient::Category& class_(const EncounterObject* msg);
  static const ::patient::Period& period(const EncounterObject* msg);
  static const ::patient::Reference& serviceprovider(const EncounterObject* msg);
  static const ::patient::Reference& subject(const EncounterObject* msg);
};

const ::patient::Category&
EncounterObject::_Internal::class_(const EncounterObject* msg) {
  return *msg->class__;
}
const ::patient::Period&
EncounterObject::_Internal::period(const EncounterObject* msg) {
  return *msg->period_;
}
const ::patient::Reference&
EncounterObject::_Internal::serviceprovider(const EncounterObject* msg) {
  return *msg->serviceprovider_;
}
const ::patient::Reference&
EncounterObject::_Internal::subject(const EncounterObject* msg) {
  return *msg->subject_;
}
EncounterObject::EncounterObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.EncounterObject)
}
EncounterObject::EncounterObject(const EncounterObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      participant_(from.participant_),
      reasoncode_(from.reasoncode_),
      type_(from.type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_class_()) {
    class__ = new ::patient::Category(*from.class__);
  } else {
    class__ = nullptr;
  }
  if (from._internal_has_period()) {
    period_ = new ::patient::Period(*from.period_);
  } else {
    period_ = nullptr;
  }
  if (from._internal_has_serviceprovider()) {
    serviceprovider_ = new ::patient::Reference(*from.serviceprovider_);
  } else {
    serviceprovider_ = nullptr;
  }
  if (from._internal_has_subject()) {
    subject_ = new ::patient::Reference(*from.subject_);
  } else {
    subject_ = nullptr;
  }
  ::memcpy(&resourcetype_, &from.resourcetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&resourcetype_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:patient.EncounterObject)
}

void EncounterObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EncounterObject_customized_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&class__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&class__)) + sizeof(status_));
}

EncounterObject::~EncounterObject() {
  // @@protoc_insertion_point(destructor:patient.EncounterObject)
  SharedDtor();
}

void EncounterObject::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete class__;
  if (this != internal_default_instance()) delete period_;
  if (this != internal_default_instance()) delete serviceprovider_;
  if (this != internal_default_instance()) delete subject_;
}

void EncounterObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EncounterObject& EncounterObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EncounterObject_customized_2eproto.base);
  return *internal_default_instance();
}


void EncounterObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.EncounterObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  participant_.Clear();
  reasoncode_.Clear();
  type_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && class__ != nullptr) {
    delete class__;
  }
  class__ = nullptr;
  if (GetArenaNoVirtual() == nullptr && period_ != nullptr) {
    delete period_;
  }
  period_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && serviceprovider_ != nullptr) {
    delete serviceprovider_;
  }
  serviceprovider_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
  ::memset(&resourcetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&resourcetype_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* EncounterObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Category class = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_class_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.EncounterObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Participant participant = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_participant(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Period period = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_period(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Category reasonCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reasoncode(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.ResourceType resourceType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_resourcetype(static_cast<::patient::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // .patient.Reference serviceProvider = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_serviceprovider(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Status status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::patient::Status>(val));
        } else goto handle_unusual;
        continue;
      // .patient.Reference subject = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Category type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EncounterObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.EncounterObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Category class = 1;
  if (this->has_class_()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::class_(this), target, stream);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.EncounterObject.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // repeated .patient.Participant participant = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_participant_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_participant(i), target, stream);
  }

  // .patient.Period period = 4;
  if (this->has_period()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::period(this), target, stream);
  }

  // repeated .patient.Category reasonCode = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reasoncode_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_reasoncode(i), target, stream);
  }

  // .patient.ResourceType resourceType = 6;
  if (this->resourcetype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_resourcetype(), target);
  }

  // .patient.Reference serviceProvider = 7;
  if (this->has_serviceprovider()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::serviceprovider(this), target, stream);
  }

  // .patient.Status status = 8;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_status(), target);
  }

  // .patient.Reference subject = 9;
  if (this->has_subject()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::subject(this), target, stream);
  }

  // repeated .patient.Category type = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_type_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(10, this->_internal_type(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.EncounterObject)
  return target;
}

size_t EncounterObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.EncounterObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Participant participant = 3;
  total_size += 1UL * this->_internal_participant_size();
  for (const auto& msg : this->participant_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Category reasonCode = 5;
  total_size += 1UL * this->_internal_reasoncode_size();
  for (const auto& msg : this->reasoncode_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Category type = 10;
  total_size += 1UL * this->_internal_type_size();
  for (const auto& msg : this->type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .patient.Category class = 1;
  if (this->has_class_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *class__);
  }

  // .patient.Period period = 4;
  if (this->has_period()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *period_);
  }

  // .patient.Reference serviceProvider = 7;
  if (this->has_serviceprovider()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *serviceprovider_);
  }

  // .patient.Reference subject = 9;
  if (this->has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_);
  }

  // .patient.ResourceType resourceType = 6;
  if (this->resourcetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resourcetype());
  }

  // .patient.Status status = 8;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncounterObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.EncounterObject)
  GOOGLE_DCHECK_NE(&from, this);
  const EncounterObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EncounterObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.EncounterObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.EncounterObject)
    MergeFrom(*source);
  }
}

void EncounterObject::MergeFrom(const EncounterObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.EncounterObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  participant_.MergeFrom(from.participant_);
  reasoncode_.MergeFrom(from.reasoncode_);
  type_.MergeFrom(from.type_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_class_()) {
    _internal_mutable_class_()->::patient::Category::MergeFrom(from._internal_class_());
  }
  if (from.has_period()) {
    _internal_mutable_period()->::patient::Period::MergeFrom(from._internal_period());
  }
  if (from.has_serviceprovider()) {
    _internal_mutable_serviceprovider()->::patient::Reference::MergeFrom(from._internal_serviceprovider());
  }
  if (from.has_subject()) {
    _internal_mutable_subject()->::patient::Reference::MergeFrom(from._internal_subject());
  }
  if (from.resourcetype() != 0) {
    _internal_set_resourcetype(from._internal_resourcetype());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void EncounterObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.EncounterObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncounterObject::CopyFrom(const EncounterObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.EncounterObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncounterObject::IsInitialized() const {
  return true;
}

void EncounterObject::InternalSwap(EncounterObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  participant_.InternalSwap(&other->participant_);
  reasoncode_.InternalSwap(&other->reasoncode_);
  type_.InternalSwap(&other->type_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(class__, other->class__);
  swap(period_, other->period_);
  swap(serviceprovider_, other->serviceprovider_);
  swap(subject_, other->subject_);
  swap(resourcetype_, other->resourcetype_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EncounterObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExplanationOfBenefitObject::InitAsDefaultInstance() {
  ::patient::_ExplanationOfBenefitObject_default_instance_._instance.get_mutable()->billableperiod_ = const_cast< ::patient::Period*>(
      ::patient::Period::internal_default_instance());
  ::patient::_ExplanationOfBenefitObject_default_instance_._instance.get_mutable()->claim_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ExplanationOfBenefitObject_default_instance_._instance.get_mutable()->insurer_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ExplanationOfBenefitObject_default_instance_._instance.get_mutable()->patient_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ExplanationOfBenefitObject_default_instance_._instance.get_mutable()->payment_ = const_cast< ::patient::Payment*>(
      ::patient::Payment::internal_default_instance());
  ::patient::_ExplanationOfBenefitObject_default_instance_._instance.get_mutable()->provider_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ExplanationOfBenefitObject_default_instance_._instance.get_mutable()->referral_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ExplanationOfBenefitObject_default_instance_._instance.get_mutable()->type_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
}
class ExplanationOfBenefitObject::_Internal {
 public:
  static const ::patient::Period& billableperiod(const ExplanationOfBenefitObject* msg);
  static const ::patient::Reference& claim(const ExplanationOfBenefitObject* msg);
  static const ::patient::Reference& insurer(const ExplanationOfBenefitObject* msg);
  static const ::patient::Reference& patient(const ExplanationOfBenefitObject* msg);
  static const ::patient::Payment& payment(const ExplanationOfBenefitObject* msg);
  static const ::patient::Reference& provider(const ExplanationOfBenefitObject* msg);
  static const ::patient::Reference& referral(const ExplanationOfBenefitObject* msg);
  static const ::patient::Category& type(const ExplanationOfBenefitObject* msg);
};

const ::patient::Period&
ExplanationOfBenefitObject::_Internal::billableperiod(const ExplanationOfBenefitObject* msg) {
  return *msg->billableperiod_;
}
const ::patient::Reference&
ExplanationOfBenefitObject::_Internal::claim(const ExplanationOfBenefitObject* msg) {
  return *msg->claim_;
}
const ::patient::Reference&
ExplanationOfBenefitObject::_Internal::insurer(const ExplanationOfBenefitObject* msg) {
  return *msg->insurer_;
}
const ::patient::Reference&
ExplanationOfBenefitObject::_Internal::patient(const ExplanationOfBenefitObject* msg) {
  return *msg->patient_;
}
const ::patient::Payment&
ExplanationOfBenefitObject::_Internal::payment(const ExplanationOfBenefitObject* msg) {
  return *msg->payment_;
}
const ::patient::Reference&
ExplanationOfBenefitObject::_Internal::provider(const ExplanationOfBenefitObject* msg) {
  return *msg->provider_;
}
const ::patient::Reference&
ExplanationOfBenefitObject::_Internal::referral(const ExplanationOfBenefitObject* msg) {
  return *msg->referral_;
}
const ::patient::Category&
ExplanationOfBenefitObject::_Internal::type(const ExplanationOfBenefitObject* msg) {
  return *msg->type_;
}
ExplanationOfBenefitObject::ExplanationOfBenefitObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.ExplanationOfBenefitObject)
}
ExplanationOfBenefitObject::ExplanationOfBenefitObject(const ExplanationOfBenefitObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      careteam_(from.careteam_),
      contained_(from.contained_),
      diagnosis_(from.diagnosis_),
      identifier_(from.identifier_),
      insurance_(from.insurance_),
      item_(from.item_),
      total_(from.total_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  created_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_created().empty()) {
    created_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.created_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  outcome_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_outcome().empty()) {
    outcome_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.outcome_);
  }
  use_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_use().empty()) {
    use_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.use_);
  }
  if (from._internal_has_billableperiod()) {
    billableperiod_ = new ::patient::Period(*from.billableperiod_);
  } else {
    billableperiod_ = nullptr;
  }
  if (from._internal_has_claim()) {
    claim_ = new ::patient::Reference(*from.claim_);
  } else {
    claim_ = nullptr;
  }
  if (from._internal_has_insurer()) {
    insurer_ = new ::patient::Reference(*from.insurer_);
  } else {
    insurer_ = nullptr;
  }
  if (from._internal_has_patient()) {
    patient_ = new ::patient::Reference(*from.patient_);
  } else {
    patient_ = nullptr;
  }
  if (from._internal_has_payment()) {
    payment_ = new ::patient::Payment(*from.payment_);
  } else {
    payment_ = nullptr;
  }
  if (from._internal_has_provider()) {
    provider_ = new ::patient::Reference(*from.provider_);
  } else {
    provider_ = nullptr;
  }
  if (from._internal_has_referral()) {
    referral_ = new ::patient::Reference(*from.referral_);
  } else {
    referral_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::patient::Category(*from.type_);
  } else {
    type_ = nullptr;
  }
  ::memcpy(&resourcetype_, &from.resourcetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&resourcetype_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:patient.ExplanationOfBenefitObject)
}

void ExplanationOfBenefitObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExplanationOfBenefitObject_customized_2eproto.base);
  created_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outcome_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&billableperiod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&billableperiod_)) + sizeof(status_));
}

ExplanationOfBenefitObject::~ExplanationOfBenefitObject() {
  // @@protoc_insertion_point(destructor:patient.ExplanationOfBenefitObject)
  SharedDtor();
}

void ExplanationOfBenefitObject::SharedDtor() {
  created_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outcome_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete billableperiod_;
  if (this != internal_default_instance()) delete claim_;
  if (this != internal_default_instance()) delete insurer_;
  if (this != internal_default_instance()) delete patient_;
  if (this != internal_default_instance()) delete payment_;
  if (this != internal_default_instance()) delete provider_;
  if (this != internal_default_instance()) delete referral_;
  if (this != internal_default_instance()) delete type_;
}

void ExplanationOfBenefitObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExplanationOfBenefitObject& ExplanationOfBenefitObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExplanationOfBenefitObject_customized_2eproto.base);
  return *internal_default_instance();
}


void ExplanationOfBenefitObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.ExplanationOfBenefitObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  careteam_.Clear();
  contained_.Clear();
  diagnosis_.Clear();
  identifier_.Clear();
  insurance_.Clear();
  item_.Clear();
  total_.Clear();
  created_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outcome_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  use_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && billableperiod_ != nullptr) {
    delete billableperiod_;
  }
  billableperiod_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && claim_ != nullptr) {
    delete claim_;
  }
  claim_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && insurer_ != nullptr) {
    delete insurer_;
  }
  insurer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && patient_ != nullptr) {
    delete patient_;
  }
  patient_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && payment_ != nullptr) {
    delete payment_;
  }
  payment_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && provider_ != nullptr) {
    delete provider_;
  }
  provider_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && referral_ != nullptr) {
    delete referral_;
  }
  referral_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  ::memset(&resourcetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&resourcetype_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* ExplanationOfBenefitObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Period billablePeriod = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_billableperiod(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.CareTeam careteam = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_careteam(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Reference claim = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_claim(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Contained contained = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contained(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string created = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_created(), ptr, ctx, "patient.ExplanationOfBenefitObject.created");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Diagnosis diagnosis = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_diagnosis(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // string id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.ExplanationOfBenefitObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Identifier identifier = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifier(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.Insurance insurance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_insurance(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Reference insurer = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_insurer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Item item = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // string outcome = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_outcome(), ptr, ctx, "patient.ExplanationOfBenefitObject.outcome");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference patient = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_patient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Payment payment = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_payment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference provider = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_provider(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference referral = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_referral(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.ResourceType resourceType = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_resourcetype(static_cast<::patient::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // .patient.Status status = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::patient::Status>(val));
        } else goto handle_unusual;
        continue;
      // repeated .patient.Total total = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_total(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Category type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string use = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_use(), ptr, ctx, "patient.ExplanationOfBenefitObject.use");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExplanationOfBenefitObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.ExplanationOfBenefitObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Period billablePeriod = 1;
  if (this->has_billableperiod()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::billableperiod(this), target, stream);
  }

  // repeated .patient.CareTeam careteam = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_careteam_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_careteam(i), target, stream);
  }

  // .patient.Reference claim = 3;
  if (this->has_claim()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::claim(this), target, stream);
  }

  // repeated .patient.Contained contained = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contained_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_contained(i), target, stream);
  }

  // string created = 5;
  if (this->created().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created().data(), static_cast<int>(this->_internal_created().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ExplanationOfBenefitObject.created");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_created(), target);
  }

  // repeated .patient.Diagnosis diagnosis = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_diagnosis_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_diagnosis(i), target, stream);
  }

  // string id = 7;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ExplanationOfBenefitObject.id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_id(), target);
  }

  // repeated .patient.Identifier identifier = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifier_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(8, this->_internal_identifier(i), target, stream);
  }

  // repeated .patient.Insurance insurance = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_insurance_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(9, this->_internal_insurance(i), target, stream);
  }

  // .patient.Reference insurer = 10;
  if (this->has_insurer()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::insurer(this), target, stream);
  }

  // repeated .patient.Item item = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(11, this->_internal_item(i), target, stream);
  }

  // string outcome = 12;
  if (this->outcome().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outcome().data(), static_cast<int>(this->_internal_outcome().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ExplanationOfBenefitObject.outcome");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_outcome(), target);
  }

  // .patient.Reference patient = 13;
  if (this->has_patient()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::patient(this), target, stream);
  }

  // .patient.Payment payment = 14;
  if (this->has_payment()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::payment(this), target, stream);
  }

  // .patient.Reference provider = 15;
  if (this->has_provider()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::provider(this), target, stream);
  }

  // .patient.Reference referral = 16;
  if (this->has_referral()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, _Internal::referral(this), target, stream);
  }

  // .patient.ResourceType resourceType = 17;
  if (this->resourcetype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_resourcetype(), target);
  }

  // .patient.Status status = 18;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_status(), target);
  }

  // repeated .patient.Total total = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_total_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(19, this->_internal_total(i), target, stream);
  }

  // .patient.Category type = 20;
  if (this->has_type()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, _Internal::type(this), target, stream);
  }

  // string use = 21;
  if (this->use().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_use().data(), static_cast<int>(this->_internal_use().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ExplanationOfBenefitObject.use");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_use(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.ExplanationOfBenefitObject)
  return target;
}

size_t ExplanationOfBenefitObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.ExplanationOfBenefitObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.CareTeam careteam = 2;
  total_size += 1UL * this->_internal_careteam_size();
  for (const auto& msg : this->careteam_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Contained contained = 4;
  total_size += 1UL * this->_internal_contained_size();
  for (const auto& msg : this->contained_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Diagnosis diagnosis = 6;
  total_size += 1UL * this->_internal_diagnosis_size();
  for (const auto& msg : this->diagnosis_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Identifier identifier = 8;
  total_size += 1UL * this->_internal_identifier_size();
  for (const auto& msg : this->identifier_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Insurance insurance = 9;
  total_size += 1UL * this->_internal_insurance_size();
  for (const auto& msg : this->insurance_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Item item = 11;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Total total = 19;
  total_size += 2UL * this->_internal_total_size();
  for (const auto& msg : this->total_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string created = 5;
  if (this->created().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created());
  }

  // string id = 7;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string outcome = 12;
  if (this->outcome().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outcome());
  }

  // string use = 21;
  if (this->use().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_use());
  }

  // .patient.Period billablePeriod = 1;
  if (this->has_billableperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *billableperiod_);
  }

  // .patient.Reference claim = 3;
  if (this->has_claim()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *claim_);
  }

  // .patient.Reference insurer = 10;
  if (this->has_insurer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *insurer_);
  }

  // .patient.Reference patient = 13;
  if (this->has_patient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patient_);
  }

  // .patient.Payment payment = 14;
  if (this->has_payment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payment_);
  }

  // .patient.Reference provider = 15;
  if (this->has_provider()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *provider_);
  }

  // .patient.Reference referral = 16;
  if (this->has_referral()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *referral_);
  }

  // .patient.Category type = 20;
  if (this->has_type()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // .patient.ResourceType resourceType = 17;
  if (this->resourcetype() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resourcetype());
  }

  // .patient.Status status = 18;
  if (this->status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExplanationOfBenefitObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.ExplanationOfBenefitObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ExplanationOfBenefitObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExplanationOfBenefitObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.ExplanationOfBenefitObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.ExplanationOfBenefitObject)
    MergeFrom(*source);
  }
}

void ExplanationOfBenefitObject::MergeFrom(const ExplanationOfBenefitObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.ExplanationOfBenefitObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  careteam_.MergeFrom(from.careteam_);
  contained_.MergeFrom(from.contained_);
  diagnosis_.MergeFrom(from.diagnosis_);
  identifier_.MergeFrom(from.identifier_);
  insurance_.MergeFrom(from.insurance_);
  item_.MergeFrom(from.item_);
  total_.MergeFrom(from.total_);
  if (from.created().size() > 0) {

    created_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.created_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.outcome().size() > 0) {

    outcome_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.outcome_);
  }
  if (from.use().size() > 0) {

    use_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.use_);
  }
  if (from.has_billableperiod()) {
    _internal_mutable_billableperiod()->::patient::Period::MergeFrom(from._internal_billableperiod());
  }
  if (from.has_claim()) {
    _internal_mutable_claim()->::patient::Reference::MergeFrom(from._internal_claim());
  }
  if (from.has_insurer()) {
    _internal_mutable_insurer()->::patient::Reference::MergeFrom(from._internal_insurer());
  }
  if (from.has_patient()) {
    _internal_mutable_patient()->::patient::Reference::MergeFrom(from._internal_patient());
  }
  if (from.has_payment()) {
    _internal_mutable_payment()->::patient::Payment::MergeFrom(from._internal_payment());
  }
  if (from.has_provider()) {
    _internal_mutable_provider()->::patient::Reference::MergeFrom(from._internal_provider());
  }
  if (from.has_referral()) {
    _internal_mutable_referral()->::patient::Reference::MergeFrom(from._internal_referral());
  }
  if (from.has_type()) {
    _internal_mutable_type()->::patient::Category::MergeFrom(from._internal_type());
  }
  if (from.resourcetype() != 0) {
    _internal_set_resourcetype(from._internal_resourcetype());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ExplanationOfBenefitObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.ExplanationOfBenefitObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExplanationOfBenefitObject::CopyFrom(const ExplanationOfBenefitObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.ExplanationOfBenefitObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExplanationOfBenefitObject::IsInitialized() const {
  return true;
}

void ExplanationOfBenefitObject::InternalSwap(ExplanationOfBenefitObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  careteam_.InternalSwap(&other->careteam_);
  contained_.InternalSwap(&other->contained_);
  diagnosis_.InternalSwap(&other->diagnosis_);
  identifier_.InternalSwap(&other->identifier_);
  insurance_.InternalSwap(&other->insurance_);
  item_.InternalSwap(&other->item_);
  total_.InternalSwap(&other->total_);
  created_.Swap(&other->created_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  outcome_.Swap(&other->outcome_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  use_.Swap(&other->use_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(billableperiod_, other->billableperiod_);
  swap(claim_, other->claim_);
  swap(insurer_, other->insurer_);
  swap(patient_, other->patient_);
  swap(payment_, other->payment_);
  swap(provider_, other->provider_);
  swap(referral_, other->referral_);
  swap(type_, other->type_);
  swap(resourcetype_, other->resourcetype_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExplanationOfBenefitObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImmunizationObject::InitAsDefaultInstance() {
  ::patient::_ImmunizationObject_default_instance_._instance.get_mutable()->encounter_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ImmunizationObject_default_instance_._instance.get_mutable()->patient_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ImmunizationObject_default_instance_._instance.get_mutable()->vaccinecode_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
}
class ImmunizationObject::_Internal {
 public:
  static const ::patient::Reference& encounter(const ImmunizationObject* msg);
  static const ::patient::Reference& patient(const ImmunizationObject* msg);
  static const ::patient::Category& vaccinecode(const ImmunizationObject* msg);
};

const ::patient::Reference&
ImmunizationObject::_Internal::encounter(const ImmunizationObject* msg) {
  return *msg->encounter_;
}
const ::patient::Reference&
ImmunizationObject::_Internal::patient(const ImmunizationObject* msg) {
  return *msg->patient_;
}
const ::patient::Category&
ImmunizationObject::_Internal::vaccinecode(const ImmunizationObject* msg) {
  return *msg->vaccinecode_;
}
ImmunizationObject::ImmunizationObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.ImmunizationObject)
}
ImmunizationObject::ImmunizationObject(const ImmunizationObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  occurencedatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_occurencedatetime().empty()) {
    occurencedatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.occurencedatetime_);
  }
  if (from._internal_has_encounter()) {
    encounter_ = new ::patient::Reference(*from.encounter_);
  } else {
    encounter_ = nullptr;
  }
  if (from._internal_has_patient()) {
    patient_ = new ::patient::Reference(*from.patient_);
  } else {
    patient_ = nullptr;
  }
  if (from._internal_has_vaccinecode()) {
    vaccinecode_ = new ::patient::Category(*from.vaccinecode_);
  } else {
    vaccinecode_ = nullptr;
  }
  ::memcpy(&primarysource_, &from.primarysource_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&primarysource_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:patient.ImmunizationObject)
}

void ImmunizationObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImmunizationObject_customized_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  occurencedatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&encounter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&encounter_)) + sizeof(status_));
}

ImmunizationObject::~ImmunizationObject() {
  // @@protoc_insertion_point(destructor:patient.ImmunizationObject)
  SharedDtor();
}

void ImmunizationObject::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  occurencedatetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete encounter_;
  if (this != internal_default_instance()) delete patient_;
  if (this != internal_default_instance()) delete vaccinecode_;
}

void ImmunizationObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImmunizationObject& ImmunizationObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImmunizationObject_customized_2eproto.base);
  return *internal_default_instance();
}


void ImmunizationObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.ImmunizationObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  occurencedatetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && patient_ != nullptr) {
    delete patient_;
  }
  patient_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && vaccinecode_ != nullptr) {
    delete vaccinecode_;
  }
  vaccinecode_ = nullptr;
  ::memset(&primarysource_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&primarysource_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* ImmunizationObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Reference encounter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_encounter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.ImmunizationObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string occurenceDateTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_occurencedatetime(), ptr, ctx, "patient.ImmunizationObject.occurenceDateTime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference patient = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_patient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool primarySource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          primarysource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.ResourceType resourceType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_resourcetype(static_cast<::patient::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // .patient.Status status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::patient::Status>(val));
        } else goto handle_unusual;
        continue;
      // .patient.Category vaccineCode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_vaccinecode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImmunizationObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.ImmunizationObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Reference encounter = 1;
  if (this->has_encounter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::encounter(this), target, stream);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ImmunizationObject.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // string occurenceDateTime = 3;
  if (this->occurencedatetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_occurencedatetime().data(), static_cast<int>(this->_internal_occurencedatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ImmunizationObject.occurenceDateTime");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_occurencedatetime(), target);
  }

  // .patient.Reference patient = 4;
  if (this->has_patient()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::patient(this), target, stream);
  }

  // bool primarySource = 5;
  if (this->primarysource() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_primarysource(), target);
  }

  // .patient.ResourceType resourceType = 6;
  if (this->resourcetype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_resourcetype(), target);
  }

  // .patient.Status status = 7;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_status(), target);
  }

  // .patient.Category vaccineCode = 8;
  if (this->has_vaccinecode()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::vaccinecode(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.ImmunizationObject)
  return target;
}

size_t ImmunizationObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.ImmunizationObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string occurenceDateTime = 3;
  if (this->occurencedatetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_occurencedatetime());
  }

  // .patient.Reference encounter = 1;
  if (this->has_encounter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encounter_);
  }

  // .patient.Reference patient = 4;
  if (this->has_patient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patient_);
  }

  // .patient.Category vaccineCode = 8;
  if (this->has_vaccinecode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vaccinecode_);
  }

  // bool primarySource = 5;
  if (this->primarysource() != 0) {
    total_size += 1 + 1;
  }

  // .patient.ResourceType resourceType = 6;
  if (this->resourcetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resourcetype());
  }

  // .patient.Status status = 7;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImmunizationObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.ImmunizationObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ImmunizationObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImmunizationObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.ImmunizationObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.ImmunizationObject)
    MergeFrom(*source);
  }
}

void ImmunizationObject::MergeFrom(const ImmunizationObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.ImmunizationObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.occurencedatetime().size() > 0) {

    occurencedatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.occurencedatetime_);
  }
  if (from.has_encounter()) {
    _internal_mutable_encounter()->::patient::Reference::MergeFrom(from._internal_encounter());
  }
  if (from.has_patient()) {
    _internal_mutable_patient()->::patient::Reference::MergeFrom(from._internal_patient());
  }
  if (from.has_vaccinecode()) {
    _internal_mutable_vaccinecode()->::patient::Category::MergeFrom(from._internal_vaccinecode());
  }
  if (from.primarysource() != 0) {
    _internal_set_primarysource(from._internal_primarysource());
  }
  if (from.resourcetype() != 0) {
    _internal_set_resourcetype(from._internal_resourcetype());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ImmunizationObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.ImmunizationObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImmunizationObject::CopyFrom(const ImmunizationObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.ImmunizationObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImmunizationObject::IsInitialized() const {
  return true;
}

void ImmunizationObject::InternalSwap(ImmunizationObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  occurencedatetime_.Swap(&other->occurencedatetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(encounter_, other->encounter_);
  swap(patient_, other->patient_);
  swap(vaccinecode_, other->vaccinecode_);
  swap(primarysource_, other->primarysource_);
  swap(resourcetype_, other->resourcetype_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImmunizationObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MedicationRequestObject::InitAsDefaultInstance() {
  ::patient::_MedicationRequestObject_default_instance_._instance.get_mutable()->encounter_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_MedicationRequestObject_default_instance_._instance.get_mutable()->medicationcodeableconcept_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_MedicationRequestObject_default_instance_._instance.get_mutable()->requester_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_MedicationRequestObject_default_instance_._instance.get_mutable()->subject_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class MedicationRequestObject::_Internal {
 public:
  static const ::patient::Reference& encounter(const MedicationRequestObject* msg);
  static const ::patient::Category& medicationcodeableconcept(const MedicationRequestObject* msg);
  static const ::patient::Reference& requester(const MedicationRequestObject* msg);
  static const ::patient::Reference& subject(const MedicationRequestObject* msg);
};

const ::patient::Reference&
MedicationRequestObject::_Internal::encounter(const MedicationRequestObject* msg) {
  return *msg->encounter_;
}
const ::patient::Category&
MedicationRequestObject::_Internal::medicationcodeableconcept(const MedicationRequestObject* msg) {
  return *msg->medicationcodeableconcept_;
}
const ::patient::Reference&
MedicationRequestObject::_Internal::requester(const MedicationRequestObject* msg) {
  return *msg->requester_;
}
const ::patient::Reference&
MedicationRequestObject::_Internal::subject(const MedicationRequestObject* msg) {
  return *msg->subject_;
}
MedicationRequestObject::MedicationRequestObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.MedicationRequestObject)
}
MedicationRequestObject::MedicationRequestObject(const MedicationRequestObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      reasonreference_(from.reasonreference_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  authoredon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_authoredon().empty()) {
    authoredon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.authoredon_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  intent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_intent().empty()) {
    intent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.intent_);
  }
  if (from._internal_has_encounter()) {
    encounter_ = new ::patient::Reference(*from.encounter_);
  } else {
    encounter_ = nullptr;
  }
  if (from._internal_has_medicationcodeableconcept()) {
    medicationcodeableconcept_ = new ::patient::Category(*from.medicationcodeableconcept_);
  } else {
    medicationcodeableconcept_ = nullptr;
  }
  if (from._internal_has_requester()) {
    requester_ = new ::patient::Reference(*from.requester_);
  } else {
    requester_ = nullptr;
  }
  if (from._internal_has_subject()) {
    subject_ = new ::patient::Reference(*from.subject_);
  } else {
    subject_ = nullptr;
  }
  ::memcpy(&resourcetype_, &from.resourcetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&resourcetype_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:patient.MedicationRequestObject)
}

void MedicationRequestObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MedicationRequestObject_customized_2eproto.base);
  authoredon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&encounter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&encounter_)) + sizeof(status_));
}

MedicationRequestObject::~MedicationRequestObject() {
  // @@protoc_insertion_point(destructor:patient.MedicationRequestObject)
  SharedDtor();
}

void MedicationRequestObject::SharedDtor() {
  authoredon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete encounter_;
  if (this != internal_default_instance()) delete medicationcodeableconcept_;
  if (this != internal_default_instance()) delete requester_;
  if (this != internal_default_instance()) delete subject_;
}

void MedicationRequestObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MedicationRequestObject& MedicationRequestObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MedicationRequestObject_customized_2eproto.base);
  return *internal_default_instance();
}


void MedicationRequestObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.MedicationRequestObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reasonreference_.Clear();
  authoredon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && medicationcodeableconcept_ != nullptr) {
    delete medicationcodeableconcept_;
  }
  medicationcodeableconcept_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && requester_ != nullptr) {
    delete requester_;
  }
  requester_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
  ::memset(&resourcetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&resourcetype_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* MedicationRequestObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string authoredOn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_authoredon(), ptr, ctx, "patient.MedicationRequestObject.authoredOn");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference encounter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_encounter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.MedicationRequestObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string intent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_intent(), ptr, ctx, "patient.MedicationRequestObject.intent");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category medicationCodeableConcept = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_medicationcodeableconcept(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Reference reasonReference = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reasonreference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Reference requester = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_requester(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.ResourceType resourceType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_resourcetype(static_cast<::patient::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // .patient.Status status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::patient::Status>(val));
        } else goto handle_unusual;
        continue;
      // .patient.Reference subject = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MedicationRequestObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.MedicationRequestObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string authoredOn = 1;
  if (this->authoredon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_authoredon().data(), static_cast<int>(this->_internal_authoredon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.MedicationRequestObject.authoredOn");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_authoredon(), target);
  }

  // .patient.Reference encounter = 2;
  if (this->has_encounter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::encounter(this), target, stream);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.MedicationRequestObject.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // string intent = 4;
  if (this->intent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_intent().data(), static_cast<int>(this->_internal_intent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.MedicationRequestObject.intent");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_intent(), target);
  }

  // .patient.Category medicationCodeableConcept = 5;
  if (this->has_medicationcodeableconcept()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::medicationcodeableconcept(this), target, stream);
  }

  // repeated .patient.Reference reasonReference = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reasonreference_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_reasonreference(i), target, stream);
  }

  // .patient.Reference requester = 7;
  if (this->has_requester()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::requester(this), target, stream);
  }

  // .patient.ResourceType resourceType = 8;
  if (this->resourcetype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_resourcetype(), target);
  }

  // .patient.Status status = 9;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_status(), target);
  }

  // .patient.Reference subject = 10;
  if (this->has_subject()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::subject(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.MedicationRequestObject)
  return target;
}

size_t MedicationRequestObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.MedicationRequestObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Reference reasonReference = 6;
  total_size += 1UL * this->_internal_reasonreference_size();
  for (const auto& msg : this->reasonreference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string authoredOn = 1;
  if (this->authoredon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_authoredon());
  }

  // string id = 3;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string intent = 4;
  if (this->intent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_intent());
  }

  // .patient.Reference encounter = 2;
  if (this->has_encounter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encounter_);
  }

  // .patient.Category medicationCodeableConcept = 5;
  if (this->has_medicationcodeableconcept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *medicationcodeableconcept_);
  }

  // .patient.Reference requester = 7;
  if (this->has_requester()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requester_);
  }

  // .patient.Reference subject = 10;
  if (this->has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_);
  }

  // .patient.ResourceType resourceType = 8;
  if (this->resourcetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resourcetype());
  }

  // .patient.Status status = 9;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MedicationRequestObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.MedicationRequestObject)
  GOOGLE_DCHECK_NE(&from, this);
  const MedicationRequestObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MedicationRequestObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.MedicationRequestObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.MedicationRequestObject)
    MergeFrom(*source);
  }
}

void MedicationRequestObject::MergeFrom(const MedicationRequestObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.MedicationRequestObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reasonreference_.MergeFrom(from.reasonreference_);
  if (from.authoredon().size() > 0) {

    authoredon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.authoredon_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.intent().size() > 0) {

    intent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.intent_);
  }
  if (from.has_encounter()) {
    _internal_mutable_encounter()->::patient::Reference::MergeFrom(from._internal_encounter());
  }
  if (from.has_medicationcodeableconcept()) {
    _internal_mutable_medicationcodeableconcept()->::patient::Category::MergeFrom(from._internal_medicationcodeableconcept());
  }
  if (from.has_requester()) {
    _internal_mutable_requester()->::patient::Reference::MergeFrom(from._internal_requester());
  }
  if (from.has_subject()) {
    _internal_mutable_subject()->::patient::Reference::MergeFrom(from._internal_subject());
  }
  if (from.resourcetype() != 0) {
    _internal_set_resourcetype(from._internal_resourcetype());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void MedicationRequestObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.MedicationRequestObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedicationRequestObject::CopyFrom(const MedicationRequestObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.MedicationRequestObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedicationRequestObject::IsInitialized() const {
  return true;
}

void MedicationRequestObject::InternalSwap(MedicationRequestObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reasonreference_.InternalSwap(&other->reasonreference_);
  authoredon_.Swap(&other->authoredon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  intent_.Swap(&other->intent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(encounter_, other->encounter_);
  swap(medicationcodeableconcept_, other->medicationcodeableconcept_);
  swap(requester_, other->requester_);
  swap(subject_, other->subject_);
  swap(resourcetype_, other->resourcetype_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MedicationRequestObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObservationObject::InitAsDefaultInstance() {
  ::patient::_ObservationObject_default_instance_._instance.get_mutable()->code_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_ObservationObject_default_instance_._instance.get_mutable()->encounter_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ObservationObject_default_instance_._instance.get_mutable()->subject_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ObservationObject_default_instance_._instance.get_mutable()->valuecodeableconcept_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_ObservationObject_default_instance_._instance.get_mutable()->valuequantity_ = const_cast< ::patient::Quantity*>(
      ::patient::Quantity::internal_default_instance());
}
class ObservationObject::_Internal {
 public:
  static const ::patient::Category& code(const ObservationObject* msg);
  static const ::patient::Reference& encounter(const ObservationObject* msg);
  static const ::patient::Reference& subject(const ObservationObject* msg);
  static const ::patient::Category& valuecodeableconcept(const ObservationObject* msg);
  static const ::patient::Quantity& valuequantity(const ObservationObject* msg);
};

const ::patient::Category&
ObservationObject::_Internal::code(const ObservationObject* msg) {
  return *msg->code_;
}
const ::patient::Reference&
ObservationObject::_Internal::encounter(const ObservationObject* msg) {
  return *msg->encounter_;
}
const ::patient::Reference&
ObservationObject::_Internal::subject(const ObservationObject* msg) {
  return *msg->subject_;
}
const ::patient::Category&
ObservationObject::_Internal::valuecodeableconcept(const ObservationObject* msg) {
  return *msg->valuecodeableconcept_;
}
const ::patient::Quantity&
ObservationObject::_Internal::valuequantity(const ObservationObject* msg) {
  return *msg->valuequantity_;
}
ObservationObject::ObservationObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.ObservationObject)
}
ObservationObject::ObservationObject(const ObservationObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      category_(from.category_),
      component_(from.component_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  effectivedatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_effectivedatetime().empty()) {
    effectivedatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.effectivedatetime_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  issued_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_issued().empty()) {
    issued_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.issued_);
  }
  if (from._internal_has_code()) {
    code_ = new ::patient::Category(*from.code_);
  } else {
    code_ = nullptr;
  }
  if (from._internal_has_encounter()) {
    encounter_ = new ::patient::Reference(*from.encounter_);
  } else {
    encounter_ = nullptr;
  }
  if (from._internal_has_subject()) {
    subject_ = new ::patient::Reference(*from.subject_);
  } else {
    subject_ = nullptr;
  }
  if (from._internal_has_valuecodeableconcept()) {
    valuecodeableconcept_ = new ::patient::Category(*from.valuecodeableconcept_);
  } else {
    valuecodeableconcept_ = nullptr;
  }
  if (from._internal_has_valuequantity()) {
    valuequantity_ = new ::patient::Quantity(*from.valuequantity_);
  } else {
    valuequantity_ = nullptr;
  }
  ::memcpy(&resourcetype_, &from.resourcetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&resourcetype_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:patient.ObservationObject)
}

void ObservationObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObservationObject_customized_2eproto.base);
  effectivedatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issued_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&code_)) + sizeof(status_));
}

ObservationObject::~ObservationObject() {
  // @@protoc_insertion_point(destructor:patient.ObservationObject)
  SharedDtor();
}

void ObservationObject::SharedDtor() {
  effectivedatetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issued_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete code_;
  if (this != internal_default_instance()) delete encounter_;
  if (this != internal_default_instance()) delete subject_;
  if (this != internal_default_instance()) delete valuecodeableconcept_;
  if (this != internal_default_instance()) delete valuequantity_;
}

void ObservationObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObservationObject& ObservationObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObservationObject_customized_2eproto.base);
  return *internal_default_instance();
}


void ObservationObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.ObservationObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  category_.Clear();
  component_.Clear();
  effectivedatetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issued_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && valuecodeableconcept_ != nullptr) {
    delete valuecodeableconcept_;
  }
  valuecodeableconcept_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && valuequantity_ != nullptr) {
    delete valuequantity_;
  }
  valuequantity_ = nullptr;
  ::memset(&resourcetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&resourcetype_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* ObservationObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .patient.Category category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Category code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Component component = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_component(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string effectiveDateTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_effectivedatetime(), ptr, ctx, "patient.ObservationObject.effectiveDateTime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference encounter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_encounter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.ObservationObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string issued = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_issued(), ptr, ctx, "patient.ObservationObject.issued");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.ResourceType resourceType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_resourcetype(static_cast<::patient::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // .patient.Status status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::patient::Status>(val));
        } else goto handle_unusual;
        continue;
      // .patient.Reference subject = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Category valueCodeableConcept = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_valuecodeableconcept(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Quantity valueQuantity = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_valuequantity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObservationObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.ObservationObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .patient.Category category = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_category_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_category(i), target, stream);
  }

  // .patient.Category code = 2;
  if (this->has_code()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::code(this), target, stream);
  }

  // repeated .patient.Component component = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_component_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_component(i), target, stream);
  }

  // string effectiveDateTime = 4;
  if (this->effectivedatetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_effectivedatetime().data(), static_cast<int>(this->_internal_effectivedatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ObservationObject.effectiveDateTime");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_effectivedatetime(), target);
  }

  // .patient.Reference encounter = 5;
  if (this->has_encounter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::encounter(this), target, stream);
  }

  // string id = 6;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ObservationObject.id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_id(), target);
  }

  // string issued = 7;
  if (this->issued().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_issued().data(), static_cast<int>(this->_internal_issued().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ObservationObject.issued");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_issued(), target);
  }

  // .patient.ResourceType resourceType = 8;
  if (this->resourcetype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_resourcetype(), target);
  }

  // .patient.Status status = 9;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_status(), target);
  }

  // .patient.Reference subject = 10;
  if (this->has_subject()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::subject(this), target, stream);
  }

  // .patient.Category valueCodeableConcept = 11;
  if (this->has_valuecodeableconcept()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::valuecodeableconcept(this), target, stream);
  }

  // .patient.Quantity valueQuantity = 12;
  if (this->has_valuequantity()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::valuequantity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.ObservationObject)
  return target;
}

size_t ObservationObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.ObservationObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Category category = 1;
  total_size += 1UL * this->_internal_category_size();
  for (const auto& msg : this->category_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Component component = 3;
  total_size += 1UL * this->_internal_component_size();
  for (const auto& msg : this->component_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string effectiveDateTime = 4;
  if (this->effectivedatetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_effectivedatetime());
  }

  // string id = 6;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string issued = 7;
  if (this->issued().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_issued());
  }

  // .patient.Category code = 2;
  if (this->has_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *code_);
  }

  // .patient.Reference encounter = 5;
  if (this->has_encounter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encounter_);
  }

  // .patient.Reference subject = 10;
  if (this->has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_);
  }

  // .patient.Category valueCodeableConcept = 11;
  if (this->has_valuecodeableconcept()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *valuecodeableconcept_);
  }

  // .patient.Quantity valueQuantity = 12;
  if (this->has_valuequantity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *valuequantity_);
  }

  // .patient.ResourceType resourceType = 8;
  if (this->resourcetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resourcetype());
  }

  // .patient.Status status = 9;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObservationObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.ObservationObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ObservationObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObservationObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.ObservationObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.ObservationObject)
    MergeFrom(*source);
  }
}

void ObservationObject::MergeFrom(const ObservationObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.ObservationObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  category_.MergeFrom(from.category_);
  component_.MergeFrom(from.component_);
  if (from.effectivedatetime().size() > 0) {

    effectivedatetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.effectivedatetime_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.issued().size() > 0) {

    issued_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.issued_);
  }
  if (from.has_code()) {
    _internal_mutable_code()->::patient::Category::MergeFrom(from._internal_code());
  }
  if (from.has_encounter()) {
    _internal_mutable_encounter()->::patient::Reference::MergeFrom(from._internal_encounter());
  }
  if (from.has_subject()) {
    _internal_mutable_subject()->::patient::Reference::MergeFrom(from._internal_subject());
  }
  if (from.has_valuecodeableconcept()) {
    _internal_mutable_valuecodeableconcept()->::patient::Category::MergeFrom(from._internal_valuecodeableconcept());
  }
  if (from.has_valuequantity()) {
    _internal_mutable_valuequantity()->::patient::Quantity::MergeFrom(from._internal_valuequantity());
  }
  if (from.resourcetype() != 0) {
    _internal_set_resourcetype(from._internal_resourcetype());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ObservationObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.ObservationObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObservationObject::CopyFrom(const ObservationObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.ObservationObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservationObject::IsInitialized() const {
  return true;
}

void ObservationObject::InternalSwap(ObservationObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  category_.InternalSwap(&other->category_);
  component_.InternalSwap(&other->component_);
  effectivedatetime_.Swap(&other->effectivedatetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  issued_.Swap(&other->issued_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(encounter_, other->encounter_);
  swap(subject_, other->subject_);
  swap(valuecodeableconcept_, other->valuecodeableconcept_);
  swap(valuequantity_, other->valuequantity_);
  swap(resourcetype_, other->resourcetype_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObservationObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrganizationObject::InitAsDefaultInstance() {
}
class OrganizationObject::_Internal {
 public:
};

OrganizationObject::OrganizationObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.OrganizationObject)
}
OrganizationObject::OrganizationObject(const OrganizationObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      address_(from.address_),
      identifier_(from.identifier_),
      telecom_(from.telecom_),
      type_(from.type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&active_, &from.active_,
    static_cast<size_t>(reinterpret_cast<char*>(&resourcetype_) -
    reinterpret_cast<char*>(&active_)) + sizeof(resourcetype_));
  // @@protoc_insertion_point(copy_constructor:patient.OrganizationObject)
}

void OrganizationObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrganizationObject_customized_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resourcetype_) -
      reinterpret_cast<char*>(&active_)) + sizeof(resourcetype_));
}

OrganizationObject::~OrganizationObject() {
  // @@protoc_insertion_point(destructor:patient.OrganizationObject)
  SharedDtor();
}

void OrganizationObject::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrganizationObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrganizationObject& OrganizationObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrganizationObject_customized_2eproto.base);
  return *internal_default_instance();
}


void OrganizationObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.OrganizationObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.Clear();
  identifier_.Clear();
  telecom_.Clear();
  type_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resourcetype_) -
      reinterpret_cast<char*>(&active_)) + sizeof(resourcetype_));
  _internal_metadata_.Clear();
}

const char* OrganizationObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Address address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_address(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.OrganizationObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Identifier identifier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifier(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "patient.OrganizationObject.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.ResourceType resourceType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_resourcetype(static_cast<::patient::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .patient.Telecom telecom = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_telecom(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.Category type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrganizationObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.OrganizationObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool active = 1;
  if (this->active() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_active(), target);
  }

  // repeated .patient.Address address = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_address_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_address(i), target, stream);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.OrganizationObject.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // repeated .patient.Identifier identifier = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifier_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_identifier(i), target, stream);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.OrganizationObject.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // .patient.ResourceType resourceType = 6;
  if (this->resourcetype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_resourcetype(), target);
  }

  // repeated .patient.Telecom telecom = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_telecom_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(7, this->_internal_telecom(i), target, stream);
  }

  // repeated .patient.Category type = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_type_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(8, this->_internal_type(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.OrganizationObject)
  return target;
}

size_t OrganizationObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.OrganizationObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Address address = 2;
  total_size += 1UL * this->_internal_address_size();
  for (const auto& msg : this->address_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Identifier identifier = 4;
  total_size += 1UL * this->_internal_identifier_size();
  for (const auto& msg : this->identifier_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Telecom telecom = 7;
  total_size += 1UL * this->_internal_telecom_size();
  for (const auto& msg : this->telecom_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Category type = 8;
  total_size += 1UL * this->_internal_type_size();
  for (const auto& msg : this->type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool active = 1;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  // .patient.ResourceType resourceType = 6;
  if (this->resourcetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resourcetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrganizationObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.OrganizationObject)
  GOOGLE_DCHECK_NE(&from, this);
  const OrganizationObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrganizationObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.OrganizationObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.OrganizationObject)
    MergeFrom(*source);
  }
}

void OrganizationObject::MergeFrom(const OrganizationObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.OrganizationObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_.MergeFrom(from.address_);
  identifier_.MergeFrom(from.identifier_);
  telecom_.MergeFrom(from.telecom_);
  type_.MergeFrom(from.type_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from.resourcetype() != 0) {
    _internal_set_resourcetype(from._internal_resourcetype());
  }
}

void OrganizationObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.OrganizationObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrganizationObject::CopyFrom(const OrganizationObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.OrganizationObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrganizationObject::IsInitialized() const {
  return true;
}

void OrganizationObject::InternalSwap(OrganizationObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.InternalSwap(&other->address_);
  identifier_.InternalSwap(&other->identifier_);
  telecom_.InternalSwap(&other->telecom_);
  type_.InternalSwap(&other->type_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(active_, other->active_);
  swap(resourcetype_, other->resourcetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrganizationObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatientObject::InitAsDefaultInstance() {
  ::patient::_PatientObject_default_instance_._instance.get_mutable()->maritalstatus_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
}
class PatientObject::_Internal {
 public:
  static const ::patient::Category& maritalstatus(const PatientObject* msg);
};

const ::patient::Category&
PatientObject::_Internal::maritalstatus(const PatientObject* msg) {
  return *msg->maritalstatus_;
}
PatientObject::PatientObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.PatientObject)
}
PatientObject::PatientObject(const PatientObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      address_(from.address_),
      communication_(from.communication_),
      extension_(from.extension_),
      identifier_(from.identifier_),
      name_(from.name_),
      telecom_(from.telecom_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  birthdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_birthdate().empty()) {
    birthdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.birthdate_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from._internal_has_maritalstatus()) {
    maritalstatus_ = new ::patient::Category(*from.maritalstatus_);
  } else {
    maritalstatus_ = nullptr;
  }
  ::memcpy(&gender_, &from.gender_,
    static_cast<size_t>(reinterpret_cast<char*>(&resourcetype_) -
    reinterpret_cast<char*>(&gender_)) + sizeof(resourcetype_));
  // @@protoc_insertion_point(copy_constructor:patient.PatientObject)
}

void PatientObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatientObject_customized_2eproto.base);
  birthdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&maritalstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resourcetype_) -
      reinterpret_cast<char*>(&maritalstatus_)) + sizeof(resourcetype_));
}

PatientObject::~PatientObject() {
  // @@protoc_insertion_point(destructor:patient.PatientObject)
  SharedDtor();
}

void PatientObject::SharedDtor() {
  birthdate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete maritalstatus_;
}

void PatientObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatientObject& PatientObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatientObject_customized_2eproto.base);
  return *internal_default_instance();
}


void PatientObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.PatientObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.Clear();
  communication_.Clear();
  extension_.Clear();
  identifier_.Clear();
  name_.Clear();
  telecom_.Clear();
  birthdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && maritalstatus_ != nullptr) {
    delete maritalstatus_;
  }
  maritalstatus_ = nullptr;
  ::memset(&gender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resourcetype_) -
      reinterpret_cast<char*>(&gender_)) + sizeof(resourcetype_));
  _internal_metadata_.Clear();
}

const char* PatientObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .patient.Address address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_address(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string birthDate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_birthdate(), ptr, ctx, "patient.PatientObject.birthDate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Communication communication = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_communication(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.Extension extension = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Gender gender = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_gender(static_cast<::patient::Gender>(val));
        } else goto handle_unusual;
        continue;
      // string id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.PatientObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Identifier identifier = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifier(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Category maritalStatus = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_maritalstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool multipleBirthBoolean = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          multiplebirthboolean_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Name name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.ResourceType resourceType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_resourcetype(static_cast<::patient::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .patient.Telecom telecom = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_telecom(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // string text = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_text(), ptr, ctx, "patient.PatientObject.text");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatientObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.PatientObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .patient.Address address = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_address_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_address(i), target, stream);
  }

  // string birthDate = 2;
  if (this->birthdate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_birthdate().data(), static_cast<int>(this->_internal_birthdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.PatientObject.birthDate");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_birthdate(), target);
  }

  // repeated .patient.Communication communication = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_communication_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_communication(i), target, stream);
  }

  // repeated .patient.Extension extension = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extension_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_extension(i), target, stream);
  }

  // .patient.Gender gender = 5;
  if (this->gender() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_gender(), target);
  }

  // string id = 6;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.PatientObject.id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_id(), target);
  }

  // repeated .patient.Identifier identifier = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifier_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(7, this->_internal_identifier(i), target, stream);
  }

  // .patient.Category maritalStatus = 8;
  if (this->has_maritalstatus()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::maritalstatus(this), target, stream);
  }

  // bool multipleBirthBoolean = 9;
  if (this->multiplebirthboolean() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_multiplebirthboolean(), target);
  }

  // repeated .patient.Name name = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_name_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(10, this->_internal_name(i), target, stream);
  }

  // .patient.ResourceType resourceType = 11;
  if (this->resourcetype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_resourcetype(), target);
  }

  // repeated .patient.Telecom telecom = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_telecom_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(12, this->_internal_telecom(i), target, stream);
  }

  // string text = 13;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.PatientObject.text");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.PatientObject)
  return target;
}

size_t PatientObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.PatientObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Address address = 1;
  total_size += 1UL * this->_internal_address_size();
  for (const auto& msg : this->address_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Communication communication = 3;
  total_size += 1UL * this->_internal_communication_size();
  for (const auto& msg : this->communication_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Extension extension = 4;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Identifier identifier = 7;
  total_size += 1UL * this->_internal_identifier_size();
  for (const auto& msg : this->identifier_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Name name = 10;
  total_size += 1UL * this->_internal_name_size();
  for (const auto& msg : this->name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Telecom telecom = 12;
  total_size += 1UL * this->_internal_telecom_size();
  for (const auto& msg : this->telecom_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string birthDate = 2;
  if (this->birthdate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_birthdate());
  }

  // string id = 6;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string text = 13;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .patient.Category maritalStatus = 8;
  if (this->has_maritalstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maritalstatus_);
  }

  // .patient.Gender gender = 5;
  if (this->gender() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gender());
  }

  // bool multipleBirthBoolean = 9;
  if (this->multiplebirthboolean() != 0) {
    total_size += 1 + 1;
  }

  // .patient.ResourceType resourceType = 11;
  if (this->resourcetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resourcetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatientObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.PatientObject)
  GOOGLE_DCHECK_NE(&from, this);
  const PatientObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatientObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.PatientObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.PatientObject)
    MergeFrom(*source);
  }
}

void PatientObject::MergeFrom(const PatientObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.PatientObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_.MergeFrom(from.address_);
  communication_.MergeFrom(from.communication_);
  extension_.MergeFrom(from.extension_);
  identifier_.MergeFrom(from.identifier_);
  name_.MergeFrom(from.name_);
  telecom_.MergeFrom(from.telecom_);
  if (from.birthdate().size() > 0) {

    birthdate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.birthdate_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_maritalstatus()) {
    _internal_mutable_maritalstatus()->::patient::Category::MergeFrom(from._internal_maritalstatus());
  }
  if (from.gender() != 0) {
    _internal_set_gender(from._internal_gender());
  }
  if (from.multiplebirthboolean() != 0) {
    _internal_set_multiplebirthboolean(from._internal_multiplebirthboolean());
  }
  if (from.resourcetype() != 0) {
    _internal_set_resourcetype(from._internal_resourcetype());
  }
}

void PatientObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.PatientObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatientObject::CopyFrom(const PatientObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.PatientObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatientObject::IsInitialized() const {
  return true;
}

void PatientObject::InternalSwap(PatientObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.InternalSwap(&other->address_);
  communication_.InternalSwap(&other->communication_);
  extension_.InternalSwap(&other->extension_);
  identifier_.InternalSwap(&other->identifier_);
  name_.InternalSwap(&other->name_);
  telecom_.InternalSwap(&other->telecom_);
  birthdate_.Swap(&other->birthdate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(maritalstatus_, other->maritalstatus_);
  swap(gender_, other->gender_);
  swap(multiplebirthboolean_, other->multiplebirthboolean_);
  swap(resourcetype_, other->resourcetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatientObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PractitionerObject::InitAsDefaultInstance() {
}
class PractitionerObject::_Internal {
 public:
};

PractitionerObject::PractitionerObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.PractitionerObject)
}
PractitionerObject::PractitionerObject(const PractitionerObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      address_(from.address_),
      identifier_(from.identifier_),
      name_(from.name_),
      telecom_(from.telecom_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&active_, &from.active_,
    static_cast<size_t>(reinterpret_cast<char*>(&resourcetype_) -
    reinterpret_cast<char*>(&active_)) + sizeof(resourcetype_));
  // @@protoc_insertion_point(copy_constructor:patient.PractitionerObject)
}

void PractitionerObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PractitionerObject_customized_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resourcetype_) -
      reinterpret_cast<char*>(&active_)) + sizeof(resourcetype_));
}

PractitionerObject::~PractitionerObject() {
  // @@protoc_insertion_point(destructor:patient.PractitionerObject)
  SharedDtor();
}

void PractitionerObject::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PractitionerObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PractitionerObject& PractitionerObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PractitionerObject_customized_2eproto.base);
  return *internal_default_instance();
}


void PractitionerObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.PractitionerObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.Clear();
  identifier_.Clear();
  name_.Clear();
  telecom_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resourcetype_) -
      reinterpret_cast<char*>(&active_)) + sizeof(resourcetype_));
  _internal_metadata_.Clear();
}

const char* PractitionerObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Address address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_address(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.Gender gender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_gender(static_cast<::patient::Gender>(val));
        } else goto handle_unusual;
        continue;
      // string id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.PractitionerObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Identifier identifier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifier(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.Name name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.ResourceType resourceType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_resourcetype(static_cast<::patient::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .patient.Telecom telecom = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_telecom(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PractitionerObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.PractitionerObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool active = 1;
  if (this->active() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_active(), target);
  }

  // repeated .patient.Address address = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_address_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_address(i), target, stream);
  }

  // .patient.Gender gender = 3;
  if (this->gender() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_gender(), target);
  }

  // string id = 4;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.PractitionerObject.id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_id(), target);
  }

  // repeated .patient.Identifier identifier = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_identifier_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_identifier(i), target, stream);
  }

  // repeated .patient.Name name = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_name_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_name(i), target, stream);
  }

  // .patient.ResourceType resourceType = 7;
  if (this->resourcetype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_resourcetype(), target);
  }

  // repeated .patient.Telecom telecom = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_telecom_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(8, this->_internal_telecom(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.PractitionerObject)
  return target;
}

size_t PractitionerObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.PractitionerObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Address address = 2;
  total_size += 1UL * this->_internal_address_size();
  for (const auto& msg : this->address_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Identifier identifier = 5;
  total_size += 1UL * this->_internal_identifier_size();
  for (const auto& msg : this->identifier_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Name name = 6;
  total_size += 1UL * this->_internal_name_size();
  for (const auto& msg : this->name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.Telecom telecom = 8;
  total_size += 1UL * this->_internal_telecom_size();
  for (const auto& msg : this->telecom_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 4;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bool active = 1;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  // .patient.Gender gender = 3;
  if (this->gender() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gender());
  }

  // .patient.ResourceType resourceType = 7;
  if (this->resourcetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resourcetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PractitionerObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.PractitionerObject)
  GOOGLE_DCHECK_NE(&from, this);
  const PractitionerObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PractitionerObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.PractitionerObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.PractitionerObject)
    MergeFrom(*source);
  }
}

void PractitionerObject::MergeFrom(const PractitionerObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.PractitionerObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_.MergeFrom(from.address_);
  identifier_.MergeFrom(from.identifier_);
  name_.MergeFrom(from.name_);
  telecom_.MergeFrom(from.telecom_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from.gender() != 0) {
    _internal_set_gender(from._internal_gender());
  }
  if (from.resourcetype() != 0) {
    _internal_set_resourcetype(from._internal_resourcetype());
  }
}

void PractitionerObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.PractitionerObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PractitionerObject::CopyFrom(const PractitionerObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.PractitionerObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PractitionerObject::IsInitialized() const {
  return true;
}

void PractitionerObject::InternalSwap(PractitionerObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.InternalSwap(&other->address_);
  identifier_.InternalSwap(&other->identifier_);
  name_.InternalSwap(&other->name_);
  telecom_.InternalSwap(&other->telecom_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(active_, other->active_);
  swap(gender_, other->gender_);
  swap(resourcetype_, other->resourcetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PractitionerObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcedureObject::InitAsDefaultInstance() {
  ::patient::_ProcedureObject_default_instance_._instance.get_mutable()->code_ = const_cast< ::patient::Category*>(
      ::patient::Category::internal_default_instance());
  ::patient::_ProcedureObject_default_instance_._instance.get_mutable()->encounter_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
  ::patient::_ProcedureObject_default_instance_._instance.get_mutable()->performedperiod_ = const_cast< ::patient::Period*>(
      ::patient::Period::internal_default_instance());
  ::patient::_ProcedureObject_default_instance_._instance.get_mutable()->subject_ = const_cast< ::patient::Reference*>(
      ::patient::Reference::internal_default_instance());
}
class ProcedureObject::_Internal {
 public:
  static const ::patient::Category& code(const ProcedureObject* msg);
  static const ::patient::Reference& encounter(const ProcedureObject* msg);
  static const ::patient::Period& performedperiod(const ProcedureObject* msg);
  static const ::patient::Reference& subject(const ProcedureObject* msg);
};

const ::patient::Category&
ProcedureObject::_Internal::code(const ProcedureObject* msg) {
  return *msg->code_;
}
const ::patient::Reference&
ProcedureObject::_Internal::encounter(const ProcedureObject* msg) {
  return *msg->encounter_;
}
const ::patient::Period&
ProcedureObject::_Internal::performedperiod(const ProcedureObject* msg) {
  return *msg->performedperiod_;
}
const ::patient::Reference&
ProcedureObject::_Internal::subject(const ProcedureObject* msg) {
  return *msg->subject_;
}
ProcedureObject::ProcedureObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.ProcedureObject)
}
ProcedureObject::ProcedureObject(const ProcedureObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      reasonreference_(from.reasonreference_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_code()) {
    code_ = new ::patient::Category(*from.code_);
  } else {
    code_ = nullptr;
  }
  if (from._internal_has_encounter()) {
    encounter_ = new ::patient::Reference(*from.encounter_);
  } else {
    encounter_ = nullptr;
  }
  if (from._internal_has_performedperiod()) {
    performedperiod_ = new ::patient::Period(*from.performedperiod_);
  } else {
    performedperiod_ = nullptr;
  }
  if (from._internal_has_subject()) {
    subject_ = new ::patient::Reference(*from.subject_);
  } else {
    subject_ = nullptr;
  }
  ::memcpy(&resourcetype_, &from.resourcetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&resourcetype_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:patient.ProcedureObject)
}

void ProcedureObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcedureObject_customized_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&code_)) + sizeof(status_));
}

ProcedureObject::~ProcedureObject() {
  // @@protoc_insertion_point(destructor:patient.ProcedureObject)
  SharedDtor();
}

void ProcedureObject::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete code_;
  if (this != internal_default_instance()) delete encounter_;
  if (this != internal_default_instance()) delete performedperiod_;
  if (this != internal_default_instance()) delete subject_;
}

void ProcedureObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcedureObject& ProcedureObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcedureObject_customized_2eproto.base);
  return *internal_default_instance();
}


void ProcedureObject::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.ProcedureObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reasonreference_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && performedperiod_ != nullptr) {
    delete performedperiod_;
  }
  performedperiod_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
  ::memset(&resourcetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&resourcetype_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* ProcedureObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.Category code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Reference encounter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_encounter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "patient.ProcedureObject.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .patient.Period performedPeriod = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_performedperiod(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.Reference reasonReference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reasonreference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .patient.ResourceType resourceType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_resourcetype(static_cast<::patient::ResourceType>(val));
        } else goto handle_unusual;
        continue;
      // .patient.Status status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::patient::Status>(val));
        } else goto handle_unusual;
        continue;
      // .patient.Reference subject = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcedureObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.ProcedureObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.Category code = 1;
  if (this->has_code()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::code(this), target, stream);
  }

  // .patient.Reference encounter = 2;
  if (this->has_encounter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::encounter(this), target, stream);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "patient.ProcedureObject.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // .patient.Period performedPeriod = 4;
  if (this->has_performedperiod()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::performedperiod(this), target, stream);
  }

  // repeated .patient.Reference reasonReference = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reasonreference_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_reasonreference(i), target, stream);
  }

  // .patient.ResourceType resourceType = 6;
  if (this->resourcetype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_resourcetype(), target);
  }

  // .patient.Status status = 7;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_status(), target);
  }

  // .patient.Reference subject = 8;
  if (this->has_subject()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::subject(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.ProcedureObject)
  return target;
}

size_t ProcedureObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.ProcedureObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.Reference reasonReference = 5;
  total_size += 1UL * this->_internal_reasonreference_size();
  for (const auto& msg : this->reasonreference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .patient.Category code = 1;
  if (this->has_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *code_);
  }

  // .patient.Reference encounter = 2;
  if (this->has_encounter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encounter_);
  }

  // .patient.Period performedPeriod = 4;
  if (this->has_performedperiod()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *performedperiod_);
  }

  // .patient.Reference subject = 8;
  if (this->has_subject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subject_);
  }

  // .patient.ResourceType resourceType = 6;
  if (this->resourcetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resourcetype());
  }

  // .patient.Status status = 7;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcedureObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.ProcedureObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcedureObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcedureObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.ProcedureObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.ProcedureObject)
    MergeFrom(*source);
  }
}

void ProcedureObject::MergeFrom(const ProcedureObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.ProcedureObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reasonreference_.MergeFrom(from.reasonreference_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_code()) {
    _internal_mutable_code()->::patient::Category::MergeFrom(from._internal_code());
  }
  if (from.has_encounter()) {
    _internal_mutable_encounter()->::patient::Reference::MergeFrom(from._internal_encounter());
  }
  if (from.has_performedperiod()) {
    _internal_mutable_performedperiod()->::patient::Period::MergeFrom(from._internal_performedperiod());
  }
  if (from.has_subject()) {
    _internal_mutable_subject()->::patient::Reference::MergeFrom(from._internal_subject());
  }
  if (from.resourcetype() != 0) {
    _internal_set_resourcetype(from._internal_resourcetype());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ProcedureObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.ProcedureObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcedureObject::CopyFrom(const ProcedureObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.ProcedureObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcedureObject::IsInitialized() const {
  return true;
}

void ProcedureObject::InternalSwap(ProcedureObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reasonreference_.InternalSwap(&other->reasonreference_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(encounter_, other->encounter_);
  swap(performedperiod_, other->performedperiod_);
  swap(subject_, other->subject_);
  swap(resourcetype_, other->resourcetype_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcedureObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatientRecord::InitAsDefaultInstance() {
  ::patient::_PatientRecord_default_instance_._instance.get_mutable()->patient_ = const_cast< ::patient::PatientObject*>(
      ::patient::PatientObject::internal_default_instance());
}
class PatientRecord::_Internal {
 public:
  static const ::patient::PatientObject& patient(const PatientRecord* msg);
};

const ::patient::PatientObject&
PatientRecord::_Internal::patient(const PatientRecord* msg) {
  return *msg->patient_;
}
PatientRecord::PatientRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patient.PatientRecord)
}
PatientRecord::PatientRecord(const PatientRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      careplan_(from.careplan_),
      careteam_(from.careteam_),
      claim_(from.claim_),
      condition_(from.condition_),
      diagnosticreport_(from.diagnosticreport_),
      encounter_(from.encounter_),
      explanationofbenefit_(from.explanationofbenefit_),
      immunization_(from.immunization_),
      medicationrequest_(from.medicationrequest_),
      observation_(from.observation_),
      organiation_(from.organiation_),
      practitioner_(from.practitioner_),
      procedure_(from.procedure_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_patient()) {
    patient_ = new ::patient::PatientObject(*from.patient_);
  } else {
    patient_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:patient.PatientRecord)
}

void PatientRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatientRecord_customized_2eproto.base);
  patient_ = nullptr;
}

PatientRecord::~PatientRecord() {
  // @@protoc_insertion_point(destructor:patient.PatientRecord)
  SharedDtor();
}

void PatientRecord::SharedDtor() {
  if (this != internal_default_instance()) delete patient_;
}

void PatientRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatientRecord& PatientRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatientRecord_customized_2eproto.base);
  return *internal_default_instance();
}


void PatientRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:patient.PatientRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  careplan_.Clear();
  careteam_.Clear();
  claim_.Clear();
  condition_.Clear();
  diagnosticreport_.Clear();
  encounter_.Clear();
  explanationofbenefit_.Clear();
  immunization_.Clear();
  medicationrequest_.Clear();
  observation_.Clear();
  organiation_.Clear();
  practitioner_.Clear();
  procedure_.Clear();
  if (GetArenaNoVirtual() == nullptr && patient_ != nullptr) {
    delete patient_;
  }
  patient_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PatientRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .patient.PatientObject patient = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_patient(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .patient.CarePlanObject carePlan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_careplan(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.CareTeamObject careTeam = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_careteam(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.ClaimObject claim = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_claim(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.ConditionObject condition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_condition(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.DiagnosticReportObject diagnosticReport = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_diagnosticreport(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.EncounterObject encounter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_encounter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.ExplanationOfBenefitObject explanationOfBenefit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_explanationofbenefit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.ImmunizationObject immunization = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_immunization(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.MedicationRequestObject medicationRequest = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_medicationrequest(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.ObservationObject observation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_observation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.OrganizationObject organiation = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_organiation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.PractitionerObject practitioner = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_practitioner(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .patient.ProcedureObject procedure = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_procedure(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatientRecord::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:patient.PatientRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .patient.PatientObject patient = 1;
  if (this->has_patient()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::patient(this), target, stream);
  }

  // repeated .patient.CarePlanObject carePlan = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_careplan_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_careplan(i), target, stream);
  }

  // repeated .patient.CareTeamObject careTeam = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_careteam_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_careteam(i), target, stream);
  }

  // repeated .patient.ClaimObject claim = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_claim_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_claim(i), target, stream);
  }

  // repeated .patient.ConditionObject condition = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_condition_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_condition(i), target, stream);
  }

  // repeated .patient.DiagnosticReportObject diagnosticReport = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_diagnosticreport_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_diagnosticreport(i), target, stream);
  }

  // repeated .patient.EncounterObject encounter = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_encounter_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(7, this->_internal_encounter(i), target, stream);
  }

  // repeated .patient.ExplanationOfBenefitObject explanationOfBenefit = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_explanationofbenefit_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(8, this->_internal_explanationofbenefit(i), target, stream);
  }

  // repeated .patient.ImmunizationObject immunization = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_immunization_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(9, this->_internal_immunization(i), target, stream);
  }

  // repeated .patient.MedicationRequestObject medicationRequest = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_medicationrequest_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(10, this->_internal_medicationrequest(i), target, stream);
  }

  // repeated .patient.ObservationObject observation = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_observation_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(11, this->_internal_observation(i), target, stream);
  }

  // repeated .patient.OrganizationObject organiation = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_organiation_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(12, this->_internal_organiation(i), target, stream);
  }

  // repeated .patient.PractitionerObject practitioner = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_practitioner_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(13, this->_internal_practitioner(i), target, stream);
  }

  // repeated .patient.ProcedureObject procedure = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_procedure_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(14, this->_internal_procedure(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patient.PatientRecord)
  return target;
}

size_t PatientRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patient.PatientRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .patient.CarePlanObject carePlan = 2;
  total_size += 1UL * this->_internal_careplan_size();
  for (const auto& msg : this->careplan_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.CareTeamObject careTeam = 3;
  total_size += 1UL * this->_internal_careteam_size();
  for (const auto& msg : this->careteam_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.ClaimObject claim = 4;
  total_size += 1UL * this->_internal_claim_size();
  for (const auto& msg : this->claim_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.ConditionObject condition = 5;
  total_size += 1UL * this->_internal_condition_size();
  for (const auto& msg : this->condition_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.DiagnosticReportObject diagnosticReport = 6;
  total_size += 1UL * this->_internal_diagnosticreport_size();
  for (const auto& msg : this->diagnosticreport_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.EncounterObject encounter = 7;
  total_size += 1UL * this->_internal_encounter_size();
  for (const auto& msg : this->encounter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.ExplanationOfBenefitObject explanationOfBenefit = 8;
  total_size += 1UL * this->_internal_explanationofbenefit_size();
  for (const auto& msg : this->explanationofbenefit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.ImmunizationObject immunization = 9;
  total_size += 1UL * this->_internal_immunization_size();
  for (const auto& msg : this->immunization_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.MedicationRequestObject medicationRequest = 10;
  total_size += 1UL * this->_internal_medicationrequest_size();
  for (const auto& msg : this->medicationrequest_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.ObservationObject observation = 11;
  total_size += 1UL * this->_internal_observation_size();
  for (const auto& msg : this->observation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.OrganizationObject organiation = 12;
  total_size += 1UL * this->_internal_organiation_size();
  for (const auto& msg : this->organiation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.PractitionerObject practitioner = 13;
  total_size += 1UL * this->_internal_practitioner_size();
  for (const auto& msg : this->practitioner_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .patient.ProcedureObject procedure = 14;
  total_size += 1UL * this->_internal_procedure_size();
  for (const auto& msg : this->procedure_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .patient.PatientObject patient = 1;
  if (this->has_patient()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patient_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatientRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patient.PatientRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const PatientRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatientRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patient.PatientRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patient.PatientRecord)
    MergeFrom(*source);
  }
}

void PatientRecord::MergeFrom(const PatientRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patient.PatientRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  careplan_.MergeFrom(from.careplan_);
  careteam_.MergeFrom(from.careteam_);
  claim_.MergeFrom(from.claim_);
  condition_.MergeFrom(from.condition_);
  diagnosticreport_.MergeFrom(from.diagnosticreport_);
  encounter_.MergeFrom(from.encounter_);
  explanationofbenefit_.MergeFrom(from.explanationofbenefit_);
  immunization_.MergeFrom(from.immunization_);
  medicationrequest_.MergeFrom(from.medicationrequest_);
  observation_.MergeFrom(from.observation_);
  organiation_.MergeFrom(from.organiation_);
  practitioner_.MergeFrom(from.practitioner_);
  procedure_.MergeFrom(from.procedure_);
  if (from.has_patient()) {
    _internal_mutable_patient()->::patient::PatientObject::MergeFrom(from._internal_patient());
  }
}

void PatientRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patient.PatientRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatientRecord::CopyFrom(const PatientRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patient.PatientRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatientRecord::IsInitialized() const {
  return true;
}

void PatientRecord::InternalSwap(PatientRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  careplan_.InternalSwap(&other->careplan_);
  careteam_.InternalSwap(&other->careteam_);
  claim_.InternalSwap(&other->claim_);
  condition_.InternalSwap(&other->condition_);
  diagnosticreport_.InternalSwap(&other->diagnosticreport_);
  encounter_.InternalSwap(&other->encounter_);
  explanationofbenefit_.InternalSwap(&other->explanationofbenefit_);
  immunization_.InternalSwap(&other->immunization_);
  medicationrequest_.InternalSwap(&other->medicationrequest_);
  observation_.InternalSwap(&other->observation_);
  organiation_.InternalSwap(&other->organiation_);
  practitioner_.InternalSwap(&other->practitioner_);
  procedure_.InternalSwap(&other->procedure_);
  swap(patient_, other->patient_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatientRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace patient
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::patient::Activity* Arena::CreateMaybeMessage< ::patient::Activity >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Activity >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Address* Arena::CreateMaybeMessage< ::patient::Address >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Address >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Adjudication* Arena::CreateMaybeMessage< ::patient::Adjudication >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Adjudication >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Amount* Arena::CreateMaybeMessage< ::patient::Amount >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Amount >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::CareTeam* Arena::CreateMaybeMessage< ::patient::CareTeam >(Arena* arena) {
  return Arena::CreateInternal< ::patient::CareTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Communication* Arena::CreateMaybeMessage< ::patient::Communication >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Communication >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Component* Arena::CreateMaybeMessage< ::patient::Component >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Component >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Contained* Arena::CreateMaybeMessage< ::patient::Contained >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Contained >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Detail* Arena::CreateMaybeMessage< ::patient::Detail >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Detail >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Diagnosis* Arena::CreateMaybeMessage< ::patient::Diagnosis >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Diagnosis >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Entry* Arena::CreateMaybeMessage< ::patient::Entry >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Extension* Arena::CreateMaybeMessage< ::patient::Extension >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Extension >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Identifier* Arena::CreateMaybeMessage< ::patient::Identifier >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Identifier >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Insurance* Arena::CreateMaybeMessage< ::patient::Insurance >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Insurance >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Item* Arena::CreateMaybeMessage< ::patient::Item >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Item >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Name* Arena::CreateMaybeMessage< ::patient::Name >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Name >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Participant* Arena::CreateMaybeMessage< ::patient::Participant >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Participant >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Payment* Arena::CreateMaybeMessage< ::patient::Payment >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Payment >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Procedure* Arena::CreateMaybeMessage< ::patient::Procedure >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Procedure >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Request* Arena::CreateMaybeMessage< ::patient::Request >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Root* Arena::CreateMaybeMessage< ::patient::Root >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Root >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::SupportingInfo* Arena::CreateMaybeMessage< ::patient::SupportingInfo >(Arena* arena) {
  return Arena::CreateInternal< ::patient::SupportingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Telecom* Arena::CreateMaybeMessage< ::patient::Telecom >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Telecom >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Text* Arena::CreateMaybeMessage< ::patient::Text >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Text >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Total* Arena::CreateMaybeMessage< ::patient::Total >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Total >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Coding* Arena::CreateMaybeMessage< ::patient::Coding >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Coding >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Quantity* Arena::CreateMaybeMessage< ::patient::Quantity >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Quantity >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Reference* Arena::CreateMaybeMessage< ::patient::Reference >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Reference >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Category* Arena::CreateMaybeMessage< ::patient::Category >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Category >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Period* Arena::CreateMaybeMessage< ::patient::Period >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Period >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::Resource* Arena::CreateMaybeMessage< ::patient::Resource >(Arena* arena) {
  return Arena::CreateInternal< ::patient::Resource >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::CarePlanObject* Arena::CreateMaybeMessage< ::patient::CarePlanObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::CarePlanObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::CareTeamObject* Arena::CreateMaybeMessage< ::patient::CareTeamObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::CareTeamObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::ClaimObject* Arena::CreateMaybeMessage< ::patient::ClaimObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::ClaimObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::ConditionObject* Arena::CreateMaybeMessage< ::patient::ConditionObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::ConditionObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::DiagnosticReportObject* Arena::CreateMaybeMessage< ::patient::DiagnosticReportObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::DiagnosticReportObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::EncounterObject* Arena::CreateMaybeMessage< ::patient::EncounterObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::EncounterObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::ExplanationOfBenefitObject* Arena::CreateMaybeMessage< ::patient::ExplanationOfBenefitObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::ExplanationOfBenefitObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::ImmunizationObject* Arena::CreateMaybeMessage< ::patient::ImmunizationObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::ImmunizationObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::MedicationRequestObject* Arena::CreateMaybeMessage< ::patient::MedicationRequestObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::MedicationRequestObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::ObservationObject* Arena::CreateMaybeMessage< ::patient::ObservationObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::ObservationObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::OrganizationObject* Arena::CreateMaybeMessage< ::patient::OrganizationObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::OrganizationObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::PatientObject* Arena::CreateMaybeMessage< ::patient::PatientObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::PatientObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::PractitionerObject* Arena::CreateMaybeMessage< ::patient::PractitionerObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::PractitionerObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::ProcedureObject* Arena::CreateMaybeMessage< ::patient::ProcedureObject >(Arena* arena) {
  return Arena::CreateInternal< ::patient::ProcedureObject >(arena);
}
template<> PROTOBUF_NOINLINE ::patient::PatientRecord* Arena::CreateMaybeMessage< ::patient::PatientRecord >(Arena* arena) {
  return Arena::CreateInternal< ::patient::PatientRecord >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
