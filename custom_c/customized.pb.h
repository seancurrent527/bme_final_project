// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: customized.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_customized_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_customized_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_customized_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_customized_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[46]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_customized_2eproto;
namespace patient {
class Activity;
class ActivityDefaultTypeInternal;
extern ActivityDefaultTypeInternal _Activity_default_instance_;
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class Adjudication;
class AdjudicationDefaultTypeInternal;
extern AdjudicationDefaultTypeInternal _Adjudication_default_instance_;
class Amount;
class AmountDefaultTypeInternal;
extern AmountDefaultTypeInternal _Amount_default_instance_;
class CarePlanObject;
class CarePlanObjectDefaultTypeInternal;
extern CarePlanObjectDefaultTypeInternal _CarePlanObject_default_instance_;
class CareTeam;
class CareTeamDefaultTypeInternal;
extern CareTeamDefaultTypeInternal _CareTeam_default_instance_;
class CareTeamObject;
class CareTeamObjectDefaultTypeInternal;
extern CareTeamObjectDefaultTypeInternal _CareTeamObject_default_instance_;
class Category;
class CategoryDefaultTypeInternal;
extern CategoryDefaultTypeInternal _Category_default_instance_;
class ClaimObject;
class ClaimObjectDefaultTypeInternal;
extern ClaimObjectDefaultTypeInternal _ClaimObject_default_instance_;
class Coding;
class CodingDefaultTypeInternal;
extern CodingDefaultTypeInternal _Coding_default_instance_;
class Communication;
class CommunicationDefaultTypeInternal;
extern CommunicationDefaultTypeInternal _Communication_default_instance_;
class Component;
class ComponentDefaultTypeInternal;
extern ComponentDefaultTypeInternal _Component_default_instance_;
class ConditionObject;
class ConditionObjectDefaultTypeInternal;
extern ConditionObjectDefaultTypeInternal _ConditionObject_default_instance_;
class Contained;
class ContainedDefaultTypeInternal;
extern ContainedDefaultTypeInternal _Contained_default_instance_;
class Detail;
class DetailDefaultTypeInternal;
extern DetailDefaultTypeInternal _Detail_default_instance_;
class Diagnosis;
class DiagnosisDefaultTypeInternal;
extern DiagnosisDefaultTypeInternal _Diagnosis_default_instance_;
class DiagnosticReportObject;
class DiagnosticReportObjectDefaultTypeInternal;
extern DiagnosticReportObjectDefaultTypeInternal _DiagnosticReportObject_default_instance_;
class EncounterObject;
class EncounterObjectDefaultTypeInternal;
extern EncounterObjectDefaultTypeInternal _EncounterObject_default_instance_;
class Entry;
class EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class ExplanationOfBenefitObject;
class ExplanationOfBenefitObjectDefaultTypeInternal;
extern ExplanationOfBenefitObjectDefaultTypeInternal _ExplanationOfBenefitObject_default_instance_;
class Extension;
class ExtensionDefaultTypeInternal;
extern ExtensionDefaultTypeInternal _Extension_default_instance_;
class Identifier;
class IdentifierDefaultTypeInternal;
extern IdentifierDefaultTypeInternal _Identifier_default_instance_;
class ImmunizationObject;
class ImmunizationObjectDefaultTypeInternal;
extern ImmunizationObjectDefaultTypeInternal _ImmunizationObject_default_instance_;
class Insurance;
class InsuranceDefaultTypeInternal;
extern InsuranceDefaultTypeInternal _Insurance_default_instance_;
class Item;
class ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class MedicationRequestObject;
class MedicationRequestObjectDefaultTypeInternal;
extern MedicationRequestObjectDefaultTypeInternal _MedicationRequestObject_default_instance_;
class Name;
class NameDefaultTypeInternal;
extern NameDefaultTypeInternal _Name_default_instance_;
class ObservationObject;
class ObservationObjectDefaultTypeInternal;
extern ObservationObjectDefaultTypeInternal _ObservationObject_default_instance_;
class OrganizationObject;
class OrganizationObjectDefaultTypeInternal;
extern OrganizationObjectDefaultTypeInternal _OrganizationObject_default_instance_;
class Participant;
class ParticipantDefaultTypeInternal;
extern ParticipantDefaultTypeInternal _Participant_default_instance_;
class PatientObject;
class PatientObjectDefaultTypeInternal;
extern PatientObjectDefaultTypeInternal _PatientObject_default_instance_;
class PatientRecord;
class PatientRecordDefaultTypeInternal;
extern PatientRecordDefaultTypeInternal _PatientRecord_default_instance_;
class Payment;
class PaymentDefaultTypeInternal;
extern PaymentDefaultTypeInternal _Payment_default_instance_;
class Period;
class PeriodDefaultTypeInternal;
extern PeriodDefaultTypeInternal _Period_default_instance_;
class PractitionerObject;
class PractitionerObjectDefaultTypeInternal;
extern PractitionerObjectDefaultTypeInternal _PractitionerObject_default_instance_;
class Procedure;
class ProcedureDefaultTypeInternal;
extern ProcedureDefaultTypeInternal _Procedure_default_instance_;
class ProcedureObject;
class ProcedureObjectDefaultTypeInternal;
extern ProcedureObjectDefaultTypeInternal _ProcedureObject_default_instance_;
class Quantity;
class QuantityDefaultTypeInternal;
extern QuantityDefaultTypeInternal _Quantity_default_instance_;
class Reference;
class ReferenceDefaultTypeInternal;
extern ReferenceDefaultTypeInternal _Reference_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Resource;
class ResourceDefaultTypeInternal;
extern ResourceDefaultTypeInternal _Resource_default_instance_;
class Root;
class RootDefaultTypeInternal;
extern RootDefaultTypeInternal _Root_default_instance_;
class SupportingInfo;
class SupportingInfoDefaultTypeInternal;
extern SupportingInfoDefaultTypeInternal _SupportingInfo_default_instance_;
class Telecom;
class TelecomDefaultTypeInternal;
extern TelecomDefaultTypeInternal _Telecom_default_instance_;
class Text;
class TextDefaultTypeInternal;
extern TextDefaultTypeInternal _Text_default_instance_;
class Total;
class TotalDefaultTypeInternal;
extern TotalDefaultTypeInternal _Total_default_instance_;
}  // namespace patient
PROTOBUF_NAMESPACE_OPEN
template<> ::patient::Activity* Arena::CreateMaybeMessage<::patient::Activity>(Arena*);
template<> ::patient::Address* Arena::CreateMaybeMessage<::patient::Address>(Arena*);
template<> ::patient::Adjudication* Arena::CreateMaybeMessage<::patient::Adjudication>(Arena*);
template<> ::patient::Amount* Arena::CreateMaybeMessage<::patient::Amount>(Arena*);
template<> ::patient::CarePlanObject* Arena::CreateMaybeMessage<::patient::CarePlanObject>(Arena*);
template<> ::patient::CareTeam* Arena::CreateMaybeMessage<::patient::CareTeam>(Arena*);
template<> ::patient::CareTeamObject* Arena::CreateMaybeMessage<::patient::CareTeamObject>(Arena*);
template<> ::patient::Category* Arena::CreateMaybeMessage<::patient::Category>(Arena*);
template<> ::patient::ClaimObject* Arena::CreateMaybeMessage<::patient::ClaimObject>(Arena*);
template<> ::patient::Coding* Arena::CreateMaybeMessage<::patient::Coding>(Arena*);
template<> ::patient::Communication* Arena::CreateMaybeMessage<::patient::Communication>(Arena*);
template<> ::patient::Component* Arena::CreateMaybeMessage<::patient::Component>(Arena*);
template<> ::patient::ConditionObject* Arena::CreateMaybeMessage<::patient::ConditionObject>(Arena*);
template<> ::patient::Contained* Arena::CreateMaybeMessage<::patient::Contained>(Arena*);
template<> ::patient::Detail* Arena::CreateMaybeMessage<::patient::Detail>(Arena*);
template<> ::patient::Diagnosis* Arena::CreateMaybeMessage<::patient::Diagnosis>(Arena*);
template<> ::patient::DiagnosticReportObject* Arena::CreateMaybeMessage<::patient::DiagnosticReportObject>(Arena*);
template<> ::patient::EncounterObject* Arena::CreateMaybeMessage<::patient::EncounterObject>(Arena*);
template<> ::patient::Entry* Arena::CreateMaybeMessage<::patient::Entry>(Arena*);
template<> ::patient::ExplanationOfBenefitObject* Arena::CreateMaybeMessage<::patient::ExplanationOfBenefitObject>(Arena*);
template<> ::patient::Extension* Arena::CreateMaybeMessage<::patient::Extension>(Arena*);
template<> ::patient::Identifier* Arena::CreateMaybeMessage<::patient::Identifier>(Arena*);
template<> ::patient::ImmunizationObject* Arena::CreateMaybeMessage<::patient::ImmunizationObject>(Arena*);
template<> ::patient::Insurance* Arena::CreateMaybeMessage<::patient::Insurance>(Arena*);
template<> ::patient::Item* Arena::CreateMaybeMessage<::patient::Item>(Arena*);
template<> ::patient::MedicationRequestObject* Arena::CreateMaybeMessage<::patient::MedicationRequestObject>(Arena*);
template<> ::patient::Name* Arena::CreateMaybeMessage<::patient::Name>(Arena*);
template<> ::patient::ObservationObject* Arena::CreateMaybeMessage<::patient::ObservationObject>(Arena*);
template<> ::patient::OrganizationObject* Arena::CreateMaybeMessage<::patient::OrganizationObject>(Arena*);
template<> ::patient::Participant* Arena::CreateMaybeMessage<::patient::Participant>(Arena*);
template<> ::patient::PatientObject* Arena::CreateMaybeMessage<::patient::PatientObject>(Arena*);
template<> ::patient::PatientRecord* Arena::CreateMaybeMessage<::patient::PatientRecord>(Arena*);
template<> ::patient::Payment* Arena::CreateMaybeMessage<::patient::Payment>(Arena*);
template<> ::patient::Period* Arena::CreateMaybeMessage<::patient::Period>(Arena*);
template<> ::patient::PractitionerObject* Arena::CreateMaybeMessage<::patient::PractitionerObject>(Arena*);
template<> ::patient::Procedure* Arena::CreateMaybeMessage<::patient::Procedure>(Arena*);
template<> ::patient::ProcedureObject* Arena::CreateMaybeMessage<::patient::ProcedureObject>(Arena*);
template<> ::patient::Quantity* Arena::CreateMaybeMessage<::patient::Quantity>(Arena*);
template<> ::patient::Reference* Arena::CreateMaybeMessage<::patient::Reference>(Arena*);
template<> ::patient::Request* Arena::CreateMaybeMessage<::patient::Request>(Arena*);
template<> ::patient::Resource* Arena::CreateMaybeMessage<::patient::Resource>(Arena*);
template<> ::patient::Root* Arena::CreateMaybeMessage<::patient::Root>(Arena*);
template<> ::patient::SupportingInfo* Arena::CreateMaybeMessage<::patient::SupportingInfo>(Arena*);
template<> ::patient::Telecom* Arena::CreateMaybeMessage<::patient::Telecom>(Arena*);
template<> ::patient::Text* Arena::CreateMaybeMessage<::patient::Text>(Arena*);
template<> ::patient::Total* Arena::CreateMaybeMessage<::patient::Total>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace patient {

enum Status : int {
  ACTIVE = 0,
  COMPLETED = 1,
  FINAL = 2,
  STOPPED = 3,
  INACTIVE = 4,
  FINISHED = 5,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Status_IsValid(int value);
constexpr Status Status_MIN = ACTIVE;
constexpr Status Status_MAX = FINISHED;
constexpr int Status_ARRAYSIZE = Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor();
template<typename T>
inline const std::string& Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_descriptor(), enum_t_value);
}
inline bool Status_Parse(
    const std::string& name, Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
enum Gender : int {
  MALE = 0,
  FEMALE = 1,
  OTHER = 2,
  Gender_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Gender_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Gender_IsValid(int value);
constexpr Gender Gender_MIN = MALE;
constexpr Gender Gender_MAX = OTHER;
constexpr int Gender_ARRAYSIZE = Gender_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gender_descriptor();
template<typename T>
inline const std::string& Gender_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Gender>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Gender_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Gender_descriptor(), enum_t_value);
}
inline bool Gender_Parse(
    const std::string& name, Gender* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Gender>(
    Gender_descriptor(), name, value);
}
enum ResourceType : int {
  CARE_PLAN = 0,
  CARE_TEAM = 1,
  CLAIM = 2,
  CONDITION = 3,
  DIAGNOSTIC_REPORT = 4,
  ENCOUNTER = 5,
  EXPLANATION_OF_BENEFIT = 6,
  IMMUNIZATION = 7,
  MEDICATION_REQUEST = 8,
  OBSERVATION = 9,
  ORGANIZATION = 10,
  PATIENT = 11,
  PRACTITIONER = 12,
  PROCEDURE = 13,
  ResourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResourceType_IsValid(int value);
constexpr ResourceType ResourceType_MIN = CARE_PLAN;
constexpr ResourceType ResourceType_MAX = PROCEDURE;
constexpr int ResourceType_ARRAYSIZE = ResourceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResourceType_descriptor();
template<typename T>
inline const std::string& ResourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResourceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResourceType_descriptor(), enum_t_value);
}
inline bool ResourceType_Parse(
    const std::string& name, ResourceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResourceType>(
    ResourceType_descriptor(), name, value);
}
// ===================================================================

class Activity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Activity) */ {
 public:
  Activity();
  virtual ~Activity();

  Activity(const Activity& from);
  Activity(Activity&& from) noexcept
    : Activity() {
    *this = ::std::move(from);
  }

  inline Activity& operator=(const Activity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Activity& operator=(Activity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Activity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Activity* internal_default_instance() {
    return reinterpret_cast<const Activity*>(
               &_Activity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Activity& a, Activity& b) {
    a.Swap(&b);
  }
  inline void Swap(Activity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Activity* New() const final {
    return CreateMaybeMessage<Activity>(nullptr);
  }

  Activity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Activity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Activity& from);
  void MergeFrom(const Activity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Activity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Activity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailFieldNumber = 1,
  };
  // repeated .patient.Detail detail = 1;
  int detail_size() const;
  private:
  int _internal_detail_size() const;
  public:
  void clear_detail();
  ::patient::Detail* mutable_detail(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Detail >*
      mutable_detail();
  private:
  const ::patient::Detail& _internal_detail(int index) const;
  ::patient::Detail* _internal_add_detail();
  public:
  const ::patient::Detail& detail(int index) const;
  ::patient::Detail* add_detail();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Detail >&
      detail() const;

  // @@protoc_insertion_point(class_scope:patient.Activity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Detail > detail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Address :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Address) */ {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address& operator=(Address&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Address& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }
  inline void Swap(Address* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const final {
    return CreateMaybeMessage<Address>(nullptr);
  }

  Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Address";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionFieldNumber = 3,
    kLineFieldNumber = 4,
    kCityFieldNumber = 1,
    kCountryFieldNumber = 2,
    kPostalCodeFieldNumber = 5,
    kStateFieldNumber = 6,
  };
  // repeated .patient.Extension extension = 3;
  int extension_size() const;
  private:
  int _internal_extension_size() const;
  public:
  void clear_extension();
  ::patient::Extension* mutable_extension(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Extension >*
      mutable_extension();
  private:
  const ::patient::Extension& _internal_extension(int index) const;
  ::patient::Extension* _internal_add_extension();
  public:
  const ::patient::Extension& extension(int index) const;
  ::patient::Extension* add_extension();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Extension >&
      extension() const;

  // repeated string line = 4;
  int line_size() const;
  private:
  int _internal_line_size() const;
  public:
  void clear_line();
  const std::string& line(int index) const;
  std::string* mutable_line(int index);
  void set_line(int index, const std::string& value);
  void set_line(int index, std::string&& value);
  void set_line(int index, const char* value);
  void set_line(int index, const char* value, size_t size);
  std::string* add_line();
  void add_line(const std::string& value);
  void add_line(std::string&& value);
  void add_line(const char* value);
  void add_line(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& line() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_line();
  private:
  const std::string& _internal_line(int index) const;
  std::string* _internal_add_line();
  public:

  // string city = 1;
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // string country = 2;
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string postalCode = 5;
  void clear_postalcode();
  const std::string& postalcode() const;
  void set_postalcode(const std::string& value);
  void set_postalcode(std::string&& value);
  void set_postalcode(const char* value);
  void set_postalcode(const char* value, size_t size);
  std::string* mutable_postalcode();
  std::string* release_postalcode();
  void set_allocated_postalcode(std::string* postalcode);
  private:
  const std::string& _internal_postalcode() const;
  void _internal_set_postalcode(const std::string& value);
  std::string* _internal_mutable_postalcode();
  public:

  // string state = 6;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // @@protoc_insertion_point(class_scope:patient.Address)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Extension > extension_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> line_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postalcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Adjudication :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Adjudication) */ {
 public:
  Adjudication();
  virtual ~Adjudication();

  Adjudication(const Adjudication& from);
  Adjudication(Adjudication&& from) noexcept
    : Adjudication() {
    *this = ::std::move(from);
  }

  inline Adjudication& operator=(const Adjudication& from) {
    CopyFrom(from);
    return *this;
  }
  inline Adjudication& operator=(Adjudication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Adjudication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Adjudication* internal_default_instance() {
    return reinterpret_cast<const Adjudication*>(
               &_Adjudication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Adjudication& a, Adjudication& b) {
    a.Swap(&b);
  }
  inline void Swap(Adjudication* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Adjudication* New() const final {
    return CreateMaybeMessage<Adjudication>(nullptr);
  }

  Adjudication* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Adjudication>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Adjudication& from);
  void MergeFrom(const Adjudication& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Adjudication* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Adjudication";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
    kCategoryFieldNumber = 2,
  };
  // .patient.Amount amount = 1;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::patient::Amount& amount() const;
  ::patient::Amount* release_amount();
  ::patient::Amount* mutable_amount();
  void set_allocated_amount(::patient::Amount* amount);
  private:
  const ::patient::Amount& _internal_amount() const;
  ::patient::Amount* _internal_mutable_amount();
  public:

  // .patient.Category category = 2;
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  const ::patient::Category& category() const;
  ::patient::Category* release_category();
  ::patient::Category* mutable_category();
  void set_allocated_category(::patient::Category* category);
  private:
  const ::patient::Category& _internal_category() const;
  ::patient::Category* _internal_mutable_category();
  public:

  // @@protoc_insertion_point(class_scope:patient.Adjudication)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::patient::Amount* amount_;
  ::patient::Category* category_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Amount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Amount) */ {
 public:
  Amount();
  virtual ~Amount();

  Amount(const Amount& from);
  Amount(Amount&& from) noexcept
    : Amount() {
    *this = ::std::move(from);
  }

  inline Amount& operator=(const Amount& from) {
    CopyFrom(from);
    return *this;
  }
  inline Amount& operator=(Amount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Amount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Amount* internal_default_instance() {
    return reinterpret_cast<const Amount*>(
               &_Amount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Amount& a, Amount& b) {
    a.Swap(&b);
  }
  inline void Swap(Amount* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Amount* New() const final {
    return CreateMaybeMessage<Amount>(nullptr);
  }

  Amount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Amount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Amount& from);
  void MergeFrom(const Amount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Amount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Amount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // float value = 2;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:patient.Amount)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class CareTeam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.CareTeam) */ {
 public:
  CareTeam();
  virtual ~CareTeam();

  CareTeam(const CareTeam& from);
  CareTeam(CareTeam&& from) noexcept
    : CareTeam() {
    *this = ::std::move(from);
  }

  inline CareTeam& operator=(const CareTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CareTeam& operator=(CareTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CareTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CareTeam* internal_default_instance() {
    return reinterpret_cast<const CareTeam*>(
               &_CareTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CareTeam& a, CareTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(CareTeam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CareTeam* New() const final {
    return CreateMaybeMessage<CareTeam>(nullptr);
  }

  CareTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CareTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CareTeam& from);
  void MergeFrom(const CareTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CareTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.CareTeam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceFieldNumber = 4,
    kProviderFieldNumber = 1,
    kRoleFieldNumber = 2,
    kSequenceFieldNumber = 3,
  };
  // string reference = 4;
  void clear_reference();
  const std::string& reference() const;
  void set_reference(const std::string& value);
  void set_reference(std::string&& value);
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  std::string* mutable_reference();
  std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  private:
  const std::string& _internal_reference() const;
  void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // .patient.Reference provider = 1;
  bool has_provider() const;
  private:
  bool _internal_has_provider() const;
  public:
  void clear_provider();
  const ::patient::Reference& provider() const;
  ::patient::Reference* release_provider();
  ::patient::Reference* mutable_provider();
  void set_allocated_provider(::patient::Reference* provider);
  private:
  const ::patient::Reference& _internal_provider() const;
  ::patient::Reference* _internal_mutable_provider();
  public:

  // .patient.Category role = 2;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::patient::Category& role() const;
  ::patient::Category* release_role();
  ::patient::Category* mutable_role();
  void set_allocated_role(::patient::Category* role);
  private:
  const ::patient::Category& _internal_role() const;
  ::patient::Category* _internal_mutable_role();
  public:

  // int32 sequence = 3;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:patient.CareTeam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
  ::patient::Reference* provider_;
  ::patient::Category* role_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Communication :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Communication) */ {
 public:
  Communication();
  virtual ~Communication();

  Communication(const Communication& from);
  Communication(Communication&& from) noexcept
    : Communication() {
    *this = ::std::move(from);
  }

  inline Communication& operator=(const Communication& from) {
    CopyFrom(from);
    return *this;
  }
  inline Communication& operator=(Communication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Communication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Communication* internal_default_instance() {
    return reinterpret_cast<const Communication*>(
               &_Communication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Communication& a, Communication& b) {
    a.Swap(&b);
  }
  inline void Swap(Communication* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Communication* New() const final {
    return CreateMaybeMessage<Communication>(nullptr);
  }

  Communication* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Communication>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Communication& from);
  void MergeFrom(const Communication& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Communication* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Communication";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 1,
  };
  // .patient.Category language = 1;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  const ::patient::Category& language() const;
  ::patient::Category* release_language();
  ::patient::Category* mutable_language();
  void set_allocated_language(::patient::Category* language);
  private:
  const ::patient::Category& _internal_language() const;
  ::patient::Category* _internal_mutable_language();
  public:

  // @@protoc_insertion_point(class_scope:patient.Communication)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::patient::Category* language_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Component :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Component) */ {
 public:
  Component();
  virtual ~Component();

  Component(const Component& from);
  Component(Component&& from) noexcept
    : Component() {
    *this = ::std::move(from);
  }

  inline Component& operator=(const Component& from) {
    CopyFrom(from);
    return *this;
  }
  inline Component& operator=(Component&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Component& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Component* internal_default_instance() {
    return reinterpret_cast<const Component*>(
               &_Component_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Component& a, Component& b) {
    a.Swap(&b);
  }
  inline void Swap(Component* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Component* New() const final {
    return CreateMaybeMessage<Component>(nullptr);
  }

  Component* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Component>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Component& from);
  void MergeFrom(const Component& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Component* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Component";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kValueQuantityFieldNumber = 2,
  };
  // .patient.Category code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  const ::patient::Category& code() const;
  ::patient::Category* release_code();
  ::patient::Category* mutable_code();
  void set_allocated_code(::patient::Category* code);
  private:
  const ::patient::Category& _internal_code() const;
  ::patient::Category* _internal_mutable_code();
  public:

  // .patient.Quantity valueQuantity = 2;
  bool has_valuequantity() const;
  private:
  bool _internal_has_valuequantity() const;
  public:
  void clear_valuequantity();
  const ::patient::Quantity& valuequantity() const;
  ::patient::Quantity* release_valuequantity();
  ::patient::Quantity* mutable_valuequantity();
  void set_allocated_valuequantity(::patient::Quantity* valuequantity);
  private:
  const ::patient::Quantity& _internal_valuequantity() const;
  ::patient::Quantity* _internal_mutable_valuequantity();
  public:

  // @@protoc_insertion_point(class_scope:patient.Component)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::patient::Category* code_;
  ::patient::Quantity* valuequantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Contained :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Contained) */ {
 public:
  Contained();
  virtual ~Contained();

  Contained(const Contained& from);
  Contained(Contained&& from) noexcept
    : Contained() {
    *this = ::std::move(from);
  }

  inline Contained& operator=(const Contained& from) {
    CopyFrom(from);
    return *this;
  }
  inline Contained& operator=(Contained&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Contained& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Contained* internal_default_instance() {
    return reinterpret_cast<const Contained*>(
               &_Contained_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Contained& a, Contained& b) {
    a.Swap(&b);
  }
  inline void Swap(Contained* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Contained* New() const final {
    return CreateMaybeMessage<Contained>(nullptr);
  }

  Contained* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Contained>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Contained& from);
  void MergeFrom(const Contained& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Contained* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Contained";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerformerFieldNumber = 3,
    kPayorFieldNumber = 9,
    kIdFieldNumber = 1,
    kIntentFieldNumber = 2,
    kResourceTypeFieldNumber = 5,
    kRequesterFieldNumber = 4,
    kSubjectFieldNumber = 7,
    kBeneficiaryFieldNumber = 8,
    kTypeFieldNumber = 10,
    kStatusFieldNumber = 6,
  };
  // repeated .patient.Reference performer = 3;
  int performer_size() const;
  private:
  int _internal_performer_size() const;
  public:
  void clear_performer();
  ::patient::Reference* mutable_performer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >*
      mutable_performer();
  private:
  const ::patient::Reference& _internal_performer(int index) const;
  ::patient::Reference* _internal_add_performer();
  public:
  const ::patient::Reference& performer(int index) const;
  ::patient::Reference* add_performer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >&
      performer() const;

  // repeated .patient.Reference payor = 9;
  int payor_size() const;
  private:
  int _internal_payor_size() const;
  public:
  void clear_payor();
  ::patient::Reference* mutable_payor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >*
      mutable_payor();
  private:
  const ::patient::Reference& _internal_payor(int index) const;
  ::patient::Reference* _internal_add_payor();
  public:
  const ::patient::Reference& payor(int index) const;
  ::patient::Reference* add_payor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >&
      payor() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string intent = 2;
  void clear_intent();
  const std::string& intent() const;
  void set_intent(const std::string& value);
  void set_intent(std::string&& value);
  void set_intent(const char* value);
  void set_intent(const char* value, size_t size);
  std::string* mutable_intent();
  std::string* release_intent();
  void set_allocated_intent(std::string* intent);
  private:
  const std::string& _internal_intent() const;
  void _internal_set_intent(const std::string& value);
  std::string* _internal_mutable_intent();
  public:

  // string resourceType = 5;
  void clear_resourcetype();
  const std::string& resourcetype() const;
  void set_resourcetype(const std::string& value);
  void set_resourcetype(std::string&& value);
  void set_resourcetype(const char* value);
  void set_resourcetype(const char* value, size_t size);
  std::string* mutable_resourcetype();
  std::string* release_resourcetype();
  void set_allocated_resourcetype(std::string* resourcetype);
  private:
  const std::string& _internal_resourcetype() const;
  void _internal_set_resourcetype(const std::string& value);
  std::string* _internal_mutable_resourcetype();
  public:

  // .patient.Reference requester = 4;
  bool has_requester() const;
  private:
  bool _internal_has_requester() const;
  public:
  void clear_requester();
  const ::patient::Reference& requester() const;
  ::patient::Reference* release_requester();
  ::patient::Reference* mutable_requester();
  void set_allocated_requester(::patient::Reference* requester);
  private:
  const ::patient::Reference& _internal_requester() const;
  ::patient::Reference* _internal_mutable_requester();
  public:

  // .patient.Reference subject = 7;
  bool has_subject() const;
  private:
  bool _internal_has_subject() const;
  public:
  void clear_subject();
  const ::patient::Reference& subject() const;
  ::patient::Reference* release_subject();
  ::patient::Reference* mutable_subject();
  void set_allocated_subject(::patient::Reference* subject);
  private:
  const ::patient::Reference& _internal_subject() const;
  ::patient::Reference* _internal_mutable_subject();
  public:

  // .patient.Reference beneficiary = 8;
  bool has_beneficiary() const;
  private:
  bool _internal_has_beneficiary() const;
  public:
  void clear_beneficiary();
  const ::patient::Reference& beneficiary() const;
  ::patient::Reference* release_beneficiary();
  ::patient::Reference* mutable_beneficiary();
  void set_allocated_beneficiary(::patient::Reference* beneficiary);
  private:
  const ::patient::Reference& _internal_beneficiary() const;
  ::patient::Reference* _internal_mutable_beneficiary();
  public:

  // .patient.Category type = 10;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::patient::Category& type() const;
  ::patient::Category* release_type();
  ::patient::Category* mutable_type();
  void set_allocated_type(::patient::Category* type);
  private:
  const ::patient::Category& _internal_type() const;
  ::patient::Category* _internal_mutable_type();
  public:

  // .patient.Status status = 6;
  void clear_status();
  ::patient::Status status() const;
  void set_status(::patient::Status value);
  private:
  ::patient::Status _internal_status() const;
  void _internal_set_status(::patient::Status value);
  public:

  // @@protoc_insertion_point(class_scope:patient.Contained)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference > performer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference > payor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resourcetype_;
  ::patient::Reference* requester_;
  ::patient::Reference* subject_;
  ::patient::Reference* beneficiary_;
  ::patient::Category* type_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Detail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Detail) */ {
 public:
  Detail();
  virtual ~Detail();

  Detail(const Detail& from);
  Detail(Detail&& from) noexcept
    : Detail() {
    *this = ::std::move(from);
  }

  inline Detail& operator=(const Detail& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detail& operator=(Detail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Detail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Detail* internal_default_instance() {
    return reinterpret_cast<const Detail*>(
               &_Detail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Detail& a, Detail& b) {
    a.Swap(&b);
  }
  inline void Swap(Detail* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Detail* New() const final {
    return CreateMaybeMessage<Detail>(nullptr);
  }

  Detail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Detail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Detail& from);
  void MergeFrom(const Detail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Detail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kLocationFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // .patient.Category code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  const ::patient::Category& code() const;
  ::patient::Category* release_code();
  ::patient::Category* mutable_code();
  void set_allocated_code(::patient::Category* code);
  private:
  const ::patient::Category& _internal_code() const;
  ::patient::Category* _internal_mutable_code();
  public:

  // .patient.Reference location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::patient::Reference& location() const;
  ::patient::Reference* release_location();
  ::patient::Reference* mutable_location();
  void set_allocated_location(::patient::Reference* location);
  private:
  const ::patient::Reference& _internal_location() const;
  ::patient::Reference* _internal_mutable_location();
  public:

  // .patient.Status status = 3;
  void clear_status();
  ::patient::Status status() const;
  void set_status(::patient::Status value);
  private:
  ::patient::Status _internal_status() const;
  void _internal_set_status(::patient::Status value);
  public:

  // @@protoc_insertion_point(class_scope:patient.Detail)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::patient::Category* code_;
  ::patient::Reference* location_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Diagnosis :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Diagnosis) */ {
 public:
  Diagnosis();
  virtual ~Diagnosis();

  Diagnosis(const Diagnosis& from);
  Diagnosis(Diagnosis&& from) noexcept
    : Diagnosis() {
    *this = ::std::move(from);
  }

  inline Diagnosis& operator=(const Diagnosis& from) {
    CopyFrom(from);
    return *this;
  }
  inline Diagnosis& operator=(Diagnosis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Diagnosis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Diagnosis* internal_default_instance() {
    return reinterpret_cast<const Diagnosis*>(
               &_Diagnosis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Diagnosis& a, Diagnosis& b) {
    a.Swap(&b);
  }
  inline void Swap(Diagnosis* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Diagnosis* New() const final {
    return CreateMaybeMessage<Diagnosis>(nullptr);
  }

  Diagnosis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Diagnosis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Diagnosis& from);
  void MergeFrom(const Diagnosis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Diagnosis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Diagnosis";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 3,
    kDiagnosisReferenceFieldNumber = 1,
    kSequenceFieldNumber = 2,
  };
  // repeated .patient.Category type = 3;
  int type_size() const;
  private:
  int _internal_type_size() const;
  public:
  void clear_type();
  ::patient::Category* mutable_type(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >*
      mutable_type();
  private:
  const ::patient::Category& _internal_type(int index) const;
  ::patient::Category* _internal_add_type();
  public:
  const ::patient::Category& type(int index) const;
  ::patient::Category* add_type();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >&
      type() const;

  // .patient.Reference diagnosisReference = 1;
  bool has_diagnosisreference() const;
  private:
  bool _internal_has_diagnosisreference() const;
  public:
  void clear_diagnosisreference();
  const ::patient::Reference& diagnosisreference() const;
  ::patient::Reference* release_diagnosisreference();
  ::patient::Reference* mutable_diagnosisreference();
  void set_allocated_diagnosisreference(::patient::Reference* diagnosisreference);
  private:
  const ::patient::Reference& _internal_diagnosisreference() const;
  ::patient::Reference* _internal_mutable_diagnosisreference();
  public:

  // int32 sequence = 2;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:patient.Diagnosis)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category > type_;
  ::patient::Reference* diagnosisreference_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Entry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Entry) */ {
 public:
  Entry();
  virtual ~Entry();

  Entry(const Entry& from);
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entry& operator=(Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(Entry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Entry* New() const final {
    return CreateMaybeMessage<Entry>(nullptr);
  }

  Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Entry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 3,
    kFullUrlFieldNumber = 1,
    kRequestFieldNumber = 2,
  };
  // repeated .patient.Resource resource = 3;
  int resource_size() const;
  private:
  int _internal_resource_size() const;
  public:
  void clear_resource();
  ::patient::Resource* mutable_resource(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Resource >*
      mutable_resource();
  private:
  const ::patient::Resource& _internal_resource(int index) const;
  ::patient::Resource* _internal_add_resource();
  public:
  const ::patient::Resource& resource(int index) const;
  ::patient::Resource* add_resource();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Resource >&
      resource() const;

  // string fullUrl = 1;
  void clear_fullurl();
  const std::string& fullurl() const;
  void set_fullurl(const std::string& value);
  void set_fullurl(std::string&& value);
  void set_fullurl(const char* value);
  void set_fullurl(const char* value, size_t size);
  std::string* mutable_fullurl();
  std::string* release_fullurl();
  void set_allocated_fullurl(std::string* fullurl);
  private:
  const std::string& _internal_fullurl() const;
  void _internal_set_fullurl(const std::string& value);
  std::string* _internal_mutable_fullurl();
  public:

  // .patient.Request request = 2;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::patient::Request& request() const;
  ::patient::Request* release_request();
  ::patient::Request* mutable_request();
  void set_allocated_request(::patient::Request* request);
  private:
  const ::patient::Request& _internal_request() const;
  ::patient::Request* _internal_mutable_request();
  public:

  // @@protoc_insertion_point(class_scope:patient.Entry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Resource > resource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fullurl_;
  ::patient::Request* request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Extension :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Extension) */ {
 public:
  Extension();
  virtual ~Extension();

  Extension(const Extension& from);
  Extension(Extension&& from) noexcept
    : Extension() {
    *this = ::std::move(from);
  }

  inline Extension& operator=(const Extension& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extension& operator=(Extension&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Extension& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Extension* internal_default_instance() {
    return reinterpret_cast<const Extension*>(
               &_Extension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Extension& a, Extension& b) {
    a.Swap(&b);
  }
  inline void Swap(Extension* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extension* New() const final {
    return CreateMaybeMessage<Extension>(nullptr);
  }

  Extension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extension>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extension& from);
  void MergeFrom(const Extension& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extension* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Extension";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionFieldNumber = 1,
    kUrlFieldNumber = 2,
    kValueStringFieldNumber = 4,
    kValueCodingFieldNumber = 3,
    kValueDecimalFieldNumber = 5,
  };
  // repeated .patient.Extension extension = 1;
  int extension_size() const;
  private:
  int _internal_extension_size() const;
  public:
  void clear_extension();
  ::patient::Extension* mutable_extension(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Extension >*
      mutable_extension();
  private:
  const ::patient::Extension& _internal_extension(int index) const;
  ::patient::Extension* _internal_add_extension();
  public:
  const ::patient::Extension& extension(int index) const;
  ::patient::Extension* add_extension();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Extension >&
      extension() const;

  // string url = 2;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string valueString = 4;
  void clear_valuestring();
  const std::string& valuestring() const;
  void set_valuestring(const std::string& value);
  void set_valuestring(std::string&& value);
  void set_valuestring(const char* value);
  void set_valuestring(const char* value, size_t size);
  std::string* mutable_valuestring();
  std::string* release_valuestring();
  void set_allocated_valuestring(std::string* valuestring);
  private:
  const std::string& _internal_valuestring() const;
  void _internal_set_valuestring(const std::string& value);
  std::string* _internal_mutable_valuestring();
  public:

  // .patient.Coding valueCoding = 3;
  bool has_valuecoding() const;
  private:
  bool _internal_has_valuecoding() const;
  public:
  void clear_valuecoding();
  const ::patient::Coding& valuecoding() const;
  ::patient::Coding* release_valuecoding();
  ::patient::Coding* mutable_valuecoding();
  void set_allocated_valuecoding(::patient::Coding* valuecoding);
  private:
  const ::patient::Coding& _internal_valuecoding() const;
  ::patient::Coding* _internal_mutable_valuecoding();
  public:

  // float valueDecimal = 5;
  void clear_valuedecimal();
  float valuedecimal() const;
  void set_valuedecimal(float value);
  private:
  float _internal_valuedecimal() const;
  void _internal_set_valuedecimal(float value);
  public:

  // @@protoc_insertion_point(class_scope:patient.Extension)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Extension > extension_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valuestring_;
  ::patient::Coding* valuecoding_;
  float valuedecimal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Identifier :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Identifier) */ {
 public:
  Identifier();
  virtual ~Identifier();

  Identifier(const Identifier& from);
  Identifier(Identifier&& from) noexcept
    : Identifier() {
    *this = ::std::move(from);
  }

  inline Identifier& operator=(const Identifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline Identifier& operator=(Identifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Identifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Identifier* internal_default_instance() {
    return reinterpret_cast<const Identifier*>(
               &_Identifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Identifier& a, Identifier& b) {
    a.Swap(&b);
  }
  inline void Swap(Identifier* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Identifier* New() const final {
    return CreateMaybeMessage<Identifier>(nullptr);
  }

  Identifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Identifier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Identifier& from);
  void MergeFrom(const Identifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Identifier";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSystemFieldNumber = 1,
    kValueFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string system = 1;
  void clear_system();
  const std::string& system() const;
  void set_system(const std::string& value);
  void set_system(std::string&& value);
  void set_system(const char* value);
  void set_system(const char* value, size_t size);
  std::string* mutable_system();
  std::string* release_system();
  void set_allocated_system(std::string* system);
  private:
  const std::string& _internal_system() const;
  void _internal_set_system(const std::string& value);
  std::string* _internal_mutable_system();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .patient.Category type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::patient::Category& type() const;
  ::patient::Category* release_type();
  ::patient::Category* mutable_type();
  void set_allocated_type(::patient::Category* type);
  private:
  const ::patient::Category& _internal_type() const;
  ::patient::Category* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:patient.Identifier)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr system_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::patient::Category* type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Insurance :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Insurance) */ {
 public:
  Insurance();
  virtual ~Insurance();

  Insurance(const Insurance& from);
  Insurance(Insurance&& from) noexcept
    : Insurance() {
    *this = ::std::move(from);
  }

  inline Insurance& operator=(const Insurance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Insurance& operator=(Insurance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Insurance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Insurance* internal_default_instance() {
    return reinterpret_cast<const Insurance*>(
               &_Insurance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Insurance& a, Insurance& b) {
    a.Swap(&b);
  }
  inline void Swap(Insurance* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Insurance* New() const final {
    return CreateMaybeMessage<Insurance>(nullptr);
  }

  Insurance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Insurance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Insurance& from);
  void MergeFrom(const Insurance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Insurance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Insurance";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoverageFieldNumber = 1,
    kFocalFieldNumber = 2,
    kSequenceFieldNumber = 3,
  };
  // .patient.Reference coverage = 1;
  bool has_coverage() const;
  private:
  bool _internal_has_coverage() const;
  public:
  void clear_coverage();
  const ::patient::Reference& coverage() const;
  ::patient::Reference* release_coverage();
  ::patient::Reference* mutable_coverage();
  void set_allocated_coverage(::patient::Reference* coverage);
  private:
  const ::patient::Reference& _internal_coverage() const;
  ::patient::Reference* _internal_mutable_coverage();
  public:

  // bool focal = 2;
  void clear_focal();
  bool focal() const;
  void set_focal(bool value);
  private:
  bool _internal_focal() const;
  void _internal_set_focal(bool value);
  public:

  // int32 sequence = 3;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:patient.Insurance)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::patient::Reference* coverage_;
  bool focal_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Item :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Item) */ {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Item& operator=(Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Item* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Item* New() const final {
    return CreateMaybeMessage<Item>(nullptr);
  }

  Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Item";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncounterFieldNumber = 1,
    kInformationSequenceFieldNumber = 4,
    kAdjudicationFieldNumber = 9,
    kProductOrServiceFieldNumber = 2,
    kNetFieldNumber = 5,
    kCategoryFieldNumber = 6,
    kLocationCodeableConceptFieldNumber = 7,
    kServicedPeriodFieldNumber = 8,
    kSequenceFieldNumber = 3,
  };
  // repeated .patient.Reference encounter = 1;
  int encounter_size() const;
  private:
  int _internal_encounter_size() const;
  public:
  void clear_encounter();
  ::patient::Reference* mutable_encounter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >*
      mutable_encounter();
  private:
  const ::patient::Reference& _internal_encounter(int index) const;
  ::patient::Reference* _internal_add_encounter();
  public:
  const ::patient::Reference& encounter(int index) const;
  ::patient::Reference* add_encounter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >&
      encounter() const;

  // repeated int32 informationSequence = 4;
  int informationsequence_size() const;
  private:
  int _internal_informationsequence_size() const;
  public:
  void clear_informationsequence();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_informationsequence(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_informationsequence() const;
  void _internal_add_informationsequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_informationsequence();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 informationsequence(int index) const;
  void set_informationsequence(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_informationsequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      informationsequence() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_informationsequence();

  // repeated .patient.Adjudication adjudication = 9;
  int adjudication_size() const;
  private:
  int _internal_adjudication_size() const;
  public:
  void clear_adjudication();
  ::patient::Adjudication* mutable_adjudication(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Adjudication >*
      mutable_adjudication();
  private:
  const ::patient::Adjudication& _internal_adjudication(int index) const;
  ::patient::Adjudication* _internal_add_adjudication();
  public:
  const ::patient::Adjudication& adjudication(int index) const;
  ::patient::Adjudication* add_adjudication();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Adjudication >&
      adjudication() const;

  // .patient.Category productOrService = 2;
  bool has_productorservice() const;
  private:
  bool _internal_has_productorservice() const;
  public:
  void clear_productorservice();
  const ::patient::Category& productorservice() const;
  ::patient::Category* release_productorservice();
  ::patient::Category* mutable_productorservice();
  void set_allocated_productorservice(::patient::Category* productorservice);
  private:
  const ::patient::Category& _internal_productorservice() const;
  ::patient::Category* _internal_mutable_productorservice();
  public:

  // .patient.Amount net = 5;
  bool has_net() const;
  private:
  bool _internal_has_net() const;
  public:
  void clear_net();
  const ::patient::Amount& net() const;
  ::patient::Amount* release_net();
  ::patient::Amount* mutable_net();
  void set_allocated_net(::patient::Amount* net);
  private:
  const ::patient::Amount& _internal_net() const;
  ::patient::Amount* _internal_mutable_net();
  public:

  // .patient.Category category = 6;
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  const ::patient::Category& category() const;
  ::patient::Category* release_category();
  ::patient::Category* mutable_category();
  void set_allocated_category(::patient::Category* category);
  private:
  const ::patient::Category& _internal_category() const;
  ::patient::Category* _internal_mutable_category();
  public:

  // .patient.Category locationCodeableConcept = 7;
  bool has_locationcodeableconcept() const;
  private:
  bool _internal_has_locationcodeableconcept() const;
  public:
  void clear_locationcodeableconcept();
  const ::patient::Category& locationcodeableconcept() const;
  ::patient::Category* release_locationcodeableconcept();
  ::patient::Category* mutable_locationcodeableconcept();
  void set_allocated_locationcodeableconcept(::patient::Category* locationcodeableconcept);
  private:
  const ::patient::Category& _internal_locationcodeableconcept() const;
  ::patient::Category* _internal_mutable_locationcodeableconcept();
  public:

  // .patient.Period servicedPeriod = 8;
  bool has_servicedperiod() const;
  private:
  bool _internal_has_servicedperiod() const;
  public:
  void clear_servicedperiod();
  const ::patient::Period& servicedperiod() const;
  ::patient::Period* release_servicedperiod();
  ::patient::Period* mutable_servicedperiod();
  void set_allocated_servicedperiod(::patient::Period* servicedperiod);
  private:
  const ::patient::Period& _internal_servicedperiod() const;
  ::patient::Period* _internal_mutable_servicedperiod();
  public:

  // int32 sequence = 3;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:patient.Item)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference > encounter_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > informationsequence_;
  mutable std::atomic<int> _informationsequence_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Adjudication > adjudication_;
  ::patient::Category* productorservice_;
  ::patient::Amount* net_;
  ::patient::Category* category_;
  ::patient::Category* locationcodeableconcept_;
  ::patient::Period* servicedperiod_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Name :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Name) */ {
 public:
  Name();
  virtual ~Name();

  Name(const Name& from);
  Name(Name&& from) noexcept
    : Name() {
    *this = ::std::move(from);
  }

  inline Name& operator=(const Name& from) {
    CopyFrom(from);
    return *this;
  }
  inline Name& operator=(Name&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Name& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Name* internal_default_instance() {
    return reinterpret_cast<const Name*>(
               &_Name_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Name& a, Name& b) {
    a.Swap(&b);
  }
  inline void Swap(Name* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Name* New() const final {
    return CreateMaybeMessage<Name>(nullptr);
  }

  Name* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Name>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Name& from);
  void MergeFrom(const Name& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Name* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Name";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGivenFieldNumber = 2,
    kPrefixFieldNumber = 3,
    kFamilyFieldNumber = 1,
    kUseFieldNumber = 4,
  };
  // repeated string given = 2;
  int given_size() const;
  private:
  int _internal_given_size() const;
  public:
  void clear_given();
  const std::string& given(int index) const;
  std::string* mutable_given(int index);
  void set_given(int index, const std::string& value);
  void set_given(int index, std::string&& value);
  void set_given(int index, const char* value);
  void set_given(int index, const char* value, size_t size);
  std::string* add_given();
  void add_given(const std::string& value);
  void add_given(std::string&& value);
  void add_given(const char* value);
  void add_given(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& given() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_given();
  private:
  const std::string& _internal_given(int index) const;
  std::string* _internal_add_given();
  public:

  // repeated string prefix = 3;
  int prefix_size() const;
  private:
  int _internal_prefix_size() const;
  public:
  void clear_prefix();
  const std::string& prefix(int index) const;
  std::string* mutable_prefix(int index);
  void set_prefix(int index, const std::string& value);
  void set_prefix(int index, std::string&& value);
  void set_prefix(int index, const char* value);
  void set_prefix(int index, const char* value, size_t size);
  std::string* add_prefix();
  void add_prefix(const std::string& value);
  void add_prefix(std::string&& value);
  void add_prefix(const char* value);
  void add_prefix(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& prefix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_prefix();
  private:
  const std::string& _internal_prefix(int index) const;
  std::string* _internal_add_prefix();
  public:

  // string family = 1;
  void clear_family();
  const std::string& family() const;
  void set_family(const std::string& value);
  void set_family(std::string&& value);
  void set_family(const char* value);
  void set_family(const char* value, size_t size);
  std::string* mutable_family();
  std::string* release_family();
  void set_allocated_family(std::string* family);
  private:
  const std::string& _internal_family() const;
  void _internal_set_family(const std::string& value);
  std::string* _internal_mutable_family();
  public:

  // string use = 4;
  void clear_use();
  const std::string& use() const;
  void set_use(const std::string& value);
  void set_use(std::string&& value);
  void set_use(const char* value);
  void set_use(const char* value, size_t size);
  std::string* mutable_use();
  std::string* release_use();
  void set_allocated_use(std::string* use);
  private:
  const std::string& _internal_use() const;
  void _internal_set_use(const std::string& value);
  std::string* _internal_mutable_use();
  public:

  // @@protoc_insertion_point(class_scope:patient.Name)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> given_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr family_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr use_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Participant :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Participant) */ {
 public:
  Participant();
  virtual ~Participant();

  Participant(const Participant& from);
  Participant(Participant&& from) noexcept
    : Participant() {
    *this = ::std::move(from);
  }

  inline Participant& operator=(const Participant& from) {
    CopyFrom(from);
    return *this;
  }
  inline Participant& operator=(Participant&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Participant& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Participant* internal_default_instance() {
    return reinterpret_cast<const Participant*>(
               &_Participant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Participant& a, Participant& b) {
    a.Swap(&b);
  }
  inline void Swap(Participant* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Participant* New() const final {
    return CreateMaybeMessage<Participant>(nullptr);
  }

  Participant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Participant>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Participant& from);
  void MergeFrom(const Participant& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Participant* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Participant";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 3,
    kIndividualFieldNumber = 1,
    kMemberFieldNumber = 2,
  };
  // repeated .patient.Category role = 3;
  int role_size() const;
  private:
  int _internal_role_size() const;
  public:
  void clear_role();
  ::patient::Category* mutable_role(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >*
      mutable_role();
  private:
  const ::patient::Category& _internal_role(int index) const;
  ::patient::Category* _internal_add_role();
  public:
  const ::patient::Category& role(int index) const;
  ::patient::Category* add_role();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >&
      role() const;

  // .patient.Reference individual = 1;
  bool has_individual() const;
  private:
  bool _internal_has_individual() const;
  public:
  void clear_individual();
  const ::patient::Reference& individual() const;
  ::patient::Reference* release_individual();
  ::patient::Reference* mutable_individual();
  void set_allocated_individual(::patient::Reference* individual);
  private:
  const ::patient::Reference& _internal_individual() const;
  ::patient::Reference* _internal_mutable_individual();
  public:

  // .patient.Reference member = 2;
  bool has_member() const;
  private:
  bool _internal_has_member() const;
  public:
  void clear_member();
  const ::patient::Reference& member() const;
  ::patient::Reference* release_member();
  ::patient::Reference* mutable_member();
  void set_allocated_member(::patient::Reference* member);
  private:
  const ::patient::Reference& _internal_member() const;
  ::patient::Reference* _internal_mutable_member();
  public:

  // @@protoc_insertion_point(class_scope:patient.Participant)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category > role_;
  ::patient::Reference* individual_;
  ::patient::Reference* member_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Payment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Payment) */ {
 public:
  Payment();
  virtual ~Payment();

  Payment(const Payment& from);
  Payment(Payment&& from) noexcept
    : Payment() {
    *this = ::std::move(from);
  }

  inline Payment& operator=(const Payment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payment& operator=(Payment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Payment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Payment* internal_default_instance() {
    return reinterpret_cast<const Payment*>(
               &_Payment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Payment& a, Payment& b) {
    a.Swap(&b);
  }
  inline void Swap(Payment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payment* New() const final {
    return CreateMaybeMessage<Payment>(nullptr);
  }

  Payment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Payment& from);
  void MergeFrom(const Payment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Payment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
  };
  // .patient.Amount amount = 1;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::patient::Amount& amount() const;
  ::patient::Amount* release_amount();
  ::patient::Amount* mutable_amount();
  void set_allocated_amount(::patient::Amount* amount);
  private:
  const ::patient::Amount& _internal_amount() const;
  ::patient::Amount* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:patient.Payment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::patient::Amount* amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Procedure :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Procedure) */ {
 public:
  Procedure();
  virtual ~Procedure();

  Procedure(const Procedure& from);
  Procedure(Procedure&& from) noexcept
    : Procedure() {
    *this = ::std::move(from);
  }

  inline Procedure& operator=(const Procedure& from) {
    CopyFrom(from);
    return *this;
  }
  inline Procedure& operator=(Procedure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Procedure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Procedure* internal_default_instance() {
    return reinterpret_cast<const Procedure*>(
               &_Procedure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Procedure& a, Procedure& b) {
    a.Swap(&b);
  }
  inline void Swap(Procedure* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Procedure* New() const final {
    return CreateMaybeMessage<Procedure>(nullptr);
  }

  Procedure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Procedure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Procedure& from);
  void MergeFrom(const Procedure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Procedure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Procedure";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcedureReferenceFieldNumber = 1,
    kSequenceFieldNumber = 2,
  };
  // .patient.Reference procedureReference = 1;
  bool has_procedurereference() const;
  private:
  bool _internal_has_procedurereference() const;
  public:
  void clear_procedurereference();
  const ::patient::Reference& procedurereference() const;
  ::patient::Reference* release_procedurereference();
  ::patient::Reference* mutable_procedurereference();
  void set_allocated_procedurereference(::patient::Reference* procedurereference);
  private:
  const ::patient::Reference& _internal_procedurereference() const;
  ::patient::Reference* _internal_mutable_procedurereference();
  public:

  // int32 sequence = 2;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:patient.Procedure)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::patient::Reference* procedurereference_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodFieldNumber = 1,
    kUrlFieldNumber = 2,
  };
  // string method = 1;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // string url = 2;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:patient.Request)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Root :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Root) */ {
 public:
  Root();
  virtual ~Root();

  Root(const Root& from);
  Root(Root&& from) noexcept
    : Root() {
    *this = ::std::move(from);
  }

  inline Root& operator=(const Root& from) {
    CopyFrom(from);
    return *this;
  }
  inline Root& operator=(Root&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Root& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Root* internal_default_instance() {
    return reinterpret_cast<const Root*>(
               &_Root_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Root& a, Root& b) {
    a.Swap(&b);
  }
  inline void Swap(Root* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Root* New() const final {
    return CreateMaybeMessage<Root>(nullptr);
  }

  Root* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Root>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Root& from);
  void MergeFrom(const Root& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Root* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Root";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 1,
    kResourceTypeFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // repeated .patient.Entry entry = 1;
  int entry_size() const;
  private:
  int _internal_entry_size() const;
  public:
  void clear_entry();
  ::patient::Entry* mutable_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Entry >*
      mutable_entry();
  private:
  const ::patient::Entry& _internal_entry(int index) const;
  ::patient::Entry* _internal_add_entry();
  public:
  const ::patient::Entry& entry(int index) const;
  ::patient::Entry* add_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Entry >&
      entry() const;

  // string resourceType = 2;
  void clear_resourcetype();
  const std::string& resourcetype() const;
  void set_resourcetype(const std::string& value);
  void set_resourcetype(std::string&& value);
  void set_resourcetype(const char* value);
  void set_resourcetype(const char* value, size_t size);
  std::string* mutable_resourcetype();
  std::string* release_resourcetype();
  void set_allocated_resourcetype(std::string* resourcetype);
  private:
  const std::string& _internal_resourcetype() const;
  void _internal_set_resourcetype(const std::string& value);
  std::string* _internal_mutable_resourcetype();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:patient.Root)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Entry > entry_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resourcetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class SupportingInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.SupportingInfo) */ {
 public:
  SupportingInfo();
  virtual ~SupportingInfo();

  SupportingInfo(const SupportingInfo& from);
  SupportingInfo(SupportingInfo&& from) noexcept
    : SupportingInfo() {
    *this = ::std::move(from);
  }

  inline SupportingInfo& operator=(const SupportingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SupportingInfo& operator=(SupportingInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SupportingInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SupportingInfo* internal_default_instance() {
    return reinterpret_cast<const SupportingInfo*>(
               &_SupportingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SupportingInfo& a, SupportingInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SupportingInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SupportingInfo* New() const final {
    return CreateMaybeMessage<SupportingInfo>(nullptr);
  }

  SupportingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SupportingInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SupportingInfo& from);
  void MergeFrom(const SupportingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SupportingInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.SupportingInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryFieldNumber = 1,
    kValueReferenceFieldNumber = 3,
    kSequenceFieldNumber = 2,
  };
  // .patient.Category category = 1;
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  const ::patient::Category& category() const;
  ::patient::Category* release_category();
  ::patient::Category* mutable_category();
  void set_allocated_category(::patient::Category* category);
  private:
  const ::patient::Category& _internal_category() const;
  ::patient::Category* _internal_mutable_category();
  public:

  // .patient.Reference valueReference = 3;
  bool has_valuereference() const;
  private:
  bool _internal_has_valuereference() const;
  public:
  void clear_valuereference();
  const ::patient::Reference& valuereference() const;
  ::patient::Reference* release_valuereference();
  ::patient::Reference* mutable_valuereference();
  void set_allocated_valuereference(::patient::Reference* valuereference);
  private:
  const ::patient::Reference& _internal_valuereference() const;
  ::patient::Reference* _internal_mutable_valuereference();
  public:

  // int32 sequence = 2;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:patient.SupportingInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::patient::Category* category_;
  ::patient::Reference* valuereference_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Telecom :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Telecom) */ {
 public:
  Telecom();
  virtual ~Telecom();

  Telecom(const Telecom& from);
  Telecom(Telecom&& from) noexcept
    : Telecom() {
    *this = ::std::move(from);
  }

  inline Telecom& operator=(const Telecom& from) {
    CopyFrom(from);
    return *this;
  }
  inline Telecom& operator=(Telecom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Telecom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Telecom* internal_default_instance() {
    return reinterpret_cast<const Telecom*>(
               &_Telecom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Telecom& a, Telecom& b) {
    a.Swap(&b);
  }
  inline void Swap(Telecom* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Telecom* New() const final {
    return CreateMaybeMessage<Telecom>(nullptr);
  }

  Telecom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Telecom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Telecom& from);
  void MergeFrom(const Telecom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Telecom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Telecom";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSystemFieldNumber = 1,
    kUseFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string system = 1;
  void clear_system();
  const std::string& system() const;
  void set_system(const std::string& value);
  void set_system(std::string&& value);
  void set_system(const char* value);
  void set_system(const char* value, size_t size);
  std::string* mutable_system();
  std::string* release_system();
  void set_allocated_system(std::string* system);
  private:
  const std::string& _internal_system() const;
  void _internal_set_system(const std::string& value);
  std::string* _internal_mutable_system();
  public:

  // string use = 2;
  void clear_use();
  const std::string& use() const;
  void set_use(const std::string& value);
  void set_use(std::string&& value);
  void set_use(const char* value);
  void set_use(const char* value, size_t size);
  std::string* mutable_use();
  std::string* release_use();
  void set_allocated_use(std::string* use);
  private:
  const std::string& _internal_use() const;
  void _internal_set_use(const std::string& value);
  std::string* _internal_mutable_use();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:patient.Telecom)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr system_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr use_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Text :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Text) */ {
 public:
  Text();
  virtual ~Text();

  Text(const Text& from);
  Text(Text&& from) noexcept
    : Text() {
    *this = ::std::move(from);
  }

  inline Text& operator=(const Text& from) {
    CopyFrom(from);
    return *this;
  }
  inline Text& operator=(Text&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Text& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Text* internal_default_instance() {
    return reinterpret_cast<const Text*>(
               &_Text_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Text& a, Text& b) {
    a.Swap(&b);
  }
  inline void Swap(Text* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Text* New() const final {
    return CreateMaybeMessage<Text>(nullptr);
  }

  Text* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Text>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Text& from);
  void MergeFrom(const Text& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Text* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Text";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDivFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string div = 1;
  void clear_div();
  const std::string& div() const;
  void set_div(const std::string& value);
  void set_div(std::string&& value);
  void set_div(const char* value);
  void set_div(const char* value, size_t size);
  std::string* mutable_div();
  std::string* release_div();
  void set_allocated_div(std::string* div);
  private:
  const std::string& _internal_div() const;
  void _internal_set_div(const std::string& value);
  std::string* _internal_mutable_div();
  public:

  // string status = 2;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:patient.Text)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr div_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Total :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Total) */ {
 public:
  Total();
  virtual ~Total();

  Total(const Total& from);
  Total(Total&& from) noexcept
    : Total() {
    *this = ::std::move(from);
  }

  inline Total& operator=(const Total& from) {
    CopyFrom(from);
    return *this;
  }
  inline Total& operator=(Total&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Total& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Total* internal_default_instance() {
    return reinterpret_cast<const Total*>(
               &_Total_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Total& a, Total& b) {
    a.Swap(&b);
  }
  inline void Swap(Total* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Total* New() const final {
    return CreateMaybeMessage<Total>(nullptr);
  }

  Total* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Total>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Total& from);
  void MergeFrom(const Total& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Total* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Total";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kAmountFieldNumber = 3,
    kCategoryFieldNumber = 4,
    kValueFieldNumber = 2,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // .patient.Amount amount = 3;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::patient::Amount& amount() const;
  ::patient::Amount* release_amount();
  ::patient::Amount* mutable_amount();
  void set_allocated_amount(::patient::Amount* amount);
  private:
  const ::patient::Amount& _internal_amount() const;
  ::patient::Amount* _internal_mutable_amount();
  public:

  // .patient.Category category = 4;
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  const ::patient::Category& category() const;
  ::patient::Category* release_category();
  ::patient::Category* mutable_category();
  void set_allocated_category(::patient::Category* category);
  private:
  const ::patient::Category& _internal_category() const;
  ::patient::Category* _internal_mutable_category();
  public:

  // float value = 2;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:patient.Total)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::patient::Amount* amount_;
  ::patient::Category* category_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Coding :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Coding) */ {
 public:
  Coding();
  virtual ~Coding();

  Coding(const Coding& from);
  Coding(Coding&& from) noexcept
    : Coding() {
    *this = ::std::move(from);
  }

  inline Coding& operator=(const Coding& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coding& operator=(Coding&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Coding& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Coding* internal_default_instance() {
    return reinterpret_cast<const Coding*>(
               &_Coding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Coding& a, Coding& b) {
    a.Swap(&b);
  }
  inline void Swap(Coding* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Coding* New() const final {
    return CreateMaybeMessage<Coding>(nullptr);
  }

  Coding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Coding>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Coding& from);
  void MergeFrom(const Coding& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coding* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Coding";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kDisplayFieldNumber = 2,
    kSystemFieldNumber = 3,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string display = 2;
  void clear_display();
  const std::string& display() const;
  void set_display(const std::string& value);
  void set_display(std::string&& value);
  void set_display(const char* value);
  void set_display(const char* value, size_t size);
  std::string* mutable_display();
  std::string* release_display();
  void set_allocated_display(std::string* display);
  private:
  const std::string& _internal_display() const;
  void _internal_set_display(const std::string& value);
  std::string* _internal_mutable_display();
  public:

  // string system = 3;
  void clear_system();
  const std::string& system() const;
  void set_system(const std::string& value);
  void set_system(std::string&& value);
  void set_system(const char* value);
  void set_system(const char* value, size_t size);
  std::string* mutable_system();
  std::string* release_system();
  void set_allocated_system(std::string* system);
  private:
  const std::string& _internal_system() const;
  void _internal_set_system(const std::string& value);
  std::string* _internal_mutable_system();
  public:

  // @@protoc_insertion_point(class_scope:patient.Coding)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr system_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Quantity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Quantity) */ {
 public:
  Quantity();
  virtual ~Quantity();

  Quantity(const Quantity& from);
  Quantity(Quantity&& from) noexcept
    : Quantity() {
    *this = ::std::move(from);
  }

  inline Quantity& operator=(const Quantity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quantity& operator=(Quantity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quantity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quantity* internal_default_instance() {
    return reinterpret_cast<const Quantity*>(
               &_Quantity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Quantity& a, Quantity& b) {
    a.Swap(&b);
  }
  inline void Swap(Quantity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quantity* New() const final {
    return CreateMaybeMessage<Quantity>(nullptr);
  }

  Quantity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quantity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quantity& from);
  void MergeFrom(const Quantity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quantity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Quantity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kSystemFieldNumber = 2,
    kUnitFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string system = 2;
  void clear_system();
  const std::string& system() const;
  void set_system(const std::string& value);
  void set_system(std::string&& value);
  void set_system(const char* value);
  void set_system(const char* value, size_t size);
  std::string* mutable_system();
  std::string* release_system();
  void set_allocated_system(std::string* system);
  private:
  const std::string& _internal_system() const;
  void _internal_set_system(const std::string& value);
  std::string* _internal_mutable_system();
  public:

  // string unit = 3;
  void clear_unit();
  const std::string& unit() const;
  void set_unit(const std::string& value);
  void set_unit(std::string&& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  std::string* mutable_unit();
  std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // float value = 4;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:patient.Quantity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr system_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Reference :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Reference) */ {
 public:
  Reference();
  virtual ~Reference();

  Reference(const Reference& from);
  Reference(Reference&& from) noexcept
    : Reference() {
    *this = ::std::move(from);
  }

  inline Reference& operator=(const Reference& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reference& operator=(Reference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reference* internal_default_instance() {
    return reinterpret_cast<const Reference*>(
               &_Reference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Reference& a, Reference& b) {
    a.Swap(&b);
  }
  inline void Swap(Reference* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reference* New() const final {
    return CreateMaybeMessage<Reference>(nullptr);
  }

  Reference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reference& from);
  void MergeFrom(const Reference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Reference";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceFieldNumber = 1,
    kDisplayFieldNumber = 2,
  };
  // string reference = 1;
  void clear_reference();
  const std::string& reference() const;
  void set_reference(const std::string& value);
  void set_reference(std::string&& value);
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  std::string* mutable_reference();
  std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  private:
  const std::string& _internal_reference() const;
  void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // string display = 2;
  void clear_display();
  const std::string& display() const;
  void set_display(const std::string& value);
  void set_display(std::string&& value);
  void set_display(const char* value);
  void set_display(const char* value, size_t size);
  std::string* mutable_display();
  std::string* release_display();
  void set_allocated_display(std::string* display);
  private:
  const std::string& _internal_display() const;
  void _internal_set_display(const std::string& value);
  std::string* _internal_mutable_display();
  public:

  // @@protoc_insertion_point(class_scope:patient.Reference)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Category :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Category) */ {
 public:
  Category();
  virtual ~Category();

  Category(const Category& from);
  Category(Category&& from) noexcept
    : Category() {
    *this = ::std::move(from);
  }

  inline Category& operator=(const Category& from) {
    CopyFrom(from);
    return *this;
  }
  inline Category& operator=(Category&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Category& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Category* internal_default_instance() {
    return reinterpret_cast<const Category*>(
               &_Category_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Category& a, Category& b) {
    a.Swap(&b);
  }
  inline void Swap(Category* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Category* New() const final {
    return CreateMaybeMessage<Category>(nullptr);
  }

  Category* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Category>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Category& from);
  void MergeFrom(const Category& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Category* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Category";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodingFieldNumber = 1,
    kTextFieldNumber = 2,
  };
  // repeated .patient.Coding coding = 1;
  int coding_size() const;
  private:
  int _internal_coding_size() const;
  public:
  void clear_coding();
  ::patient::Coding* mutable_coding(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Coding >*
      mutable_coding();
  private:
  const ::patient::Coding& _internal_coding(int index) const;
  ::patient::Coding* _internal_add_coding();
  public:
  const ::patient::Coding& coding(int index) const;
  ::patient::Coding* add_coding();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Coding >&
      coding() const;

  // string text = 2;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:patient.Category)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Coding > coding_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Period :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Period) */ {
 public:
  Period();
  virtual ~Period();

  Period(const Period& from);
  Period(Period&& from) noexcept
    : Period() {
    *this = ::std::move(from);
  }

  inline Period& operator=(const Period& from) {
    CopyFrom(from);
    return *this;
  }
  inline Period& operator=(Period&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Period& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Period* internal_default_instance() {
    return reinterpret_cast<const Period*>(
               &_Period_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Period& a, Period& b) {
    a.Swap(&b);
  }
  inline void Swap(Period* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Period* New() const final {
    return CreateMaybeMessage<Period>(nullptr);
  }

  Period* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Period>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Period& from);
  void MergeFrom(const Period& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Period* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Period";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndFieldNumber = 1,
    kStartFieldNumber = 2,
  };
  // string end = 1;
  void clear_end();
  const std::string& end() const;
  void set_end(const std::string& value);
  void set_end(std::string&& value);
  void set_end(const char* value);
  void set_end(const char* value, size_t size);
  std::string* mutable_end();
  std::string* release_end();
  void set_allocated_end(std::string* end);
  private:
  const std::string& _internal_end() const;
  void _internal_set_end(const std::string& value);
  std::string* _internal_mutable_end();
  public:

  // string start = 2;
  void clear_start();
  const std::string& start() const;
  void set_start(const std::string& value);
  void set_start(std::string&& value);
  void set_start(const char* value);
  void set_start(const char* value, size_t size);
  std::string* mutable_start();
  std::string* release_start();
  void set_allocated_start(std::string* start);
  private:
  const std::string& _internal_start() const;
  void _internal_set_start(const std::string& value);
  std::string* _internal_mutable_start();
  public:

  // @@protoc_insertion_point(class_scope:patient.Period)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class Resource :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.Resource) */ {
 public:
  Resource();
  virtual ~Resource();

  Resource(const Resource& from);
  Resource(Resource&& from) noexcept
    : Resource() {
    *this = ::std::move(from);
  }

  inline Resource& operator=(const Resource& from) {
    CopyFrom(from);
    return *this;
  }
  inline Resource& operator=(Resource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Resource& default_instance();

  enum ResourceCase {
    kCarePlan = 2,
    kCareTeam = 3,
    kClaim = 4,
    kCondition = 5,
    kDiagnosticReport = 6,
    kEncounter = 7,
    kExplanationOfBenefit = 8,
    kImmunization = 9,
    kMedicationRequest = 10,
    kObservation = 11,
    kOrganiation = 12,
    kPatient = 13,
    kPractitioner = 14,
    kProcedure = 15,
    RESOURCE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Resource* internal_default_instance() {
    return reinterpret_cast<const Resource*>(
               &_Resource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Resource& a, Resource& b) {
    a.Swap(&b);
  }
  inline void Swap(Resource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Resource* New() const final {
    return CreateMaybeMessage<Resource>(nullptr);
  }

  Resource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Resource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Resource& from);
  void MergeFrom(const Resource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Resource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.Resource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceTypeFieldNumber = 1,
    kCarePlanFieldNumber = 2,
    kCareTeamFieldNumber = 3,
    kClaimFieldNumber = 4,
    kConditionFieldNumber = 5,
    kDiagnosticReportFieldNumber = 6,
    kEncounterFieldNumber = 7,
    kExplanationOfBenefitFieldNumber = 8,
    kImmunizationFieldNumber = 9,
    kMedicationRequestFieldNumber = 10,
    kObservationFieldNumber = 11,
    kOrganiationFieldNumber = 12,
    kPatientFieldNumber = 13,
    kPractitionerFieldNumber = 14,
    kProcedureFieldNumber = 15,
  };
  // .patient.ResourceType resourceType = 1;
  void clear_resourcetype();
  ::patient::ResourceType resourcetype() const;
  void set_resourcetype(::patient::ResourceType value);
  private:
  ::patient::ResourceType _internal_resourcetype() const;
  void _internal_set_resourcetype(::patient::ResourceType value);
  public:

  // .patient.CarePlanObject carePlan = 2;
  bool has_careplan() const;
  private:
  bool _internal_has_careplan() const;
  public:
  void clear_careplan();
  const ::patient::CarePlanObject& careplan() const;
  ::patient::CarePlanObject* release_careplan();
  ::patient::CarePlanObject* mutable_careplan();
  void set_allocated_careplan(::patient::CarePlanObject* careplan);
  private:
  const ::patient::CarePlanObject& _internal_careplan() const;
  ::patient::CarePlanObject* _internal_mutable_careplan();
  public:

  // .patient.CareTeamObject careTeam = 3;
  bool has_careteam() const;
  private:
  bool _internal_has_careteam() const;
  public:
  void clear_careteam();
  const ::patient::CareTeamObject& careteam() const;
  ::patient::CareTeamObject* release_careteam();
  ::patient::CareTeamObject* mutable_careteam();
  void set_allocated_careteam(::patient::CareTeamObject* careteam);
  private:
  const ::patient::CareTeamObject& _internal_careteam() const;
  ::patient::CareTeamObject* _internal_mutable_careteam();
  public:

  // .patient.ClaimObject claim = 4;
  bool has_claim() const;
  private:
  bool _internal_has_claim() const;
  public:
  void clear_claim();
  const ::patient::ClaimObject& claim() const;
  ::patient::ClaimObject* release_claim();
  ::patient::ClaimObject* mutable_claim();
  void set_allocated_claim(::patient::ClaimObject* claim);
  private:
  const ::patient::ClaimObject& _internal_claim() const;
  ::patient::ClaimObject* _internal_mutable_claim();
  public:

  // .patient.ConditionObject condition = 5;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::patient::ConditionObject& condition() const;
  ::patient::ConditionObject* release_condition();
  ::patient::ConditionObject* mutable_condition();
  void set_allocated_condition(::patient::ConditionObject* condition);
  private:
  const ::patient::ConditionObject& _internal_condition() const;
  ::patient::ConditionObject* _internal_mutable_condition();
  public:

  // .patient.DiagnosticReportObject diagnosticReport = 6;
  bool has_diagnosticreport() const;
  private:
  bool _internal_has_diagnosticreport() const;
  public:
  void clear_diagnosticreport();
  const ::patient::DiagnosticReportObject& diagnosticreport() const;
  ::patient::DiagnosticReportObject* release_diagnosticreport();
  ::patient::DiagnosticReportObject* mutable_diagnosticreport();
  void set_allocated_diagnosticreport(::patient::DiagnosticReportObject* diagnosticreport);
  private:
  const ::patient::DiagnosticReportObject& _internal_diagnosticreport() const;
  ::patient::DiagnosticReportObject* _internal_mutable_diagnosticreport();
  public:

  // .patient.EncounterObject encounter = 7;
  bool has_encounter() const;
  private:
  bool _internal_has_encounter() const;
  public:
  void clear_encounter();
  const ::patient::EncounterObject& encounter() const;
  ::patient::EncounterObject* release_encounter();
  ::patient::EncounterObject* mutable_encounter();
  void set_allocated_encounter(::patient::EncounterObject* encounter);
  private:
  const ::patient::EncounterObject& _internal_encounter() const;
  ::patient::EncounterObject* _internal_mutable_encounter();
  public:

  // .patient.ExplanationOfBenefitObject explanationOfBenefit = 8;
  bool has_explanationofbenefit() const;
  private:
  bool _internal_has_explanationofbenefit() const;
  public:
  void clear_explanationofbenefit();
  const ::patient::ExplanationOfBenefitObject& explanationofbenefit() const;
  ::patient::ExplanationOfBenefitObject* release_explanationofbenefit();
  ::patient::ExplanationOfBenefitObject* mutable_explanationofbenefit();
  void set_allocated_explanationofbenefit(::patient::ExplanationOfBenefitObject* explanationofbenefit);
  private:
  const ::patient::ExplanationOfBenefitObject& _internal_explanationofbenefit() const;
  ::patient::ExplanationOfBenefitObject* _internal_mutable_explanationofbenefit();
  public:

  // .patient.ImmunizationObject immunization = 9;
  bool has_immunization() const;
  private:
  bool _internal_has_immunization() const;
  public:
  void clear_immunization();
  const ::patient::ImmunizationObject& immunization() const;
  ::patient::ImmunizationObject* release_immunization();
  ::patient::ImmunizationObject* mutable_immunization();
  void set_allocated_immunization(::patient::ImmunizationObject* immunization);
  private:
  const ::patient::ImmunizationObject& _internal_immunization() const;
  ::patient::ImmunizationObject* _internal_mutable_immunization();
  public:

  // .patient.MedicationRequestObject medicationRequest = 10;
  bool has_medicationrequest() const;
  private:
  bool _internal_has_medicationrequest() const;
  public:
  void clear_medicationrequest();
  const ::patient::MedicationRequestObject& medicationrequest() const;
  ::patient::MedicationRequestObject* release_medicationrequest();
  ::patient::MedicationRequestObject* mutable_medicationrequest();
  void set_allocated_medicationrequest(::patient::MedicationRequestObject* medicationrequest);
  private:
  const ::patient::MedicationRequestObject& _internal_medicationrequest() const;
  ::patient::MedicationRequestObject* _internal_mutable_medicationrequest();
  public:

  // .patient.ObservationObject observation = 11;
  bool has_observation() const;
  private:
  bool _internal_has_observation() const;
  public:
  void clear_observation();
  const ::patient::ObservationObject& observation() const;
  ::patient::ObservationObject* release_observation();
  ::patient::ObservationObject* mutable_observation();
  void set_allocated_observation(::patient::ObservationObject* observation);
  private:
  const ::patient::ObservationObject& _internal_observation() const;
  ::patient::ObservationObject* _internal_mutable_observation();
  public:

  // .patient.OrganizationObject organiation = 12;
  bool has_organiation() const;
  private:
  bool _internal_has_organiation() const;
  public:
  void clear_organiation();
  const ::patient::OrganizationObject& organiation() const;
  ::patient::OrganizationObject* release_organiation();
  ::patient::OrganizationObject* mutable_organiation();
  void set_allocated_organiation(::patient::OrganizationObject* organiation);
  private:
  const ::patient::OrganizationObject& _internal_organiation() const;
  ::patient::OrganizationObject* _internal_mutable_organiation();
  public:

  // .patient.PatientObject patient = 13;
  bool has_patient() const;
  private:
  bool _internal_has_patient() const;
  public:
  void clear_patient();
  const ::patient::PatientObject& patient() const;
  ::patient::PatientObject* release_patient();
  ::patient::PatientObject* mutable_patient();
  void set_allocated_patient(::patient::PatientObject* patient);
  private:
  const ::patient::PatientObject& _internal_patient() const;
  ::patient::PatientObject* _internal_mutable_patient();
  public:

  // .patient.PractitionerObject practitioner = 14;
  bool has_practitioner() const;
  private:
  bool _internal_has_practitioner() const;
  public:
  void clear_practitioner();
  const ::patient::PractitionerObject& practitioner() const;
  ::patient::PractitionerObject* release_practitioner();
  ::patient::PractitionerObject* mutable_practitioner();
  void set_allocated_practitioner(::patient::PractitionerObject* practitioner);
  private:
  const ::patient::PractitionerObject& _internal_practitioner() const;
  ::patient::PractitionerObject* _internal_mutable_practitioner();
  public:

  // .patient.ProcedureObject procedure = 15;
  bool has_procedure() const;
  private:
  bool _internal_has_procedure() const;
  public:
  void clear_procedure();
  const ::patient::ProcedureObject& procedure() const;
  ::patient::ProcedureObject* release_procedure();
  ::patient::ProcedureObject* mutable_procedure();
  void set_allocated_procedure(::patient::ProcedureObject* procedure);
  private:
  const ::patient::ProcedureObject& _internal_procedure() const;
  ::patient::ProcedureObject* _internal_mutable_procedure();
  public:

  void clear_resource();
  ResourceCase resource_case() const;
  // @@protoc_insertion_point(class_scope:patient.Resource)
 private:
  class _Internal;
  void set_has_careplan();
  void set_has_careteam();
  void set_has_claim();
  void set_has_condition();
  void set_has_diagnosticreport();
  void set_has_encounter();
  void set_has_explanationofbenefit();
  void set_has_immunization();
  void set_has_medicationrequest();
  void set_has_observation();
  void set_has_organiation();
  void set_has_patient();
  void set_has_practitioner();
  void set_has_procedure();

  inline bool has_resource() const;
  inline void clear_has_resource();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int resourcetype_;
  union ResourceUnion {
    ResourceUnion() {}
    ::patient::CarePlanObject* careplan_;
    ::patient::CareTeamObject* careteam_;
    ::patient::ClaimObject* claim_;
    ::patient::ConditionObject* condition_;
    ::patient::DiagnosticReportObject* diagnosticreport_;
    ::patient::EncounterObject* encounter_;
    ::patient::ExplanationOfBenefitObject* explanationofbenefit_;
    ::patient::ImmunizationObject* immunization_;
    ::patient::MedicationRequestObject* medicationrequest_;
    ::patient::ObservationObject* observation_;
    ::patient::OrganizationObject* organiation_;
    ::patient::PatientObject* patient_;
    ::patient::PractitionerObject* practitioner_;
    ::patient::ProcedureObject* procedure_;
  } resource_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class CarePlanObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.CarePlanObject) */ {
 public:
  CarePlanObject();
  virtual ~CarePlanObject();

  CarePlanObject(const CarePlanObject& from);
  CarePlanObject(CarePlanObject&& from) noexcept
    : CarePlanObject() {
    *this = ::std::move(from);
  }

  inline CarePlanObject& operator=(const CarePlanObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarePlanObject& operator=(CarePlanObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CarePlanObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CarePlanObject* internal_default_instance() {
    return reinterpret_cast<const CarePlanObject*>(
               &_CarePlanObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CarePlanObject& a, CarePlanObject& b) {
    a.Swap(&b);
  }
  inline void Swap(CarePlanObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CarePlanObject* New() const final {
    return CreateMaybeMessage<CarePlanObject>(nullptr);
  }

  CarePlanObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CarePlanObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CarePlanObject& from);
  void MergeFrom(const CarePlanObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarePlanObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.CarePlanObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivityFieldNumber = 1,
    kAddressesFieldNumber = 2,
    kCareTeamFieldNumber = 3,
    kCategoryFieldNumber = 4,
    kIdFieldNumber = 6,
    kIntentFieldNumber = 7,
    kTextFieldNumber = 12,
    kEncounterFieldNumber = 5,
    kPeriodFieldNumber = 8,
    kSubjectFieldNumber = 11,
    kResourceTypeFieldNumber = 9,
    kStatusFieldNumber = 10,
  };
  // repeated .patient.Activity activity = 1;
  int activity_size() const;
  private:
  int _internal_activity_size() const;
  public:
  void clear_activity();
  ::patient::Activity* mutable_activity(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Activity >*
      mutable_activity();
  private:
  const ::patient::Activity& _internal_activity(int index) const;
  ::patient::Activity* _internal_add_activity();
  public:
  const ::patient::Activity& activity(int index) const;
  ::patient::Activity* add_activity();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Activity >&
      activity() const;

  // repeated .patient.Reference addresses = 2;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  ::patient::Reference* mutable_addresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >*
      mutable_addresses();
  private:
  const ::patient::Reference& _internal_addresses(int index) const;
  ::patient::Reference* _internal_add_addresses();
  public:
  const ::patient::Reference& addresses(int index) const;
  ::patient::Reference* add_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >&
      addresses() const;

  // repeated .patient.CareTeam careTeam = 3;
  int careteam_size() const;
  private:
  int _internal_careteam_size() const;
  public:
  void clear_careteam();
  ::patient::CareTeam* mutable_careteam(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::CareTeam >*
      mutable_careteam();
  private:
  const ::patient::CareTeam& _internal_careteam(int index) const;
  ::patient::CareTeam* _internal_add_careteam();
  public:
  const ::patient::CareTeam& careteam(int index) const;
  ::patient::CareTeam* add_careteam();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::CareTeam >&
      careteam() const;

  // repeated .patient.Category category = 4;
  int category_size() const;
  private:
  int _internal_category_size() const;
  public:
  void clear_category();
  ::patient::Category* mutable_category(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >*
      mutable_category();
  private:
  const ::patient::Category& _internal_category(int index) const;
  ::patient::Category* _internal_add_category();
  public:
  const ::patient::Category& category(int index) const;
  ::patient::Category* add_category();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >&
      category() const;

  // string id = 6;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string intent = 7;
  void clear_intent();
  const std::string& intent() const;
  void set_intent(const std::string& value);
  void set_intent(std::string&& value);
  void set_intent(const char* value);
  void set_intent(const char* value, size_t size);
  std::string* mutable_intent();
  std::string* release_intent();
  void set_allocated_intent(std::string* intent);
  private:
  const std::string& _internal_intent() const;
  void _internal_set_intent(const std::string& value);
  std::string* _internal_mutable_intent();
  public:

  // string text = 12;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .patient.Reference Encounter = 5;
  bool has_encounter() const;
  private:
  bool _internal_has_encounter() const;
  public:
  void clear_encounter();
  const ::patient::Reference& encounter() const;
  ::patient::Reference* release_encounter();
  ::patient::Reference* mutable_encounter();
  void set_allocated_encounter(::patient::Reference* encounter);
  private:
  const ::patient::Reference& _internal_encounter() const;
  ::patient::Reference* _internal_mutable_encounter();
  public:

  // .patient.Period period = 8;
  bool has_period() const;
  private:
  bool _internal_has_period() const;
  public:
  void clear_period();
  const ::patient::Period& period() const;
  ::patient::Period* release_period();
  ::patient::Period* mutable_period();
  void set_allocated_period(::patient::Period* period);
  private:
  const ::patient::Period& _internal_period() const;
  ::patient::Period* _internal_mutable_period();
  public:

  // .patient.Reference subject = 11;
  bool has_subject() const;
  private:
  bool _internal_has_subject() const;
  public:
  void clear_subject();
  const ::patient::Reference& subject() const;
  ::patient::Reference* release_subject();
  ::patient::Reference* mutable_subject();
  void set_allocated_subject(::patient::Reference* subject);
  private:
  const ::patient::Reference& _internal_subject() const;
  ::patient::Reference* _internal_mutable_subject();
  public:

  // .patient.ResourceType resourceType = 9;
  void clear_resourcetype();
  ::patient::ResourceType resourcetype() const;
  void set_resourcetype(::patient::ResourceType value);
  private:
  ::patient::ResourceType _internal_resourcetype() const;
  void _internal_set_resourcetype(::patient::ResourceType value);
  public:

  // .patient.Status status = 10;
  void clear_status();
  ::patient::Status status() const;
  void set_status(::patient::Status value);
  private:
  ::patient::Status _internal_status() const;
  void _internal_set_status(::patient::Status value);
  public:

  // @@protoc_insertion_point(class_scope:patient.CarePlanObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Activity > activity_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference > addresses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::CareTeam > careteam_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category > category_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::patient::Reference* encounter_;
  ::patient::Period* period_;
  ::patient::Reference* subject_;
  int resourcetype_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class CareTeamObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.CareTeamObject) */ {
 public:
  CareTeamObject();
  virtual ~CareTeamObject();

  CareTeamObject(const CareTeamObject& from);
  CareTeamObject(CareTeamObject&& from) noexcept
    : CareTeamObject() {
    *this = ::std::move(from);
  }

  inline CareTeamObject& operator=(const CareTeamObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline CareTeamObject& operator=(CareTeamObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CareTeamObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CareTeamObject* internal_default_instance() {
    return reinterpret_cast<const CareTeamObject*>(
               &_CareTeamObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CareTeamObject& a, CareTeamObject& b) {
    a.Swap(&b);
  }
  inline void Swap(CareTeamObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CareTeamObject* New() const final {
    return CreateMaybeMessage<CareTeamObject>(nullptr);
  }

  CareTeamObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CareTeamObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CareTeamObject& from);
  void MergeFrom(const CareTeamObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CareTeamObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.CareTeamObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kManagingOrganizationFieldNumber = 3,
    kParticipantFieldNumber = 4,
    kReasonCodeFieldNumber = 6,
    kIdFieldNumber = 2,
    kEncounterFieldNumber = 1,
    kPeriodFieldNumber = 5,
    kSubjectFieldNumber = 9,
    kResourceTypeFieldNumber = 7,
    kStatusFieldNumber = 8,
  };
  // repeated .patient.Reference managingOrganization = 3;
  int managingorganization_size() const;
  private:
  int _internal_managingorganization_size() const;
  public:
  void clear_managingorganization();
  ::patient::Reference* mutable_managingorganization(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >*
      mutable_managingorganization();
  private:
  const ::patient::Reference& _internal_managingorganization(int index) const;
  ::patient::Reference* _internal_add_managingorganization();
  public:
  const ::patient::Reference& managingorganization(int index) const;
  ::patient::Reference* add_managingorganization();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >&
      managingorganization() const;

  // repeated .patient.Participant participant = 4;
  int participant_size() const;
  private:
  int _internal_participant_size() const;
  public:
  void clear_participant();
  ::patient::Participant* mutable_participant(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Participant >*
      mutable_participant();
  private:
  const ::patient::Participant& _internal_participant(int index) const;
  ::patient::Participant* _internal_add_participant();
  public:
  const ::patient::Participant& participant(int index) const;
  ::patient::Participant* add_participant();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Participant >&
      participant() const;

  // repeated .patient.Category reasonCode = 6;
  int reasoncode_size() const;
  private:
  int _internal_reasoncode_size() const;
  public:
  void clear_reasoncode();
  ::patient::Category* mutable_reasoncode(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >*
      mutable_reasoncode();
  private:
  const ::patient::Category& _internal_reasoncode(int index) const;
  ::patient::Category* _internal_add_reasoncode();
  public:
  const ::patient::Category& reasoncode(int index) const;
  ::patient::Category* add_reasoncode();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >&
      reasoncode() const;

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .patient.Reference Encounter = 1;
  bool has_encounter() const;
  private:
  bool _internal_has_encounter() const;
  public:
  void clear_encounter();
  const ::patient::Reference& encounter() const;
  ::patient::Reference* release_encounter();
  ::patient::Reference* mutable_encounter();
  void set_allocated_encounter(::patient::Reference* encounter);
  private:
  const ::patient::Reference& _internal_encounter() const;
  ::patient::Reference* _internal_mutable_encounter();
  public:

  // .patient.Period period = 5;
  bool has_period() const;
  private:
  bool _internal_has_period() const;
  public:
  void clear_period();
  const ::patient::Period& period() const;
  ::patient::Period* release_period();
  ::patient::Period* mutable_period();
  void set_allocated_period(::patient::Period* period);
  private:
  const ::patient::Period& _internal_period() const;
  ::patient::Period* _internal_mutable_period();
  public:

  // .patient.Reference subject = 9;
  bool has_subject() const;
  private:
  bool _internal_has_subject() const;
  public:
  void clear_subject();
  const ::patient::Reference& subject() const;
  ::patient::Reference* release_subject();
  ::patient::Reference* mutable_subject();
  void set_allocated_subject(::patient::Reference* subject);
  private:
  const ::patient::Reference& _internal_subject() const;
  ::patient::Reference* _internal_mutable_subject();
  public:

  // .patient.ResourceType resourceType = 7;
  void clear_resourcetype();
  ::patient::ResourceType resourcetype() const;
  void set_resourcetype(::patient::ResourceType value);
  private:
  ::patient::ResourceType _internal_resourcetype() const;
  void _internal_set_resourcetype(::patient::ResourceType value);
  public:

  // .patient.Status status = 8;
  void clear_status();
  ::patient::Status status() const;
  void set_status(::patient::Status value);
  private:
  ::patient::Status _internal_status() const;
  void _internal_set_status(::patient::Status value);
  public:

  // @@protoc_insertion_point(class_scope:patient.CareTeamObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference > managingorganization_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Participant > participant_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category > reasoncode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::patient::Reference* encounter_;
  ::patient::Period* period_;
  ::patient::Reference* subject_;
  int resourcetype_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class ClaimObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.ClaimObject) */ {
 public:
  ClaimObject();
  virtual ~ClaimObject();

  ClaimObject(const ClaimObject& from);
  ClaimObject(ClaimObject&& from) noexcept
    : ClaimObject() {
    *this = ::std::move(from);
  }

  inline ClaimObject& operator=(const ClaimObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClaimObject& operator=(ClaimObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClaimObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClaimObject* internal_default_instance() {
    return reinterpret_cast<const ClaimObject*>(
               &_ClaimObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ClaimObject& a, ClaimObject& b) {
    a.Swap(&b);
  }
  inline void Swap(ClaimObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClaimObject* New() const final {
    return CreateMaybeMessage<ClaimObject>(nullptr);
  }

  ClaimObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClaimObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClaimObject& from);
  void MergeFrom(const ClaimObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClaimObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.ClaimObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiagnosisFieldNumber = 3,
    kInsuranceFieldNumber = 5,
    kItemFieldNumber = 6,
    kProcedureFieldNumber = 10,
    kSupportingInfoFieldNumber = 14,
    kCreatedFieldNumber = 2,
    kIdFieldNumber = 4,
    kUseFieldNumber = 17,
    kBillablePeriodFieldNumber = 1,
    kPatientFieldNumber = 7,
    kPrescriptionFieldNumber = 8,
    kPriorityFieldNumber = 9,
    kProviderFieldNumber = 11,
    kTotalFieldNumber = 15,
    kTypeFieldNumber = 16,
    kResourceTypeFieldNumber = 12,
    kStatusFieldNumber = 13,
  };
  // repeated .patient.Diagnosis diagnosis = 3;
  int diagnosis_size() const;
  private:
  int _internal_diagnosis_size() const;
  public:
  void clear_diagnosis();
  ::patient::Diagnosis* mutable_diagnosis(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Diagnosis >*
      mutable_diagnosis();
  private:
  const ::patient::Diagnosis& _internal_diagnosis(int index) const;
  ::patient::Diagnosis* _internal_add_diagnosis();
  public:
  const ::patient::Diagnosis& diagnosis(int index) const;
  ::patient::Diagnosis* add_diagnosis();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Diagnosis >&
      diagnosis() const;

  // repeated .patient.Insurance insurance = 5;
  int insurance_size() const;
  private:
  int _internal_insurance_size() const;
  public:
  void clear_insurance();
  ::patient::Insurance* mutable_insurance(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Insurance >*
      mutable_insurance();
  private:
  const ::patient::Insurance& _internal_insurance(int index) const;
  ::patient::Insurance* _internal_add_insurance();
  public:
  const ::patient::Insurance& insurance(int index) const;
  ::patient::Insurance* add_insurance();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Insurance >&
      insurance() const;

  // repeated .patient.Item item = 6;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::patient::Item* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Item >*
      mutable_item();
  private:
  const ::patient::Item& _internal_item(int index) const;
  ::patient::Item* _internal_add_item();
  public:
  const ::patient::Item& item(int index) const;
  ::patient::Item* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Item >&
      item() const;

  // repeated .patient.Procedure procedure = 10;
  int procedure_size() const;
  private:
  int _internal_procedure_size() const;
  public:
  void clear_procedure();
  ::patient::Procedure* mutable_procedure(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Procedure >*
      mutable_procedure();
  private:
  const ::patient::Procedure& _internal_procedure(int index) const;
  ::patient::Procedure* _internal_add_procedure();
  public:
  const ::patient::Procedure& procedure(int index) const;
  ::patient::Procedure* add_procedure();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Procedure >&
      procedure() const;

  // repeated .patient.SupportingInfo supportingInfo = 14;
  int supportinginfo_size() const;
  private:
  int _internal_supportinginfo_size() const;
  public:
  void clear_supportinginfo();
  ::patient::SupportingInfo* mutable_supportinginfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::SupportingInfo >*
      mutable_supportinginfo();
  private:
  const ::patient::SupportingInfo& _internal_supportinginfo(int index) const;
  ::patient::SupportingInfo* _internal_add_supportinginfo();
  public:
  const ::patient::SupportingInfo& supportinginfo(int index) const;
  ::patient::SupportingInfo* add_supportinginfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::SupportingInfo >&
      supportinginfo() const;

  // string created = 2;
  void clear_created();
  const std::string& created() const;
  void set_created(const std::string& value);
  void set_created(std::string&& value);
  void set_created(const char* value);
  void set_created(const char* value, size_t size);
  std::string* mutable_created();
  std::string* release_created();
  void set_allocated_created(std::string* created);
  private:
  const std::string& _internal_created() const;
  void _internal_set_created(const std::string& value);
  std::string* _internal_mutable_created();
  public:

  // string id = 4;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string use = 17;
  void clear_use();
  const std::string& use() const;
  void set_use(const std::string& value);
  void set_use(std::string&& value);
  void set_use(const char* value);
  void set_use(const char* value, size_t size);
  std::string* mutable_use();
  std::string* release_use();
  void set_allocated_use(std::string* use);
  private:
  const std::string& _internal_use() const;
  void _internal_set_use(const std::string& value);
  std::string* _internal_mutable_use();
  public:

  // .patient.Period billablePeriod = 1;
  bool has_billableperiod() const;
  private:
  bool _internal_has_billableperiod() const;
  public:
  void clear_billableperiod();
  const ::patient::Period& billableperiod() const;
  ::patient::Period* release_billableperiod();
  ::patient::Period* mutable_billableperiod();
  void set_allocated_billableperiod(::patient::Period* billableperiod);
  private:
  const ::patient::Period& _internal_billableperiod() const;
  ::patient::Period* _internal_mutable_billableperiod();
  public:

  // .patient.Reference patient = 7;
  bool has_patient() const;
  private:
  bool _internal_has_patient() const;
  public:
  void clear_patient();
  const ::patient::Reference& patient() const;
  ::patient::Reference* release_patient();
  ::patient::Reference* mutable_patient();
  void set_allocated_patient(::patient::Reference* patient);
  private:
  const ::patient::Reference& _internal_patient() const;
  ::patient::Reference* _internal_mutable_patient();
  public:

  // .patient.Reference prescription = 8;
  bool has_prescription() const;
  private:
  bool _internal_has_prescription() const;
  public:
  void clear_prescription();
  const ::patient::Reference& prescription() const;
  ::patient::Reference* release_prescription();
  ::patient::Reference* mutable_prescription();
  void set_allocated_prescription(::patient::Reference* prescription);
  private:
  const ::patient::Reference& _internal_prescription() const;
  ::patient::Reference* _internal_mutable_prescription();
  public:

  // .patient.Category priority = 9;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  const ::patient::Category& priority() const;
  ::patient::Category* release_priority();
  ::patient::Category* mutable_priority();
  void set_allocated_priority(::patient::Category* priority);
  private:
  const ::patient::Category& _internal_priority() const;
  ::patient::Category* _internal_mutable_priority();
  public:

  // .patient.Reference provider = 11;
  bool has_provider() const;
  private:
  bool _internal_has_provider() const;
  public:
  void clear_provider();
  const ::patient::Reference& provider() const;
  ::patient::Reference* release_provider();
  ::patient::Reference* mutable_provider();
  void set_allocated_provider(::patient::Reference* provider);
  private:
  const ::patient::Reference& _internal_provider() const;
  ::patient::Reference* _internal_mutable_provider();
  public:

  // .patient.Total total = 15;
  bool has_total() const;
  private:
  bool _internal_has_total() const;
  public:
  void clear_total();
  const ::patient::Total& total() const;
  ::patient::Total* release_total();
  ::patient::Total* mutable_total();
  void set_allocated_total(::patient::Total* total);
  private:
  const ::patient::Total& _internal_total() const;
  ::patient::Total* _internal_mutable_total();
  public:

  // .patient.Category type = 16;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::patient::Category& type() const;
  ::patient::Category* release_type();
  ::patient::Category* mutable_type();
  void set_allocated_type(::patient::Category* type);
  private:
  const ::patient::Category& _internal_type() const;
  ::patient::Category* _internal_mutable_type();
  public:

  // .patient.ResourceType resourceType = 12;
  void clear_resourcetype();
  ::patient::ResourceType resourcetype() const;
  void set_resourcetype(::patient::ResourceType value);
  private:
  ::patient::ResourceType _internal_resourcetype() const;
  void _internal_set_resourcetype(::patient::ResourceType value);
  public:

  // .patient.Status status = 13;
  void clear_status();
  ::patient::Status status() const;
  void set_status(::patient::Status value);
  private:
  ::patient::Status _internal_status() const;
  void _internal_set_status(::patient::Status value);
  public:

  // @@protoc_insertion_point(class_scope:patient.ClaimObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Diagnosis > diagnosis_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Insurance > insurance_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Item > item_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Procedure > procedure_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::SupportingInfo > supportinginfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr use_;
  ::patient::Period* billableperiod_;
  ::patient::Reference* patient_;
  ::patient::Reference* prescription_;
  ::patient::Category* priority_;
  ::patient::Reference* provider_;
  ::patient::Total* total_;
  ::patient::Category* type_;
  int resourcetype_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class ConditionObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.ConditionObject) */ {
 public:
  ConditionObject();
  virtual ~ConditionObject();

  ConditionObject(const ConditionObject& from);
  ConditionObject(ConditionObject&& from) noexcept
    : ConditionObject() {
    *this = ::std::move(from);
  }

  inline ConditionObject& operator=(const ConditionObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConditionObject& operator=(ConditionObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConditionObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConditionObject* internal_default_instance() {
    return reinterpret_cast<const ConditionObject*>(
               &_ConditionObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ConditionObject& a, ConditionObject& b) {
    a.Swap(&b);
  }
  inline void Swap(ConditionObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConditionObject* New() const final {
    return CreateMaybeMessage<ConditionObject>(nullptr);
  }

  ConditionObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConditionObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConditionObject& from);
  void MergeFrom(const ConditionObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.ConditionObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbatementDateTimeFieldNumber = 1,
    kIdFieldNumber = 5,
    kOnsetDateTimeFieldNumber = 6,
    kRecordedDateFieldNumber = 7,
    kClinicalStatusFieldNumber = 2,
    kCodeFieldNumber = 3,
    kEncounterFieldNumber = 4,
    kSubjectFieldNumber = 9,
    kVerificationStatusFieldNumber = 10,
    kResourceTypeFieldNumber = 8,
  };
  // string abatementDateTime = 1;
  void clear_abatementdatetime();
  const std::string& abatementdatetime() const;
  void set_abatementdatetime(const std::string& value);
  void set_abatementdatetime(std::string&& value);
  void set_abatementdatetime(const char* value);
  void set_abatementdatetime(const char* value, size_t size);
  std::string* mutable_abatementdatetime();
  std::string* release_abatementdatetime();
  void set_allocated_abatementdatetime(std::string* abatementdatetime);
  private:
  const std::string& _internal_abatementdatetime() const;
  void _internal_set_abatementdatetime(const std::string& value);
  std::string* _internal_mutable_abatementdatetime();
  public:

  // string id = 5;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string onsetDateTime = 6;
  void clear_onsetdatetime();
  const std::string& onsetdatetime() const;
  void set_onsetdatetime(const std::string& value);
  void set_onsetdatetime(std::string&& value);
  void set_onsetdatetime(const char* value);
  void set_onsetdatetime(const char* value, size_t size);
  std::string* mutable_onsetdatetime();
  std::string* release_onsetdatetime();
  void set_allocated_onsetdatetime(std::string* onsetdatetime);
  private:
  const std::string& _internal_onsetdatetime() const;
  void _internal_set_onsetdatetime(const std::string& value);
  std::string* _internal_mutable_onsetdatetime();
  public:

  // string recordedDate = 7;
  void clear_recordeddate();
  const std::string& recordeddate() const;
  void set_recordeddate(const std::string& value);
  void set_recordeddate(std::string&& value);
  void set_recordeddate(const char* value);
  void set_recordeddate(const char* value, size_t size);
  std::string* mutable_recordeddate();
  std::string* release_recordeddate();
  void set_allocated_recordeddate(std::string* recordeddate);
  private:
  const std::string& _internal_recordeddate() const;
  void _internal_set_recordeddate(const std::string& value);
  std::string* _internal_mutable_recordeddate();
  public:

  // .patient.Category clinicalStatus = 2;
  bool has_clinicalstatus() const;
  private:
  bool _internal_has_clinicalstatus() const;
  public:
  void clear_clinicalstatus();
  const ::patient::Category& clinicalstatus() const;
  ::patient::Category* release_clinicalstatus();
  ::patient::Category* mutable_clinicalstatus();
  void set_allocated_clinicalstatus(::patient::Category* clinicalstatus);
  private:
  const ::patient::Category& _internal_clinicalstatus() const;
  ::patient::Category* _internal_mutable_clinicalstatus();
  public:

  // .patient.Category code = 3;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  const ::patient::Category& code() const;
  ::patient::Category* release_code();
  ::patient::Category* mutable_code();
  void set_allocated_code(::patient::Category* code);
  private:
  const ::patient::Category& _internal_code() const;
  ::patient::Category* _internal_mutable_code();
  public:

  // .patient.Reference encounter = 4;
  bool has_encounter() const;
  private:
  bool _internal_has_encounter() const;
  public:
  void clear_encounter();
  const ::patient::Reference& encounter() const;
  ::patient::Reference* release_encounter();
  ::patient::Reference* mutable_encounter();
  void set_allocated_encounter(::patient::Reference* encounter);
  private:
  const ::patient::Reference& _internal_encounter() const;
  ::patient::Reference* _internal_mutable_encounter();
  public:

  // .patient.Reference subject = 9;
  bool has_subject() const;
  private:
  bool _internal_has_subject() const;
  public:
  void clear_subject();
  const ::patient::Reference& subject() const;
  ::patient::Reference* release_subject();
  ::patient::Reference* mutable_subject();
  void set_allocated_subject(::patient::Reference* subject);
  private:
  const ::patient::Reference& _internal_subject() const;
  ::patient::Reference* _internal_mutable_subject();
  public:

  // .patient.Category verificationStatus = 10;
  bool has_verificationstatus() const;
  private:
  bool _internal_has_verificationstatus() const;
  public:
  void clear_verificationstatus();
  const ::patient::Category& verificationstatus() const;
  ::patient::Category* release_verificationstatus();
  ::patient::Category* mutable_verificationstatus();
  void set_allocated_verificationstatus(::patient::Category* verificationstatus);
  private:
  const ::patient::Category& _internal_verificationstatus() const;
  ::patient::Category* _internal_mutable_verificationstatus();
  public:

  // .patient.ResourceType resourceType = 8;
  void clear_resourcetype();
  ::patient::ResourceType resourcetype() const;
  void set_resourcetype(::patient::ResourceType value);
  private:
  ::patient::ResourceType _internal_resourcetype() const;
  void _internal_set_resourcetype(::patient::ResourceType value);
  public:

  // @@protoc_insertion_point(class_scope:patient.ConditionObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr abatementdatetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr onsetdatetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordeddate_;
  ::patient::Category* clinicalstatus_;
  ::patient::Category* code_;
  ::patient::Reference* encounter_;
  ::patient::Reference* subject_;
  ::patient::Category* verificationstatus_;
  int resourcetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class DiagnosticReportObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.DiagnosticReportObject) */ {
 public:
  DiagnosticReportObject();
  virtual ~DiagnosticReportObject();

  DiagnosticReportObject(const DiagnosticReportObject& from);
  DiagnosticReportObject(DiagnosticReportObject&& from) noexcept
    : DiagnosticReportObject() {
    *this = ::std::move(from);
  }

  inline DiagnosticReportObject& operator=(const DiagnosticReportObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosticReportObject& operator=(DiagnosticReportObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiagnosticReportObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosticReportObject* internal_default_instance() {
    return reinterpret_cast<const DiagnosticReportObject*>(
               &_DiagnosticReportObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(DiagnosticReportObject& a, DiagnosticReportObject& b) {
    a.Swap(&b);
  }
  inline void Swap(DiagnosticReportObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiagnosticReportObject* New() const final {
    return CreateMaybeMessage<DiagnosticReportObject>(nullptr);
  }

  DiagnosticReportObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosticReportObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiagnosticReportObject& from);
  void MergeFrom(const DiagnosticReportObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosticReportObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.DiagnosticReportObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryFieldNumber = 1,
    kResultFieldNumber = 8,
    kEffectiveDateTimeFieldNumber = 3,
    kIdFieldNumber = 5,
    kIssuedFieldNumber = 6,
    kCodeFieldNumber = 2,
    kEncounterFieldNumber = 4,
    kSubjectFieldNumber = 10,
    kResourceTypeFieldNumber = 7,
    kStatusFieldNumber = 9,
  };
  // repeated .patient.Category category = 1;
  int category_size() const;
  private:
  int _internal_category_size() const;
  public:
  void clear_category();
  ::patient::Category* mutable_category(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >*
      mutable_category();
  private:
  const ::patient::Category& _internal_category(int index) const;
  ::patient::Category* _internal_add_category();
  public:
  const ::patient::Category& category(int index) const;
  ::patient::Category* add_category();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >&
      category() const;

  // repeated .patient.Reference result = 8;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::patient::Reference* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >*
      mutable_result();
  private:
  const ::patient::Reference& _internal_result(int index) const;
  ::patient::Reference* _internal_add_result();
  public:
  const ::patient::Reference& result(int index) const;
  ::patient::Reference* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >&
      result() const;

  // string effectiveDateTime = 3;
  void clear_effectivedatetime();
  const std::string& effectivedatetime() const;
  void set_effectivedatetime(const std::string& value);
  void set_effectivedatetime(std::string&& value);
  void set_effectivedatetime(const char* value);
  void set_effectivedatetime(const char* value, size_t size);
  std::string* mutable_effectivedatetime();
  std::string* release_effectivedatetime();
  void set_allocated_effectivedatetime(std::string* effectivedatetime);
  private:
  const std::string& _internal_effectivedatetime() const;
  void _internal_set_effectivedatetime(const std::string& value);
  std::string* _internal_mutable_effectivedatetime();
  public:

  // string id = 5;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string issued = 6;
  void clear_issued();
  const std::string& issued() const;
  void set_issued(const std::string& value);
  void set_issued(std::string&& value);
  void set_issued(const char* value);
  void set_issued(const char* value, size_t size);
  std::string* mutable_issued();
  std::string* release_issued();
  void set_allocated_issued(std::string* issued);
  private:
  const std::string& _internal_issued() const;
  void _internal_set_issued(const std::string& value);
  std::string* _internal_mutable_issued();
  public:

  // .patient.Category code = 2;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  const ::patient::Category& code() const;
  ::patient::Category* release_code();
  ::patient::Category* mutable_code();
  void set_allocated_code(::patient::Category* code);
  private:
  const ::patient::Category& _internal_code() const;
  ::patient::Category* _internal_mutable_code();
  public:

  // .patient.Reference encounter = 4;
  bool has_encounter() const;
  private:
  bool _internal_has_encounter() const;
  public:
  void clear_encounter();
  const ::patient::Reference& encounter() const;
  ::patient::Reference* release_encounter();
  ::patient::Reference* mutable_encounter();
  void set_allocated_encounter(::patient::Reference* encounter);
  private:
  const ::patient::Reference& _internal_encounter() const;
  ::patient::Reference* _internal_mutable_encounter();
  public:

  // .patient.Reference Subject = 10;
  bool has_subject() const;
  private:
  bool _internal_has_subject() const;
  public:
  void clear_subject();
  const ::patient::Reference& subject() const;
  ::patient::Reference* release_subject();
  ::patient::Reference* mutable_subject();
  void set_allocated_subject(::patient::Reference* subject);
  private:
  const ::patient::Reference& _internal_subject() const;
  ::patient::Reference* _internal_mutable_subject();
  public:

  // .patient.ResourceType resourceType = 7;
  void clear_resourcetype();
  ::patient::ResourceType resourcetype() const;
  void set_resourcetype(::patient::ResourceType value);
  private:
  ::patient::ResourceType _internal_resourcetype() const;
  void _internal_set_resourcetype(::patient::ResourceType value);
  public:

  // .patient.Status status = 9;
  void clear_status();
  ::patient::Status status() const;
  void set_status(::patient::Status value);
  private:
  ::patient::Status _internal_status() const;
  void _internal_set_status(::patient::Status value);
  public:

  // @@protoc_insertion_point(class_scope:patient.DiagnosticReportObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category > category_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference > result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effectivedatetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr issued_;
  ::patient::Category* code_;
  ::patient::Reference* encounter_;
  ::patient::Reference* subject_;
  int resourcetype_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class EncounterObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.EncounterObject) */ {
 public:
  EncounterObject();
  virtual ~EncounterObject();

  EncounterObject(const EncounterObject& from);
  EncounterObject(EncounterObject&& from) noexcept
    : EncounterObject() {
    *this = ::std::move(from);
  }

  inline EncounterObject& operator=(const EncounterObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncounterObject& operator=(EncounterObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EncounterObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncounterObject* internal_default_instance() {
    return reinterpret_cast<const EncounterObject*>(
               &_EncounterObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(EncounterObject& a, EncounterObject& b) {
    a.Swap(&b);
  }
  inline void Swap(EncounterObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncounterObject* New() const final {
    return CreateMaybeMessage<EncounterObject>(nullptr);
  }

  EncounterObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncounterObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EncounterObject& from);
  void MergeFrom(const EncounterObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncounterObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.EncounterObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParticipantFieldNumber = 3,
    kReasonCodeFieldNumber = 5,
    kTypeFieldNumber = 10,
    kIdFieldNumber = 2,
    kClassFieldNumber = 1,
    kPeriodFieldNumber = 4,
    kServiceProviderFieldNumber = 7,
    kSubjectFieldNumber = 9,
    kResourceTypeFieldNumber = 6,
    kStatusFieldNumber = 8,
  };
  // repeated .patient.Participant participant = 3;
  int participant_size() const;
  private:
  int _internal_participant_size() const;
  public:
  void clear_participant();
  ::patient::Participant* mutable_participant(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Participant >*
      mutable_participant();
  private:
  const ::patient::Participant& _internal_participant(int index) const;
  ::patient::Participant* _internal_add_participant();
  public:
  const ::patient::Participant& participant(int index) const;
  ::patient::Participant* add_participant();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Participant >&
      participant() const;

  // repeated .patient.Category reasonCode = 5;
  int reasoncode_size() const;
  private:
  int _internal_reasoncode_size() const;
  public:
  void clear_reasoncode();
  ::patient::Category* mutable_reasoncode(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >*
      mutable_reasoncode();
  private:
  const ::patient::Category& _internal_reasoncode(int index) const;
  ::patient::Category* _internal_add_reasoncode();
  public:
  const ::patient::Category& reasoncode(int index) const;
  ::patient::Category* add_reasoncode();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >&
      reasoncode() const;

  // repeated .patient.Category type = 10;
  int type_size() const;
  private:
  int _internal_type_size() const;
  public:
  void clear_type();
  ::patient::Category* mutable_type(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >*
      mutable_type();
  private:
  const ::patient::Category& _internal_type(int index) const;
  ::patient::Category* _internal_add_type();
  public:
  const ::patient::Category& type(int index) const;
  ::patient::Category* add_type();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >&
      type() const;

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .patient.Category class = 1;
  bool has_class_() const;
  private:
  bool _internal_has_class_() const;
  public:
  void clear_class_();
  const ::patient::Category& class_() const;
  ::patient::Category* release_class_();
  ::patient::Category* mutable_class_();
  void set_allocated_class_(::patient::Category* class_);
  private:
  const ::patient::Category& _internal_class_() const;
  ::patient::Category* _internal_mutable_class_();
  public:

  // .patient.Period period = 4;
  bool has_period() const;
  private:
  bool _internal_has_period() const;
  public:
  void clear_period();
  const ::patient::Period& period() const;
  ::patient::Period* release_period();
  ::patient::Period* mutable_period();
  void set_allocated_period(::patient::Period* period);
  private:
  const ::patient::Period& _internal_period() const;
  ::patient::Period* _internal_mutable_period();
  public:

  // .patient.Reference serviceProvider = 7;
  bool has_serviceprovider() const;
  private:
  bool _internal_has_serviceprovider() const;
  public:
  void clear_serviceprovider();
  const ::patient::Reference& serviceprovider() const;
  ::patient::Reference* release_serviceprovider();
  ::patient::Reference* mutable_serviceprovider();
  void set_allocated_serviceprovider(::patient::Reference* serviceprovider);
  private:
  const ::patient::Reference& _internal_serviceprovider() const;
  ::patient::Reference* _internal_mutable_serviceprovider();
  public:

  // .patient.Reference subject = 9;
  bool has_subject() const;
  private:
  bool _internal_has_subject() const;
  public:
  void clear_subject();
  const ::patient::Reference& subject() const;
  ::patient::Reference* release_subject();
  ::patient::Reference* mutable_subject();
  void set_allocated_subject(::patient::Reference* subject);
  private:
  const ::patient::Reference& _internal_subject() const;
  ::patient::Reference* _internal_mutable_subject();
  public:

  // .patient.ResourceType resourceType = 6;
  void clear_resourcetype();
  ::patient::ResourceType resourcetype() const;
  void set_resourcetype(::patient::ResourceType value);
  private:
  ::patient::ResourceType _internal_resourcetype() const;
  void _internal_set_resourcetype(::patient::ResourceType value);
  public:

  // .patient.Status status = 8;
  void clear_status();
  ::patient::Status status() const;
  void set_status(::patient::Status value);
  private:
  ::patient::Status _internal_status() const;
  void _internal_set_status(::patient::Status value);
  public:

  // @@protoc_insertion_point(class_scope:patient.EncounterObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Participant > participant_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category > reasoncode_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category > type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::patient::Category* class__;
  ::patient::Period* period_;
  ::patient::Reference* serviceprovider_;
  ::patient::Reference* subject_;
  int resourcetype_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class ExplanationOfBenefitObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.ExplanationOfBenefitObject) */ {
 public:
  ExplanationOfBenefitObject();
  virtual ~ExplanationOfBenefitObject();

  ExplanationOfBenefitObject(const ExplanationOfBenefitObject& from);
  ExplanationOfBenefitObject(ExplanationOfBenefitObject&& from) noexcept
    : ExplanationOfBenefitObject() {
    *this = ::std::move(from);
  }

  inline ExplanationOfBenefitObject& operator=(const ExplanationOfBenefitObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExplanationOfBenefitObject& operator=(ExplanationOfBenefitObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExplanationOfBenefitObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExplanationOfBenefitObject* internal_default_instance() {
    return reinterpret_cast<const ExplanationOfBenefitObject*>(
               &_ExplanationOfBenefitObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ExplanationOfBenefitObject& a, ExplanationOfBenefitObject& b) {
    a.Swap(&b);
  }
  inline void Swap(ExplanationOfBenefitObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExplanationOfBenefitObject* New() const final {
    return CreateMaybeMessage<ExplanationOfBenefitObject>(nullptr);
  }

  ExplanationOfBenefitObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExplanationOfBenefitObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExplanationOfBenefitObject& from);
  void MergeFrom(const ExplanationOfBenefitObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExplanationOfBenefitObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.ExplanationOfBenefitObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCareteamFieldNumber = 2,
    kContainedFieldNumber = 4,
    kDiagnosisFieldNumber = 6,
    kIdentifierFieldNumber = 8,
    kInsuranceFieldNumber = 9,
    kItemFieldNumber = 11,
    kTotalFieldNumber = 19,
    kCreatedFieldNumber = 5,
    kIdFieldNumber = 7,
    kOutcomeFieldNumber = 12,
    kUseFieldNumber = 21,
    kBillablePeriodFieldNumber = 1,
    kClaimFieldNumber = 3,
    kInsurerFieldNumber = 10,
    kPatientFieldNumber = 13,
    kPaymentFieldNumber = 14,
    kProviderFieldNumber = 15,
    kReferralFieldNumber = 16,
    kTypeFieldNumber = 20,
    kResourceTypeFieldNumber = 17,
    kStatusFieldNumber = 18,
  };
  // repeated .patient.CareTeam careteam = 2;
  int careteam_size() const;
  private:
  int _internal_careteam_size() const;
  public:
  void clear_careteam();
  ::patient::CareTeam* mutable_careteam(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::CareTeam >*
      mutable_careteam();
  private:
  const ::patient::CareTeam& _internal_careteam(int index) const;
  ::patient::CareTeam* _internal_add_careteam();
  public:
  const ::patient::CareTeam& careteam(int index) const;
  ::patient::CareTeam* add_careteam();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::CareTeam >&
      careteam() const;

  // repeated .patient.Contained contained = 4;
  int contained_size() const;
  private:
  int _internal_contained_size() const;
  public:
  void clear_contained();
  ::patient::Contained* mutable_contained(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Contained >*
      mutable_contained();
  private:
  const ::patient::Contained& _internal_contained(int index) const;
  ::patient::Contained* _internal_add_contained();
  public:
  const ::patient::Contained& contained(int index) const;
  ::patient::Contained* add_contained();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Contained >&
      contained() const;

  // repeated .patient.Diagnosis diagnosis = 6;
  int diagnosis_size() const;
  private:
  int _internal_diagnosis_size() const;
  public:
  void clear_diagnosis();
  ::patient::Diagnosis* mutable_diagnosis(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Diagnosis >*
      mutable_diagnosis();
  private:
  const ::patient::Diagnosis& _internal_diagnosis(int index) const;
  ::patient::Diagnosis* _internal_add_diagnosis();
  public:
  const ::patient::Diagnosis& diagnosis(int index) const;
  ::patient::Diagnosis* add_diagnosis();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Diagnosis >&
      diagnosis() const;

  // repeated .patient.Identifier identifier = 8;
  int identifier_size() const;
  private:
  int _internal_identifier_size() const;
  public:
  void clear_identifier();
  ::patient::Identifier* mutable_identifier(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Identifier >*
      mutable_identifier();
  private:
  const ::patient::Identifier& _internal_identifier(int index) const;
  ::patient::Identifier* _internal_add_identifier();
  public:
  const ::patient::Identifier& identifier(int index) const;
  ::patient::Identifier* add_identifier();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Identifier >&
      identifier() const;

  // repeated .patient.Insurance insurance = 9;
  int insurance_size() const;
  private:
  int _internal_insurance_size() const;
  public:
  void clear_insurance();
  ::patient::Insurance* mutable_insurance(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Insurance >*
      mutable_insurance();
  private:
  const ::patient::Insurance& _internal_insurance(int index) const;
  ::patient::Insurance* _internal_add_insurance();
  public:
  const ::patient::Insurance& insurance(int index) const;
  ::patient::Insurance* add_insurance();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Insurance >&
      insurance() const;

  // repeated .patient.Item item = 11;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::patient::Item* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Item >*
      mutable_item();
  private:
  const ::patient::Item& _internal_item(int index) const;
  ::patient::Item* _internal_add_item();
  public:
  const ::patient::Item& item(int index) const;
  ::patient::Item* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Item >&
      item() const;

  // repeated .patient.Total total = 19;
  int total_size() const;
  private:
  int _internal_total_size() const;
  public:
  void clear_total();
  ::patient::Total* mutable_total(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Total >*
      mutable_total();
  private:
  const ::patient::Total& _internal_total(int index) const;
  ::patient::Total* _internal_add_total();
  public:
  const ::patient::Total& total(int index) const;
  ::patient::Total* add_total();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Total >&
      total() const;

  // string created = 5;
  void clear_created();
  const std::string& created() const;
  void set_created(const std::string& value);
  void set_created(std::string&& value);
  void set_created(const char* value);
  void set_created(const char* value, size_t size);
  std::string* mutable_created();
  std::string* release_created();
  void set_allocated_created(std::string* created);
  private:
  const std::string& _internal_created() const;
  void _internal_set_created(const std::string& value);
  std::string* _internal_mutable_created();
  public:

  // string id = 7;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string outcome = 12;
  void clear_outcome();
  const std::string& outcome() const;
  void set_outcome(const std::string& value);
  void set_outcome(std::string&& value);
  void set_outcome(const char* value);
  void set_outcome(const char* value, size_t size);
  std::string* mutable_outcome();
  std::string* release_outcome();
  void set_allocated_outcome(std::string* outcome);
  private:
  const std::string& _internal_outcome() const;
  void _internal_set_outcome(const std::string& value);
  std::string* _internal_mutable_outcome();
  public:

  // string use = 21;
  void clear_use();
  const std::string& use() const;
  void set_use(const std::string& value);
  void set_use(std::string&& value);
  void set_use(const char* value);
  void set_use(const char* value, size_t size);
  std::string* mutable_use();
  std::string* release_use();
  void set_allocated_use(std::string* use);
  private:
  const std::string& _internal_use() const;
  void _internal_set_use(const std::string& value);
  std::string* _internal_mutable_use();
  public:

  // .patient.Period billablePeriod = 1;
  bool has_billableperiod() const;
  private:
  bool _internal_has_billableperiod() const;
  public:
  void clear_billableperiod();
  const ::patient::Period& billableperiod() const;
  ::patient::Period* release_billableperiod();
  ::patient::Period* mutable_billableperiod();
  void set_allocated_billableperiod(::patient::Period* billableperiod);
  private:
  const ::patient::Period& _internal_billableperiod() const;
  ::patient::Period* _internal_mutable_billableperiod();
  public:

  // .patient.Reference claim = 3;
  bool has_claim() const;
  private:
  bool _internal_has_claim() const;
  public:
  void clear_claim();
  const ::patient::Reference& claim() const;
  ::patient::Reference* release_claim();
  ::patient::Reference* mutable_claim();
  void set_allocated_claim(::patient::Reference* claim);
  private:
  const ::patient::Reference& _internal_claim() const;
  ::patient::Reference* _internal_mutable_claim();
  public:

  // .patient.Reference insurer = 10;
  bool has_insurer() const;
  private:
  bool _internal_has_insurer() const;
  public:
  void clear_insurer();
  const ::patient::Reference& insurer() const;
  ::patient::Reference* release_insurer();
  ::patient::Reference* mutable_insurer();
  void set_allocated_insurer(::patient::Reference* insurer);
  private:
  const ::patient::Reference& _internal_insurer() const;
  ::patient::Reference* _internal_mutable_insurer();
  public:

  // .patient.Reference patient = 13;
  bool has_patient() const;
  private:
  bool _internal_has_patient() const;
  public:
  void clear_patient();
  const ::patient::Reference& patient() const;
  ::patient::Reference* release_patient();
  ::patient::Reference* mutable_patient();
  void set_allocated_patient(::patient::Reference* patient);
  private:
  const ::patient::Reference& _internal_patient() const;
  ::patient::Reference* _internal_mutable_patient();
  public:

  // .patient.Payment payment = 14;
  bool has_payment() const;
  private:
  bool _internal_has_payment() const;
  public:
  void clear_payment();
  const ::patient::Payment& payment() const;
  ::patient::Payment* release_payment();
  ::patient::Payment* mutable_payment();
  void set_allocated_payment(::patient::Payment* payment);
  private:
  const ::patient::Payment& _internal_payment() const;
  ::patient::Payment* _internal_mutable_payment();
  public:

  // .patient.Reference provider = 15;
  bool has_provider() const;
  private:
  bool _internal_has_provider() const;
  public:
  void clear_provider();
  const ::patient::Reference& provider() const;
  ::patient::Reference* release_provider();
  ::patient::Reference* mutable_provider();
  void set_allocated_provider(::patient::Reference* provider);
  private:
  const ::patient::Reference& _internal_provider() const;
  ::patient::Reference* _internal_mutable_provider();
  public:

  // .patient.Reference referral = 16;
  bool has_referral() const;
  private:
  bool _internal_has_referral() const;
  public:
  void clear_referral();
  const ::patient::Reference& referral() const;
  ::patient::Reference* release_referral();
  ::patient::Reference* mutable_referral();
  void set_allocated_referral(::patient::Reference* referral);
  private:
  const ::patient::Reference& _internal_referral() const;
  ::patient::Reference* _internal_mutable_referral();
  public:

  // .patient.Category type = 20;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::patient::Category& type() const;
  ::patient::Category* release_type();
  ::patient::Category* mutable_type();
  void set_allocated_type(::patient::Category* type);
  private:
  const ::patient::Category& _internal_type() const;
  ::patient::Category* _internal_mutable_type();
  public:

  // .patient.ResourceType resourceType = 17;
  void clear_resourcetype();
  ::patient::ResourceType resourcetype() const;
  void set_resourcetype(::patient::ResourceType value);
  private:
  ::patient::ResourceType _internal_resourcetype() const;
  void _internal_set_resourcetype(::patient::ResourceType value);
  public:

  // .patient.Status status = 18;
  void clear_status();
  ::patient::Status status() const;
  void set_status(::patient::Status value);
  private:
  ::patient::Status _internal_status() const;
  void _internal_set_status(::patient::Status value);
  public:

  // @@protoc_insertion_point(class_scope:patient.ExplanationOfBenefitObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::CareTeam > careteam_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Contained > contained_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Diagnosis > diagnosis_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Identifier > identifier_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Insurance > insurance_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Item > item_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Total > total_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outcome_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr use_;
  ::patient::Period* billableperiod_;
  ::patient::Reference* claim_;
  ::patient::Reference* insurer_;
  ::patient::Reference* patient_;
  ::patient::Payment* payment_;
  ::patient::Reference* provider_;
  ::patient::Reference* referral_;
  ::patient::Category* type_;
  int resourcetype_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class ImmunizationObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.ImmunizationObject) */ {
 public:
  ImmunizationObject();
  virtual ~ImmunizationObject();

  ImmunizationObject(const ImmunizationObject& from);
  ImmunizationObject(ImmunizationObject&& from) noexcept
    : ImmunizationObject() {
    *this = ::std::move(from);
  }

  inline ImmunizationObject& operator=(const ImmunizationObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImmunizationObject& operator=(ImmunizationObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImmunizationObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImmunizationObject* internal_default_instance() {
    return reinterpret_cast<const ImmunizationObject*>(
               &_ImmunizationObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ImmunizationObject& a, ImmunizationObject& b) {
    a.Swap(&b);
  }
  inline void Swap(ImmunizationObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImmunizationObject* New() const final {
    return CreateMaybeMessage<ImmunizationObject>(nullptr);
  }

  ImmunizationObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImmunizationObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImmunizationObject& from);
  void MergeFrom(const ImmunizationObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImmunizationObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.ImmunizationObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kOccurenceDateTimeFieldNumber = 3,
    kEncounterFieldNumber = 1,
    kPatientFieldNumber = 4,
    kVaccineCodeFieldNumber = 8,
    kPrimarySourceFieldNumber = 5,
    kResourceTypeFieldNumber = 6,
    kStatusFieldNumber = 7,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string occurenceDateTime = 3;
  void clear_occurencedatetime();
  const std::string& occurencedatetime() const;
  void set_occurencedatetime(const std::string& value);
  void set_occurencedatetime(std::string&& value);
  void set_occurencedatetime(const char* value);
  void set_occurencedatetime(const char* value, size_t size);
  std::string* mutable_occurencedatetime();
  std::string* release_occurencedatetime();
  void set_allocated_occurencedatetime(std::string* occurencedatetime);
  private:
  const std::string& _internal_occurencedatetime() const;
  void _internal_set_occurencedatetime(const std::string& value);
  std::string* _internal_mutable_occurencedatetime();
  public:

  // .patient.Reference encounter = 1;
  bool has_encounter() const;
  private:
  bool _internal_has_encounter() const;
  public:
  void clear_encounter();
  const ::patient::Reference& encounter() const;
  ::patient::Reference* release_encounter();
  ::patient::Reference* mutable_encounter();
  void set_allocated_encounter(::patient::Reference* encounter);
  private:
  const ::patient::Reference& _internal_encounter() const;
  ::patient::Reference* _internal_mutable_encounter();
  public:

  // .patient.Reference patient = 4;
  bool has_patient() const;
  private:
  bool _internal_has_patient() const;
  public:
  void clear_patient();
  const ::patient::Reference& patient() const;
  ::patient::Reference* release_patient();
  ::patient::Reference* mutable_patient();
  void set_allocated_patient(::patient::Reference* patient);
  private:
  const ::patient::Reference& _internal_patient() const;
  ::patient::Reference* _internal_mutable_patient();
  public:

  // .patient.Category vaccineCode = 8;
  bool has_vaccinecode() const;
  private:
  bool _internal_has_vaccinecode() const;
  public:
  void clear_vaccinecode();
  const ::patient::Category& vaccinecode() const;
  ::patient::Category* release_vaccinecode();
  ::patient::Category* mutable_vaccinecode();
  void set_allocated_vaccinecode(::patient::Category* vaccinecode);
  private:
  const ::patient::Category& _internal_vaccinecode() const;
  ::patient::Category* _internal_mutable_vaccinecode();
  public:

  // bool primarySource = 5;
  void clear_primarysource();
  bool primarysource() const;
  void set_primarysource(bool value);
  private:
  bool _internal_primarysource() const;
  void _internal_set_primarysource(bool value);
  public:

  // .patient.ResourceType resourceType = 6;
  void clear_resourcetype();
  ::patient::ResourceType resourcetype() const;
  void set_resourcetype(::patient::ResourceType value);
  private:
  ::patient::ResourceType _internal_resourcetype() const;
  void _internal_set_resourcetype(::patient::ResourceType value);
  public:

  // .patient.Status status = 7;
  void clear_status();
  ::patient::Status status() const;
  void set_status(::patient::Status value);
  private:
  ::patient::Status _internal_status() const;
  void _internal_set_status(::patient::Status value);
  public:

  // @@protoc_insertion_point(class_scope:patient.ImmunizationObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr occurencedatetime_;
  ::patient::Reference* encounter_;
  ::patient::Reference* patient_;
  ::patient::Category* vaccinecode_;
  bool primarysource_;
  int resourcetype_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class MedicationRequestObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.MedicationRequestObject) */ {
 public:
  MedicationRequestObject();
  virtual ~MedicationRequestObject();

  MedicationRequestObject(const MedicationRequestObject& from);
  MedicationRequestObject(MedicationRequestObject&& from) noexcept
    : MedicationRequestObject() {
    *this = ::std::move(from);
  }

  inline MedicationRequestObject& operator=(const MedicationRequestObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline MedicationRequestObject& operator=(MedicationRequestObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MedicationRequestObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MedicationRequestObject* internal_default_instance() {
    return reinterpret_cast<const MedicationRequestObject*>(
               &_MedicationRequestObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(MedicationRequestObject& a, MedicationRequestObject& b) {
    a.Swap(&b);
  }
  inline void Swap(MedicationRequestObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MedicationRequestObject* New() const final {
    return CreateMaybeMessage<MedicationRequestObject>(nullptr);
  }

  MedicationRequestObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MedicationRequestObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MedicationRequestObject& from);
  void MergeFrom(const MedicationRequestObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MedicationRequestObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.MedicationRequestObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonReferenceFieldNumber = 6,
    kAuthoredOnFieldNumber = 1,
    kIdFieldNumber = 3,
    kIntentFieldNumber = 4,
    kEncounterFieldNumber = 2,
    kMedicationCodeableConceptFieldNumber = 5,
    kRequesterFieldNumber = 7,
    kSubjectFieldNumber = 10,
    kResourceTypeFieldNumber = 8,
    kStatusFieldNumber = 9,
  };
  // repeated .patient.Reference reasonReference = 6;
  int reasonreference_size() const;
  private:
  int _internal_reasonreference_size() const;
  public:
  void clear_reasonreference();
  ::patient::Reference* mutable_reasonreference(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >*
      mutable_reasonreference();
  private:
  const ::patient::Reference& _internal_reasonreference(int index) const;
  ::patient::Reference* _internal_add_reasonreference();
  public:
  const ::patient::Reference& reasonreference(int index) const;
  ::patient::Reference* add_reasonreference();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >&
      reasonreference() const;

  // string authoredOn = 1;
  void clear_authoredon();
  const std::string& authoredon() const;
  void set_authoredon(const std::string& value);
  void set_authoredon(std::string&& value);
  void set_authoredon(const char* value);
  void set_authoredon(const char* value, size_t size);
  std::string* mutable_authoredon();
  std::string* release_authoredon();
  void set_allocated_authoredon(std::string* authoredon);
  private:
  const std::string& _internal_authoredon() const;
  void _internal_set_authoredon(const std::string& value);
  std::string* _internal_mutable_authoredon();
  public:

  // string id = 3;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string intent = 4;
  void clear_intent();
  const std::string& intent() const;
  void set_intent(const std::string& value);
  void set_intent(std::string&& value);
  void set_intent(const char* value);
  void set_intent(const char* value, size_t size);
  std::string* mutable_intent();
  std::string* release_intent();
  void set_allocated_intent(std::string* intent);
  private:
  const std::string& _internal_intent() const;
  void _internal_set_intent(const std::string& value);
  std::string* _internal_mutable_intent();
  public:

  // .patient.Reference encounter = 2;
  bool has_encounter() const;
  private:
  bool _internal_has_encounter() const;
  public:
  void clear_encounter();
  const ::patient::Reference& encounter() const;
  ::patient::Reference* release_encounter();
  ::patient::Reference* mutable_encounter();
  void set_allocated_encounter(::patient::Reference* encounter);
  private:
  const ::patient::Reference& _internal_encounter() const;
  ::patient::Reference* _internal_mutable_encounter();
  public:

  // .patient.Category medicationCodeableConcept = 5;
  bool has_medicationcodeableconcept() const;
  private:
  bool _internal_has_medicationcodeableconcept() const;
  public:
  void clear_medicationcodeableconcept();
  const ::patient::Category& medicationcodeableconcept() const;
  ::patient::Category* release_medicationcodeableconcept();
  ::patient::Category* mutable_medicationcodeableconcept();
  void set_allocated_medicationcodeableconcept(::patient::Category* medicationcodeableconcept);
  private:
  const ::patient::Category& _internal_medicationcodeableconcept() const;
  ::patient::Category* _internal_mutable_medicationcodeableconcept();
  public:

  // .patient.Reference requester = 7;
  bool has_requester() const;
  private:
  bool _internal_has_requester() const;
  public:
  void clear_requester();
  const ::patient::Reference& requester() const;
  ::patient::Reference* release_requester();
  ::patient::Reference* mutable_requester();
  void set_allocated_requester(::patient::Reference* requester);
  private:
  const ::patient::Reference& _internal_requester() const;
  ::patient::Reference* _internal_mutable_requester();
  public:

  // .patient.Reference subject = 10;
  bool has_subject() const;
  private:
  bool _internal_has_subject() const;
  public:
  void clear_subject();
  const ::patient::Reference& subject() const;
  ::patient::Reference* release_subject();
  ::patient::Reference* mutable_subject();
  void set_allocated_subject(::patient::Reference* subject);
  private:
  const ::patient::Reference& _internal_subject() const;
  ::patient::Reference* _internal_mutable_subject();
  public:

  // .patient.ResourceType resourceType = 8;
  void clear_resourcetype();
  ::patient::ResourceType resourcetype() const;
  void set_resourcetype(::patient::ResourceType value);
  private:
  ::patient::ResourceType _internal_resourcetype() const;
  void _internal_set_resourcetype(::patient::ResourceType value);
  public:

  // .patient.Status status = 9;
  void clear_status();
  ::patient::Status status() const;
  void set_status(::patient::Status value);
  private:
  ::patient::Status _internal_status() const;
  void _internal_set_status(::patient::Status value);
  public:

  // @@protoc_insertion_point(class_scope:patient.MedicationRequestObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference > reasonreference_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authoredon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intent_;
  ::patient::Reference* encounter_;
  ::patient::Category* medicationcodeableconcept_;
  ::patient::Reference* requester_;
  ::patient::Reference* subject_;
  int resourcetype_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class ObservationObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.ObservationObject) */ {
 public:
  ObservationObject();
  virtual ~ObservationObject();

  ObservationObject(const ObservationObject& from);
  ObservationObject(ObservationObject&& from) noexcept
    : ObservationObject() {
    *this = ::std::move(from);
  }

  inline ObservationObject& operator=(const ObservationObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObservationObject& operator=(ObservationObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObservationObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObservationObject* internal_default_instance() {
    return reinterpret_cast<const ObservationObject*>(
               &_ObservationObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ObservationObject& a, ObservationObject& b) {
    a.Swap(&b);
  }
  inline void Swap(ObservationObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObservationObject* New() const final {
    return CreateMaybeMessage<ObservationObject>(nullptr);
  }

  ObservationObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObservationObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObservationObject& from);
  void MergeFrom(const ObservationObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservationObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.ObservationObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryFieldNumber = 1,
    kComponentFieldNumber = 3,
    kEffectiveDateTimeFieldNumber = 4,
    kIdFieldNumber = 6,
    kIssuedFieldNumber = 7,
    kCodeFieldNumber = 2,
    kEncounterFieldNumber = 5,
    kSubjectFieldNumber = 10,
    kValueCodeableConceptFieldNumber = 11,
    kValueQuantityFieldNumber = 12,
    kResourceTypeFieldNumber = 8,
    kStatusFieldNumber = 9,
  };
  // repeated .patient.Category category = 1;
  int category_size() const;
  private:
  int _internal_category_size() const;
  public:
  void clear_category();
  ::patient::Category* mutable_category(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >*
      mutable_category();
  private:
  const ::patient::Category& _internal_category(int index) const;
  ::patient::Category* _internal_add_category();
  public:
  const ::patient::Category& category(int index) const;
  ::patient::Category* add_category();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >&
      category() const;

  // repeated .patient.Component component = 3;
  int component_size() const;
  private:
  int _internal_component_size() const;
  public:
  void clear_component();
  ::patient::Component* mutable_component(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Component >*
      mutable_component();
  private:
  const ::patient::Component& _internal_component(int index) const;
  ::patient::Component* _internal_add_component();
  public:
  const ::patient::Component& component(int index) const;
  ::patient::Component* add_component();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Component >&
      component() const;

  // string effectiveDateTime = 4;
  void clear_effectivedatetime();
  const std::string& effectivedatetime() const;
  void set_effectivedatetime(const std::string& value);
  void set_effectivedatetime(std::string&& value);
  void set_effectivedatetime(const char* value);
  void set_effectivedatetime(const char* value, size_t size);
  std::string* mutable_effectivedatetime();
  std::string* release_effectivedatetime();
  void set_allocated_effectivedatetime(std::string* effectivedatetime);
  private:
  const std::string& _internal_effectivedatetime() const;
  void _internal_set_effectivedatetime(const std::string& value);
  std::string* _internal_mutable_effectivedatetime();
  public:

  // string id = 6;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string issued = 7;
  void clear_issued();
  const std::string& issued() const;
  void set_issued(const std::string& value);
  void set_issued(std::string&& value);
  void set_issued(const char* value);
  void set_issued(const char* value, size_t size);
  std::string* mutable_issued();
  std::string* release_issued();
  void set_allocated_issued(std::string* issued);
  private:
  const std::string& _internal_issued() const;
  void _internal_set_issued(const std::string& value);
  std::string* _internal_mutable_issued();
  public:

  // .patient.Category code = 2;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  const ::patient::Category& code() const;
  ::patient::Category* release_code();
  ::patient::Category* mutable_code();
  void set_allocated_code(::patient::Category* code);
  private:
  const ::patient::Category& _internal_code() const;
  ::patient::Category* _internal_mutable_code();
  public:

  // .patient.Reference encounter = 5;
  bool has_encounter() const;
  private:
  bool _internal_has_encounter() const;
  public:
  void clear_encounter();
  const ::patient::Reference& encounter() const;
  ::patient::Reference* release_encounter();
  ::patient::Reference* mutable_encounter();
  void set_allocated_encounter(::patient::Reference* encounter);
  private:
  const ::patient::Reference& _internal_encounter() const;
  ::patient::Reference* _internal_mutable_encounter();
  public:

  // .patient.Reference subject = 10;
  bool has_subject() const;
  private:
  bool _internal_has_subject() const;
  public:
  void clear_subject();
  const ::patient::Reference& subject() const;
  ::patient::Reference* release_subject();
  ::patient::Reference* mutable_subject();
  void set_allocated_subject(::patient::Reference* subject);
  private:
  const ::patient::Reference& _internal_subject() const;
  ::patient::Reference* _internal_mutable_subject();
  public:

  // .patient.Category valueCodeableConcept = 11;
  bool has_valuecodeableconcept() const;
  private:
  bool _internal_has_valuecodeableconcept() const;
  public:
  void clear_valuecodeableconcept();
  const ::patient::Category& valuecodeableconcept() const;
  ::patient::Category* release_valuecodeableconcept();
  ::patient::Category* mutable_valuecodeableconcept();
  void set_allocated_valuecodeableconcept(::patient::Category* valuecodeableconcept);
  private:
  const ::patient::Category& _internal_valuecodeableconcept() const;
  ::patient::Category* _internal_mutable_valuecodeableconcept();
  public:

  // .patient.Quantity valueQuantity = 12;
  bool has_valuequantity() const;
  private:
  bool _internal_has_valuequantity() const;
  public:
  void clear_valuequantity();
  const ::patient::Quantity& valuequantity() const;
  ::patient::Quantity* release_valuequantity();
  ::patient::Quantity* mutable_valuequantity();
  void set_allocated_valuequantity(::patient::Quantity* valuequantity);
  private:
  const ::patient::Quantity& _internal_valuequantity() const;
  ::patient::Quantity* _internal_mutable_valuequantity();
  public:

  // .patient.ResourceType resourceType = 8;
  void clear_resourcetype();
  ::patient::ResourceType resourcetype() const;
  void set_resourcetype(::patient::ResourceType value);
  private:
  ::patient::ResourceType _internal_resourcetype() const;
  void _internal_set_resourcetype(::patient::ResourceType value);
  public:

  // .patient.Status status = 9;
  void clear_status();
  ::patient::Status status() const;
  void set_status(::patient::Status value);
  private:
  ::patient::Status _internal_status() const;
  void _internal_set_status(::patient::Status value);
  public:

  // @@protoc_insertion_point(class_scope:patient.ObservationObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category > category_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Component > component_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effectivedatetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr issued_;
  ::patient::Category* code_;
  ::patient::Reference* encounter_;
  ::patient::Reference* subject_;
  ::patient::Category* valuecodeableconcept_;
  ::patient::Quantity* valuequantity_;
  int resourcetype_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class OrganizationObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.OrganizationObject) */ {
 public:
  OrganizationObject();
  virtual ~OrganizationObject();

  OrganizationObject(const OrganizationObject& from);
  OrganizationObject(OrganizationObject&& from) noexcept
    : OrganizationObject() {
    *this = ::std::move(from);
  }

  inline OrganizationObject& operator=(const OrganizationObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrganizationObject& operator=(OrganizationObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrganizationObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrganizationObject* internal_default_instance() {
    return reinterpret_cast<const OrganizationObject*>(
               &_OrganizationObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(OrganizationObject& a, OrganizationObject& b) {
    a.Swap(&b);
  }
  inline void Swap(OrganizationObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrganizationObject* New() const final {
    return CreateMaybeMessage<OrganizationObject>(nullptr);
  }

  OrganizationObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrganizationObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrganizationObject& from);
  void MergeFrom(const OrganizationObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrganizationObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.OrganizationObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kIdentifierFieldNumber = 4,
    kTelecomFieldNumber = 7,
    kTypeFieldNumber = 8,
    kIdFieldNumber = 3,
    kNameFieldNumber = 5,
    kActiveFieldNumber = 1,
    kResourceTypeFieldNumber = 6,
  };
  // repeated .patient.Address address = 2;
  int address_size() const;
  private:
  int _internal_address_size() const;
  public:
  void clear_address();
  ::patient::Address* mutable_address(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Address >*
      mutable_address();
  private:
  const ::patient::Address& _internal_address(int index) const;
  ::patient::Address* _internal_add_address();
  public:
  const ::patient::Address& address(int index) const;
  ::patient::Address* add_address();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Address >&
      address() const;

  // repeated .patient.Identifier identifier = 4;
  int identifier_size() const;
  private:
  int _internal_identifier_size() const;
  public:
  void clear_identifier();
  ::patient::Identifier* mutable_identifier(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Identifier >*
      mutable_identifier();
  private:
  const ::patient::Identifier& _internal_identifier(int index) const;
  ::patient::Identifier* _internal_add_identifier();
  public:
  const ::patient::Identifier& identifier(int index) const;
  ::patient::Identifier* add_identifier();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Identifier >&
      identifier() const;

  // repeated .patient.Telecom telecom = 7;
  int telecom_size() const;
  private:
  int _internal_telecom_size() const;
  public:
  void clear_telecom();
  ::patient::Telecom* mutable_telecom(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Telecom >*
      mutable_telecom();
  private:
  const ::patient::Telecom& _internal_telecom(int index) const;
  ::patient::Telecom* _internal_add_telecom();
  public:
  const ::patient::Telecom& telecom(int index) const;
  ::patient::Telecom* add_telecom();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Telecom >&
      telecom() const;

  // repeated .patient.Category type = 8;
  int type_size() const;
  private:
  int _internal_type_size() const;
  public:
  void clear_type();
  ::patient::Category* mutable_type(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >*
      mutable_type();
  private:
  const ::patient::Category& _internal_type(int index) const;
  ::patient::Category* _internal_add_type();
  public:
  const ::patient::Category& type(int index) const;
  ::patient::Category* add_type();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >&
      type() const;

  // string id = 3;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool active = 1;
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // .patient.ResourceType resourceType = 6;
  void clear_resourcetype();
  ::patient::ResourceType resourcetype() const;
  void set_resourcetype(::patient::ResourceType value);
  private:
  ::patient::ResourceType _internal_resourcetype() const;
  void _internal_set_resourcetype(::patient::ResourceType value);
  public:

  // @@protoc_insertion_point(class_scope:patient.OrganizationObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Address > address_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Identifier > identifier_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Telecom > telecom_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category > type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool active_;
  int resourcetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class PatientObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.PatientObject) */ {
 public:
  PatientObject();
  virtual ~PatientObject();

  PatientObject(const PatientObject& from);
  PatientObject(PatientObject&& from) noexcept
    : PatientObject() {
    *this = ::std::move(from);
  }

  inline PatientObject& operator=(const PatientObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatientObject& operator=(PatientObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatientObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatientObject* internal_default_instance() {
    return reinterpret_cast<const PatientObject*>(
               &_PatientObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(PatientObject& a, PatientObject& b) {
    a.Swap(&b);
  }
  inline void Swap(PatientObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatientObject* New() const final {
    return CreateMaybeMessage<PatientObject>(nullptr);
  }

  PatientObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatientObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatientObject& from);
  void MergeFrom(const PatientObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.PatientObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kCommunicationFieldNumber = 3,
    kExtensionFieldNumber = 4,
    kIdentifierFieldNumber = 7,
    kNameFieldNumber = 10,
    kTelecomFieldNumber = 12,
    kBirthDateFieldNumber = 2,
    kIdFieldNumber = 6,
    kTextFieldNumber = 13,
    kMaritalStatusFieldNumber = 8,
    kGenderFieldNumber = 5,
    kMultipleBirthBooleanFieldNumber = 9,
    kResourceTypeFieldNumber = 11,
  };
  // repeated .patient.Address address = 1;
  int address_size() const;
  private:
  int _internal_address_size() const;
  public:
  void clear_address();
  ::patient::Address* mutable_address(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Address >*
      mutable_address();
  private:
  const ::patient::Address& _internal_address(int index) const;
  ::patient::Address* _internal_add_address();
  public:
  const ::patient::Address& address(int index) const;
  ::patient::Address* add_address();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Address >&
      address() const;

  // repeated .patient.Communication communication = 3;
  int communication_size() const;
  private:
  int _internal_communication_size() const;
  public:
  void clear_communication();
  ::patient::Communication* mutable_communication(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Communication >*
      mutable_communication();
  private:
  const ::patient::Communication& _internal_communication(int index) const;
  ::patient::Communication* _internal_add_communication();
  public:
  const ::patient::Communication& communication(int index) const;
  ::patient::Communication* add_communication();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Communication >&
      communication() const;

  // repeated .patient.Extension extension = 4;
  int extension_size() const;
  private:
  int _internal_extension_size() const;
  public:
  void clear_extension();
  ::patient::Extension* mutable_extension(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Extension >*
      mutable_extension();
  private:
  const ::patient::Extension& _internal_extension(int index) const;
  ::patient::Extension* _internal_add_extension();
  public:
  const ::patient::Extension& extension(int index) const;
  ::patient::Extension* add_extension();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Extension >&
      extension() const;

  // repeated .patient.Identifier identifier = 7;
  int identifier_size() const;
  private:
  int _internal_identifier_size() const;
  public:
  void clear_identifier();
  ::patient::Identifier* mutable_identifier(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Identifier >*
      mutable_identifier();
  private:
  const ::patient::Identifier& _internal_identifier(int index) const;
  ::patient::Identifier* _internal_add_identifier();
  public:
  const ::patient::Identifier& identifier(int index) const;
  ::patient::Identifier* add_identifier();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Identifier >&
      identifier() const;

  // repeated .patient.Name name = 10;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  ::patient::Name* mutable_name(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Name >*
      mutable_name();
  private:
  const ::patient::Name& _internal_name(int index) const;
  ::patient::Name* _internal_add_name();
  public:
  const ::patient::Name& name(int index) const;
  ::patient::Name* add_name();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Name >&
      name() const;

  // repeated .patient.Telecom telecom = 12;
  int telecom_size() const;
  private:
  int _internal_telecom_size() const;
  public:
  void clear_telecom();
  ::patient::Telecom* mutable_telecom(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Telecom >*
      mutable_telecom();
  private:
  const ::patient::Telecom& _internal_telecom(int index) const;
  ::patient::Telecom* _internal_add_telecom();
  public:
  const ::patient::Telecom& telecom(int index) const;
  ::patient::Telecom* add_telecom();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Telecom >&
      telecom() const;

  // string birthDate = 2;
  void clear_birthdate();
  const std::string& birthdate() const;
  void set_birthdate(const std::string& value);
  void set_birthdate(std::string&& value);
  void set_birthdate(const char* value);
  void set_birthdate(const char* value, size_t size);
  std::string* mutable_birthdate();
  std::string* release_birthdate();
  void set_allocated_birthdate(std::string* birthdate);
  private:
  const std::string& _internal_birthdate() const;
  void _internal_set_birthdate(const std::string& value);
  std::string* _internal_mutable_birthdate();
  public:

  // string id = 6;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string text = 13;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .patient.Category maritalStatus = 8;
  bool has_maritalstatus() const;
  private:
  bool _internal_has_maritalstatus() const;
  public:
  void clear_maritalstatus();
  const ::patient::Category& maritalstatus() const;
  ::patient::Category* release_maritalstatus();
  ::patient::Category* mutable_maritalstatus();
  void set_allocated_maritalstatus(::patient::Category* maritalstatus);
  private:
  const ::patient::Category& _internal_maritalstatus() const;
  ::patient::Category* _internal_mutable_maritalstatus();
  public:

  // .patient.Gender gender = 5;
  void clear_gender();
  ::patient::Gender gender() const;
  void set_gender(::patient::Gender value);
  private:
  ::patient::Gender _internal_gender() const;
  void _internal_set_gender(::patient::Gender value);
  public:

  // bool multipleBirthBoolean = 9;
  void clear_multiplebirthboolean();
  bool multiplebirthboolean() const;
  void set_multiplebirthboolean(bool value);
  private:
  bool _internal_multiplebirthboolean() const;
  void _internal_set_multiplebirthboolean(bool value);
  public:

  // .patient.ResourceType resourceType = 11;
  void clear_resourcetype();
  ::patient::ResourceType resourcetype() const;
  void set_resourcetype(::patient::ResourceType value);
  private:
  ::patient::ResourceType _internal_resourcetype() const;
  void _internal_set_resourcetype(::patient::ResourceType value);
  public:

  // @@protoc_insertion_point(class_scope:patient.PatientObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Address > address_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Communication > communication_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Extension > extension_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Identifier > identifier_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Name > name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Telecom > telecom_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr birthdate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::patient::Category* maritalstatus_;
  int gender_;
  bool multiplebirthboolean_;
  int resourcetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class PractitionerObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.PractitionerObject) */ {
 public:
  PractitionerObject();
  virtual ~PractitionerObject();

  PractitionerObject(const PractitionerObject& from);
  PractitionerObject(PractitionerObject&& from) noexcept
    : PractitionerObject() {
    *this = ::std::move(from);
  }

  inline PractitionerObject& operator=(const PractitionerObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline PractitionerObject& operator=(PractitionerObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PractitionerObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PractitionerObject* internal_default_instance() {
    return reinterpret_cast<const PractitionerObject*>(
               &_PractitionerObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(PractitionerObject& a, PractitionerObject& b) {
    a.Swap(&b);
  }
  inline void Swap(PractitionerObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PractitionerObject* New() const final {
    return CreateMaybeMessage<PractitionerObject>(nullptr);
  }

  PractitionerObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PractitionerObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PractitionerObject& from);
  void MergeFrom(const PractitionerObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PractitionerObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.PractitionerObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kIdentifierFieldNumber = 5,
    kNameFieldNumber = 6,
    kTelecomFieldNumber = 8,
    kIdFieldNumber = 4,
    kActiveFieldNumber = 1,
    kGenderFieldNumber = 3,
    kResourceTypeFieldNumber = 7,
  };
  // repeated .patient.Address address = 2;
  int address_size() const;
  private:
  int _internal_address_size() const;
  public:
  void clear_address();
  ::patient::Address* mutable_address(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Address >*
      mutable_address();
  private:
  const ::patient::Address& _internal_address(int index) const;
  ::patient::Address* _internal_add_address();
  public:
  const ::patient::Address& address(int index) const;
  ::patient::Address* add_address();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Address >&
      address() const;

  // repeated .patient.Identifier identifier = 5;
  int identifier_size() const;
  private:
  int _internal_identifier_size() const;
  public:
  void clear_identifier();
  ::patient::Identifier* mutable_identifier(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Identifier >*
      mutable_identifier();
  private:
  const ::patient::Identifier& _internal_identifier(int index) const;
  ::patient::Identifier* _internal_add_identifier();
  public:
  const ::patient::Identifier& identifier(int index) const;
  ::patient::Identifier* add_identifier();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Identifier >&
      identifier() const;

  // repeated .patient.Name name = 6;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  ::patient::Name* mutable_name(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Name >*
      mutable_name();
  private:
  const ::patient::Name& _internal_name(int index) const;
  ::patient::Name* _internal_add_name();
  public:
  const ::patient::Name& name(int index) const;
  ::patient::Name* add_name();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Name >&
      name() const;

  // repeated .patient.Telecom telecom = 8;
  int telecom_size() const;
  private:
  int _internal_telecom_size() const;
  public:
  void clear_telecom();
  ::patient::Telecom* mutable_telecom(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Telecom >*
      mutable_telecom();
  private:
  const ::patient::Telecom& _internal_telecom(int index) const;
  ::patient::Telecom* _internal_add_telecom();
  public:
  const ::patient::Telecom& telecom(int index) const;
  ::patient::Telecom* add_telecom();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Telecom >&
      telecom() const;

  // string id = 4;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bool active = 1;
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // .patient.Gender gender = 3;
  void clear_gender();
  ::patient::Gender gender() const;
  void set_gender(::patient::Gender value);
  private:
  ::patient::Gender _internal_gender() const;
  void _internal_set_gender(::patient::Gender value);
  public:

  // .patient.ResourceType resourceType = 7;
  void clear_resourcetype();
  ::patient::ResourceType resourcetype() const;
  void set_resourcetype(::patient::ResourceType value);
  private:
  ::patient::ResourceType _internal_resourcetype() const;
  void _internal_set_resourcetype(::patient::ResourceType value);
  public:

  // @@protoc_insertion_point(class_scope:patient.PractitionerObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Address > address_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Identifier > identifier_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Name > name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Telecom > telecom_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  bool active_;
  int gender_;
  int resourcetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class ProcedureObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.ProcedureObject) */ {
 public:
  ProcedureObject();
  virtual ~ProcedureObject();

  ProcedureObject(const ProcedureObject& from);
  ProcedureObject(ProcedureObject&& from) noexcept
    : ProcedureObject() {
    *this = ::std::move(from);
  }

  inline ProcedureObject& operator=(const ProcedureObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcedureObject& operator=(ProcedureObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcedureObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcedureObject* internal_default_instance() {
    return reinterpret_cast<const ProcedureObject*>(
               &_ProcedureObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(ProcedureObject& a, ProcedureObject& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcedureObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcedureObject* New() const final {
    return CreateMaybeMessage<ProcedureObject>(nullptr);
  }

  ProcedureObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcedureObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcedureObject& from);
  void MergeFrom(const ProcedureObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcedureObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.ProcedureObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonReferenceFieldNumber = 5,
    kIdFieldNumber = 3,
    kCodeFieldNumber = 1,
    kEncounterFieldNumber = 2,
    kPerformedPeriodFieldNumber = 4,
    kSubjectFieldNumber = 8,
    kResourceTypeFieldNumber = 6,
    kStatusFieldNumber = 7,
  };
  // repeated .patient.Reference reasonReference = 5;
  int reasonreference_size() const;
  private:
  int _internal_reasonreference_size() const;
  public:
  void clear_reasonreference();
  ::patient::Reference* mutable_reasonreference(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >*
      mutable_reasonreference();
  private:
  const ::patient::Reference& _internal_reasonreference(int index) const;
  ::patient::Reference* _internal_add_reasonreference();
  public:
  const ::patient::Reference& reasonreference(int index) const;
  ::patient::Reference* add_reasonreference();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >&
      reasonreference() const;

  // string id = 3;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .patient.Category code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  const ::patient::Category& code() const;
  ::patient::Category* release_code();
  ::patient::Category* mutable_code();
  void set_allocated_code(::patient::Category* code);
  private:
  const ::patient::Category& _internal_code() const;
  ::patient::Category* _internal_mutable_code();
  public:

  // .patient.Reference encounter = 2;
  bool has_encounter() const;
  private:
  bool _internal_has_encounter() const;
  public:
  void clear_encounter();
  const ::patient::Reference& encounter() const;
  ::patient::Reference* release_encounter();
  ::patient::Reference* mutable_encounter();
  void set_allocated_encounter(::patient::Reference* encounter);
  private:
  const ::patient::Reference& _internal_encounter() const;
  ::patient::Reference* _internal_mutable_encounter();
  public:

  // .patient.Period performedPeriod = 4;
  bool has_performedperiod() const;
  private:
  bool _internal_has_performedperiod() const;
  public:
  void clear_performedperiod();
  const ::patient::Period& performedperiod() const;
  ::patient::Period* release_performedperiod();
  ::patient::Period* mutable_performedperiod();
  void set_allocated_performedperiod(::patient::Period* performedperiod);
  private:
  const ::patient::Period& _internal_performedperiod() const;
  ::patient::Period* _internal_mutable_performedperiod();
  public:

  // .patient.Reference subject = 8;
  bool has_subject() const;
  private:
  bool _internal_has_subject() const;
  public:
  void clear_subject();
  const ::patient::Reference& subject() const;
  ::patient::Reference* release_subject();
  ::patient::Reference* mutable_subject();
  void set_allocated_subject(::patient::Reference* subject);
  private:
  const ::patient::Reference& _internal_subject() const;
  ::patient::Reference* _internal_mutable_subject();
  public:

  // .patient.ResourceType resourceType = 6;
  void clear_resourcetype();
  ::patient::ResourceType resourcetype() const;
  void set_resourcetype(::patient::ResourceType value);
  private:
  ::patient::ResourceType _internal_resourcetype() const;
  void _internal_set_resourcetype(::patient::ResourceType value);
  public:

  // .patient.Status status = 7;
  void clear_status();
  ::patient::Status status() const;
  void set_status(::patient::Status value);
  private:
  ::patient::Status _internal_status() const;
  void _internal_set_status(::patient::Status value);
  public:

  // @@protoc_insertion_point(class_scope:patient.ProcedureObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference > reasonreference_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::patient::Category* code_;
  ::patient::Reference* encounter_;
  ::patient::Period* performedperiod_;
  ::patient::Reference* subject_;
  int resourcetype_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// -------------------------------------------------------------------

class PatientRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:patient.PatientRecord) */ {
 public:
  PatientRecord();
  virtual ~PatientRecord();

  PatientRecord(const PatientRecord& from);
  PatientRecord(PatientRecord&& from) noexcept
    : PatientRecord() {
    *this = ::std::move(from);
  }

  inline PatientRecord& operator=(const PatientRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatientRecord& operator=(PatientRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatientRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatientRecord* internal_default_instance() {
    return reinterpret_cast<const PatientRecord*>(
               &_PatientRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(PatientRecord& a, PatientRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(PatientRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatientRecord* New() const final {
    return CreateMaybeMessage<PatientRecord>(nullptr);
  }

  PatientRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatientRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatientRecord& from);
  void MergeFrom(const PatientRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "patient.PatientRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_customized_2eproto);
    return ::descriptor_table_customized_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCarePlanFieldNumber = 2,
    kCareTeamFieldNumber = 3,
    kClaimFieldNumber = 4,
    kConditionFieldNumber = 5,
    kDiagnosticReportFieldNumber = 6,
    kEncounterFieldNumber = 7,
    kExplanationOfBenefitFieldNumber = 8,
    kImmunizationFieldNumber = 9,
    kMedicationRequestFieldNumber = 10,
    kObservationFieldNumber = 11,
    kOrganiationFieldNumber = 12,
    kPractitionerFieldNumber = 13,
    kProcedureFieldNumber = 14,
    kPatientFieldNumber = 1,
  };
  // repeated .patient.CarePlanObject carePlan = 2;
  int careplan_size() const;
  private:
  int _internal_careplan_size() const;
  public:
  void clear_careplan();
  ::patient::CarePlanObject* mutable_careplan(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::CarePlanObject >*
      mutable_careplan();
  private:
  const ::patient::CarePlanObject& _internal_careplan(int index) const;
  ::patient::CarePlanObject* _internal_add_careplan();
  public:
  const ::patient::CarePlanObject& careplan(int index) const;
  ::patient::CarePlanObject* add_careplan();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::CarePlanObject >&
      careplan() const;

  // repeated .patient.CareTeamObject careTeam = 3;
  int careteam_size() const;
  private:
  int _internal_careteam_size() const;
  public:
  void clear_careteam();
  ::patient::CareTeamObject* mutable_careteam(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::CareTeamObject >*
      mutable_careteam();
  private:
  const ::patient::CareTeamObject& _internal_careteam(int index) const;
  ::patient::CareTeamObject* _internal_add_careteam();
  public:
  const ::patient::CareTeamObject& careteam(int index) const;
  ::patient::CareTeamObject* add_careteam();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::CareTeamObject >&
      careteam() const;

  // repeated .patient.ClaimObject claim = 4;
  int claim_size() const;
  private:
  int _internal_claim_size() const;
  public:
  void clear_claim();
  ::patient::ClaimObject* mutable_claim(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ClaimObject >*
      mutable_claim();
  private:
  const ::patient::ClaimObject& _internal_claim(int index) const;
  ::patient::ClaimObject* _internal_add_claim();
  public:
  const ::patient::ClaimObject& claim(int index) const;
  ::patient::ClaimObject* add_claim();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ClaimObject >&
      claim() const;

  // repeated .patient.ConditionObject condition = 5;
  int condition_size() const;
  private:
  int _internal_condition_size() const;
  public:
  void clear_condition();
  ::patient::ConditionObject* mutable_condition(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ConditionObject >*
      mutable_condition();
  private:
  const ::patient::ConditionObject& _internal_condition(int index) const;
  ::patient::ConditionObject* _internal_add_condition();
  public:
  const ::patient::ConditionObject& condition(int index) const;
  ::patient::ConditionObject* add_condition();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ConditionObject >&
      condition() const;

  // repeated .patient.DiagnosticReportObject diagnosticReport = 6;
  int diagnosticreport_size() const;
  private:
  int _internal_diagnosticreport_size() const;
  public:
  void clear_diagnosticreport();
  ::patient::DiagnosticReportObject* mutable_diagnosticreport(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::DiagnosticReportObject >*
      mutable_diagnosticreport();
  private:
  const ::patient::DiagnosticReportObject& _internal_diagnosticreport(int index) const;
  ::patient::DiagnosticReportObject* _internal_add_diagnosticreport();
  public:
  const ::patient::DiagnosticReportObject& diagnosticreport(int index) const;
  ::patient::DiagnosticReportObject* add_diagnosticreport();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::DiagnosticReportObject >&
      diagnosticreport() const;

  // repeated .patient.EncounterObject encounter = 7;
  int encounter_size() const;
  private:
  int _internal_encounter_size() const;
  public:
  void clear_encounter();
  ::patient::EncounterObject* mutable_encounter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::EncounterObject >*
      mutable_encounter();
  private:
  const ::patient::EncounterObject& _internal_encounter(int index) const;
  ::patient::EncounterObject* _internal_add_encounter();
  public:
  const ::patient::EncounterObject& encounter(int index) const;
  ::patient::EncounterObject* add_encounter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::EncounterObject >&
      encounter() const;

  // repeated .patient.ExplanationOfBenefitObject explanationOfBenefit = 8;
  int explanationofbenefit_size() const;
  private:
  int _internal_explanationofbenefit_size() const;
  public:
  void clear_explanationofbenefit();
  ::patient::ExplanationOfBenefitObject* mutable_explanationofbenefit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ExplanationOfBenefitObject >*
      mutable_explanationofbenefit();
  private:
  const ::patient::ExplanationOfBenefitObject& _internal_explanationofbenefit(int index) const;
  ::patient::ExplanationOfBenefitObject* _internal_add_explanationofbenefit();
  public:
  const ::patient::ExplanationOfBenefitObject& explanationofbenefit(int index) const;
  ::patient::ExplanationOfBenefitObject* add_explanationofbenefit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ExplanationOfBenefitObject >&
      explanationofbenefit() const;

  // repeated .patient.ImmunizationObject immunization = 9;
  int immunization_size() const;
  private:
  int _internal_immunization_size() const;
  public:
  void clear_immunization();
  ::patient::ImmunizationObject* mutable_immunization(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ImmunizationObject >*
      mutable_immunization();
  private:
  const ::patient::ImmunizationObject& _internal_immunization(int index) const;
  ::patient::ImmunizationObject* _internal_add_immunization();
  public:
  const ::patient::ImmunizationObject& immunization(int index) const;
  ::patient::ImmunizationObject* add_immunization();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ImmunizationObject >&
      immunization() const;

  // repeated .patient.MedicationRequestObject medicationRequest = 10;
  int medicationrequest_size() const;
  private:
  int _internal_medicationrequest_size() const;
  public:
  void clear_medicationrequest();
  ::patient::MedicationRequestObject* mutable_medicationrequest(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::MedicationRequestObject >*
      mutable_medicationrequest();
  private:
  const ::patient::MedicationRequestObject& _internal_medicationrequest(int index) const;
  ::patient::MedicationRequestObject* _internal_add_medicationrequest();
  public:
  const ::patient::MedicationRequestObject& medicationrequest(int index) const;
  ::patient::MedicationRequestObject* add_medicationrequest();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::MedicationRequestObject >&
      medicationrequest() const;

  // repeated .patient.ObservationObject observation = 11;
  int observation_size() const;
  private:
  int _internal_observation_size() const;
  public:
  void clear_observation();
  ::patient::ObservationObject* mutable_observation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ObservationObject >*
      mutable_observation();
  private:
  const ::patient::ObservationObject& _internal_observation(int index) const;
  ::patient::ObservationObject* _internal_add_observation();
  public:
  const ::patient::ObservationObject& observation(int index) const;
  ::patient::ObservationObject* add_observation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ObservationObject >&
      observation() const;

  // repeated .patient.OrganizationObject organiation = 12;
  int organiation_size() const;
  private:
  int _internal_organiation_size() const;
  public:
  void clear_organiation();
  ::patient::OrganizationObject* mutable_organiation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::OrganizationObject >*
      mutable_organiation();
  private:
  const ::patient::OrganizationObject& _internal_organiation(int index) const;
  ::patient::OrganizationObject* _internal_add_organiation();
  public:
  const ::patient::OrganizationObject& organiation(int index) const;
  ::patient::OrganizationObject* add_organiation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::OrganizationObject >&
      organiation() const;

  // repeated .patient.PractitionerObject practitioner = 13;
  int practitioner_size() const;
  private:
  int _internal_practitioner_size() const;
  public:
  void clear_practitioner();
  ::patient::PractitionerObject* mutable_practitioner(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::PractitionerObject >*
      mutable_practitioner();
  private:
  const ::patient::PractitionerObject& _internal_practitioner(int index) const;
  ::patient::PractitionerObject* _internal_add_practitioner();
  public:
  const ::patient::PractitionerObject& practitioner(int index) const;
  ::patient::PractitionerObject* add_practitioner();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::PractitionerObject >&
      practitioner() const;

  // repeated .patient.ProcedureObject procedure = 14;
  int procedure_size() const;
  private:
  int _internal_procedure_size() const;
  public:
  void clear_procedure();
  ::patient::ProcedureObject* mutable_procedure(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ProcedureObject >*
      mutable_procedure();
  private:
  const ::patient::ProcedureObject& _internal_procedure(int index) const;
  ::patient::ProcedureObject* _internal_add_procedure();
  public:
  const ::patient::ProcedureObject& procedure(int index) const;
  ::patient::ProcedureObject* add_procedure();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ProcedureObject >&
      procedure() const;

  // .patient.PatientObject patient = 1;
  bool has_patient() const;
  private:
  bool _internal_has_patient() const;
  public:
  void clear_patient();
  const ::patient::PatientObject& patient() const;
  ::patient::PatientObject* release_patient();
  ::patient::PatientObject* mutable_patient();
  void set_allocated_patient(::patient::PatientObject* patient);
  private:
  const ::patient::PatientObject& _internal_patient() const;
  ::patient::PatientObject* _internal_mutable_patient();
  public:

  // @@protoc_insertion_point(class_scope:patient.PatientRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::CarePlanObject > careplan_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::CareTeamObject > careteam_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ClaimObject > claim_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ConditionObject > condition_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::DiagnosticReportObject > diagnosticreport_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::EncounterObject > encounter_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ExplanationOfBenefitObject > explanationofbenefit_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ImmunizationObject > immunization_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::MedicationRequestObject > medicationrequest_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ObservationObject > observation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::OrganizationObject > organiation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::PractitionerObject > practitioner_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ProcedureObject > procedure_;
  ::patient::PatientObject* patient_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_customized_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Activity

// repeated .patient.Detail detail = 1;
inline int Activity::_internal_detail_size() const {
  return detail_.size();
}
inline int Activity::detail_size() const {
  return _internal_detail_size();
}
inline void Activity::clear_detail() {
  detail_.Clear();
}
inline ::patient::Detail* Activity::mutable_detail(int index) {
  // @@protoc_insertion_point(field_mutable:patient.Activity.detail)
  return detail_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Detail >*
Activity::mutable_detail() {
  // @@protoc_insertion_point(field_mutable_list:patient.Activity.detail)
  return &detail_;
}
inline const ::patient::Detail& Activity::_internal_detail(int index) const {
  return detail_.Get(index);
}
inline const ::patient::Detail& Activity::detail(int index) const {
  // @@protoc_insertion_point(field_get:patient.Activity.detail)
  return _internal_detail(index);
}
inline ::patient::Detail* Activity::_internal_add_detail() {
  return detail_.Add();
}
inline ::patient::Detail* Activity::add_detail() {
  // @@protoc_insertion_point(field_add:patient.Activity.detail)
  return _internal_add_detail();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Detail >&
Activity::detail() const {
  // @@protoc_insertion_point(field_list:patient.Activity.detail)
  return detail_;
}

// -------------------------------------------------------------------

// Address

// string city = 1;
inline void Address::clear_city() {
  city_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Address::city() const {
  // @@protoc_insertion_point(field_get:patient.Address.city)
  return _internal_city();
}
inline void Address::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:patient.Address.city)
}
inline std::string* Address::mutable_city() {
  // @@protoc_insertion_point(field_mutable:patient.Address.city)
  return _internal_mutable_city();
}
inline const std::string& Address::_internal_city() const {
  return city_.GetNoArena();
}
inline void Address::_internal_set_city(const std::string& value) {
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Address::set_city(std::string&& value) {
  
  city_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Address.city)
}
inline void Address::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Address.city)
}
inline void Address::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Address.city)
}
inline std::string* Address::_internal_mutable_city() {
  
  return city_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Address::release_city() {
  // @@protoc_insertion_point(field_release:patient.Address.city)
  
  return city_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:patient.Address.city)
}

// string country = 2;
inline void Address::clear_country() {
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Address::country() const {
  // @@protoc_insertion_point(field_get:patient.Address.country)
  return _internal_country();
}
inline void Address::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:patient.Address.country)
}
inline std::string* Address::mutable_country() {
  // @@protoc_insertion_point(field_mutable:patient.Address.country)
  return _internal_mutable_country();
}
inline const std::string& Address::_internal_country() const {
  return country_.GetNoArena();
}
inline void Address::_internal_set_country(const std::string& value) {
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Address::set_country(std::string&& value) {
  
  country_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Address.country)
}
inline void Address::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Address.country)
}
inline void Address::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Address.country)
}
inline std::string* Address::_internal_mutable_country() {
  
  return country_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Address::release_country() {
  // @@protoc_insertion_point(field_release:patient.Address.country)
  
  return country_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:patient.Address.country)
}

// repeated .patient.Extension extension = 3;
inline int Address::_internal_extension_size() const {
  return extension_.size();
}
inline int Address::extension_size() const {
  return _internal_extension_size();
}
inline void Address::clear_extension() {
  extension_.Clear();
}
inline ::patient::Extension* Address::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:patient.Address.extension)
  return extension_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Extension >*
Address::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:patient.Address.extension)
  return &extension_;
}
inline const ::patient::Extension& Address::_internal_extension(int index) const {
  return extension_.Get(index);
}
inline const ::patient::Extension& Address::extension(int index) const {
  // @@protoc_insertion_point(field_get:patient.Address.extension)
  return _internal_extension(index);
}
inline ::patient::Extension* Address::_internal_add_extension() {
  return extension_.Add();
}
inline ::patient::Extension* Address::add_extension() {
  // @@protoc_insertion_point(field_add:patient.Address.extension)
  return _internal_add_extension();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Extension >&
Address::extension() const {
  // @@protoc_insertion_point(field_list:patient.Address.extension)
  return extension_;
}

// repeated string line = 4;
inline int Address::_internal_line_size() const {
  return line_.size();
}
inline int Address::line_size() const {
  return _internal_line_size();
}
inline void Address::clear_line() {
  line_.Clear();
}
inline std::string* Address::add_line() {
  // @@protoc_insertion_point(field_add_mutable:patient.Address.line)
  return _internal_add_line();
}
inline const std::string& Address::_internal_line(int index) const {
  return line_.Get(index);
}
inline const std::string& Address::line(int index) const {
  // @@protoc_insertion_point(field_get:patient.Address.line)
  return _internal_line(index);
}
inline std::string* Address::mutable_line(int index) {
  // @@protoc_insertion_point(field_mutable:patient.Address.line)
  return line_.Mutable(index);
}
inline void Address::set_line(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:patient.Address.line)
  line_.Mutable(index)->assign(value);
}
inline void Address::set_line(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:patient.Address.line)
  line_.Mutable(index)->assign(std::move(value));
}
inline void Address::set_line(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  line_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:patient.Address.line)
}
inline void Address::set_line(int index, const char* value, size_t size) {
  line_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:patient.Address.line)
}
inline std::string* Address::_internal_add_line() {
  return line_.Add();
}
inline void Address::add_line(const std::string& value) {
  line_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:patient.Address.line)
}
inline void Address::add_line(std::string&& value) {
  line_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:patient.Address.line)
}
inline void Address::add_line(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  line_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:patient.Address.line)
}
inline void Address::add_line(const char* value, size_t size) {
  line_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:patient.Address.line)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Address::line() const {
  // @@protoc_insertion_point(field_list:patient.Address.line)
  return line_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Address::mutable_line() {
  // @@protoc_insertion_point(field_mutable_list:patient.Address.line)
  return &line_;
}

// string postalCode = 5;
inline void Address::clear_postalcode() {
  postalcode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Address::postalcode() const {
  // @@protoc_insertion_point(field_get:patient.Address.postalCode)
  return _internal_postalcode();
}
inline void Address::set_postalcode(const std::string& value) {
  _internal_set_postalcode(value);
  // @@protoc_insertion_point(field_set:patient.Address.postalCode)
}
inline std::string* Address::mutable_postalcode() {
  // @@protoc_insertion_point(field_mutable:patient.Address.postalCode)
  return _internal_mutable_postalcode();
}
inline const std::string& Address::_internal_postalcode() const {
  return postalcode_.GetNoArena();
}
inline void Address::_internal_set_postalcode(const std::string& value) {
  
  postalcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Address::set_postalcode(std::string&& value) {
  
  postalcode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Address.postalCode)
}
inline void Address::set_postalcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  postalcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Address.postalCode)
}
inline void Address::set_postalcode(const char* value, size_t size) {
  
  postalcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Address.postalCode)
}
inline std::string* Address::_internal_mutable_postalcode() {
  
  return postalcode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Address::release_postalcode() {
  // @@protoc_insertion_point(field_release:patient.Address.postalCode)
  
  return postalcode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_postalcode(std::string* postalcode) {
  if (postalcode != nullptr) {
    
  } else {
    
  }
  postalcode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), postalcode);
  // @@protoc_insertion_point(field_set_allocated:patient.Address.postalCode)
}

// string state = 6;
inline void Address::clear_state() {
  state_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Address::state() const {
  // @@protoc_insertion_point(field_get:patient.Address.state)
  return _internal_state();
}
inline void Address::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:patient.Address.state)
}
inline std::string* Address::mutable_state() {
  // @@protoc_insertion_point(field_mutable:patient.Address.state)
  return _internal_mutable_state();
}
inline const std::string& Address::_internal_state() const {
  return state_.GetNoArena();
}
inline void Address::_internal_set_state(const std::string& value) {
  
  state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Address::set_state(std::string&& value) {
  
  state_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Address.state)
}
inline void Address::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Address.state)
}
inline void Address::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Address.state)
}
inline std::string* Address::_internal_mutable_state() {
  
  return state_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Address::release_state() {
  // @@protoc_insertion_point(field_release:patient.Address.state)
  
  return state_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:patient.Address.state)
}

// -------------------------------------------------------------------

// Adjudication

// .patient.Amount amount = 1;
inline bool Adjudication::_internal_has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline bool Adjudication::has_amount() const {
  return _internal_has_amount();
}
inline void Adjudication::clear_amount() {
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
inline const ::patient::Amount& Adjudication::_internal_amount() const {
  const ::patient::Amount* p = amount_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Amount*>(
      &::patient::_Amount_default_instance_);
}
inline const ::patient::Amount& Adjudication::amount() const {
  // @@protoc_insertion_point(field_get:patient.Adjudication.amount)
  return _internal_amount();
}
inline ::patient::Amount* Adjudication::release_amount() {
  // @@protoc_insertion_point(field_release:patient.Adjudication.amount)
  
  ::patient::Amount* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::patient::Amount* Adjudication::_internal_mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Amount>(GetArenaNoVirtual());
    amount_ = p;
  }
  return amount_;
}
inline ::patient::Amount* Adjudication::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:patient.Adjudication.amount)
  return _internal_mutable_amount();
}
inline void Adjudication::set_allocated_amount(::patient::Amount* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete amount_;
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:patient.Adjudication.amount)
}

// .patient.Category category = 2;
inline bool Adjudication::_internal_has_category() const {
  return this != internal_default_instance() && category_ != nullptr;
}
inline bool Adjudication::has_category() const {
  return _internal_has_category();
}
inline void Adjudication::clear_category() {
  if (GetArenaNoVirtual() == nullptr && category_ != nullptr) {
    delete category_;
  }
  category_ = nullptr;
}
inline const ::patient::Category& Adjudication::_internal_category() const {
  const ::patient::Category* p = category_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& Adjudication::category() const {
  // @@protoc_insertion_point(field_get:patient.Adjudication.category)
  return _internal_category();
}
inline ::patient::Category* Adjudication::release_category() {
  // @@protoc_insertion_point(field_release:patient.Adjudication.category)
  
  ::patient::Category* temp = category_;
  category_ = nullptr;
  return temp;
}
inline ::patient::Category* Adjudication::_internal_mutable_category() {
  
  if (category_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    category_ = p;
  }
  return category_;
}
inline ::patient::Category* Adjudication::mutable_category() {
  // @@protoc_insertion_point(field_mutable:patient.Adjudication.category)
  return _internal_mutable_category();
}
inline void Adjudication::set_allocated_category(::patient::Category* category) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete category_;
  }
  if (category) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      category = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category, submessage_arena);
    }
    
  } else {
    
  }
  category_ = category;
  // @@protoc_insertion_point(field_set_allocated:patient.Adjudication.category)
}

// -------------------------------------------------------------------

// Amount

// string currency = 1;
inline void Amount::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Amount::currency() const {
  // @@protoc_insertion_point(field_get:patient.Amount.currency)
  return _internal_currency();
}
inline void Amount::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:patient.Amount.currency)
}
inline std::string* Amount::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:patient.Amount.currency)
  return _internal_mutable_currency();
}
inline const std::string& Amount::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void Amount::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Amount::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Amount.currency)
}
inline void Amount::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Amount.currency)
}
inline void Amount::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Amount.currency)
}
inline std::string* Amount::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Amount::release_currency() {
  // @@protoc_insertion_point(field_release:patient.Amount.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Amount::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:patient.Amount.currency)
}

// float value = 2;
inline void Amount::clear_value() {
  value_ = 0;
}
inline float Amount::_internal_value() const {
  return value_;
}
inline float Amount::value() const {
  // @@protoc_insertion_point(field_get:patient.Amount.value)
  return _internal_value();
}
inline void Amount::_internal_set_value(float value) {
  
  value_ = value;
}
inline void Amount::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:patient.Amount.value)
}

// -------------------------------------------------------------------

// CareTeam

// .patient.Reference provider = 1;
inline bool CareTeam::_internal_has_provider() const {
  return this != internal_default_instance() && provider_ != nullptr;
}
inline bool CareTeam::has_provider() const {
  return _internal_has_provider();
}
inline void CareTeam::clear_provider() {
  if (GetArenaNoVirtual() == nullptr && provider_ != nullptr) {
    delete provider_;
  }
  provider_ = nullptr;
}
inline const ::patient::Reference& CareTeam::_internal_provider() const {
  const ::patient::Reference* p = provider_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& CareTeam::provider() const {
  // @@protoc_insertion_point(field_get:patient.CareTeam.provider)
  return _internal_provider();
}
inline ::patient::Reference* CareTeam::release_provider() {
  // @@protoc_insertion_point(field_release:patient.CareTeam.provider)
  
  ::patient::Reference* temp = provider_;
  provider_ = nullptr;
  return temp;
}
inline ::patient::Reference* CareTeam::_internal_mutable_provider() {
  
  if (provider_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    provider_ = p;
  }
  return provider_;
}
inline ::patient::Reference* CareTeam::mutable_provider() {
  // @@protoc_insertion_point(field_mutable:patient.CareTeam.provider)
  return _internal_mutable_provider();
}
inline void CareTeam::set_allocated_provider(::patient::Reference* provider) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete provider_;
  }
  if (provider) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      provider = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, provider, submessage_arena);
    }
    
  } else {
    
  }
  provider_ = provider;
  // @@protoc_insertion_point(field_set_allocated:patient.CareTeam.provider)
}

// .patient.Category role = 2;
inline bool CareTeam::_internal_has_role() const {
  return this != internal_default_instance() && role_ != nullptr;
}
inline bool CareTeam::has_role() const {
  return _internal_has_role();
}
inline void CareTeam::clear_role() {
  if (GetArenaNoVirtual() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
}
inline const ::patient::Category& CareTeam::_internal_role() const {
  const ::patient::Category* p = role_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& CareTeam::role() const {
  // @@protoc_insertion_point(field_get:patient.CareTeam.role)
  return _internal_role();
}
inline ::patient::Category* CareTeam::release_role() {
  // @@protoc_insertion_point(field_release:patient.CareTeam.role)
  
  ::patient::Category* temp = role_;
  role_ = nullptr;
  return temp;
}
inline ::patient::Category* CareTeam::_internal_mutable_role() {
  
  if (role_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    role_ = p;
  }
  return role_;
}
inline ::patient::Category* CareTeam::mutable_role() {
  // @@protoc_insertion_point(field_mutable:patient.CareTeam.role)
  return _internal_mutable_role();
}
inline void CareTeam::set_allocated_role(::patient::Category* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete role_;
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:patient.CareTeam.role)
}

// int32 sequence = 3;
inline void CareTeam::clear_sequence() {
  sequence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CareTeam::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CareTeam::sequence() const {
  // @@protoc_insertion_point(field_get:patient.CareTeam.sequence)
  return _internal_sequence();
}
inline void CareTeam::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_ = value;
}
inline void CareTeam::set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:patient.CareTeam.sequence)
}

// string reference = 4;
inline void CareTeam::clear_reference() {
  reference_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CareTeam::reference() const {
  // @@protoc_insertion_point(field_get:patient.CareTeam.reference)
  return _internal_reference();
}
inline void CareTeam::set_reference(const std::string& value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:patient.CareTeam.reference)
}
inline std::string* CareTeam::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:patient.CareTeam.reference)
  return _internal_mutable_reference();
}
inline const std::string& CareTeam::_internal_reference() const {
  return reference_.GetNoArena();
}
inline void CareTeam::_internal_set_reference(const std::string& value) {
  
  reference_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CareTeam::set_reference(std::string&& value) {
  
  reference_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.CareTeam.reference)
}
inline void CareTeam::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reference_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.CareTeam.reference)
}
inline void CareTeam::set_reference(const char* value, size_t size) {
  
  reference_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.CareTeam.reference)
}
inline std::string* CareTeam::_internal_mutable_reference() {
  
  return reference_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CareTeam::release_reference() {
  // @@protoc_insertion_point(field_release:patient.CareTeam.reference)
  
  return reference_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CareTeam::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {
    
  } else {
    
  }
  reference_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference);
  // @@protoc_insertion_point(field_set_allocated:patient.CareTeam.reference)
}

// -------------------------------------------------------------------

// Communication

// .patient.Category language = 1;
inline bool Communication::_internal_has_language() const {
  return this != internal_default_instance() && language_ != nullptr;
}
inline bool Communication::has_language() const {
  return _internal_has_language();
}
inline void Communication::clear_language() {
  if (GetArenaNoVirtual() == nullptr && language_ != nullptr) {
    delete language_;
  }
  language_ = nullptr;
}
inline const ::patient::Category& Communication::_internal_language() const {
  const ::patient::Category* p = language_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& Communication::language() const {
  // @@protoc_insertion_point(field_get:patient.Communication.language)
  return _internal_language();
}
inline ::patient::Category* Communication::release_language() {
  // @@protoc_insertion_point(field_release:patient.Communication.language)
  
  ::patient::Category* temp = language_;
  language_ = nullptr;
  return temp;
}
inline ::patient::Category* Communication::_internal_mutable_language() {
  
  if (language_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    language_ = p;
  }
  return language_;
}
inline ::patient::Category* Communication::mutable_language() {
  // @@protoc_insertion_point(field_mutable:patient.Communication.language)
  return _internal_mutable_language();
}
inline void Communication::set_allocated_language(::patient::Category* language) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete language_;
  }
  if (language) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      language = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, language, submessage_arena);
    }
    
  } else {
    
  }
  language_ = language;
  // @@protoc_insertion_point(field_set_allocated:patient.Communication.language)
}

// -------------------------------------------------------------------

// Component

// .patient.Category code = 1;
inline bool Component::_internal_has_code() const {
  return this != internal_default_instance() && code_ != nullptr;
}
inline bool Component::has_code() const {
  return _internal_has_code();
}
inline void Component::clear_code() {
  if (GetArenaNoVirtual() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
}
inline const ::patient::Category& Component::_internal_code() const {
  const ::patient::Category* p = code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& Component::code() const {
  // @@protoc_insertion_point(field_get:patient.Component.code)
  return _internal_code();
}
inline ::patient::Category* Component::release_code() {
  // @@protoc_insertion_point(field_release:patient.Component.code)
  
  ::patient::Category* temp = code_;
  code_ = nullptr;
  return temp;
}
inline ::patient::Category* Component::_internal_mutable_code() {
  
  if (code_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    code_ = p;
  }
  return code_;
}
inline ::patient::Category* Component::mutable_code() {
  // @@protoc_insertion_point(field_mutable:patient.Component.code)
  return _internal_mutable_code();
}
inline void Component::set_allocated_code(::patient::Category* code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete code_;
  }
  if (code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:patient.Component.code)
}

// .patient.Quantity valueQuantity = 2;
inline bool Component::_internal_has_valuequantity() const {
  return this != internal_default_instance() && valuequantity_ != nullptr;
}
inline bool Component::has_valuequantity() const {
  return _internal_has_valuequantity();
}
inline void Component::clear_valuequantity() {
  if (GetArenaNoVirtual() == nullptr && valuequantity_ != nullptr) {
    delete valuequantity_;
  }
  valuequantity_ = nullptr;
}
inline const ::patient::Quantity& Component::_internal_valuequantity() const {
  const ::patient::Quantity* p = valuequantity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Quantity*>(
      &::patient::_Quantity_default_instance_);
}
inline const ::patient::Quantity& Component::valuequantity() const {
  // @@protoc_insertion_point(field_get:patient.Component.valueQuantity)
  return _internal_valuequantity();
}
inline ::patient::Quantity* Component::release_valuequantity() {
  // @@protoc_insertion_point(field_release:patient.Component.valueQuantity)
  
  ::patient::Quantity* temp = valuequantity_;
  valuequantity_ = nullptr;
  return temp;
}
inline ::patient::Quantity* Component::_internal_mutable_valuequantity() {
  
  if (valuequantity_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Quantity>(GetArenaNoVirtual());
    valuequantity_ = p;
  }
  return valuequantity_;
}
inline ::patient::Quantity* Component::mutable_valuequantity() {
  // @@protoc_insertion_point(field_mutable:patient.Component.valueQuantity)
  return _internal_mutable_valuequantity();
}
inline void Component::set_allocated_valuequantity(::patient::Quantity* valuequantity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete valuequantity_;
  }
  if (valuequantity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      valuequantity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, valuequantity, submessage_arena);
    }
    
  } else {
    
  }
  valuequantity_ = valuequantity;
  // @@protoc_insertion_point(field_set_allocated:patient.Component.valueQuantity)
}

// -------------------------------------------------------------------

// Contained

// string id = 1;
inline void Contained::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Contained::id() const {
  // @@protoc_insertion_point(field_get:patient.Contained.id)
  return _internal_id();
}
inline void Contained::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:patient.Contained.id)
}
inline std::string* Contained::mutable_id() {
  // @@protoc_insertion_point(field_mutable:patient.Contained.id)
  return _internal_mutable_id();
}
inline const std::string& Contained::_internal_id() const {
  return id_.GetNoArena();
}
inline void Contained::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Contained::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Contained.id)
}
inline void Contained::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Contained.id)
}
inline void Contained::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Contained.id)
}
inline std::string* Contained::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Contained::release_id() {
  // @@protoc_insertion_point(field_release:patient.Contained.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Contained::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:patient.Contained.id)
}

// string intent = 2;
inline void Contained::clear_intent() {
  intent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Contained::intent() const {
  // @@protoc_insertion_point(field_get:patient.Contained.intent)
  return _internal_intent();
}
inline void Contained::set_intent(const std::string& value) {
  _internal_set_intent(value);
  // @@protoc_insertion_point(field_set:patient.Contained.intent)
}
inline std::string* Contained::mutable_intent() {
  // @@protoc_insertion_point(field_mutable:patient.Contained.intent)
  return _internal_mutable_intent();
}
inline const std::string& Contained::_internal_intent() const {
  return intent_.GetNoArena();
}
inline void Contained::_internal_set_intent(const std::string& value) {
  
  intent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Contained::set_intent(std::string&& value) {
  
  intent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Contained.intent)
}
inline void Contained::set_intent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  intent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Contained.intent)
}
inline void Contained::set_intent(const char* value, size_t size) {
  
  intent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Contained.intent)
}
inline std::string* Contained::_internal_mutable_intent() {
  
  return intent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Contained::release_intent() {
  // @@protoc_insertion_point(field_release:patient.Contained.intent)
  
  return intent_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Contained::set_allocated_intent(std::string* intent) {
  if (intent != nullptr) {
    
  } else {
    
  }
  intent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), intent);
  // @@protoc_insertion_point(field_set_allocated:patient.Contained.intent)
}

// repeated .patient.Reference performer = 3;
inline int Contained::_internal_performer_size() const {
  return performer_.size();
}
inline int Contained::performer_size() const {
  return _internal_performer_size();
}
inline void Contained::clear_performer() {
  performer_.Clear();
}
inline ::patient::Reference* Contained::mutable_performer(int index) {
  // @@protoc_insertion_point(field_mutable:patient.Contained.performer)
  return performer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >*
Contained::mutable_performer() {
  // @@protoc_insertion_point(field_mutable_list:patient.Contained.performer)
  return &performer_;
}
inline const ::patient::Reference& Contained::_internal_performer(int index) const {
  return performer_.Get(index);
}
inline const ::patient::Reference& Contained::performer(int index) const {
  // @@protoc_insertion_point(field_get:patient.Contained.performer)
  return _internal_performer(index);
}
inline ::patient::Reference* Contained::_internal_add_performer() {
  return performer_.Add();
}
inline ::patient::Reference* Contained::add_performer() {
  // @@protoc_insertion_point(field_add:patient.Contained.performer)
  return _internal_add_performer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >&
Contained::performer() const {
  // @@protoc_insertion_point(field_list:patient.Contained.performer)
  return performer_;
}

// .patient.Reference requester = 4;
inline bool Contained::_internal_has_requester() const {
  return this != internal_default_instance() && requester_ != nullptr;
}
inline bool Contained::has_requester() const {
  return _internal_has_requester();
}
inline void Contained::clear_requester() {
  if (GetArenaNoVirtual() == nullptr && requester_ != nullptr) {
    delete requester_;
  }
  requester_ = nullptr;
}
inline const ::patient::Reference& Contained::_internal_requester() const {
  const ::patient::Reference* p = requester_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& Contained::requester() const {
  // @@protoc_insertion_point(field_get:patient.Contained.requester)
  return _internal_requester();
}
inline ::patient::Reference* Contained::release_requester() {
  // @@protoc_insertion_point(field_release:patient.Contained.requester)
  
  ::patient::Reference* temp = requester_;
  requester_ = nullptr;
  return temp;
}
inline ::patient::Reference* Contained::_internal_mutable_requester() {
  
  if (requester_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    requester_ = p;
  }
  return requester_;
}
inline ::patient::Reference* Contained::mutable_requester() {
  // @@protoc_insertion_point(field_mutable:patient.Contained.requester)
  return _internal_mutable_requester();
}
inline void Contained::set_allocated_requester(::patient::Reference* requester) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete requester_;
  }
  if (requester) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      requester = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requester, submessage_arena);
    }
    
  } else {
    
  }
  requester_ = requester;
  // @@protoc_insertion_point(field_set_allocated:patient.Contained.requester)
}

// string resourceType = 5;
inline void Contained::clear_resourcetype() {
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Contained::resourcetype() const {
  // @@protoc_insertion_point(field_get:patient.Contained.resourceType)
  return _internal_resourcetype();
}
inline void Contained::set_resourcetype(const std::string& value) {
  _internal_set_resourcetype(value);
  // @@protoc_insertion_point(field_set:patient.Contained.resourceType)
}
inline std::string* Contained::mutable_resourcetype() {
  // @@protoc_insertion_point(field_mutable:patient.Contained.resourceType)
  return _internal_mutable_resourcetype();
}
inline const std::string& Contained::_internal_resourcetype() const {
  return resourcetype_.GetNoArena();
}
inline void Contained::_internal_set_resourcetype(const std::string& value) {
  
  resourcetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Contained::set_resourcetype(std::string&& value) {
  
  resourcetype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Contained.resourceType)
}
inline void Contained::set_resourcetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resourcetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Contained.resourceType)
}
inline void Contained::set_resourcetype(const char* value, size_t size) {
  
  resourcetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Contained.resourceType)
}
inline std::string* Contained::_internal_mutable_resourcetype() {
  
  return resourcetype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Contained::release_resourcetype() {
  // @@protoc_insertion_point(field_release:patient.Contained.resourceType)
  
  return resourcetype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Contained::set_allocated_resourcetype(std::string* resourcetype) {
  if (resourcetype != nullptr) {
    
  } else {
    
  }
  resourcetype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resourcetype);
  // @@protoc_insertion_point(field_set_allocated:patient.Contained.resourceType)
}

// .patient.Status status = 6;
inline void Contained::clear_status() {
  status_ = 0;
}
inline ::patient::Status Contained::_internal_status() const {
  return static_cast< ::patient::Status >(status_);
}
inline ::patient::Status Contained::status() const {
  // @@protoc_insertion_point(field_get:patient.Contained.status)
  return _internal_status();
}
inline void Contained::_internal_set_status(::patient::Status value) {
  
  status_ = value;
}
inline void Contained::set_status(::patient::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:patient.Contained.status)
}

// .patient.Reference subject = 7;
inline bool Contained::_internal_has_subject() const {
  return this != internal_default_instance() && subject_ != nullptr;
}
inline bool Contained::has_subject() const {
  return _internal_has_subject();
}
inline void Contained::clear_subject() {
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
}
inline const ::patient::Reference& Contained::_internal_subject() const {
  const ::patient::Reference* p = subject_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& Contained::subject() const {
  // @@protoc_insertion_point(field_get:patient.Contained.subject)
  return _internal_subject();
}
inline ::patient::Reference* Contained::release_subject() {
  // @@protoc_insertion_point(field_release:patient.Contained.subject)
  
  ::patient::Reference* temp = subject_;
  subject_ = nullptr;
  return temp;
}
inline ::patient::Reference* Contained::_internal_mutable_subject() {
  
  if (subject_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    subject_ = p;
  }
  return subject_;
}
inline ::patient::Reference* Contained::mutable_subject() {
  // @@protoc_insertion_point(field_mutable:patient.Contained.subject)
  return _internal_mutable_subject();
}
inline void Contained::set_allocated_subject(::patient::Reference* subject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete subject_;
  }
  if (subject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subject, submessage_arena);
    }
    
  } else {
    
  }
  subject_ = subject;
  // @@protoc_insertion_point(field_set_allocated:patient.Contained.subject)
}

// .patient.Reference beneficiary = 8;
inline bool Contained::_internal_has_beneficiary() const {
  return this != internal_default_instance() && beneficiary_ != nullptr;
}
inline bool Contained::has_beneficiary() const {
  return _internal_has_beneficiary();
}
inline void Contained::clear_beneficiary() {
  if (GetArenaNoVirtual() == nullptr && beneficiary_ != nullptr) {
    delete beneficiary_;
  }
  beneficiary_ = nullptr;
}
inline const ::patient::Reference& Contained::_internal_beneficiary() const {
  const ::patient::Reference* p = beneficiary_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& Contained::beneficiary() const {
  // @@protoc_insertion_point(field_get:patient.Contained.beneficiary)
  return _internal_beneficiary();
}
inline ::patient::Reference* Contained::release_beneficiary() {
  // @@protoc_insertion_point(field_release:patient.Contained.beneficiary)
  
  ::patient::Reference* temp = beneficiary_;
  beneficiary_ = nullptr;
  return temp;
}
inline ::patient::Reference* Contained::_internal_mutable_beneficiary() {
  
  if (beneficiary_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    beneficiary_ = p;
  }
  return beneficiary_;
}
inline ::patient::Reference* Contained::mutable_beneficiary() {
  // @@protoc_insertion_point(field_mutable:patient.Contained.beneficiary)
  return _internal_mutable_beneficiary();
}
inline void Contained::set_allocated_beneficiary(::patient::Reference* beneficiary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete beneficiary_;
  }
  if (beneficiary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      beneficiary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, beneficiary, submessage_arena);
    }
    
  } else {
    
  }
  beneficiary_ = beneficiary;
  // @@protoc_insertion_point(field_set_allocated:patient.Contained.beneficiary)
}

// repeated .patient.Reference payor = 9;
inline int Contained::_internal_payor_size() const {
  return payor_.size();
}
inline int Contained::payor_size() const {
  return _internal_payor_size();
}
inline void Contained::clear_payor() {
  payor_.Clear();
}
inline ::patient::Reference* Contained::mutable_payor(int index) {
  // @@protoc_insertion_point(field_mutable:patient.Contained.payor)
  return payor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >*
Contained::mutable_payor() {
  // @@protoc_insertion_point(field_mutable_list:patient.Contained.payor)
  return &payor_;
}
inline const ::patient::Reference& Contained::_internal_payor(int index) const {
  return payor_.Get(index);
}
inline const ::patient::Reference& Contained::payor(int index) const {
  // @@protoc_insertion_point(field_get:patient.Contained.payor)
  return _internal_payor(index);
}
inline ::patient::Reference* Contained::_internal_add_payor() {
  return payor_.Add();
}
inline ::patient::Reference* Contained::add_payor() {
  // @@protoc_insertion_point(field_add:patient.Contained.payor)
  return _internal_add_payor();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >&
Contained::payor() const {
  // @@protoc_insertion_point(field_list:patient.Contained.payor)
  return payor_;
}

// .patient.Category type = 10;
inline bool Contained::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool Contained::has_type() const {
  return _internal_has_type();
}
inline void Contained::clear_type() {
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
inline const ::patient::Category& Contained::_internal_type() const {
  const ::patient::Category* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& Contained::type() const {
  // @@protoc_insertion_point(field_get:patient.Contained.type)
  return _internal_type();
}
inline ::patient::Category* Contained::release_type() {
  // @@protoc_insertion_point(field_release:patient.Contained.type)
  
  ::patient::Category* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::patient::Category* Contained::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::patient::Category* Contained::mutable_type() {
  // @@protoc_insertion_point(field_mutable:patient.Contained.type)
  return _internal_mutable_type();
}
inline void Contained::set_allocated_type(::patient::Category* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:patient.Contained.type)
}

// -------------------------------------------------------------------

// Detail

// .patient.Category code = 1;
inline bool Detail::_internal_has_code() const {
  return this != internal_default_instance() && code_ != nullptr;
}
inline bool Detail::has_code() const {
  return _internal_has_code();
}
inline void Detail::clear_code() {
  if (GetArenaNoVirtual() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
}
inline const ::patient::Category& Detail::_internal_code() const {
  const ::patient::Category* p = code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& Detail::code() const {
  // @@protoc_insertion_point(field_get:patient.Detail.code)
  return _internal_code();
}
inline ::patient::Category* Detail::release_code() {
  // @@protoc_insertion_point(field_release:patient.Detail.code)
  
  ::patient::Category* temp = code_;
  code_ = nullptr;
  return temp;
}
inline ::patient::Category* Detail::_internal_mutable_code() {
  
  if (code_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    code_ = p;
  }
  return code_;
}
inline ::patient::Category* Detail::mutable_code() {
  // @@protoc_insertion_point(field_mutable:patient.Detail.code)
  return _internal_mutable_code();
}
inline void Detail::set_allocated_code(::patient::Category* code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete code_;
  }
  if (code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:patient.Detail.code)
}

// .patient.Reference location = 2;
inline bool Detail::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool Detail::has_location() const {
  return _internal_has_location();
}
inline void Detail::clear_location() {
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::patient::Reference& Detail::_internal_location() const {
  const ::patient::Reference* p = location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& Detail::location() const {
  // @@protoc_insertion_point(field_get:patient.Detail.location)
  return _internal_location();
}
inline ::patient::Reference* Detail::release_location() {
  // @@protoc_insertion_point(field_release:patient.Detail.location)
  
  ::patient::Reference* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::patient::Reference* Detail::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    location_ = p;
  }
  return location_;
}
inline ::patient::Reference* Detail::mutable_location() {
  // @@protoc_insertion_point(field_mutable:patient.Detail.location)
  return _internal_mutable_location();
}
inline void Detail::set_allocated_location(::patient::Reference* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:patient.Detail.location)
}

// .patient.Status status = 3;
inline void Detail::clear_status() {
  status_ = 0;
}
inline ::patient::Status Detail::_internal_status() const {
  return static_cast< ::patient::Status >(status_);
}
inline ::patient::Status Detail::status() const {
  // @@protoc_insertion_point(field_get:patient.Detail.status)
  return _internal_status();
}
inline void Detail::_internal_set_status(::patient::Status value) {
  
  status_ = value;
}
inline void Detail::set_status(::patient::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:patient.Detail.status)
}

// -------------------------------------------------------------------

// Diagnosis

// .patient.Reference diagnosisReference = 1;
inline bool Diagnosis::_internal_has_diagnosisreference() const {
  return this != internal_default_instance() && diagnosisreference_ != nullptr;
}
inline bool Diagnosis::has_diagnosisreference() const {
  return _internal_has_diagnosisreference();
}
inline void Diagnosis::clear_diagnosisreference() {
  if (GetArenaNoVirtual() == nullptr && diagnosisreference_ != nullptr) {
    delete diagnosisreference_;
  }
  diagnosisreference_ = nullptr;
}
inline const ::patient::Reference& Diagnosis::_internal_diagnosisreference() const {
  const ::patient::Reference* p = diagnosisreference_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& Diagnosis::diagnosisreference() const {
  // @@protoc_insertion_point(field_get:patient.Diagnosis.diagnosisReference)
  return _internal_diagnosisreference();
}
inline ::patient::Reference* Diagnosis::release_diagnosisreference() {
  // @@protoc_insertion_point(field_release:patient.Diagnosis.diagnosisReference)
  
  ::patient::Reference* temp = diagnosisreference_;
  diagnosisreference_ = nullptr;
  return temp;
}
inline ::patient::Reference* Diagnosis::_internal_mutable_diagnosisreference() {
  
  if (diagnosisreference_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    diagnosisreference_ = p;
  }
  return diagnosisreference_;
}
inline ::patient::Reference* Diagnosis::mutable_diagnosisreference() {
  // @@protoc_insertion_point(field_mutable:patient.Diagnosis.diagnosisReference)
  return _internal_mutable_diagnosisreference();
}
inline void Diagnosis::set_allocated_diagnosisreference(::patient::Reference* diagnosisreference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete diagnosisreference_;
  }
  if (diagnosisreference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      diagnosisreference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diagnosisreference, submessage_arena);
    }
    
  } else {
    
  }
  diagnosisreference_ = diagnosisreference;
  // @@protoc_insertion_point(field_set_allocated:patient.Diagnosis.diagnosisReference)
}

// int32 sequence = 2;
inline void Diagnosis::clear_sequence() {
  sequence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Diagnosis::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Diagnosis::sequence() const {
  // @@protoc_insertion_point(field_get:patient.Diagnosis.sequence)
  return _internal_sequence();
}
inline void Diagnosis::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_ = value;
}
inline void Diagnosis::set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:patient.Diagnosis.sequence)
}

// repeated .patient.Category type = 3;
inline int Diagnosis::_internal_type_size() const {
  return type_.size();
}
inline int Diagnosis::type_size() const {
  return _internal_type_size();
}
inline void Diagnosis::clear_type() {
  type_.Clear();
}
inline ::patient::Category* Diagnosis::mutable_type(int index) {
  // @@protoc_insertion_point(field_mutable:patient.Diagnosis.type)
  return type_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >*
Diagnosis::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:patient.Diagnosis.type)
  return &type_;
}
inline const ::patient::Category& Diagnosis::_internal_type(int index) const {
  return type_.Get(index);
}
inline const ::patient::Category& Diagnosis::type(int index) const {
  // @@protoc_insertion_point(field_get:patient.Diagnosis.type)
  return _internal_type(index);
}
inline ::patient::Category* Diagnosis::_internal_add_type() {
  return type_.Add();
}
inline ::patient::Category* Diagnosis::add_type() {
  // @@protoc_insertion_point(field_add:patient.Diagnosis.type)
  return _internal_add_type();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >&
Diagnosis::type() const {
  // @@protoc_insertion_point(field_list:patient.Diagnosis.type)
  return type_;
}

// -------------------------------------------------------------------

// Entry

// string fullUrl = 1;
inline void Entry::clear_fullurl() {
  fullurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Entry::fullurl() const {
  // @@protoc_insertion_point(field_get:patient.Entry.fullUrl)
  return _internal_fullurl();
}
inline void Entry::set_fullurl(const std::string& value) {
  _internal_set_fullurl(value);
  // @@protoc_insertion_point(field_set:patient.Entry.fullUrl)
}
inline std::string* Entry::mutable_fullurl() {
  // @@protoc_insertion_point(field_mutable:patient.Entry.fullUrl)
  return _internal_mutable_fullurl();
}
inline const std::string& Entry::_internal_fullurl() const {
  return fullurl_.GetNoArena();
}
inline void Entry::_internal_set_fullurl(const std::string& value) {
  
  fullurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Entry::set_fullurl(std::string&& value) {
  
  fullurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Entry.fullUrl)
}
inline void Entry::set_fullurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fullurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Entry.fullUrl)
}
inline void Entry::set_fullurl(const char* value, size_t size) {
  
  fullurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Entry.fullUrl)
}
inline std::string* Entry::_internal_mutable_fullurl() {
  
  return fullurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entry::release_fullurl() {
  // @@protoc_insertion_point(field_release:patient.Entry.fullUrl)
  
  return fullurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_fullurl(std::string* fullurl) {
  if (fullurl != nullptr) {
    
  } else {
    
  }
  fullurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fullurl);
  // @@protoc_insertion_point(field_set_allocated:patient.Entry.fullUrl)
}

// .patient.Request request = 2;
inline bool Entry::_internal_has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline bool Entry::has_request() const {
  return _internal_has_request();
}
inline void Entry::clear_request() {
  if (GetArenaNoVirtual() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
inline const ::patient::Request& Entry::_internal_request() const {
  const ::patient::Request* p = request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Request*>(
      &::patient::_Request_default_instance_);
}
inline const ::patient::Request& Entry::request() const {
  // @@protoc_insertion_point(field_get:patient.Entry.request)
  return _internal_request();
}
inline ::patient::Request* Entry::release_request() {
  // @@protoc_insertion_point(field_release:patient.Entry.request)
  
  ::patient::Request* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::patient::Request* Entry::_internal_mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Request>(GetArenaNoVirtual());
    request_ = p;
  }
  return request_;
}
inline ::patient::Request* Entry::mutable_request() {
  // @@protoc_insertion_point(field_mutable:patient.Entry.request)
  return _internal_mutable_request();
}
inline void Entry::set_allocated_request(::patient::Request* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:patient.Entry.request)
}

// repeated .patient.Resource resource = 3;
inline int Entry::_internal_resource_size() const {
  return resource_.size();
}
inline int Entry::resource_size() const {
  return _internal_resource_size();
}
inline void Entry::clear_resource() {
  resource_.Clear();
}
inline ::patient::Resource* Entry::mutable_resource(int index) {
  // @@protoc_insertion_point(field_mutable:patient.Entry.resource)
  return resource_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Resource >*
Entry::mutable_resource() {
  // @@protoc_insertion_point(field_mutable_list:patient.Entry.resource)
  return &resource_;
}
inline const ::patient::Resource& Entry::_internal_resource(int index) const {
  return resource_.Get(index);
}
inline const ::patient::Resource& Entry::resource(int index) const {
  // @@protoc_insertion_point(field_get:patient.Entry.resource)
  return _internal_resource(index);
}
inline ::patient::Resource* Entry::_internal_add_resource() {
  return resource_.Add();
}
inline ::patient::Resource* Entry::add_resource() {
  // @@protoc_insertion_point(field_add:patient.Entry.resource)
  return _internal_add_resource();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Resource >&
Entry::resource() const {
  // @@protoc_insertion_point(field_list:patient.Entry.resource)
  return resource_;
}

// -------------------------------------------------------------------

// Extension

// repeated .patient.Extension extension = 1;
inline int Extension::_internal_extension_size() const {
  return extension_.size();
}
inline int Extension::extension_size() const {
  return _internal_extension_size();
}
inline void Extension::clear_extension() {
  extension_.Clear();
}
inline ::patient::Extension* Extension::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:patient.Extension.extension)
  return extension_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Extension >*
Extension::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:patient.Extension.extension)
  return &extension_;
}
inline const ::patient::Extension& Extension::_internal_extension(int index) const {
  return extension_.Get(index);
}
inline const ::patient::Extension& Extension::extension(int index) const {
  // @@protoc_insertion_point(field_get:patient.Extension.extension)
  return _internal_extension(index);
}
inline ::patient::Extension* Extension::_internal_add_extension() {
  return extension_.Add();
}
inline ::patient::Extension* Extension::add_extension() {
  // @@protoc_insertion_point(field_add:patient.Extension.extension)
  return _internal_add_extension();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Extension >&
Extension::extension() const {
  // @@protoc_insertion_point(field_list:patient.Extension.extension)
  return extension_;
}

// string url = 2;
inline void Extension::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Extension::url() const {
  // @@protoc_insertion_point(field_get:patient.Extension.url)
  return _internal_url();
}
inline void Extension::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:patient.Extension.url)
}
inline std::string* Extension::mutable_url() {
  // @@protoc_insertion_point(field_mutable:patient.Extension.url)
  return _internal_mutable_url();
}
inline const std::string& Extension::_internal_url() const {
  return url_.GetNoArena();
}
inline void Extension::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Extension::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Extension.url)
}
inline void Extension::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Extension.url)
}
inline void Extension::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Extension.url)
}
inline std::string* Extension::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Extension::release_url() {
  // @@protoc_insertion_point(field_release:patient.Extension.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Extension::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:patient.Extension.url)
}

// .patient.Coding valueCoding = 3;
inline bool Extension::_internal_has_valuecoding() const {
  return this != internal_default_instance() && valuecoding_ != nullptr;
}
inline bool Extension::has_valuecoding() const {
  return _internal_has_valuecoding();
}
inline void Extension::clear_valuecoding() {
  if (GetArenaNoVirtual() == nullptr && valuecoding_ != nullptr) {
    delete valuecoding_;
  }
  valuecoding_ = nullptr;
}
inline const ::patient::Coding& Extension::_internal_valuecoding() const {
  const ::patient::Coding* p = valuecoding_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Coding*>(
      &::patient::_Coding_default_instance_);
}
inline const ::patient::Coding& Extension::valuecoding() const {
  // @@protoc_insertion_point(field_get:patient.Extension.valueCoding)
  return _internal_valuecoding();
}
inline ::patient::Coding* Extension::release_valuecoding() {
  // @@protoc_insertion_point(field_release:patient.Extension.valueCoding)
  
  ::patient::Coding* temp = valuecoding_;
  valuecoding_ = nullptr;
  return temp;
}
inline ::patient::Coding* Extension::_internal_mutable_valuecoding() {
  
  if (valuecoding_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Coding>(GetArenaNoVirtual());
    valuecoding_ = p;
  }
  return valuecoding_;
}
inline ::patient::Coding* Extension::mutable_valuecoding() {
  // @@protoc_insertion_point(field_mutable:patient.Extension.valueCoding)
  return _internal_mutable_valuecoding();
}
inline void Extension::set_allocated_valuecoding(::patient::Coding* valuecoding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete valuecoding_;
  }
  if (valuecoding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      valuecoding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, valuecoding, submessage_arena);
    }
    
  } else {
    
  }
  valuecoding_ = valuecoding;
  // @@protoc_insertion_point(field_set_allocated:patient.Extension.valueCoding)
}

// string valueString = 4;
inline void Extension::clear_valuestring() {
  valuestring_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Extension::valuestring() const {
  // @@protoc_insertion_point(field_get:patient.Extension.valueString)
  return _internal_valuestring();
}
inline void Extension::set_valuestring(const std::string& value) {
  _internal_set_valuestring(value);
  // @@protoc_insertion_point(field_set:patient.Extension.valueString)
}
inline std::string* Extension::mutable_valuestring() {
  // @@protoc_insertion_point(field_mutable:patient.Extension.valueString)
  return _internal_mutable_valuestring();
}
inline const std::string& Extension::_internal_valuestring() const {
  return valuestring_.GetNoArena();
}
inline void Extension::_internal_set_valuestring(const std::string& value) {
  
  valuestring_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Extension::set_valuestring(std::string&& value) {
  
  valuestring_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Extension.valueString)
}
inline void Extension::set_valuestring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  valuestring_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Extension.valueString)
}
inline void Extension::set_valuestring(const char* value, size_t size) {
  
  valuestring_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Extension.valueString)
}
inline std::string* Extension::_internal_mutable_valuestring() {
  
  return valuestring_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Extension::release_valuestring() {
  // @@protoc_insertion_point(field_release:patient.Extension.valueString)
  
  return valuestring_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Extension::set_allocated_valuestring(std::string* valuestring) {
  if (valuestring != nullptr) {
    
  } else {
    
  }
  valuestring_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), valuestring);
  // @@protoc_insertion_point(field_set_allocated:patient.Extension.valueString)
}

// float valueDecimal = 5;
inline void Extension::clear_valuedecimal() {
  valuedecimal_ = 0;
}
inline float Extension::_internal_valuedecimal() const {
  return valuedecimal_;
}
inline float Extension::valuedecimal() const {
  // @@protoc_insertion_point(field_get:patient.Extension.valueDecimal)
  return _internal_valuedecimal();
}
inline void Extension::_internal_set_valuedecimal(float value) {
  
  valuedecimal_ = value;
}
inline void Extension::set_valuedecimal(float value) {
  _internal_set_valuedecimal(value);
  // @@protoc_insertion_point(field_set:patient.Extension.valueDecimal)
}

// -------------------------------------------------------------------

// Identifier

// string system = 1;
inline void Identifier::clear_system() {
  system_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Identifier::system() const {
  // @@protoc_insertion_point(field_get:patient.Identifier.system)
  return _internal_system();
}
inline void Identifier::set_system(const std::string& value) {
  _internal_set_system(value);
  // @@protoc_insertion_point(field_set:patient.Identifier.system)
}
inline std::string* Identifier::mutable_system() {
  // @@protoc_insertion_point(field_mutable:patient.Identifier.system)
  return _internal_mutable_system();
}
inline const std::string& Identifier::_internal_system() const {
  return system_.GetNoArena();
}
inline void Identifier::_internal_set_system(const std::string& value) {
  
  system_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Identifier::set_system(std::string&& value) {
  
  system_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Identifier.system)
}
inline void Identifier::set_system(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  system_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Identifier.system)
}
inline void Identifier::set_system(const char* value, size_t size) {
  
  system_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Identifier.system)
}
inline std::string* Identifier::_internal_mutable_system() {
  
  return system_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Identifier::release_system() {
  // @@protoc_insertion_point(field_release:patient.Identifier.system)
  
  return system_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Identifier::set_allocated_system(std::string* system) {
  if (system != nullptr) {
    
  } else {
    
  }
  system_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), system);
  // @@protoc_insertion_point(field_set_allocated:patient.Identifier.system)
}

// string value = 2;
inline void Identifier::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Identifier::value() const {
  // @@protoc_insertion_point(field_get:patient.Identifier.value)
  return _internal_value();
}
inline void Identifier::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:patient.Identifier.value)
}
inline std::string* Identifier::mutable_value() {
  // @@protoc_insertion_point(field_mutable:patient.Identifier.value)
  return _internal_mutable_value();
}
inline const std::string& Identifier::_internal_value() const {
  return value_.GetNoArena();
}
inline void Identifier::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Identifier::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Identifier.value)
}
inline void Identifier::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Identifier.value)
}
inline void Identifier::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Identifier.value)
}
inline std::string* Identifier::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Identifier::release_value() {
  // @@protoc_insertion_point(field_release:patient.Identifier.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Identifier::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:patient.Identifier.value)
}

// .patient.Category type = 3;
inline bool Identifier::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool Identifier::has_type() const {
  return _internal_has_type();
}
inline void Identifier::clear_type() {
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
inline const ::patient::Category& Identifier::_internal_type() const {
  const ::patient::Category* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& Identifier::type() const {
  // @@protoc_insertion_point(field_get:patient.Identifier.type)
  return _internal_type();
}
inline ::patient::Category* Identifier::release_type() {
  // @@protoc_insertion_point(field_release:patient.Identifier.type)
  
  ::patient::Category* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::patient::Category* Identifier::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::patient::Category* Identifier::mutable_type() {
  // @@protoc_insertion_point(field_mutable:patient.Identifier.type)
  return _internal_mutable_type();
}
inline void Identifier::set_allocated_type(::patient::Category* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:patient.Identifier.type)
}

// -------------------------------------------------------------------

// Insurance

// .patient.Reference coverage = 1;
inline bool Insurance::_internal_has_coverage() const {
  return this != internal_default_instance() && coverage_ != nullptr;
}
inline bool Insurance::has_coverage() const {
  return _internal_has_coverage();
}
inline void Insurance::clear_coverage() {
  if (GetArenaNoVirtual() == nullptr && coverage_ != nullptr) {
    delete coverage_;
  }
  coverage_ = nullptr;
}
inline const ::patient::Reference& Insurance::_internal_coverage() const {
  const ::patient::Reference* p = coverage_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& Insurance::coverage() const {
  // @@protoc_insertion_point(field_get:patient.Insurance.coverage)
  return _internal_coverage();
}
inline ::patient::Reference* Insurance::release_coverage() {
  // @@protoc_insertion_point(field_release:patient.Insurance.coverage)
  
  ::patient::Reference* temp = coverage_;
  coverage_ = nullptr;
  return temp;
}
inline ::patient::Reference* Insurance::_internal_mutable_coverage() {
  
  if (coverage_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    coverage_ = p;
  }
  return coverage_;
}
inline ::patient::Reference* Insurance::mutable_coverage() {
  // @@protoc_insertion_point(field_mutable:patient.Insurance.coverage)
  return _internal_mutable_coverage();
}
inline void Insurance::set_allocated_coverage(::patient::Reference* coverage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete coverage_;
  }
  if (coverage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      coverage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coverage, submessage_arena);
    }
    
  } else {
    
  }
  coverage_ = coverage;
  // @@protoc_insertion_point(field_set_allocated:patient.Insurance.coverage)
}

// bool focal = 2;
inline void Insurance::clear_focal() {
  focal_ = false;
}
inline bool Insurance::_internal_focal() const {
  return focal_;
}
inline bool Insurance::focal() const {
  // @@protoc_insertion_point(field_get:patient.Insurance.focal)
  return _internal_focal();
}
inline void Insurance::_internal_set_focal(bool value) {
  
  focal_ = value;
}
inline void Insurance::set_focal(bool value) {
  _internal_set_focal(value);
  // @@protoc_insertion_point(field_set:patient.Insurance.focal)
}

// int32 sequence = 3;
inline void Insurance::clear_sequence() {
  sequence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Insurance::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Insurance::sequence() const {
  // @@protoc_insertion_point(field_get:patient.Insurance.sequence)
  return _internal_sequence();
}
inline void Insurance::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_ = value;
}
inline void Insurance::set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:patient.Insurance.sequence)
}

// -------------------------------------------------------------------

// Item

// repeated .patient.Reference encounter = 1;
inline int Item::_internal_encounter_size() const {
  return encounter_.size();
}
inline int Item::encounter_size() const {
  return _internal_encounter_size();
}
inline void Item::clear_encounter() {
  encounter_.Clear();
}
inline ::patient::Reference* Item::mutable_encounter(int index) {
  // @@protoc_insertion_point(field_mutable:patient.Item.encounter)
  return encounter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >*
Item::mutable_encounter() {
  // @@protoc_insertion_point(field_mutable_list:patient.Item.encounter)
  return &encounter_;
}
inline const ::patient::Reference& Item::_internal_encounter(int index) const {
  return encounter_.Get(index);
}
inline const ::patient::Reference& Item::encounter(int index) const {
  // @@protoc_insertion_point(field_get:patient.Item.encounter)
  return _internal_encounter(index);
}
inline ::patient::Reference* Item::_internal_add_encounter() {
  return encounter_.Add();
}
inline ::patient::Reference* Item::add_encounter() {
  // @@protoc_insertion_point(field_add:patient.Item.encounter)
  return _internal_add_encounter();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >&
Item::encounter() const {
  // @@protoc_insertion_point(field_list:patient.Item.encounter)
  return encounter_;
}

// .patient.Category productOrService = 2;
inline bool Item::_internal_has_productorservice() const {
  return this != internal_default_instance() && productorservice_ != nullptr;
}
inline bool Item::has_productorservice() const {
  return _internal_has_productorservice();
}
inline void Item::clear_productorservice() {
  if (GetArenaNoVirtual() == nullptr && productorservice_ != nullptr) {
    delete productorservice_;
  }
  productorservice_ = nullptr;
}
inline const ::patient::Category& Item::_internal_productorservice() const {
  const ::patient::Category* p = productorservice_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& Item::productorservice() const {
  // @@protoc_insertion_point(field_get:patient.Item.productOrService)
  return _internal_productorservice();
}
inline ::patient::Category* Item::release_productorservice() {
  // @@protoc_insertion_point(field_release:patient.Item.productOrService)
  
  ::patient::Category* temp = productorservice_;
  productorservice_ = nullptr;
  return temp;
}
inline ::patient::Category* Item::_internal_mutable_productorservice() {
  
  if (productorservice_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    productorservice_ = p;
  }
  return productorservice_;
}
inline ::patient::Category* Item::mutable_productorservice() {
  // @@protoc_insertion_point(field_mutable:patient.Item.productOrService)
  return _internal_mutable_productorservice();
}
inline void Item::set_allocated_productorservice(::patient::Category* productorservice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete productorservice_;
  }
  if (productorservice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      productorservice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, productorservice, submessage_arena);
    }
    
  } else {
    
  }
  productorservice_ = productorservice;
  // @@protoc_insertion_point(field_set_allocated:patient.Item.productOrService)
}

// int32 sequence = 3;
inline void Item::clear_sequence() {
  sequence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Item::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Item::sequence() const {
  // @@protoc_insertion_point(field_get:patient.Item.sequence)
  return _internal_sequence();
}
inline void Item::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_ = value;
}
inline void Item::set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:patient.Item.sequence)
}

// repeated int32 informationSequence = 4;
inline int Item::_internal_informationsequence_size() const {
  return informationsequence_.size();
}
inline int Item::informationsequence_size() const {
  return _internal_informationsequence_size();
}
inline void Item::clear_informationsequence() {
  informationsequence_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Item::_internal_informationsequence(int index) const {
  return informationsequence_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Item::informationsequence(int index) const {
  // @@protoc_insertion_point(field_get:patient.Item.informationSequence)
  return _internal_informationsequence(index);
}
inline void Item::set_informationsequence(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  informationsequence_.Set(index, value);
  // @@protoc_insertion_point(field_set:patient.Item.informationSequence)
}
inline void Item::_internal_add_informationsequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  informationsequence_.Add(value);
}
inline void Item::add_informationsequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_informationsequence(value);
  // @@protoc_insertion_point(field_add:patient.Item.informationSequence)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Item::_internal_informationsequence() const {
  return informationsequence_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Item::informationsequence() const {
  // @@protoc_insertion_point(field_list:patient.Item.informationSequence)
  return _internal_informationsequence();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Item::_internal_mutable_informationsequence() {
  return &informationsequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Item::mutable_informationsequence() {
  // @@protoc_insertion_point(field_mutable_list:patient.Item.informationSequence)
  return _internal_mutable_informationsequence();
}

// .patient.Amount net = 5;
inline bool Item::_internal_has_net() const {
  return this != internal_default_instance() && net_ != nullptr;
}
inline bool Item::has_net() const {
  return _internal_has_net();
}
inline void Item::clear_net() {
  if (GetArenaNoVirtual() == nullptr && net_ != nullptr) {
    delete net_;
  }
  net_ = nullptr;
}
inline const ::patient::Amount& Item::_internal_net() const {
  const ::patient::Amount* p = net_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Amount*>(
      &::patient::_Amount_default_instance_);
}
inline const ::patient::Amount& Item::net() const {
  // @@protoc_insertion_point(field_get:patient.Item.net)
  return _internal_net();
}
inline ::patient::Amount* Item::release_net() {
  // @@protoc_insertion_point(field_release:patient.Item.net)
  
  ::patient::Amount* temp = net_;
  net_ = nullptr;
  return temp;
}
inline ::patient::Amount* Item::_internal_mutable_net() {
  
  if (net_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Amount>(GetArenaNoVirtual());
    net_ = p;
  }
  return net_;
}
inline ::patient::Amount* Item::mutable_net() {
  // @@protoc_insertion_point(field_mutable:patient.Item.net)
  return _internal_mutable_net();
}
inline void Item::set_allocated_net(::patient::Amount* net) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete net_;
  }
  if (net) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      net = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, net, submessage_arena);
    }
    
  } else {
    
  }
  net_ = net;
  // @@protoc_insertion_point(field_set_allocated:patient.Item.net)
}

// .patient.Category category = 6;
inline bool Item::_internal_has_category() const {
  return this != internal_default_instance() && category_ != nullptr;
}
inline bool Item::has_category() const {
  return _internal_has_category();
}
inline void Item::clear_category() {
  if (GetArenaNoVirtual() == nullptr && category_ != nullptr) {
    delete category_;
  }
  category_ = nullptr;
}
inline const ::patient::Category& Item::_internal_category() const {
  const ::patient::Category* p = category_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& Item::category() const {
  // @@protoc_insertion_point(field_get:patient.Item.category)
  return _internal_category();
}
inline ::patient::Category* Item::release_category() {
  // @@protoc_insertion_point(field_release:patient.Item.category)
  
  ::patient::Category* temp = category_;
  category_ = nullptr;
  return temp;
}
inline ::patient::Category* Item::_internal_mutable_category() {
  
  if (category_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    category_ = p;
  }
  return category_;
}
inline ::patient::Category* Item::mutable_category() {
  // @@protoc_insertion_point(field_mutable:patient.Item.category)
  return _internal_mutable_category();
}
inline void Item::set_allocated_category(::patient::Category* category) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete category_;
  }
  if (category) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      category = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category, submessage_arena);
    }
    
  } else {
    
  }
  category_ = category;
  // @@protoc_insertion_point(field_set_allocated:patient.Item.category)
}

// .patient.Category locationCodeableConcept = 7;
inline bool Item::_internal_has_locationcodeableconcept() const {
  return this != internal_default_instance() && locationcodeableconcept_ != nullptr;
}
inline bool Item::has_locationcodeableconcept() const {
  return _internal_has_locationcodeableconcept();
}
inline void Item::clear_locationcodeableconcept() {
  if (GetArenaNoVirtual() == nullptr && locationcodeableconcept_ != nullptr) {
    delete locationcodeableconcept_;
  }
  locationcodeableconcept_ = nullptr;
}
inline const ::patient::Category& Item::_internal_locationcodeableconcept() const {
  const ::patient::Category* p = locationcodeableconcept_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& Item::locationcodeableconcept() const {
  // @@protoc_insertion_point(field_get:patient.Item.locationCodeableConcept)
  return _internal_locationcodeableconcept();
}
inline ::patient::Category* Item::release_locationcodeableconcept() {
  // @@protoc_insertion_point(field_release:patient.Item.locationCodeableConcept)
  
  ::patient::Category* temp = locationcodeableconcept_;
  locationcodeableconcept_ = nullptr;
  return temp;
}
inline ::patient::Category* Item::_internal_mutable_locationcodeableconcept() {
  
  if (locationcodeableconcept_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    locationcodeableconcept_ = p;
  }
  return locationcodeableconcept_;
}
inline ::patient::Category* Item::mutable_locationcodeableconcept() {
  // @@protoc_insertion_point(field_mutable:patient.Item.locationCodeableConcept)
  return _internal_mutable_locationcodeableconcept();
}
inline void Item::set_allocated_locationcodeableconcept(::patient::Category* locationcodeableconcept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete locationcodeableconcept_;
  }
  if (locationcodeableconcept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      locationcodeableconcept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locationcodeableconcept, submessage_arena);
    }
    
  } else {
    
  }
  locationcodeableconcept_ = locationcodeableconcept;
  // @@protoc_insertion_point(field_set_allocated:patient.Item.locationCodeableConcept)
}

// .patient.Period servicedPeriod = 8;
inline bool Item::_internal_has_servicedperiod() const {
  return this != internal_default_instance() && servicedperiod_ != nullptr;
}
inline bool Item::has_servicedperiod() const {
  return _internal_has_servicedperiod();
}
inline void Item::clear_servicedperiod() {
  if (GetArenaNoVirtual() == nullptr && servicedperiod_ != nullptr) {
    delete servicedperiod_;
  }
  servicedperiod_ = nullptr;
}
inline const ::patient::Period& Item::_internal_servicedperiod() const {
  const ::patient::Period* p = servicedperiod_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Period*>(
      &::patient::_Period_default_instance_);
}
inline const ::patient::Period& Item::servicedperiod() const {
  // @@protoc_insertion_point(field_get:patient.Item.servicedPeriod)
  return _internal_servicedperiod();
}
inline ::patient::Period* Item::release_servicedperiod() {
  // @@protoc_insertion_point(field_release:patient.Item.servicedPeriod)
  
  ::patient::Period* temp = servicedperiod_;
  servicedperiod_ = nullptr;
  return temp;
}
inline ::patient::Period* Item::_internal_mutable_servicedperiod() {
  
  if (servicedperiod_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Period>(GetArenaNoVirtual());
    servicedperiod_ = p;
  }
  return servicedperiod_;
}
inline ::patient::Period* Item::mutable_servicedperiod() {
  // @@protoc_insertion_point(field_mutable:patient.Item.servicedPeriod)
  return _internal_mutable_servicedperiod();
}
inline void Item::set_allocated_servicedperiod(::patient::Period* servicedperiod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete servicedperiod_;
  }
  if (servicedperiod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      servicedperiod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, servicedperiod, submessage_arena);
    }
    
  } else {
    
  }
  servicedperiod_ = servicedperiod;
  // @@protoc_insertion_point(field_set_allocated:patient.Item.servicedPeriod)
}

// repeated .patient.Adjudication adjudication = 9;
inline int Item::_internal_adjudication_size() const {
  return adjudication_.size();
}
inline int Item::adjudication_size() const {
  return _internal_adjudication_size();
}
inline void Item::clear_adjudication() {
  adjudication_.Clear();
}
inline ::patient::Adjudication* Item::mutable_adjudication(int index) {
  // @@protoc_insertion_point(field_mutable:patient.Item.adjudication)
  return adjudication_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Adjudication >*
Item::mutable_adjudication() {
  // @@protoc_insertion_point(field_mutable_list:patient.Item.adjudication)
  return &adjudication_;
}
inline const ::patient::Adjudication& Item::_internal_adjudication(int index) const {
  return adjudication_.Get(index);
}
inline const ::patient::Adjudication& Item::adjudication(int index) const {
  // @@protoc_insertion_point(field_get:patient.Item.adjudication)
  return _internal_adjudication(index);
}
inline ::patient::Adjudication* Item::_internal_add_adjudication() {
  return adjudication_.Add();
}
inline ::patient::Adjudication* Item::add_adjudication() {
  // @@protoc_insertion_point(field_add:patient.Item.adjudication)
  return _internal_add_adjudication();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Adjudication >&
Item::adjudication() const {
  // @@protoc_insertion_point(field_list:patient.Item.adjudication)
  return adjudication_;
}

// -------------------------------------------------------------------

// Name

// string family = 1;
inline void Name::clear_family() {
  family_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Name::family() const {
  // @@protoc_insertion_point(field_get:patient.Name.family)
  return _internal_family();
}
inline void Name::set_family(const std::string& value) {
  _internal_set_family(value);
  // @@protoc_insertion_point(field_set:patient.Name.family)
}
inline std::string* Name::mutable_family() {
  // @@protoc_insertion_point(field_mutable:patient.Name.family)
  return _internal_mutable_family();
}
inline const std::string& Name::_internal_family() const {
  return family_.GetNoArena();
}
inline void Name::_internal_set_family(const std::string& value) {
  
  family_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Name::set_family(std::string&& value) {
  
  family_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Name.family)
}
inline void Name::set_family(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  family_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Name.family)
}
inline void Name::set_family(const char* value, size_t size) {
  
  family_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Name.family)
}
inline std::string* Name::_internal_mutable_family() {
  
  return family_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Name::release_family() {
  // @@protoc_insertion_point(field_release:patient.Name.family)
  
  return family_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Name::set_allocated_family(std::string* family) {
  if (family != nullptr) {
    
  } else {
    
  }
  family_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), family);
  // @@protoc_insertion_point(field_set_allocated:patient.Name.family)
}

// repeated string given = 2;
inline int Name::_internal_given_size() const {
  return given_.size();
}
inline int Name::given_size() const {
  return _internal_given_size();
}
inline void Name::clear_given() {
  given_.Clear();
}
inline std::string* Name::add_given() {
  // @@protoc_insertion_point(field_add_mutable:patient.Name.given)
  return _internal_add_given();
}
inline const std::string& Name::_internal_given(int index) const {
  return given_.Get(index);
}
inline const std::string& Name::given(int index) const {
  // @@protoc_insertion_point(field_get:patient.Name.given)
  return _internal_given(index);
}
inline std::string* Name::mutable_given(int index) {
  // @@protoc_insertion_point(field_mutable:patient.Name.given)
  return given_.Mutable(index);
}
inline void Name::set_given(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:patient.Name.given)
  given_.Mutable(index)->assign(value);
}
inline void Name::set_given(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:patient.Name.given)
  given_.Mutable(index)->assign(std::move(value));
}
inline void Name::set_given(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  given_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:patient.Name.given)
}
inline void Name::set_given(int index, const char* value, size_t size) {
  given_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:patient.Name.given)
}
inline std::string* Name::_internal_add_given() {
  return given_.Add();
}
inline void Name::add_given(const std::string& value) {
  given_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:patient.Name.given)
}
inline void Name::add_given(std::string&& value) {
  given_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:patient.Name.given)
}
inline void Name::add_given(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  given_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:patient.Name.given)
}
inline void Name::add_given(const char* value, size_t size) {
  given_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:patient.Name.given)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Name::given() const {
  // @@protoc_insertion_point(field_list:patient.Name.given)
  return given_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Name::mutable_given() {
  // @@protoc_insertion_point(field_mutable_list:patient.Name.given)
  return &given_;
}

// repeated string prefix = 3;
inline int Name::_internal_prefix_size() const {
  return prefix_.size();
}
inline int Name::prefix_size() const {
  return _internal_prefix_size();
}
inline void Name::clear_prefix() {
  prefix_.Clear();
}
inline std::string* Name::add_prefix() {
  // @@protoc_insertion_point(field_add_mutable:patient.Name.prefix)
  return _internal_add_prefix();
}
inline const std::string& Name::_internal_prefix(int index) const {
  return prefix_.Get(index);
}
inline const std::string& Name::prefix(int index) const {
  // @@protoc_insertion_point(field_get:patient.Name.prefix)
  return _internal_prefix(index);
}
inline std::string* Name::mutable_prefix(int index) {
  // @@protoc_insertion_point(field_mutable:patient.Name.prefix)
  return prefix_.Mutable(index);
}
inline void Name::set_prefix(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:patient.Name.prefix)
  prefix_.Mutable(index)->assign(value);
}
inline void Name::set_prefix(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:patient.Name.prefix)
  prefix_.Mutable(index)->assign(std::move(value));
}
inline void Name::set_prefix(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  prefix_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:patient.Name.prefix)
}
inline void Name::set_prefix(int index, const char* value, size_t size) {
  prefix_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:patient.Name.prefix)
}
inline std::string* Name::_internal_add_prefix() {
  return prefix_.Add();
}
inline void Name::add_prefix(const std::string& value) {
  prefix_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:patient.Name.prefix)
}
inline void Name::add_prefix(std::string&& value) {
  prefix_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:patient.Name.prefix)
}
inline void Name::add_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  prefix_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:patient.Name.prefix)
}
inline void Name::add_prefix(const char* value, size_t size) {
  prefix_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:patient.Name.prefix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Name::prefix() const {
  // @@protoc_insertion_point(field_list:patient.Name.prefix)
  return prefix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Name::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable_list:patient.Name.prefix)
  return &prefix_;
}

// string use = 4;
inline void Name::clear_use() {
  use_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Name::use() const {
  // @@protoc_insertion_point(field_get:patient.Name.use)
  return _internal_use();
}
inline void Name::set_use(const std::string& value) {
  _internal_set_use(value);
  // @@protoc_insertion_point(field_set:patient.Name.use)
}
inline std::string* Name::mutable_use() {
  // @@protoc_insertion_point(field_mutable:patient.Name.use)
  return _internal_mutable_use();
}
inline const std::string& Name::_internal_use() const {
  return use_.GetNoArena();
}
inline void Name::_internal_set_use(const std::string& value) {
  
  use_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Name::set_use(std::string&& value) {
  
  use_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Name.use)
}
inline void Name::set_use(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  use_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Name.use)
}
inline void Name::set_use(const char* value, size_t size) {
  
  use_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Name.use)
}
inline std::string* Name::_internal_mutable_use() {
  
  return use_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Name::release_use() {
  // @@protoc_insertion_point(field_release:patient.Name.use)
  
  return use_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Name::set_allocated_use(std::string* use) {
  if (use != nullptr) {
    
  } else {
    
  }
  use_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), use);
  // @@protoc_insertion_point(field_set_allocated:patient.Name.use)
}

// -------------------------------------------------------------------

// Participant

// .patient.Reference individual = 1;
inline bool Participant::_internal_has_individual() const {
  return this != internal_default_instance() && individual_ != nullptr;
}
inline bool Participant::has_individual() const {
  return _internal_has_individual();
}
inline void Participant::clear_individual() {
  if (GetArenaNoVirtual() == nullptr && individual_ != nullptr) {
    delete individual_;
  }
  individual_ = nullptr;
}
inline const ::patient::Reference& Participant::_internal_individual() const {
  const ::patient::Reference* p = individual_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& Participant::individual() const {
  // @@protoc_insertion_point(field_get:patient.Participant.individual)
  return _internal_individual();
}
inline ::patient::Reference* Participant::release_individual() {
  // @@protoc_insertion_point(field_release:patient.Participant.individual)
  
  ::patient::Reference* temp = individual_;
  individual_ = nullptr;
  return temp;
}
inline ::patient::Reference* Participant::_internal_mutable_individual() {
  
  if (individual_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    individual_ = p;
  }
  return individual_;
}
inline ::patient::Reference* Participant::mutable_individual() {
  // @@protoc_insertion_point(field_mutable:patient.Participant.individual)
  return _internal_mutable_individual();
}
inline void Participant::set_allocated_individual(::patient::Reference* individual) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete individual_;
  }
  if (individual) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      individual = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, individual, submessage_arena);
    }
    
  } else {
    
  }
  individual_ = individual;
  // @@protoc_insertion_point(field_set_allocated:patient.Participant.individual)
}

// .patient.Reference member = 2;
inline bool Participant::_internal_has_member() const {
  return this != internal_default_instance() && member_ != nullptr;
}
inline bool Participant::has_member() const {
  return _internal_has_member();
}
inline void Participant::clear_member() {
  if (GetArenaNoVirtual() == nullptr && member_ != nullptr) {
    delete member_;
  }
  member_ = nullptr;
}
inline const ::patient::Reference& Participant::_internal_member() const {
  const ::patient::Reference* p = member_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& Participant::member() const {
  // @@protoc_insertion_point(field_get:patient.Participant.member)
  return _internal_member();
}
inline ::patient::Reference* Participant::release_member() {
  // @@protoc_insertion_point(field_release:patient.Participant.member)
  
  ::patient::Reference* temp = member_;
  member_ = nullptr;
  return temp;
}
inline ::patient::Reference* Participant::_internal_mutable_member() {
  
  if (member_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    member_ = p;
  }
  return member_;
}
inline ::patient::Reference* Participant::mutable_member() {
  // @@protoc_insertion_point(field_mutable:patient.Participant.member)
  return _internal_mutable_member();
}
inline void Participant::set_allocated_member(::patient::Reference* member) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete member_;
  }
  if (member) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      member = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, member, submessage_arena);
    }
    
  } else {
    
  }
  member_ = member;
  // @@protoc_insertion_point(field_set_allocated:patient.Participant.member)
}

// repeated .patient.Category role = 3;
inline int Participant::_internal_role_size() const {
  return role_.size();
}
inline int Participant::role_size() const {
  return _internal_role_size();
}
inline void Participant::clear_role() {
  role_.Clear();
}
inline ::patient::Category* Participant::mutable_role(int index) {
  // @@protoc_insertion_point(field_mutable:patient.Participant.role)
  return role_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >*
Participant::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:patient.Participant.role)
  return &role_;
}
inline const ::patient::Category& Participant::_internal_role(int index) const {
  return role_.Get(index);
}
inline const ::patient::Category& Participant::role(int index) const {
  // @@protoc_insertion_point(field_get:patient.Participant.role)
  return _internal_role(index);
}
inline ::patient::Category* Participant::_internal_add_role() {
  return role_.Add();
}
inline ::patient::Category* Participant::add_role() {
  // @@protoc_insertion_point(field_add:patient.Participant.role)
  return _internal_add_role();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >&
Participant::role() const {
  // @@protoc_insertion_point(field_list:patient.Participant.role)
  return role_;
}

// -------------------------------------------------------------------

// Payment

// .patient.Amount amount = 1;
inline bool Payment::_internal_has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline bool Payment::has_amount() const {
  return _internal_has_amount();
}
inline void Payment::clear_amount() {
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
inline const ::patient::Amount& Payment::_internal_amount() const {
  const ::patient::Amount* p = amount_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Amount*>(
      &::patient::_Amount_default_instance_);
}
inline const ::patient::Amount& Payment::amount() const {
  // @@protoc_insertion_point(field_get:patient.Payment.amount)
  return _internal_amount();
}
inline ::patient::Amount* Payment::release_amount() {
  // @@protoc_insertion_point(field_release:patient.Payment.amount)
  
  ::patient::Amount* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::patient::Amount* Payment::_internal_mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Amount>(GetArenaNoVirtual());
    amount_ = p;
  }
  return amount_;
}
inline ::patient::Amount* Payment::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:patient.Payment.amount)
  return _internal_mutable_amount();
}
inline void Payment::set_allocated_amount(::patient::Amount* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete amount_;
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:patient.Payment.amount)
}

// -------------------------------------------------------------------

// Procedure

// .patient.Reference procedureReference = 1;
inline bool Procedure::_internal_has_procedurereference() const {
  return this != internal_default_instance() && procedurereference_ != nullptr;
}
inline bool Procedure::has_procedurereference() const {
  return _internal_has_procedurereference();
}
inline void Procedure::clear_procedurereference() {
  if (GetArenaNoVirtual() == nullptr && procedurereference_ != nullptr) {
    delete procedurereference_;
  }
  procedurereference_ = nullptr;
}
inline const ::patient::Reference& Procedure::_internal_procedurereference() const {
  const ::patient::Reference* p = procedurereference_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& Procedure::procedurereference() const {
  // @@protoc_insertion_point(field_get:patient.Procedure.procedureReference)
  return _internal_procedurereference();
}
inline ::patient::Reference* Procedure::release_procedurereference() {
  // @@protoc_insertion_point(field_release:patient.Procedure.procedureReference)
  
  ::patient::Reference* temp = procedurereference_;
  procedurereference_ = nullptr;
  return temp;
}
inline ::patient::Reference* Procedure::_internal_mutable_procedurereference() {
  
  if (procedurereference_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    procedurereference_ = p;
  }
  return procedurereference_;
}
inline ::patient::Reference* Procedure::mutable_procedurereference() {
  // @@protoc_insertion_point(field_mutable:patient.Procedure.procedureReference)
  return _internal_mutable_procedurereference();
}
inline void Procedure::set_allocated_procedurereference(::patient::Reference* procedurereference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete procedurereference_;
  }
  if (procedurereference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      procedurereference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, procedurereference, submessage_arena);
    }
    
  } else {
    
  }
  procedurereference_ = procedurereference;
  // @@protoc_insertion_point(field_set_allocated:patient.Procedure.procedureReference)
}

// int32 sequence = 2;
inline void Procedure::clear_sequence() {
  sequence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Procedure::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Procedure::sequence() const {
  // @@protoc_insertion_point(field_get:patient.Procedure.sequence)
  return _internal_sequence();
}
inline void Procedure::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_ = value;
}
inline void Procedure::set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:patient.Procedure.sequence)
}

// -------------------------------------------------------------------

// Request

// string method = 1;
inline void Request::clear_method() {
  method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Request::method() const {
  // @@protoc_insertion_point(field_get:patient.Request.method)
  return _internal_method();
}
inline void Request::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:patient.Request.method)
}
inline std::string* Request::mutable_method() {
  // @@protoc_insertion_point(field_mutable:patient.Request.method)
  return _internal_mutable_method();
}
inline const std::string& Request::_internal_method() const {
  return method_.GetNoArena();
}
inline void Request::_internal_set_method(const std::string& value) {
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Request::set_method(std::string&& value) {
  
  method_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Request.method)
}
inline void Request::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Request.method)
}
inline void Request::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Request.method)
}
inline std::string* Request::_internal_mutable_method() {
  
  return method_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Request::release_method() {
  // @@protoc_insertion_point(field_release:patient.Request.method)
  
  return method_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:patient.Request.method)
}

// string url = 2;
inline void Request::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Request::url() const {
  // @@protoc_insertion_point(field_get:patient.Request.url)
  return _internal_url();
}
inline void Request::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:patient.Request.url)
}
inline std::string* Request::mutable_url() {
  // @@protoc_insertion_point(field_mutable:patient.Request.url)
  return _internal_mutable_url();
}
inline const std::string& Request::_internal_url() const {
  return url_.GetNoArena();
}
inline void Request::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Request::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Request.url)
}
inline void Request::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Request.url)
}
inline void Request::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Request.url)
}
inline std::string* Request::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Request::release_url() {
  // @@protoc_insertion_point(field_release:patient.Request.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:patient.Request.url)
}

// -------------------------------------------------------------------

// Root

// repeated .patient.Entry entry = 1;
inline int Root::_internal_entry_size() const {
  return entry_.size();
}
inline int Root::entry_size() const {
  return _internal_entry_size();
}
inline void Root::clear_entry() {
  entry_.Clear();
}
inline ::patient::Entry* Root::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:patient.Root.entry)
  return entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Entry >*
Root::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:patient.Root.entry)
  return &entry_;
}
inline const ::patient::Entry& Root::_internal_entry(int index) const {
  return entry_.Get(index);
}
inline const ::patient::Entry& Root::entry(int index) const {
  // @@protoc_insertion_point(field_get:patient.Root.entry)
  return _internal_entry(index);
}
inline ::patient::Entry* Root::_internal_add_entry() {
  return entry_.Add();
}
inline ::patient::Entry* Root::add_entry() {
  // @@protoc_insertion_point(field_add:patient.Root.entry)
  return _internal_add_entry();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Entry >&
Root::entry() const {
  // @@protoc_insertion_point(field_list:patient.Root.entry)
  return entry_;
}

// string resourceType = 2;
inline void Root::clear_resourcetype() {
  resourcetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Root::resourcetype() const {
  // @@protoc_insertion_point(field_get:patient.Root.resourceType)
  return _internal_resourcetype();
}
inline void Root::set_resourcetype(const std::string& value) {
  _internal_set_resourcetype(value);
  // @@protoc_insertion_point(field_set:patient.Root.resourceType)
}
inline std::string* Root::mutable_resourcetype() {
  // @@protoc_insertion_point(field_mutable:patient.Root.resourceType)
  return _internal_mutable_resourcetype();
}
inline const std::string& Root::_internal_resourcetype() const {
  return resourcetype_.GetNoArena();
}
inline void Root::_internal_set_resourcetype(const std::string& value) {
  
  resourcetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Root::set_resourcetype(std::string&& value) {
  
  resourcetype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Root.resourceType)
}
inline void Root::set_resourcetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resourcetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Root.resourceType)
}
inline void Root::set_resourcetype(const char* value, size_t size) {
  
  resourcetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Root.resourceType)
}
inline std::string* Root::_internal_mutable_resourcetype() {
  
  return resourcetype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Root::release_resourcetype() {
  // @@protoc_insertion_point(field_release:patient.Root.resourceType)
  
  return resourcetype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Root::set_allocated_resourcetype(std::string* resourcetype) {
  if (resourcetype != nullptr) {
    
  } else {
    
  }
  resourcetype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resourcetype);
  // @@protoc_insertion_point(field_set_allocated:patient.Root.resourceType)
}

// string type = 3;
inline void Root::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Root::type() const {
  // @@protoc_insertion_point(field_get:patient.Root.type)
  return _internal_type();
}
inline void Root::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:patient.Root.type)
}
inline std::string* Root::mutable_type() {
  // @@protoc_insertion_point(field_mutable:patient.Root.type)
  return _internal_mutable_type();
}
inline const std::string& Root::_internal_type() const {
  return type_.GetNoArena();
}
inline void Root::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Root::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Root.type)
}
inline void Root::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Root.type)
}
inline void Root::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Root.type)
}
inline std::string* Root::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Root::release_type() {
  // @@protoc_insertion_point(field_release:patient.Root.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Root::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:patient.Root.type)
}

// -------------------------------------------------------------------

// SupportingInfo

// .patient.Category category = 1;
inline bool SupportingInfo::_internal_has_category() const {
  return this != internal_default_instance() && category_ != nullptr;
}
inline bool SupportingInfo::has_category() const {
  return _internal_has_category();
}
inline void SupportingInfo::clear_category() {
  if (GetArenaNoVirtual() == nullptr && category_ != nullptr) {
    delete category_;
  }
  category_ = nullptr;
}
inline const ::patient::Category& SupportingInfo::_internal_category() const {
  const ::patient::Category* p = category_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& SupportingInfo::category() const {
  // @@protoc_insertion_point(field_get:patient.SupportingInfo.category)
  return _internal_category();
}
inline ::patient::Category* SupportingInfo::release_category() {
  // @@protoc_insertion_point(field_release:patient.SupportingInfo.category)
  
  ::patient::Category* temp = category_;
  category_ = nullptr;
  return temp;
}
inline ::patient::Category* SupportingInfo::_internal_mutable_category() {
  
  if (category_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    category_ = p;
  }
  return category_;
}
inline ::patient::Category* SupportingInfo::mutable_category() {
  // @@protoc_insertion_point(field_mutable:patient.SupportingInfo.category)
  return _internal_mutable_category();
}
inline void SupportingInfo::set_allocated_category(::patient::Category* category) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete category_;
  }
  if (category) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      category = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category, submessage_arena);
    }
    
  } else {
    
  }
  category_ = category;
  // @@protoc_insertion_point(field_set_allocated:patient.SupportingInfo.category)
}

// int32 sequence = 2;
inline void SupportingInfo::clear_sequence() {
  sequence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SupportingInfo::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SupportingInfo::sequence() const {
  // @@protoc_insertion_point(field_get:patient.SupportingInfo.sequence)
  return _internal_sequence();
}
inline void SupportingInfo::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_ = value;
}
inline void SupportingInfo::set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:patient.SupportingInfo.sequence)
}

// .patient.Reference valueReference = 3;
inline bool SupportingInfo::_internal_has_valuereference() const {
  return this != internal_default_instance() && valuereference_ != nullptr;
}
inline bool SupportingInfo::has_valuereference() const {
  return _internal_has_valuereference();
}
inline void SupportingInfo::clear_valuereference() {
  if (GetArenaNoVirtual() == nullptr && valuereference_ != nullptr) {
    delete valuereference_;
  }
  valuereference_ = nullptr;
}
inline const ::patient::Reference& SupportingInfo::_internal_valuereference() const {
  const ::patient::Reference* p = valuereference_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& SupportingInfo::valuereference() const {
  // @@protoc_insertion_point(field_get:patient.SupportingInfo.valueReference)
  return _internal_valuereference();
}
inline ::patient::Reference* SupportingInfo::release_valuereference() {
  // @@protoc_insertion_point(field_release:patient.SupportingInfo.valueReference)
  
  ::patient::Reference* temp = valuereference_;
  valuereference_ = nullptr;
  return temp;
}
inline ::patient::Reference* SupportingInfo::_internal_mutable_valuereference() {
  
  if (valuereference_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    valuereference_ = p;
  }
  return valuereference_;
}
inline ::patient::Reference* SupportingInfo::mutable_valuereference() {
  // @@protoc_insertion_point(field_mutable:patient.SupportingInfo.valueReference)
  return _internal_mutable_valuereference();
}
inline void SupportingInfo::set_allocated_valuereference(::patient::Reference* valuereference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete valuereference_;
  }
  if (valuereference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      valuereference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, valuereference, submessage_arena);
    }
    
  } else {
    
  }
  valuereference_ = valuereference;
  // @@protoc_insertion_point(field_set_allocated:patient.SupportingInfo.valueReference)
}

// -------------------------------------------------------------------

// Telecom

// string system = 1;
inline void Telecom::clear_system() {
  system_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Telecom::system() const {
  // @@protoc_insertion_point(field_get:patient.Telecom.system)
  return _internal_system();
}
inline void Telecom::set_system(const std::string& value) {
  _internal_set_system(value);
  // @@protoc_insertion_point(field_set:patient.Telecom.system)
}
inline std::string* Telecom::mutable_system() {
  // @@protoc_insertion_point(field_mutable:patient.Telecom.system)
  return _internal_mutable_system();
}
inline const std::string& Telecom::_internal_system() const {
  return system_.GetNoArena();
}
inline void Telecom::_internal_set_system(const std::string& value) {
  
  system_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Telecom::set_system(std::string&& value) {
  
  system_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Telecom.system)
}
inline void Telecom::set_system(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  system_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Telecom.system)
}
inline void Telecom::set_system(const char* value, size_t size) {
  
  system_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Telecom.system)
}
inline std::string* Telecom::_internal_mutable_system() {
  
  return system_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Telecom::release_system() {
  // @@protoc_insertion_point(field_release:patient.Telecom.system)
  
  return system_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Telecom::set_allocated_system(std::string* system) {
  if (system != nullptr) {
    
  } else {
    
  }
  system_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), system);
  // @@protoc_insertion_point(field_set_allocated:patient.Telecom.system)
}

// string use = 2;
inline void Telecom::clear_use() {
  use_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Telecom::use() const {
  // @@protoc_insertion_point(field_get:patient.Telecom.use)
  return _internal_use();
}
inline void Telecom::set_use(const std::string& value) {
  _internal_set_use(value);
  // @@protoc_insertion_point(field_set:patient.Telecom.use)
}
inline std::string* Telecom::mutable_use() {
  // @@protoc_insertion_point(field_mutable:patient.Telecom.use)
  return _internal_mutable_use();
}
inline const std::string& Telecom::_internal_use() const {
  return use_.GetNoArena();
}
inline void Telecom::_internal_set_use(const std::string& value) {
  
  use_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Telecom::set_use(std::string&& value) {
  
  use_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Telecom.use)
}
inline void Telecom::set_use(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  use_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Telecom.use)
}
inline void Telecom::set_use(const char* value, size_t size) {
  
  use_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Telecom.use)
}
inline std::string* Telecom::_internal_mutable_use() {
  
  return use_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Telecom::release_use() {
  // @@protoc_insertion_point(field_release:patient.Telecom.use)
  
  return use_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Telecom::set_allocated_use(std::string* use) {
  if (use != nullptr) {
    
  } else {
    
  }
  use_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), use);
  // @@protoc_insertion_point(field_set_allocated:patient.Telecom.use)
}

// string value = 3;
inline void Telecom::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Telecom::value() const {
  // @@protoc_insertion_point(field_get:patient.Telecom.value)
  return _internal_value();
}
inline void Telecom::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:patient.Telecom.value)
}
inline std::string* Telecom::mutable_value() {
  // @@protoc_insertion_point(field_mutable:patient.Telecom.value)
  return _internal_mutable_value();
}
inline const std::string& Telecom::_internal_value() const {
  return value_.GetNoArena();
}
inline void Telecom::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Telecom::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Telecom.value)
}
inline void Telecom::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Telecom.value)
}
inline void Telecom::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Telecom.value)
}
inline std::string* Telecom::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Telecom::release_value() {
  // @@protoc_insertion_point(field_release:patient.Telecom.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Telecom::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:patient.Telecom.value)
}

// -------------------------------------------------------------------

// Text

// string div = 1;
inline void Text::clear_div() {
  div_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Text::div() const {
  // @@protoc_insertion_point(field_get:patient.Text.div)
  return _internal_div();
}
inline void Text::set_div(const std::string& value) {
  _internal_set_div(value);
  // @@protoc_insertion_point(field_set:patient.Text.div)
}
inline std::string* Text::mutable_div() {
  // @@protoc_insertion_point(field_mutable:patient.Text.div)
  return _internal_mutable_div();
}
inline const std::string& Text::_internal_div() const {
  return div_.GetNoArena();
}
inline void Text::_internal_set_div(const std::string& value) {
  
  div_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Text::set_div(std::string&& value) {
  
  div_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Text.div)
}
inline void Text::set_div(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  div_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Text.div)
}
inline void Text::set_div(const char* value, size_t size) {
  
  div_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Text.div)
}
inline std::string* Text::_internal_mutable_div() {
  
  return div_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Text::release_div() {
  // @@protoc_insertion_point(field_release:patient.Text.div)
  
  return div_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Text::set_allocated_div(std::string* div) {
  if (div != nullptr) {
    
  } else {
    
  }
  div_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), div);
  // @@protoc_insertion_point(field_set_allocated:patient.Text.div)
}

// string status = 2;
inline void Text::clear_status() {
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Text::status() const {
  // @@protoc_insertion_point(field_get:patient.Text.status)
  return _internal_status();
}
inline void Text::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:patient.Text.status)
}
inline std::string* Text::mutable_status() {
  // @@protoc_insertion_point(field_mutable:patient.Text.status)
  return _internal_mutable_status();
}
inline const std::string& Text::_internal_status() const {
  return status_.GetNoArena();
}
inline void Text::_internal_set_status(const std::string& value) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Text::set_status(std::string&& value) {
  
  status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Text.status)
}
inline void Text::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Text.status)
}
inline void Text::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Text.status)
}
inline std::string* Text::_internal_mutable_status() {
  
  return status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Text::release_status() {
  // @@protoc_insertion_point(field_release:patient.Text.status)
  
  return status_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Text::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:patient.Text.status)
}

// -------------------------------------------------------------------

// Total

// string currency = 1;
inline void Total::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Total::currency() const {
  // @@protoc_insertion_point(field_get:patient.Total.currency)
  return _internal_currency();
}
inline void Total::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:patient.Total.currency)
}
inline std::string* Total::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:patient.Total.currency)
  return _internal_mutable_currency();
}
inline const std::string& Total::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void Total::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Total::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Total.currency)
}
inline void Total::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Total.currency)
}
inline void Total::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Total.currency)
}
inline std::string* Total::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Total::release_currency() {
  // @@protoc_insertion_point(field_release:patient.Total.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Total::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:patient.Total.currency)
}

// float value = 2;
inline void Total::clear_value() {
  value_ = 0;
}
inline float Total::_internal_value() const {
  return value_;
}
inline float Total::value() const {
  // @@protoc_insertion_point(field_get:patient.Total.value)
  return _internal_value();
}
inline void Total::_internal_set_value(float value) {
  
  value_ = value;
}
inline void Total::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:patient.Total.value)
}

// .patient.Amount amount = 3;
inline bool Total::_internal_has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline bool Total::has_amount() const {
  return _internal_has_amount();
}
inline void Total::clear_amount() {
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
inline const ::patient::Amount& Total::_internal_amount() const {
  const ::patient::Amount* p = amount_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Amount*>(
      &::patient::_Amount_default_instance_);
}
inline const ::patient::Amount& Total::amount() const {
  // @@protoc_insertion_point(field_get:patient.Total.amount)
  return _internal_amount();
}
inline ::patient::Amount* Total::release_amount() {
  // @@protoc_insertion_point(field_release:patient.Total.amount)
  
  ::patient::Amount* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::patient::Amount* Total::_internal_mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Amount>(GetArenaNoVirtual());
    amount_ = p;
  }
  return amount_;
}
inline ::patient::Amount* Total::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:patient.Total.amount)
  return _internal_mutable_amount();
}
inline void Total::set_allocated_amount(::patient::Amount* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete amount_;
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:patient.Total.amount)
}

// .patient.Category category = 4;
inline bool Total::_internal_has_category() const {
  return this != internal_default_instance() && category_ != nullptr;
}
inline bool Total::has_category() const {
  return _internal_has_category();
}
inline void Total::clear_category() {
  if (GetArenaNoVirtual() == nullptr && category_ != nullptr) {
    delete category_;
  }
  category_ = nullptr;
}
inline const ::patient::Category& Total::_internal_category() const {
  const ::patient::Category* p = category_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& Total::category() const {
  // @@protoc_insertion_point(field_get:patient.Total.category)
  return _internal_category();
}
inline ::patient::Category* Total::release_category() {
  // @@protoc_insertion_point(field_release:patient.Total.category)
  
  ::patient::Category* temp = category_;
  category_ = nullptr;
  return temp;
}
inline ::patient::Category* Total::_internal_mutable_category() {
  
  if (category_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    category_ = p;
  }
  return category_;
}
inline ::patient::Category* Total::mutable_category() {
  // @@protoc_insertion_point(field_mutable:patient.Total.category)
  return _internal_mutable_category();
}
inline void Total::set_allocated_category(::patient::Category* category) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete category_;
  }
  if (category) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      category = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category, submessage_arena);
    }
    
  } else {
    
  }
  category_ = category;
  // @@protoc_insertion_point(field_set_allocated:patient.Total.category)
}

// -------------------------------------------------------------------

// Coding

// string code = 1;
inline void Coding::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Coding::code() const {
  // @@protoc_insertion_point(field_get:patient.Coding.code)
  return _internal_code();
}
inline void Coding::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:patient.Coding.code)
}
inline std::string* Coding::mutable_code() {
  // @@protoc_insertion_point(field_mutable:patient.Coding.code)
  return _internal_mutable_code();
}
inline const std::string& Coding::_internal_code() const {
  return code_.GetNoArena();
}
inline void Coding::_internal_set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Coding::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Coding.code)
}
inline void Coding::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Coding.code)
}
inline void Coding::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Coding.code)
}
inline std::string* Coding::_internal_mutable_code() {
  
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Coding::release_code() {
  // @@protoc_insertion_point(field_release:patient.Coding.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Coding::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:patient.Coding.code)
}

// string display = 2;
inline void Coding::clear_display() {
  display_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Coding::display() const {
  // @@protoc_insertion_point(field_get:patient.Coding.display)
  return _internal_display();
}
inline void Coding::set_display(const std::string& value) {
  _internal_set_display(value);
  // @@protoc_insertion_point(field_set:patient.Coding.display)
}
inline std::string* Coding::mutable_display() {
  // @@protoc_insertion_point(field_mutable:patient.Coding.display)
  return _internal_mutable_display();
}
inline const std::string& Coding::_internal_display() const {
  return display_.GetNoArena();
}
inline void Coding::_internal_set_display(const std::string& value) {
  
  display_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Coding::set_display(std::string&& value) {
  
  display_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Coding.display)
}
inline void Coding::set_display(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Coding.display)
}
inline void Coding::set_display(const char* value, size_t size) {
  
  display_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Coding.display)
}
inline std::string* Coding::_internal_mutable_display() {
  
  return display_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Coding::release_display() {
  // @@protoc_insertion_point(field_release:patient.Coding.display)
  
  return display_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Coding::set_allocated_display(std::string* display) {
  if (display != nullptr) {
    
  } else {
    
  }
  display_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display);
  // @@protoc_insertion_point(field_set_allocated:patient.Coding.display)
}

// string system = 3;
inline void Coding::clear_system() {
  system_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Coding::system() const {
  // @@protoc_insertion_point(field_get:patient.Coding.system)
  return _internal_system();
}
inline void Coding::set_system(const std::string& value) {
  _internal_set_system(value);
  // @@protoc_insertion_point(field_set:patient.Coding.system)
}
inline std::string* Coding::mutable_system() {
  // @@protoc_insertion_point(field_mutable:patient.Coding.system)
  return _internal_mutable_system();
}
inline const std::string& Coding::_internal_system() const {
  return system_.GetNoArena();
}
inline void Coding::_internal_set_system(const std::string& value) {
  
  system_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Coding::set_system(std::string&& value) {
  
  system_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Coding.system)
}
inline void Coding::set_system(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  system_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Coding.system)
}
inline void Coding::set_system(const char* value, size_t size) {
  
  system_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Coding.system)
}
inline std::string* Coding::_internal_mutable_system() {
  
  return system_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Coding::release_system() {
  // @@protoc_insertion_point(field_release:patient.Coding.system)
  
  return system_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Coding::set_allocated_system(std::string* system) {
  if (system != nullptr) {
    
  } else {
    
  }
  system_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), system);
  // @@protoc_insertion_point(field_set_allocated:patient.Coding.system)
}

// -------------------------------------------------------------------

// Quantity

// string code = 1;
inline void Quantity::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Quantity::code() const {
  // @@protoc_insertion_point(field_get:patient.Quantity.code)
  return _internal_code();
}
inline void Quantity::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:patient.Quantity.code)
}
inline std::string* Quantity::mutable_code() {
  // @@protoc_insertion_point(field_mutable:patient.Quantity.code)
  return _internal_mutable_code();
}
inline const std::string& Quantity::_internal_code() const {
  return code_.GetNoArena();
}
inline void Quantity::_internal_set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Quantity::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Quantity.code)
}
inline void Quantity::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Quantity.code)
}
inline void Quantity::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Quantity.code)
}
inline std::string* Quantity::_internal_mutable_code() {
  
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Quantity::release_code() {
  // @@protoc_insertion_point(field_release:patient.Quantity.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Quantity::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:patient.Quantity.code)
}

// string system = 2;
inline void Quantity::clear_system() {
  system_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Quantity::system() const {
  // @@protoc_insertion_point(field_get:patient.Quantity.system)
  return _internal_system();
}
inline void Quantity::set_system(const std::string& value) {
  _internal_set_system(value);
  // @@protoc_insertion_point(field_set:patient.Quantity.system)
}
inline std::string* Quantity::mutable_system() {
  // @@protoc_insertion_point(field_mutable:patient.Quantity.system)
  return _internal_mutable_system();
}
inline const std::string& Quantity::_internal_system() const {
  return system_.GetNoArena();
}
inline void Quantity::_internal_set_system(const std::string& value) {
  
  system_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Quantity::set_system(std::string&& value) {
  
  system_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Quantity.system)
}
inline void Quantity::set_system(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  system_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Quantity.system)
}
inline void Quantity::set_system(const char* value, size_t size) {
  
  system_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Quantity.system)
}
inline std::string* Quantity::_internal_mutable_system() {
  
  return system_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Quantity::release_system() {
  // @@protoc_insertion_point(field_release:patient.Quantity.system)
  
  return system_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Quantity::set_allocated_system(std::string* system) {
  if (system != nullptr) {
    
  } else {
    
  }
  system_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), system);
  // @@protoc_insertion_point(field_set_allocated:patient.Quantity.system)
}

// string unit = 3;
inline void Quantity::clear_unit() {
  unit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Quantity::unit() const {
  // @@protoc_insertion_point(field_get:patient.Quantity.unit)
  return _internal_unit();
}
inline void Quantity::set_unit(const std::string& value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:patient.Quantity.unit)
}
inline std::string* Quantity::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:patient.Quantity.unit)
  return _internal_mutable_unit();
}
inline const std::string& Quantity::_internal_unit() const {
  return unit_.GetNoArena();
}
inline void Quantity::_internal_set_unit(const std::string& value) {
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Quantity::set_unit(std::string&& value) {
  
  unit_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Quantity.unit)
}
inline void Quantity::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Quantity.unit)
}
inline void Quantity::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Quantity.unit)
}
inline std::string* Quantity::_internal_mutable_unit() {
  
  return unit_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Quantity::release_unit() {
  // @@protoc_insertion_point(field_release:patient.Quantity.unit)
  
  return unit_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Quantity::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:patient.Quantity.unit)
}

// float value = 4;
inline void Quantity::clear_value() {
  value_ = 0;
}
inline float Quantity::_internal_value() const {
  return value_;
}
inline float Quantity::value() const {
  // @@protoc_insertion_point(field_get:patient.Quantity.value)
  return _internal_value();
}
inline void Quantity::_internal_set_value(float value) {
  
  value_ = value;
}
inline void Quantity::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:patient.Quantity.value)
}

// -------------------------------------------------------------------

// Reference

// string reference = 1;
inline void Reference::clear_reference() {
  reference_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Reference::reference() const {
  // @@protoc_insertion_point(field_get:patient.Reference.reference)
  return _internal_reference();
}
inline void Reference::set_reference(const std::string& value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:patient.Reference.reference)
}
inline std::string* Reference::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:patient.Reference.reference)
  return _internal_mutable_reference();
}
inline const std::string& Reference::_internal_reference() const {
  return reference_.GetNoArena();
}
inline void Reference::_internal_set_reference(const std::string& value) {
  
  reference_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Reference::set_reference(std::string&& value) {
  
  reference_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Reference.reference)
}
inline void Reference::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reference_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Reference.reference)
}
inline void Reference::set_reference(const char* value, size_t size) {
  
  reference_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Reference.reference)
}
inline std::string* Reference::_internal_mutable_reference() {
  
  return reference_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Reference::release_reference() {
  // @@protoc_insertion_point(field_release:patient.Reference.reference)
  
  return reference_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Reference::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {
    
  } else {
    
  }
  reference_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference);
  // @@protoc_insertion_point(field_set_allocated:patient.Reference.reference)
}

// string display = 2;
inline void Reference::clear_display() {
  display_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Reference::display() const {
  // @@protoc_insertion_point(field_get:patient.Reference.display)
  return _internal_display();
}
inline void Reference::set_display(const std::string& value) {
  _internal_set_display(value);
  // @@protoc_insertion_point(field_set:patient.Reference.display)
}
inline std::string* Reference::mutable_display() {
  // @@protoc_insertion_point(field_mutable:patient.Reference.display)
  return _internal_mutable_display();
}
inline const std::string& Reference::_internal_display() const {
  return display_.GetNoArena();
}
inline void Reference::_internal_set_display(const std::string& value) {
  
  display_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Reference::set_display(std::string&& value) {
  
  display_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Reference.display)
}
inline void Reference::set_display(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Reference.display)
}
inline void Reference::set_display(const char* value, size_t size) {
  
  display_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Reference.display)
}
inline std::string* Reference::_internal_mutable_display() {
  
  return display_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Reference::release_display() {
  // @@protoc_insertion_point(field_release:patient.Reference.display)
  
  return display_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Reference::set_allocated_display(std::string* display) {
  if (display != nullptr) {
    
  } else {
    
  }
  display_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display);
  // @@protoc_insertion_point(field_set_allocated:patient.Reference.display)
}

// -------------------------------------------------------------------

// Category

// repeated .patient.Coding coding = 1;
inline int Category::_internal_coding_size() const {
  return coding_.size();
}
inline int Category::coding_size() const {
  return _internal_coding_size();
}
inline void Category::clear_coding() {
  coding_.Clear();
}
inline ::patient::Coding* Category::mutable_coding(int index) {
  // @@protoc_insertion_point(field_mutable:patient.Category.coding)
  return coding_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Coding >*
Category::mutable_coding() {
  // @@protoc_insertion_point(field_mutable_list:patient.Category.coding)
  return &coding_;
}
inline const ::patient::Coding& Category::_internal_coding(int index) const {
  return coding_.Get(index);
}
inline const ::patient::Coding& Category::coding(int index) const {
  // @@protoc_insertion_point(field_get:patient.Category.coding)
  return _internal_coding(index);
}
inline ::patient::Coding* Category::_internal_add_coding() {
  return coding_.Add();
}
inline ::patient::Coding* Category::add_coding() {
  // @@protoc_insertion_point(field_add:patient.Category.coding)
  return _internal_add_coding();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Coding >&
Category::coding() const {
  // @@protoc_insertion_point(field_list:patient.Category.coding)
  return coding_;
}

// string text = 2;
inline void Category::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Category::text() const {
  // @@protoc_insertion_point(field_get:patient.Category.text)
  return _internal_text();
}
inline void Category::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:patient.Category.text)
}
inline std::string* Category::mutable_text() {
  // @@protoc_insertion_point(field_mutable:patient.Category.text)
  return _internal_mutable_text();
}
inline const std::string& Category::_internal_text() const {
  return text_.GetNoArena();
}
inline void Category::_internal_set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Category::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Category.text)
}
inline void Category::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Category.text)
}
inline void Category::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Category.text)
}
inline std::string* Category::_internal_mutable_text() {
  
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Category::release_text() {
  // @@protoc_insertion_point(field_release:patient.Category.text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Category::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:patient.Category.text)
}

// -------------------------------------------------------------------

// Period

// string end = 1;
inline void Period::clear_end() {
  end_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Period::end() const {
  // @@protoc_insertion_point(field_get:patient.Period.end)
  return _internal_end();
}
inline void Period::set_end(const std::string& value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:patient.Period.end)
}
inline std::string* Period::mutable_end() {
  // @@protoc_insertion_point(field_mutable:patient.Period.end)
  return _internal_mutable_end();
}
inline const std::string& Period::_internal_end() const {
  return end_.GetNoArena();
}
inline void Period::_internal_set_end(const std::string& value) {
  
  end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Period::set_end(std::string&& value) {
  
  end_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Period.end)
}
inline void Period::set_end(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Period.end)
}
inline void Period::set_end(const char* value, size_t size) {
  
  end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Period.end)
}
inline std::string* Period::_internal_mutable_end() {
  
  return end_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Period::release_end() {
  // @@protoc_insertion_point(field_release:patient.Period.end)
  
  return end_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Period::set_allocated_end(std::string* end) {
  if (end != nullptr) {
    
  } else {
    
  }
  end_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end);
  // @@protoc_insertion_point(field_set_allocated:patient.Period.end)
}

// string start = 2;
inline void Period::clear_start() {
  start_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Period::start() const {
  // @@protoc_insertion_point(field_get:patient.Period.start)
  return _internal_start();
}
inline void Period::set_start(const std::string& value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:patient.Period.start)
}
inline std::string* Period::mutable_start() {
  // @@protoc_insertion_point(field_mutable:patient.Period.start)
  return _internal_mutable_start();
}
inline const std::string& Period::_internal_start() const {
  return start_.GetNoArena();
}
inline void Period::_internal_set_start(const std::string& value) {
  
  start_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Period::set_start(std::string&& value) {
  
  start_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.Period.start)
}
inline void Period::set_start(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.Period.start)
}
inline void Period::set_start(const char* value, size_t size) {
  
  start_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.Period.start)
}
inline std::string* Period::_internal_mutable_start() {
  
  return start_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Period::release_start() {
  // @@protoc_insertion_point(field_release:patient.Period.start)
  
  return start_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Period::set_allocated_start(std::string* start) {
  if (start != nullptr) {
    
  } else {
    
  }
  start_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start);
  // @@protoc_insertion_point(field_set_allocated:patient.Period.start)
}

// -------------------------------------------------------------------

// Resource

// .patient.ResourceType resourceType = 1;
inline void Resource::clear_resourcetype() {
  resourcetype_ = 0;
}
inline ::patient::ResourceType Resource::_internal_resourcetype() const {
  return static_cast< ::patient::ResourceType >(resourcetype_);
}
inline ::patient::ResourceType Resource::resourcetype() const {
  // @@protoc_insertion_point(field_get:patient.Resource.resourceType)
  return _internal_resourcetype();
}
inline void Resource::_internal_set_resourcetype(::patient::ResourceType value) {
  
  resourcetype_ = value;
}
inline void Resource::set_resourcetype(::patient::ResourceType value) {
  _internal_set_resourcetype(value);
  // @@protoc_insertion_point(field_set:patient.Resource.resourceType)
}

// .patient.CarePlanObject carePlan = 2;
inline bool Resource::_internal_has_careplan() const {
  return resource_case() == kCarePlan;
}
inline bool Resource::has_careplan() const {
  return _internal_has_careplan();
}
inline void Resource::set_has_careplan() {
  _oneof_case_[0] = kCarePlan;
}
inline void Resource::clear_careplan() {
  if (_internal_has_careplan()) {
    delete resource_.careplan_;
    clear_has_resource();
  }
}
inline ::patient::CarePlanObject* Resource::release_careplan() {
  // @@protoc_insertion_point(field_release:patient.Resource.carePlan)
  if (has_careplan()) {
    clear_has_resource();
      ::patient::CarePlanObject* temp = resource_.careplan_;
    resource_.careplan_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::patient::CarePlanObject& Resource::_internal_careplan() const {
  return _internal_has_careplan()
      ? *resource_.careplan_
      : *reinterpret_cast< ::patient::CarePlanObject*>(&::patient::_CarePlanObject_default_instance_);
}
inline const ::patient::CarePlanObject& Resource::careplan() const {
  // @@protoc_insertion_point(field_get:patient.Resource.carePlan)
  return _internal_careplan();
}
inline ::patient::CarePlanObject* Resource::_internal_mutable_careplan() {
  if (!_internal_has_careplan()) {
    clear_resource();
    set_has_careplan();
    resource_.careplan_ = CreateMaybeMessage< ::patient::CarePlanObject >(
        GetArenaNoVirtual());
  }
  return resource_.careplan_;
}
inline ::patient::CarePlanObject* Resource::mutable_careplan() {
  // @@protoc_insertion_point(field_mutable:patient.Resource.carePlan)
  return _internal_mutable_careplan();
}

// .patient.CareTeamObject careTeam = 3;
inline bool Resource::_internal_has_careteam() const {
  return resource_case() == kCareTeam;
}
inline bool Resource::has_careteam() const {
  return _internal_has_careteam();
}
inline void Resource::set_has_careteam() {
  _oneof_case_[0] = kCareTeam;
}
inline void Resource::clear_careteam() {
  if (_internal_has_careteam()) {
    delete resource_.careteam_;
    clear_has_resource();
  }
}
inline ::patient::CareTeamObject* Resource::release_careteam() {
  // @@protoc_insertion_point(field_release:patient.Resource.careTeam)
  if (has_careteam()) {
    clear_has_resource();
      ::patient::CareTeamObject* temp = resource_.careteam_;
    resource_.careteam_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::patient::CareTeamObject& Resource::_internal_careteam() const {
  return _internal_has_careteam()
      ? *resource_.careteam_
      : *reinterpret_cast< ::patient::CareTeamObject*>(&::patient::_CareTeamObject_default_instance_);
}
inline const ::patient::CareTeamObject& Resource::careteam() const {
  // @@protoc_insertion_point(field_get:patient.Resource.careTeam)
  return _internal_careteam();
}
inline ::patient::CareTeamObject* Resource::_internal_mutable_careteam() {
  if (!_internal_has_careteam()) {
    clear_resource();
    set_has_careteam();
    resource_.careteam_ = CreateMaybeMessage< ::patient::CareTeamObject >(
        GetArenaNoVirtual());
  }
  return resource_.careteam_;
}
inline ::patient::CareTeamObject* Resource::mutable_careteam() {
  // @@protoc_insertion_point(field_mutable:patient.Resource.careTeam)
  return _internal_mutable_careteam();
}

// .patient.ClaimObject claim = 4;
inline bool Resource::_internal_has_claim() const {
  return resource_case() == kClaim;
}
inline bool Resource::has_claim() const {
  return _internal_has_claim();
}
inline void Resource::set_has_claim() {
  _oneof_case_[0] = kClaim;
}
inline void Resource::clear_claim() {
  if (_internal_has_claim()) {
    delete resource_.claim_;
    clear_has_resource();
  }
}
inline ::patient::ClaimObject* Resource::release_claim() {
  // @@protoc_insertion_point(field_release:patient.Resource.claim)
  if (has_claim()) {
    clear_has_resource();
      ::patient::ClaimObject* temp = resource_.claim_;
    resource_.claim_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::patient::ClaimObject& Resource::_internal_claim() const {
  return _internal_has_claim()
      ? *resource_.claim_
      : *reinterpret_cast< ::patient::ClaimObject*>(&::patient::_ClaimObject_default_instance_);
}
inline const ::patient::ClaimObject& Resource::claim() const {
  // @@protoc_insertion_point(field_get:patient.Resource.claim)
  return _internal_claim();
}
inline ::patient::ClaimObject* Resource::_internal_mutable_claim() {
  if (!_internal_has_claim()) {
    clear_resource();
    set_has_claim();
    resource_.claim_ = CreateMaybeMessage< ::patient::ClaimObject >(
        GetArenaNoVirtual());
  }
  return resource_.claim_;
}
inline ::patient::ClaimObject* Resource::mutable_claim() {
  // @@protoc_insertion_point(field_mutable:patient.Resource.claim)
  return _internal_mutable_claim();
}

// .patient.ConditionObject condition = 5;
inline bool Resource::_internal_has_condition() const {
  return resource_case() == kCondition;
}
inline bool Resource::has_condition() const {
  return _internal_has_condition();
}
inline void Resource::set_has_condition() {
  _oneof_case_[0] = kCondition;
}
inline void Resource::clear_condition() {
  if (_internal_has_condition()) {
    delete resource_.condition_;
    clear_has_resource();
  }
}
inline ::patient::ConditionObject* Resource::release_condition() {
  // @@protoc_insertion_point(field_release:patient.Resource.condition)
  if (has_condition()) {
    clear_has_resource();
      ::patient::ConditionObject* temp = resource_.condition_;
    resource_.condition_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::patient::ConditionObject& Resource::_internal_condition() const {
  return _internal_has_condition()
      ? *resource_.condition_
      : *reinterpret_cast< ::patient::ConditionObject*>(&::patient::_ConditionObject_default_instance_);
}
inline const ::patient::ConditionObject& Resource::condition() const {
  // @@protoc_insertion_point(field_get:patient.Resource.condition)
  return _internal_condition();
}
inline ::patient::ConditionObject* Resource::_internal_mutable_condition() {
  if (!_internal_has_condition()) {
    clear_resource();
    set_has_condition();
    resource_.condition_ = CreateMaybeMessage< ::patient::ConditionObject >(
        GetArenaNoVirtual());
  }
  return resource_.condition_;
}
inline ::patient::ConditionObject* Resource::mutable_condition() {
  // @@protoc_insertion_point(field_mutable:patient.Resource.condition)
  return _internal_mutable_condition();
}

// .patient.DiagnosticReportObject diagnosticReport = 6;
inline bool Resource::_internal_has_diagnosticreport() const {
  return resource_case() == kDiagnosticReport;
}
inline bool Resource::has_diagnosticreport() const {
  return _internal_has_diagnosticreport();
}
inline void Resource::set_has_diagnosticreport() {
  _oneof_case_[0] = kDiagnosticReport;
}
inline void Resource::clear_diagnosticreport() {
  if (_internal_has_diagnosticreport()) {
    delete resource_.diagnosticreport_;
    clear_has_resource();
  }
}
inline ::patient::DiagnosticReportObject* Resource::release_diagnosticreport() {
  // @@protoc_insertion_point(field_release:patient.Resource.diagnosticReport)
  if (has_diagnosticreport()) {
    clear_has_resource();
      ::patient::DiagnosticReportObject* temp = resource_.diagnosticreport_;
    resource_.diagnosticreport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::patient::DiagnosticReportObject& Resource::_internal_diagnosticreport() const {
  return _internal_has_diagnosticreport()
      ? *resource_.diagnosticreport_
      : *reinterpret_cast< ::patient::DiagnosticReportObject*>(&::patient::_DiagnosticReportObject_default_instance_);
}
inline const ::patient::DiagnosticReportObject& Resource::diagnosticreport() const {
  // @@protoc_insertion_point(field_get:patient.Resource.diagnosticReport)
  return _internal_diagnosticreport();
}
inline ::patient::DiagnosticReportObject* Resource::_internal_mutable_diagnosticreport() {
  if (!_internal_has_diagnosticreport()) {
    clear_resource();
    set_has_diagnosticreport();
    resource_.diagnosticreport_ = CreateMaybeMessage< ::patient::DiagnosticReportObject >(
        GetArenaNoVirtual());
  }
  return resource_.diagnosticreport_;
}
inline ::patient::DiagnosticReportObject* Resource::mutable_diagnosticreport() {
  // @@protoc_insertion_point(field_mutable:patient.Resource.diagnosticReport)
  return _internal_mutable_diagnosticreport();
}

// .patient.EncounterObject encounter = 7;
inline bool Resource::_internal_has_encounter() const {
  return resource_case() == kEncounter;
}
inline bool Resource::has_encounter() const {
  return _internal_has_encounter();
}
inline void Resource::set_has_encounter() {
  _oneof_case_[0] = kEncounter;
}
inline void Resource::clear_encounter() {
  if (_internal_has_encounter()) {
    delete resource_.encounter_;
    clear_has_resource();
  }
}
inline ::patient::EncounterObject* Resource::release_encounter() {
  // @@protoc_insertion_point(field_release:patient.Resource.encounter)
  if (has_encounter()) {
    clear_has_resource();
      ::patient::EncounterObject* temp = resource_.encounter_;
    resource_.encounter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::patient::EncounterObject& Resource::_internal_encounter() const {
  return _internal_has_encounter()
      ? *resource_.encounter_
      : *reinterpret_cast< ::patient::EncounterObject*>(&::patient::_EncounterObject_default_instance_);
}
inline const ::patient::EncounterObject& Resource::encounter() const {
  // @@protoc_insertion_point(field_get:patient.Resource.encounter)
  return _internal_encounter();
}
inline ::patient::EncounterObject* Resource::_internal_mutable_encounter() {
  if (!_internal_has_encounter()) {
    clear_resource();
    set_has_encounter();
    resource_.encounter_ = CreateMaybeMessage< ::patient::EncounterObject >(
        GetArenaNoVirtual());
  }
  return resource_.encounter_;
}
inline ::patient::EncounterObject* Resource::mutable_encounter() {
  // @@protoc_insertion_point(field_mutable:patient.Resource.encounter)
  return _internal_mutable_encounter();
}

// .patient.ExplanationOfBenefitObject explanationOfBenefit = 8;
inline bool Resource::_internal_has_explanationofbenefit() const {
  return resource_case() == kExplanationOfBenefit;
}
inline bool Resource::has_explanationofbenefit() const {
  return _internal_has_explanationofbenefit();
}
inline void Resource::set_has_explanationofbenefit() {
  _oneof_case_[0] = kExplanationOfBenefit;
}
inline void Resource::clear_explanationofbenefit() {
  if (_internal_has_explanationofbenefit()) {
    delete resource_.explanationofbenefit_;
    clear_has_resource();
  }
}
inline ::patient::ExplanationOfBenefitObject* Resource::release_explanationofbenefit() {
  // @@protoc_insertion_point(field_release:patient.Resource.explanationOfBenefit)
  if (has_explanationofbenefit()) {
    clear_has_resource();
      ::patient::ExplanationOfBenefitObject* temp = resource_.explanationofbenefit_;
    resource_.explanationofbenefit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::patient::ExplanationOfBenefitObject& Resource::_internal_explanationofbenefit() const {
  return _internal_has_explanationofbenefit()
      ? *resource_.explanationofbenefit_
      : *reinterpret_cast< ::patient::ExplanationOfBenefitObject*>(&::patient::_ExplanationOfBenefitObject_default_instance_);
}
inline const ::patient::ExplanationOfBenefitObject& Resource::explanationofbenefit() const {
  // @@protoc_insertion_point(field_get:patient.Resource.explanationOfBenefit)
  return _internal_explanationofbenefit();
}
inline ::patient::ExplanationOfBenefitObject* Resource::_internal_mutable_explanationofbenefit() {
  if (!_internal_has_explanationofbenefit()) {
    clear_resource();
    set_has_explanationofbenefit();
    resource_.explanationofbenefit_ = CreateMaybeMessage< ::patient::ExplanationOfBenefitObject >(
        GetArenaNoVirtual());
  }
  return resource_.explanationofbenefit_;
}
inline ::patient::ExplanationOfBenefitObject* Resource::mutable_explanationofbenefit() {
  // @@protoc_insertion_point(field_mutable:patient.Resource.explanationOfBenefit)
  return _internal_mutable_explanationofbenefit();
}

// .patient.ImmunizationObject immunization = 9;
inline bool Resource::_internal_has_immunization() const {
  return resource_case() == kImmunization;
}
inline bool Resource::has_immunization() const {
  return _internal_has_immunization();
}
inline void Resource::set_has_immunization() {
  _oneof_case_[0] = kImmunization;
}
inline void Resource::clear_immunization() {
  if (_internal_has_immunization()) {
    delete resource_.immunization_;
    clear_has_resource();
  }
}
inline ::patient::ImmunizationObject* Resource::release_immunization() {
  // @@protoc_insertion_point(field_release:patient.Resource.immunization)
  if (has_immunization()) {
    clear_has_resource();
      ::patient::ImmunizationObject* temp = resource_.immunization_;
    resource_.immunization_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::patient::ImmunizationObject& Resource::_internal_immunization() const {
  return _internal_has_immunization()
      ? *resource_.immunization_
      : *reinterpret_cast< ::patient::ImmunizationObject*>(&::patient::_ImmunizationObject_default_instance_);
}
inline const ::patient::ImmunizationObject& Resource::immunization() const {
  // @@protoc_insertion_point(field_get:patient.Resource.immunization)
  return _internal_immunization();
}
inline ::patient::ImmunizationObject* Resource::_internal_mutable_immunization() {
  if (!_internal_has_immunization()) {
    clear_resource();
    set_has_immunization();
    resource_.immunization_ = CreateMaybeMessage< ::patient::ImmunizationObject >(
        GetArenaNoVirtual());
  }
  return resource_.immunization_;
}
inline ::patient::ImmunizationObject* Resource::mutable_immunization() {
  // @@protoc_insertion_point(field_mutable:patient.Resource.immunization)
  return _internal_mutable_immunization();
}

// .patient.MedicationRequestObject medicationRequest = 10;
inline bool Resource::_internal_has_medicationrequest() const {
  return resource_case() == kMedicationRequest;
}
inline bool Resource::has_medicationrequest() const {
  return _internal_has_medicationrequest();
}
inline void Resource::set_has_medicationrequest() {
  _oneof_case_[0] = kMedicationRequest;
}
inline void Resource::clear_medicationrequest() {
  if (_internal_has_medicationrequest()) {
    delete resource_.medicationrequest_;
    clear_has_resource();
  }
}
inline ::patient::MedicationRequestObject* Resource::release_medicationrequest() {
  // @@protoc_insertion_point(field_release:patient.Resource.medicationRequest)
  if (has_medicationrequest()) {
    clear_has_resource();
      ::patient::MedicationRequestObject* temp = resource_.medicationrequest_;
    resource_.medicationrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::patient::MedicationRequestObject& Resource::_internal_medicationrequest() const {
  return _internal_has_medicationrequest()
      ? *resource_.medicationrequest_
      : *reinterpret_cast< ::patient::MedicationRequestObject*>(&::patient::_MedicationRequestObject_default_instance_);
}
inline const ::patient::MedicationRequestObject& Resource::medicationrequest() const {
  // @@protoc_insertion_point(field_get:patient.Resource.medicationRequest)
  return _internal_medicationrequest();
}
inline ::patient::MedicationRequestObject* Resource::_internal_mutable_medicationrequest() {
  if (!_internal_has_medicationrequest()) {
    clear_resource();
    set_has_medicationrequest();
    resource_.medicationrequest_ = CreateMaybeMessage< ::patient::MedicationRequestObject >(
        GetArenaNoVirtual());
  }
  return resource_.medicationrequest_;
}
inline ::patient::MedicationRequestObject* Resource::mutable_medicationrequest() {
  // @@protoc_insertion_point(field_mutable:patient.Resource.medicationRequest)
  return _internal_mutable_medicationrequest();
}

// .patient.ObservationObject observation = 11;
inline bool Resource::_internal_has_observation() const {
  return resource_case() == kObservation;
}
inline bool Resource::has_observation() const {
  return _internal_has_observation();
}
inline void Resource::set_has_observation() {
  _oneof_case_[0] = kObservation;
}
inline void Resource::clear_observation() {
  if (_internal_has_observation()) {
    delete resource_.observation_;
    clear_has_resource();
  }
}
inline ::patient::ObservationObject* Resource::release_observation() {
  // @@protoc_insertion_point(field_release:patient.Resource.observation)
  if (has_observation()) {
    clear_has_resource();
      ::patient::ObservationObject* temp = resource_.observation_;
    resource_.observation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::patient::ObservationObject& Resource::_internal_observation() const {
  return _internal_has_observation()
      ? *resource_.observation_
      : *reinterpret_cast< ::patient::ObservationObject*>(&::patient::_ObservationObject_default_instance_);
}
inline const ::patient::ObservationObject& Resource::observation() const {
  // @@protoc_insertion_point(field_get:patient.Resource.observation)
  return _internal_observation();
}
inline ::patient::ObservationObject* Resource::_internal_mutable_observation() {
  if (!_internal_has_observation()) {
    clear_resource();
    set_has_observation();
    resource_.observation_ = CreateMaybeMessage< ::patient::ObservationObject >(
        GetArenaNoVirtual());
  }
  return resource_.observation_;
}
inline ::patient::ObservationObject* Resource::mutable_observation() {
  // @@protoc_insertion_point(field_mutable:patient.Resource.observation)
  return _internal_mutable_observation();
}

// .patient.OrganizationObject organiation = 12;
inline bool Resource::_internal_has_organiation() const {
  return resource_case() == kOrganiation;
}
inline bool Resource::has_organiation() const {
  return _internal_has_organiation();
}
inline void Resource::set_has_organiation() {
  _oneof_case_[0] = kOrganiation;
}
inline void Resource::clear_organiation() {
  if (_internal_has_organiation()) {
    delete resource_.organiation_;
    clear_has_resource();
  }
}
inline ::patient::OrganizationObject* Resource::release_organiation() {
  // @@protoc_insertion_point(field_release:patient.Resource.organiation)
  if (has_organiation()) {
    clear_has_resource();
      ::patient::OrganizationObject* temp = resource_.organiation_;
    resource_.organiation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::patient::OrganizationObject& Resource::_internal_organiation() const {
  return _internal_has_organiation()
      ? *resource_.organiation_
      : *reinterpret_cast< ::patient::OrganizationObject*>(&::patient::_OrganizationObject_default_instance_);
}
inline const ::patient::OrganizationObject& Resource::organiation() const {
  // @@protoc_insertion_point(field_get:patient.Resource.organiation)
  return _internal_organiation();
}
inline ::patient::OrganizationObject* Resource::_internal_mutable_organiation() {
  if (!_internal_has_organiation()) {
    clear_resource();
    set_has_organiation();
    resource_.organiation_ = CreateMaybeMessage< ::patient::OrganizationObject >(
        GetArenaNoVirtual());
  }
  return resource_.organiation_;
}
inline ::patient::OrganizationObject* Resource::mutable_organiation() {
  // @@protoc_insertion_point(field_mutable:patient.Resource.organiation)
  return _internal_mutable_organiation();
}

// .patient.PatientObject patient = 13;
inline bool Resource::_internal_has_patient() const {
  return resource_case() == kPatient;
}
inline bool Resource::has_patient() const {
  return _internal_has_patient();
}
inline void Resource::set_has_patient() {
  _oneof_case_[0] = kPatient;
}
inline void Resource::clear_patient() {
  if (_internal_has_patient()) {
    delete resource_.patient_;
    clear_has_resource();
  }
}
inline ::patient::PatientObject* Resource::release_patient() {
  // @@protoc_insertion_point(field_release:patient.Resource.patient)
  if (has_patient()) {
    clear_has_resource();
      ::patient::PatientObject* temp = resource_.patient_;
    resource_.patient_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::patient::PatientObject& Resource::_internal_patient() const {
  return _internal_has_patient()
      ? *resource_.patient_
      : *reinterpret_cast< ::patient::PatientObject*>(&::patient::_PatientObject_default_instance_);
}
inline const ::patient::PatientObject& Resource::patient() const {
  // @@protoc_insertion_point(field_get:patient.Resource.patient)
  return _internal_patient();
}
inline ::patient::PatientObject* Resource::_internal_mutable_patient() {
  if (!_internal_has_patient()) {
    clear_resource();
    set_has_patient();
    resource_.patient_ = CreateMaybeMessage< ::patient::PatientObject >(
        GetArenaNoVirtual());
  }
  return resource_.patient_;
}
inline ::patient::PatientObject* Resource::mutable_patient() {
  // @@protoc_insertion_point(field_mutable:patient.Resource.patient)
  return _internal_mutable_patient();
}

// .patient.PractitionerObject practitioner = 14;
inline bool Resource::_internal_has_practitioner() const {
  return resource_case() == kPractitioner;
}
inline bool Resource::has_practitioner() const {
  return _internal_has_practitioner();
}
inline void Resource::set_has_practitioner() {
  _oneof_case_[0] = kPractitioner;
}
inline void Resource::clear_practitioner() {
  if (_internal_has_practitioner()) {
    delete resource_.practitioner_;
    clear_has_resource();
  }
}
inline ::patient::PractitionerObject* Resource::release_practitioner() {
  // @@protoc_insertion_point(field_release:patient.Resource.practitioner)
  if (has_practitioner()) {
    clear_has_resource();
      ::patient::PractitionerObject* temp = resource_.practitioner_;
    resource_.practitioner_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::patient::PractitionerObject& Resource::_internal_practitioner() const {
  return _internal_has_practitioner()
      ? *resource_.practitioner_
      : *reinterpret_cast< ::patient::PractitionerObject*>(&::patient::_PractitionerObject_default_instance_);
}
inline const ::patient::PractitionerObject& Resource::practitioner() const {
  // @@protoc_insertion_point(field_get:patient.Resource.practitioner)
  return _internal_practitioner();
}
inline ::patient::PractitionerObject* Resource::_internal_mutable_practitioner() {
  if (!_internal_has_practitioner()) {
    clear_resource();
    set_has_practitioner();
    resource_.practitioner_ = CreateMaybeMessage< ::patient::PractitionerObject >(
        GetArenaNoVirtual());
  }
  return resource_.practitioner_;
}
inline ::patient::PractitionerObject* Resource::mutable_practitioner() {
  // @@protoc_insertion_point(field_mutable:patient.Resource.practitioner)
  return _internal_mutable_practitioner();
}

// .patient.ProcedureObject procedure = 15;
inline bool Resource::_internal_has_procedure() const {
  return resource_case() == kProcedure;
}
inline bool Resource::has_procedure() const {
  return _internal_has_procedure();
}
inline void Resource::set_has_procedure() {
  _oneof_case_[0] = kProcedure;
}
inline void Resource::clear_procedure() {
  if (_internal_has_procedure()) {
    delete resource_.procedure_;
    clear_has_resource();
  }
}
inline ::patient::ProcedureObject* Resource::release_procedure() {
  // @@protoc_insertion_point(field_release:patient.Resource.procedure)
  if (has_procedure()) {
    clear_has_resource();
      ::patient::ProcedureObject* temp = resource_.procedure_;
    resource_.procedure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::patient::ProcedureObject& Resource::_internal_procedure() const {
  return _internal_has_procedure()
      ? *resource_.procedure_
      : *reinterpret_cast< ::patient::ProcedureObject*>(&::patient::_ProcedureObject_default_instance_);
}
inline const ::patient::ProcedureObject& Resource::procedure() const {
  // @@protoc_insertion_point(field_get:patient.Resource.procedure)
  return _internal_procedure();
}
inline ::patient::ProcedureObject* Resource::_internal_mutable_procedure() {
  if (!_internal_has_procedure()) {
    clear_resource();
    set_has_procedure();
    resource_.procedure_ = CreateMaybeMessage< ::patient::ProcedureObject >(
        GetArenaNoVirtual());
  }
  return resource_.procedure_;
}
inline ::patient::ProcedureObject* Resource::mutable_procedure() {
  // @@protoc_insertion_point(field_mutable:patient.Resource.procedure)
  return _internal_mutable_procedure();
}

inline bool Resource::has_resource() const {
  return resource_case() != RESOURCE_NOT_SET;
}
inline void Resource::clear_has_resource() {
  _oneof_case_[0] = RESOURCE_NOT_SET;
}
inline Resource::ResourceCase Resource::resource_case() const {
  return Resource::ResourceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CarePlanObject

// repeated .patient.Activity activity = 1;
inline int CarePlanObject::_internal_activity_size() const {
  return activity_.size();
}
inline int CarePlanObject::activity_size() const {
  return _internal_activity_size();
}
inline void CarePlanObject::clear_activity() {
  activity_.Clear();
}
inline ::patient::Activity* CarePlanObject::mutable_activity(int index) {
  // @@protoc_insertion_point(field_mutable:patient.CarePlanObject.activity)
  return activity_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Activity >*
CarePlanObject::mutable_activity() {
  // @@protoc_insertion_point(field_mutable_list:patient.CarePlanObject.activity)
  return &activity_;
}
inline const ::patient::Activity& CarePlanObject::_internal_activity(int index) const {
  return activity_.Get(index);
}
inline const ::patient::Activity& CarePlanObject::activity(int index) const {
  // @@protoc_insertion_point(field_get:patient.CarePlanObject.activity)
  return _internal_activity(index);
}
inline ::patient::Activity* CarePlanObject::_internal_add_activity() {
  return activity_.Add();
}
inline ::patient::Activity* CarePlanObject::add_activity() {
  // @@protoc_insertion_point(field_add:patient.CarePlanObject.activity)
  return _internal_add_activity();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Activity >&
CarePlanObject::activity() const {
  // @@protoc_insertion_point(field_list:patient.CarePlanObject.activity)
  return activity_;
}

// repeated .patient.Reference addresses = 2;
inline int CarePlanObject::_internal_addresses_size() const {
  return addresses_.size();
}
inline int CarePlanObject::addresses_size() const {
  return _internal_addresses_size();
}
inline void CarePlanObject::clear_addresses() {
  addresses_.Clear();
}
inline ::patient::Reference* CarePlanObject::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:patient.CarePlanObject.addresses)
  return addresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >*
CarePlanObject::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:patient.CarePlanObject.addresses)
  return &addresses_;
}
inline const ::patient::Reference& CarePlanObject::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const ::patient::Reference& CarePlanObject::addresses(int index) const {
  // @@protoc_insertion_point(field_get:patient.CarePlanObject.addresses)
  return _internal_addresses(index);
}
inline ::patient::Reference* CarePlanObject::_internal_add_addresses() {
  return addresses_.Add();
}
inline ::patient::Reference* CarePlanObject::add_addresses() {
  // @@protoc_insertion_point(field_add:patient.CarePlanObject.addresses)
  return _internal_add_addresses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >&
CarePlanObject::addresses() const {
  // @@protoc_insertion_point(field_list:patient.CarePlanObject.addresses)
  return addresses_;
}

// repeated .patient.CareTeam careTeam = 3;
inline int CarePlanObject::_internal_careteam_size() const {
  return careteam_.size();
}
inline int CarePlanObject::careteam_size() const {
  return _internal_careteam_size();
}
inline void CarePlanObject::clear_careteam() {
  careteam_.Clear();
}
inline ::patient::CareTeam* CarePlanObject::mutable_careteam(int index) {
  // @@protoc_insertion_point(field_mutable:patient.CarePlanObject.careTeam)
  return careteam_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::CareTeam >*
CarePlanObject::mutable_careteam() {
  // @@protoc_insertion_point(field_mutable_list:patient.CarePlanObject.careTeam)
  return &careteam_;
}
inline const ::patient::CareTeam& CarePlanObject::_internal_careteam(int index) const {
  return careteam_.Get(index);
}
inline const ::patient::CareTeam& CarePlanObject::careteam(int index) const {
  // @@protoc_insertion_point(field_get:patient.CarePlanObject.careTeam)
  return _internal_careteam(index);
}
inline ::patient::CareTeam* CarePlanObject::_internal_add_careteam() {
  return careteam_.Add();
}
inline ::patient::CareTeam* CarePlanObject::add_careteam() {
  // @@protoc_insertion_point(field_add:patient.CarePlanObject.careTeam)
  return _internal_add_careteam();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::CareTeam >&
CarePlanObject::careteam() const {
  // @@protoc_insertion_point(field_list:patient.CarePlanObject.careTeam)
  return careteam_;
}

// repeated .patient.Category category = 4;
inline int CarePlanObject::_internal_category_size() const {
  return category_.size();
}
inline int CarePlanObject::category_size() const {
  return _internal_category_size();
}
inline void CarePlanObject::clear_category() {
  category_.Clear();
}
inline ::patient::Category* CarePlanObject::mutable_category(int index) {
  // @@protoc_insertion_point(field_mutable:patient.CarePlanObject.category)
  return category_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >*
CarePlanObject::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:patient.CarePlanObject.category)
  return &category_;
}
inline const ::patient::Category& CarePlanObject::_internal_category(int index) const {
  return category_.Get(index);
}
inline const ::patient::Category& CarePlanObject::category(int index) const {
  // @@protoc_insertion_point(field_get:patient.CarePlanObject.category)
  return _internal_category(index);
}
inline ::patient::Category* CarePlanObject::_internal_add_category() {
  return category_.Add();
}
inline ::patient::Category* CarePlanObject::add_category() {
  // @@protoc_insertion_point(field_add:patient.CarePlanObject.category)
  return _internal_add_category();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >&
CarePlanObject::category() const {
  // @@protoc_insertion_point(field_list:patient.CarePlanObject.category)
  return category_;
}

// .patient.Reference Encounter = 5;
inline bool CarePlanObject::_internal_has_encounter() const {
  return this != internal_default_instance() && encounter_ != nullptr;
}
inline bool CarePlanObject::has_encounter() const {
  return _internal_has_encounter();
}
inline void CarePlanObject::clear_encounter() {
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
}
inline const ::patient::Reference& CarePlanObject::_internal_encounter() const {
  const ::patient::Reference* p = encounter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& CarePlanObject::encounter() const {
  // @@protoc_insertion_point(field_get:patient.CarePlanObject.Encounter)
  return _internal_encounter();
}
inline ::patient::Reference* CarePlanObject::release_encounter() {
  // @@protoc_insertion_point(field_release:patient.CarePlanObject.Encounter)
  
  ::patient::Reference* temp = encounter_;
  encounter_ = nullptr;
  return temp;
}
inline ::patient::Reference* CarePlanObject::_internal_mutable_encounter() {
  
  if (encounter_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    encounter_ = p;
  }
  return encounter_;
}
inline ::patient::Reference* CarePlanObject::mutable_encounter() {
  // @@protoc_insertion_point(field_mutable:patient.CarePlanObject.Encounter)
  return _internal_mutable_encounter();
}
inline void CarePlanObject::set_allocated_encounter(::patient::Reference* encounter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete encounter_;
  }
  if (encounter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      encounter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encounter, submessage_arena);
    }
    
  } else {
    
  }
  encounter_ = encounter;
  // @@protoc_insertion_point(field_set_allocated:patient.CarePlanObject.Encounter)
}

// string id = 6;
inline void CarePlanObject::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CarePlanObject::id() const {
  // @@protoc_insertion_point(field_get:patient.CarePlanObject.id)
  return _internal_id();
}
inline void CarePlanObject::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:patient.CarePlanObject.id)
}
inline std::string* CarePlanObject::mutable_id() {
  // @@protoc_insertion_point(field_mutable:patient.CarePlanObject.id)
  return _internal_mutable_id();
}
inline const std::string& CarePlanObject::_internal_id() const {
  return id_.GetNoArena();
}
inline void CarePlanObject::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CarePlanObject::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.CarePlanObject.id)
}
inline void CarePlanObject::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.CarePlanObject.id)
}
inline void CarePlanObject::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.CarePlanObject.id)
}
inline std::string* CarePlanObject::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CarePlanObject::release_id() {
  // @@protoc_insertion_point(field_release:patient.CarePlanObject.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CarePlanObject::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:patient.CarePlanObject.id)
}

// string intent = 7;
inline void CarePlanObject::clear_intent() {
  intent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CarePlanObject::intent() const {
  // @@protoc_insertion_point(field_get:patient.CarePlanObject.intent)
  return _internal_intent();
}
inline void CarePlanObject::set_intent(const std::string& value) {
  _internal_set_intent(value);
  // @@protoc_insertion_point(field_set:patient.CarePlanObject.intent)
}
inline std::string* CarePlanObject::mutable_intent() {
  // @@protoc_insertion_point(field_mutable:patient.CarePlanObject.intent)
  return _internal_mutable_intent();
}
inline const std::string& CarePlanObject::_internal_intent() const {
  return intent_.GetNoArena();
}
inline void CarePlanObject::_internal_set_intent(const std::string& value) {
  
  intent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CarePlanObject::set_intent(std::string&& value) {
  
  intent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.CarePlanObject.intent)
}
inline void CarePlanObject::set_intent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  intent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.CarePlanObject.intent)
}
inline void CarePlanObject::set_intent(const char* value, size_t size) {
  
  intent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.CarePlanObject.intent)
}
inline std::string* CarePlanObject::_internal_mutable_intent() {
  
  return intent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CarePlanObject::release_intent() {
  // @@protoc_insertion_point(field_release:patient.CarePlanObject.intent)
  
  return intent_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CarePlanObject::set_allocated_intent(std::string* intent) {
  if (intent != nullptr) {
    
  } else {
    
  }
  intent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), intent);
  // @@protoc_insertion_point(field_set_allocated:patient.CarePlanObject.intent)
}

// .patient.Period period = 8;
inline bool CarePlanObject::_internal_has_period() const {
  return this != internal_default_instance() && period_ != nullptr;
}
inline bool CarePlanObject::has_period() const {
  return _internal_has_period();
}
inline void CarePlanObject::clear_period() {
  if (GetArenaNoVirtual() == nullptr && period_ != nullptr) {
    delete period_;
  }
  period_ = nullptr;
}
inline const ::patient::Period& CarePlanObject::_internal_period() const {
  const ::patient::Period* p = period_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Period*>(
      &::patient::_Period_default_instance_);
}
inline const ::patient::Period& CarePlanObject::period() const {
  // @@protoc_insertion_point(field_get:patient.CarePlanObject.period)
  return _internal_period();
}
inline ::patient::Period* CarePlanObject::release_period() {
  // @@protoc_insertion_point(field_release:patient.CarePlanObject.period)
  
  ::patient::Period* temp = period_;
  period_ = nullptr;
  return temp;
}
inline ::patient::Period* CarePlanObject::_internal_mutable_period() {
  
  if (period_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Period>(GetArenaNoVirtual());
    period_ = p;
  }
  return period_;
}
inline ::patient::Period* CarePlanObject::mutable_period() {
  // @@protoc_insertion_point(field_mutable:patient.CarePlanObject.period)
  return _internal_mutable_period();
}
inline void CarePlanObject::set_allocated_period(::patient::Period* period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete period_;
  }
  if (period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, period, submessage_arena);
    }
    
  } else {
    
  }
  period_ = period;
  // @@protoc_insertion_point(field_set_allocated:patient.CarePlanObject.period)
}

// .patient.ResourceType resourceType = 9;
inline void CarePlanObject::clear_resourcetype() {
  resourcetype_ = 0;
}
inline ::patient::ResourceType CarePlanObject::_internal_resourcetype() const {
  return static_cast< ::patient::ResourceType >(resourcetype_);
}
inline ::patient::ResourceType CarePlanObject::resourcetype() const {
  // @@protoc_insertion_point(field_get:patient.CarePlanObject.resourceType)
  return _internal_resourcetype();
}
inline void CarePlanObject::_internal_set_resourcetype(::patient::ResourceType value) {
  
  resourcetype_ = value;
}
inline void CarePlanObject::set_resourcetype(::patient::ResourceType value) {
  _internal_set_resourcetype(value);
  // @@protoc_insertion_point(field_set:patient.CarePlanObject.resourceType)
}

// .patient.Status status = 10;
inline void CarePlanObject::clear_status() {
  status_ = 0;
}
inline ::patient::Status CarePlanObject::_internal_status() const {
  return static_cast< ::patient::Status >(status_);
}
inline ::patient::Status CarePlanObject::status() const {
  // @@protoc_insertion_point(field_get:patient.CarePlanObject.status)
  return _internal_status();
}
inline void CarePlanObject::_internal_set_status(::patient::Status value) {
  
  status_ = value;
}
inline void CarePlanObject::set_status(::patient::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:patient.CarePlanObject.status)
}

// .patient.Reference subject = 11;
inline bool CarePlanObject::_internal_has_subject() const {
  return this != internal_default_instance() && subject_ != nullptr;
}
inline bool CarePlanObject::has_subject() const {
  return _internal_has_subject();
}
inline void CarePlanObject::clear_subject() {
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
}
inline const ::patient::Reference& CarePlanObject::_internal_subject() const {
  const ::patient::Reference* p = subject_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& CarePlanObject::subject() const {
  // @@protoc_insertion_point(field_get:patient.CarePlanObject.subject)
  return _internal_subject();
}
inline ::patient::Reference* CarePlanObject::release_subject() {
  // @@protoc_insertion_point(field_release:patient.CarePlanObject.subject)
  
  ::patient::Reference* temp = subject_;
  subject_ = nullptr;
  return temp;
}
inline ::patient::Reference* CarePlanObject::_internal_mutable_subject() {
  
  if (subject_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    subject_ = p;
  }
  return subject_;
}
inline ::patient::Reference* CarePlanObject::mutable_subject() {
  // @@protoc_insertion_point(field_mutable:patient.CarePlanObject.subject)
  return _internal_mutable_subject();
}
inline void CarePlanObject::set_allocated_subject(::patient::Reference* subject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete subject_;
  }
  if (subject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subject, submessage_arena);
    }
    
  } else {
    
  }
  subject_ = subject;
  // @@protoc_insertion_point(field_set_allocated:patient.CarePlanObject.subject)
}

// string text = 12;
inline void CarePlanObject::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CarePlanObject::text() const {
  // @@protoc_insertion_point(field_get:patient.CarePlanObject.text)
  return _internal_text();
}
inline void CarePlanObject::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:patient.CarePlanObject.text)
}
inline std::string* CarePlanObject::mutable_text() {
  // @@protoc_insertion_point(field_mutable:patient.CarePlanObject.text)
  return _internal_mutable_text();
}
inline const std::string& CarePlanObject::_internal_text() const {
  return text_.GetNoArena();
}
inline void CarePlanObject::_internal_set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CarePlanObject::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.CarePlanObject.text)
}
inline void CarePlanObject::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.CarePlanObject.text)
}
inline void CarePlanObject::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.CarePlanObject.text)
}
inline std::string* CarePlanObject::_internal_mutable_text() {
  
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CarePlanObject::release_text() {
  // @@protoc_insertion_point(field_release:patient.CarePlanObject.text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CarePlanObject::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:patient.CarePlanObject.text)
}

// -------------------------------------------------------------------

// CareTeamObject

// .patient.Reference Encounter = 1;
inline bool CareTeamObject::_internal_has_encounter() const {
  return this != internal_default_instance() && encounter_ != nullptr;
}
inline bool CareTeamObject::has_encounter() const {
  return _internal_has_encounter();
}
inline void CareTeamObject::clear_encounter() {
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
}
inline const ::patient::Reference& CareTeamObject::_internal_encounter() const {
  const ::patient::Reference* p = encounter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& CareTeamObject::encounter() const {
  // @@protoc_insertion_point(field_get:patient.CareTeamObject.Encounter)
  return _internal_encounter();
}
inline ::patient::Reference* CareTeamObject::release_encounter() {
  // @@protoc_insertion_point(field_release:patient.CareTeamObject.Encounter)
  
  ::patient::Reference* temp = encounter_;
  encounter_ = nullptr;
  return temp;
}
inline ::patient::Reference* CareTeamObject::_internal_mutable_encounter() {
  
  if (encounter_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    encounter_ = p;
  }
  return encounter_;
}
inline ::patient::Reference* CareTeamObject::mutable_encounter() {
  // @@protoc_insertion_point(field_mutable:patient.CareTeamObject.Encounter)
  return _internal_mutable_encounter();
}
inline void CareTeamObject::set_allocated_encounter(::patient::Reference* encounter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete encounter_;
  }
  if (encounter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      encounter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encounter, submessage_arena);
    }
    
  } else {
    
  }
  encounter_ = encounter;
  // @@protoc_insertion_point(field_set_allocated:patient.CareTeamObject.Encounter)
}

// string id = 2;
inline void CareTeamObject::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CareTeamObject::id() const {
  // @@protoc_insertion_point(field_get:patient.CareTeamObject.id)
  return _internal_id();
}
inline void CareTeamObject::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:patient.CareTeamObject.id)
}
inline std::string* CareTeamObject::mutable_id() {
  // @@protoc_insertion_point(field_mutable:patient.CareTeamObject.id)
  return _internal_mutable_id();
}
inline const std::string& CareTeamObject::_internal_id() const {
  return id_.GetNoArena();
}
inline void CareTeamObject::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CareTeamObject::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.CareTeamObject.id)
}
inline void CareTeamObject::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.CareTeamObject.id)
}
inline void CareTeamObject::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.CareTeamObject.id)
}
inline std::string* CareTeamObject::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CareTeamObject::release_id() {
  // @@protoc_insertion_point(field_release:patient.CareTeamObject.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CareTeamObject::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:patient.CareTeamObject.id)
}

// repeated .patient.Reference managingOrganization = 3;
inline int CareTeamObject::_internal_managingorganization_size() const {
  return managingorganization_.size();
}
inline int CareTeamObject::managingorganization_size() const {
  return _internal_managingorganization_size();
}
inline void CareTeamObject::clear_managingorganization() {
  managingorganization_.Clear();
}
inline ::patient::Reference* CareTeamObject::mutable_managingorganization(int index) {
  // @@protoc_insertion_point(field_mutable:patient.CareTeamObject.managingOrganization)
  return managingorganization_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >*
CareTeamObject::mutable_managingorganization() {
  // @@protoc_insertion_point(field_mutable_list:patient.CareTeamObject.managingOrganization)
  return &managingorganization_;
}
inline const ::patient::Reference& CareTeamObject::_internal_managingorganization(int index) const {
  return managingorganization_.Get(index);
}
inline const ::patient::Reference& CareTeamObject::managingorganization(int index) const {
  // @@protoc_insertion_point(field_get:patient.CareTeamObject.managingOrganization)
  return _internal_managingorganization(index);
}
inline ::patient::Reference* CareTeamObject::_internal_add_managingorganization() {
  return managingorganization_.Add();
}
inline ::patient::Reference* CareTeamObject::add_managingorganization() {
  // @@protoc_insertion_point(field_add:patient.CareTeamObject.managingOrganization)
  return _internal_add_managingorganization();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >&
CareTeamObject::managingorganization() const {
  // @@protoc_insertion_point(field_list:patient.CareTeamObject.managingOrganization)
  return managingorganization_;
}

// repeated .patient.Participant participant = 4;
inline int CareTeamObject::_internal_participant_size() const {
  return participant_.size();
}
inline int CareTeamObject::participant_size() const {
  return _internal_participant_size();
}
inline void CareTeamObject::clear_participant() {
  participant_.Clear();
}
inline ::patient::Participant* CareTeamObject::mutable_participant(int index) {
  // @@protoc_insertion_point(field_mutable:patient.CareTeamObject.participant)
  return participant_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Participant >*
CareTeamObject::mutable_participant() {
  // @@protoc_insertion_point(field_mutable_list:patient.CareTeamObject.participant)
  return &participant_;
}
inline const ::patient::Participant& CareTeamObject::_internal_participant(int index) const {
  return participant_.Get(index);
}
inline const ::patient::Participant& CareTeamObject::participant(int index) const {
  // @@protoc_insertion_point(field_get:patient.CareTeamObject.participant)
  return _internal_participant(index);
}
inline ::patient::Participant* CareTeamObject::_internal_add_participant() {
  return participant_.Add();
}
inline ::patient::Participant* CareTeamObject::add_participant() {
  // @@protoc_insertion_point(field_add:patient.CareTeamObject.participant)
  return _internal_add_participant();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Participant >&
CareTeamObject::participant() const {
  // @@protoc_insertion_point(field_list:patient.CareTeamObject.participant)
  return participant_;
}

// .patient.Period period = 5;
inline bool CareTeamObject::_internal_has_period() const {
  return this != internal_default_instance() && period_ != nullptr;
}
inline bool CareTeamObject::has_period() const {
  return _internal_has_period();
}
inline void CareTeamObject::clear_period() {
  if (GetArenaNoVirtual() == nullptr && period_ != nullptr) {
    delete period_;
  }
  period_ = nullptr;
}
inline const ::patient::Period& CareTeamObject::_internal_period() const {
  const ::patient::Period* p = period_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Period*>(
      &::patient::_Period_default_instance_);
}
inline const ::patient::Period& CareTeamObject::period() const {
  // @@protoc_insertion_point(field_get:patient.CareTeamObject.period)
  return _internal_period();
}
inline ::patient::Period* CareTeamObject::release_period() {
  // @@protoc_insertion_point(field_release:patient.CareTeamObject.period)
  
  ::patient::Period* temp = period_;
  period_ = nullptr;
  return temp;
}
inline ::patient::Period* CareTeamObject::_internal_mutable_period() {
  
  if (period_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Period>(GetArenaNoVirtual());
    period_ = p;
  }
  return period_;
}
inline ::patient::Period* CareTeamObject::mutable_period() {
  // @@protoc_insertion_point(field_mutable:patient.CareTeamObject.period)
  return _internal_mutable_period();
}
inline void CareTeamObject::set_allocated_period(::patient::Period* period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete period_;
  }
  if (period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, period, submessage_arena);
    }
    
  } else {
    
  }
  period_ = period;
  // @@protoc_insertion_point(field_set_allocated:patient.CareTeamObject.period)
}

// repeated .patient.Category reasonCode = 6;
inline int CareTeamObject::_internal_reasoncode_size() const {
  return reasoncode_.size();
}
inline int CareTeamObject::reasoncode_size() const {
  return _internal_reasoncode_size();
}
inline void CareTeamObject::clear_reasoncode() {
  reasoncode_.Clear();
}
inline ::patient::Category* CareTeamObject::mutable_reasoncode(int index) {
  // @@protoc_insertion_point(field_mutable:patient.CareTeamObject.reasonCode)
  return reasoncode_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >*
CareTeamObject::mutable_reasoncode() {
  // @@protoc_insertion_point(field_mutable_list:patient.CareTeamObject.reasonCode)
  return &reasoncode_;
}
inline const ::patient::Category& CareTeamObject::_internal_reasoncode(int index) const {
  return reasoncode_.Get(index);
}
inline const ::patient::Category& CareTeamObject::reasoncode(int index) const {
  // @@protoc_insertion_point(field_get:patient.CareTeamObject.reasonCode)
  return _internal_reasoncode(index);
}
inline ::patient::Category* CareTeamObject::_internal_add_reasoncode() {
  return reasoncode_.Add();
}
inline ::patient::Category* CareTeamObject::add_reasoncode() {
  // @@protoc_insertion_point(field_add:patient.CareTeamObject.reasonCode)
  return _internal_add_reasoncode();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >&
CareTeamObject::reasoncode() const {
  // @@protoc_insertion_point(field_list:patient.CareTeamObject.reasonCode)
  return reasoncode_;
}

// .patient.ResourceType resourceType = 7;
inline void CareTeamObject::clear_resourcetype() {
  resourcetype_ = 0;
}
inline ::patient::ResourceType CareTeamObject::_internal_resourcetype() const {
  return static_cast< ::patient::ResourceType >(resourcetype_);
}
inline ::patient::ResourceType CareTeamObject::resourcetype() const {
  // @@protoc_insertion_point(field_get:patient.CareTeamObject.resourceType)
  return _internal_resourcetype();
}
inline void CareTeamObject::_internal_set_resourcetype(::patient::ResourceType value) {
  
  resourcetype_ = value;
}
inline void CareTeamObject::set_resourcetype(::patient::ResourceType value) {
  _internal_set_resourcetype(value);
  // @@protoc_insertion_point(field_set:patient.CareTeamObject.resourceType)
}

// .patient.Status status = 8;
inline void CareTeamObject::clear_status() {
  status_ = 0;
}
inline ::patient::Status CareTeamObject::_internal_status() const {
  return static_cast< ::patient::Status >(status_);
}
inline ::patient::Status CareTeamObject::status() const {
  // @@protoc_insertion_point(field_get:patient.CareTeamObject.status)
  return _internal_status();
}
inline void CareTeamObject::_internal_set_status(::patient::Status value) {
  
  status_ = value;
}
inline void CareTeamObject::set_status(::patient::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:patient.CareTeamObject.status)
}

// .patient.Reference subject = 9;
inline bool CareTeamObject::_internal_has_subject() const {
  return this != internal_default_instance() && subject_ != nullptr;
}
inline bool CareTeamObject::has_subject() const {
  return _internal_has_subject();
}
inline void CareTeamObject::clear_subject() {
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
}
inline const ::patient::Reference& CareTeamObject::_internal_subject() const {
  const ::patient::Reference* p = subject_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& CareTeamObject::subject() const {
  // @@protoc_insertion_point(field_get:patient.CareTeamObject.subject)
  return _internal_subject();
}
inline ::patient::Reference* CareTeamObject::release_subject() {
  // @@protoc_insertion_point(field_release:patient.CareTeamObject.subject)
  
  ::patient::Reference* temp = subject_;
  subject_ = nullptr;
  return temp;
}
inline ::patient::Reference* CareTeamObject::_internal_mutable_subject() {
  
  if (subject_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    subject_ = p;
  }
  return subject_;
}
inline ::patient::Reference* CareTeamObject::mutable_subject() {
  // @@protoc_insertion_point(field_mutable:patient.CareTeamObject.subject)
  return _internal_mutable_subject();
}
inline void CareTeamObject::set_allocated_subject(::patient::Reference* subject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete subject_;
  }
  if (subject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subject, submessage_arena);
    }
    
  } else {
    
  }
  subject_ = subject;
  // @@protoc_insertion_point(field_set_allocated:patient.CareTeamObject.subject)
}

// -------------------------------------------------------------------

// ClaimObject

// .patient.Period billablePeriod = 1;
inline bool ClaimObject::_internal_has_billableperiod() const {
  return this != internal_default_instance() && billableperiod_ != nullptr;
}
inline bool ClaimObject::has_billableperiod() const {
  return _internal_has_billableperiod();
}
inline void ClaimObject::clear_billableperiod() {
  if (GetArenaNoVirtual() == nullptr && billableperiod_ != nullptr) {
    delete billableperiod_;
  }
  billableperiod_ = nullptr;
}
inline const ::patient::Period& ClaimObject::_internal_billableperiod() const {
  const ::patient::Period* p = billableperiod_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Period*>(
      &::patient::_Period_default_instance_);
}
inline const ::patient::Period& ClaimObject::billableperiod() const {
  // @@protoc_insertion_point(field_get:patient.ClaimObject.billablePeriod)
  return _internal_billableperiod();
}
inline ::patient::Period* ClaimObject::release_billableperiod() {
  // @@protoc_insertion_point(field_release:patient.ClaimObject.billablePeriod)
  
  ::patient::Period* temp = billableperiod_;
  billableperiod_ = nullptr;
  return temp;
}
inline ::patient::Period* ClaimObject::_internal_mutable_billableperiod() {
  
  if (billableperiod_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Period>(GetArenaNoVirtual());
    billableperiod_ = p;
  }
  return billableperiod_;
}
inline ::patient::Period* ClaimObject::mutable_billableperiod() {
  // @@protoc_insertion_point(field_mutable:patient.ClaimObject.billablePeriod)
  return _internal_mutable_billableperiod();
}
inline void ClaimObject::set_allocated_billableperiod(::patient::Period* billableperiod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete billableperiod_;
  }
  if (billableperiod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      billableperiod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, billableperiod, submessage_arena);
    }
    
  } else {
    
  }
  billableperiod_ = billableperiod;
  // @@protoc_insertion_point(field_set_allocated:patient.ClaimObject.billablePeriod)
}

// string created = 2;
inline void ClaimObject::clear_created() {
  created_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClaimObject::created() const {
  // @@protoc_insertion_point(field_get:patient.ClaimObject.created)
  return _internal_created();
}
inline void ClaimObject::set_created(const std::string& value) {
  _internal_set_created(value);
  // @@protoc_insertion_point(field_set:patient.ClaimObject.created)
}
inline std::string* ClaimObject::mutable_created() {
  // @@protoc_insertion_point(field_mutable:patient.ClaimObject.created)
  return _internal_mutable_created();
}
inline const std::string& ClaimObject::_internal_created() const {
  return created_.GetNoArena();
}
inline void ClaimObject::_internal_set_created(const std::string& value) {
  
  created_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClaimObject::set_created(std::string&& value) {
  
  created_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.ClaimObject.created)
}
inline void ClaimObject::set_created(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  created_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.ClaimObject.created)
}
inline void ClaimObject::set_created(const char* value, size_t size) {
  
  created_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.ClaimObject.created)
}
inline std::string* ClaimObject::_internal_mutable_created() {
  
  return created_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClaimObject::release_created() {
  // @@protoc_insertion_point(field_release:patient.ClaimObject.created)
  
  return created_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClaimObject::set_allocated_created(std::string* created) {
  if (created != nullptr) {
    
  } else {
    
  }
  created_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), created);
  // @@protoc_insertion_point(field_set_allocated:patient.ClaimObject.created)
}

// repeated .patient.Diagnosis diagnosis = 3;
inline int ClaimObject::_internal_diagnosis_size() const {
  return diagnosis_.size();
}
inline int ClaimObject::diagnosis_size() const {
  return _internal_diagnosis_size();
}
inline void ClaimObject::clear_diagnosis() {
  diagnosis_.Clear();
}
inline ::patient::Diagnosis* ClaimObject::mutable_diagnosis(int index) {
  // @@protoc_insertion_point(field_mutable:patient.ClaimObject.diagnosis)
  return diagnosis_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Diagnosis >*
ClaimObject::mutable_diagnosis() {
  // @@protoc_insertion_point(field_mutable_list:patient.ClaimObject.diagnosis)
  return &diagnosis_;
}
inline const ::patient::Diagnosis& ClaimObject::_internal_diagnosis(int index) const {
  return diagnosis_.Get(index);
}
inline const ::patient::Diagnosis& ClaimObject::diagnosis(int index) const {
  // @@protoc_insertion_point(field_get:patient.ClaimObject.diagnosis)
  return _internal_diagnosis(index);
}
inline ::patient::Diagnosis* ClaimObject::_internal_add_diagnosis() {
  return diagnosis_.Add();
}
inline ::patient::Diagnosis* ClaimObject::add_diagnosis() {
  // @@protoc_insertion_point(field_add:patient.ClaimObject.diagnosis)
  return _internal_add_diagnosis();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Diagnosis >&
ClaimObject::diagnosis() const {
  // @@protoc_insertion_point(field_list:patient.ClaimObject.diagnosis)
  return diagnosis_;
}

// string id = 4;
inline void ClaimObject::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClaimObject::id() const {
  // @@protoc_insertion_point(field_get:patient.ClaimObject.id)
  return _internal_id();
}
inline void ClaimObject::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:patient.ClaimObject.id)
}
inline std::string* ClaimObject::mutable_id() {
  // @@protoc_insertion_point(field_mutable:patient.ClaimObject.id)
  return _internal_mutable_id();
}
inline const std::string& ClaimObject::_internal_id() const {
  return id_.GetNoArena();
}
inline void ClaimObject::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClaimObject::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.ClaimObject.id)
}
inline void ClaimObject::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.ClaimObject.id)
}
inline void ClaimObject::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.ClaimObject.id)
}
inline std::string* ClaimObject::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClaimObject::release_id() {
  // @@protoc_insertion_point(field_release:patient.ClaimObject.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClaimObject::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:patient.ClaimObject.id)
}

// repeated .patient.Insurance insurance = 5;
inline int ClaimObject::_internal_insurance_size() const {
  return insurance_.size();
}
inline int ClaimObject::insurance_size() const {
  return _internal_insurance_size();
}
inline void ClaimObject::clear_insurance() {
  insurance_.Clear();
}
inline ::patient::Insurance* ClaimObject::mutable_insurance(int index) {
  // @@protoc_insertion_point(field_mutable:patient.ClaimObject.insurance)
  return insurance_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Insurance >*
ClaimObject::mutable_insurance() {
  // @@protoc_insertion_point(field_mutable_list:patient.ClaimObject.insurance)
  return &insurance_;
}
inline const ::patient::Insurance& ClaimObject::_internal_insurance(int index) const {
  return insurance_.Get(index);
}
inline const ::patient::Insurance& ClaimObject::insurance(int index) const {
  // @@protoc_insertion_point(field_get:patient.ClaimObject.insurance)
  return _internal_insurance(index);
}
inline ::patient::Insurance* ClaimObject::_internal_add_insurance() {
  return insurance_.Add();
}
inline ::patient::Insurance* ClaimObject::add_insurance() {
  // @@protoc_insertion_point(field_add:patient.ClaimObject.insurance)
  return _internal_add_insurance();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Insurance >&
ClaimObject::insurance() const {
  // @@protoc_insertion_point(field_list:patient.ClaimObject.insurance)
  return insurance_;
}

// repeated .patient.Item item = 6;
inline int ClaimObject::_internal_item_size() const {
  return item_.size();
}
inline int ClaimObject::item_size() const {
  return _internal_item_size();
}
inline void ClaimObject::clear_item() {
  item_.Clear();
}
inline ::patient::Item* ClaimObject::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:patient.ClaimObject.item)
  return item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Item >*
ClaimObject::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:patient.ClaimObject.item)
  return &item_;
}
inline const ::patient::Item& ClaimObject::_internal_item(int index) const {
  return item_.Get(index);
}
inline const ::patient::Item& ClaimObject::item(int index) const {
  // @@protoc_insertion_point(field_get:patient.ClaimObject.item)
  return _internal_item(index);
}
inline ::patient::Item* ClaimObject::_internal_add_item() {
  return item_.Add();
}
inline ::patient::Item* ClaimObject::add_item() {
  // @@protoc_insertion_point(field_add:patient.ClaimObject.item)
  return _internal_add_item();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Item >&
ClaimObject::item() const {
  // @@protoc_insertion_point(field_list:patient.ClaimObject.item)
  return item_;
}

// .patient.Reference patient = 7;
inline bool ClaimObject::_internal_has_patient() const {
  return this != internal_default_instance() && patient_ != nullptr;
}
inline bool ClaimObject::has_patient() const {
  return _internal_has_patient();
}
inline void ClaimObject::clear_patient() {
  if (GetArenaNoVirtual() == nullptr && patient_ != nullptr) {
    delete patient_;
  }
  patient_ = nullptr;
}
inline const ::patient::Reference& ClaimObject::_internal_patient() const {
  const ::patient::Reference* p = patient_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& ClaimObject::patient() const {
  // @@protoc_insertion_point(field_get:patient.ClaimObject.patient)
  return _internal_patient();
}
inline ::patient::Reference* ClaimObject::release_patient() {
  // @@protoc_insertion_point(field_release:patient.ClaimObject.patient)
  
  ::patient::Reference* temp = patient_;
  patient_ = nullptr;
  return temp;
}
inline ::patient::Reference* ClaimObject::_internal_mutable_patient() {
  
  if (patient_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    patient_ = p;
  }
  return patient_;
}
inline ::patient::Reference* ClaimObject::mutable_patient() {
  // @@protoc_insertion_point(field_mutable:patient.ClaimObject.patient)
  return _internal_mutable_patient();
}
inline void ClaimObject::set_allocated_patient(::patient::Reference* patient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete patient_;
  }
  if (patient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      patient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patient, submessage_arena);
    }
    
  } else {
    
  }
  patient_ = patient;
  // @@protoc_insertion_point(field_set_allocated:patient.ClaimObject.patient)
}

// .patient.Reference prescription = 8;
inline bool ClaimObject::_internal_has_prescription() const {
  return this != internal_default_instance() && prescription_ != nullptr;
}
inline bool ClaimObject::has_prescription() const {
  return _internal_has_prescription();
}
inline void ClaimObject::clear_prescription() {
  if (GetArenaNoVirtual() == nullptr && prescription_ != nullptr) {
    delete prescription_;
  }
  prescription_ = nullptr;
}
inline const ::patient::Reference& ClaimObject::_internal_prescription() const {
  const ::patient::Reference* p = prescription_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& ClaimObject::prescription() const {
  // @@protoc_insertion_point(field_get:patient.ClaimObject.prescription)
  return _internal_prescription();
}
inline ::patient::Reference* ClaimObject::release_prescription() {
  // @@protoc_insertion_point(field_release:patient.ClaimObject.prescription)
  
  ::patient::Reference* temp = prescription_;
  prescription_ = nullptr;
  return temp;
}
inline ::patient::Reference* ClaimObject::_internal_mutable_prescription() {
  
  if (prescription_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    prescription_ = p;
  }
  return prescription_;
}
inline ::patient::Reference* ClaimObject::mutable_prescription() {
  // @@protoc_insertion_point(field_mutable:patient.ClaimObject.prescription)
  return _internal_mutable_prescription();
}
inline void ClaimObject::set_allocated_prescription(::patient::Reference* prescription) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete prescription_;
  }
  if (prescription) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prescription = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prescription, submessage_arena);
    }
    
  } else {
    
  }
  prescription_ = prescription;
  // @@protoc_insertion_point(field_set_allocated:patient.ClaimObject.prescription)
}

// .patient.Category priority = 9;
inline bool ClaimObject::_internal_has_priority() const {
  return this != internal_default_instance() && priority_ != nullptr;
}
inline bool ClaimObject::has_priority() const {
  return _internal_has_priority();
}
inline void ClaimObject::clear_priority() {
  if (GetArenaNoVirtual() == nullptr && priority_ != nullptr) {
    delete priority_;
  }
  priority_ = nullptr;
}
inline const ::patient::Category& ClaimObject::_internal_priority() const {
  const ::patient::Category* p = priority_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& ClaimObject::priority() const {
  // @@protoc_insertion_point(field_get:patient.ClaimObject.priority)
  return _internal_priority();
}
inline ::patient::Category* ClaimObject::release_priority() {
  // @@protoc_insertion_point(field_release:patient.ClaimObject.priority)
  
  ::patient::Category* temp = priority_;
  priority_ = nullptr;
  return temp;
}
inline ::patient::Category* ClaimObject::_internal_mutable_priority() {
  
  if (priority_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    priority_ = p;
  }
  return priority_;
}
inline ::patient::Category* ClaimObject::mutable_priority() {
  // @@protoc_insertion_point(field_mutable:patient.ClaimObject.priority)
  return _internal_mutable_priority();
}
inline void ClaimObject::set_allocated_priority(::patient::Category* priority) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete priority_;
  }
  if (priority) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      priority = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, priority, submessage_arena);
    }
    
  } else {
    
  }
  priority_ = priority;
  // @@protoc_insertion_point(field_set_allocated:patient.ClaimObject.priority)
}

// repeated .patient.Procedure procedure = 10;
inline int ClaimObject::_internal_procedure_size() const {
  return procedure_.size();
}
inline int ClaimObject::procedure_size() const {
  return _internal_procedure_size();
}
inline void ClaimObject::clear_procedure() {
  procedure_.Clear();
}
inline ::patient::Procedure* ClaimObject::mutable_procedure(int index) {
  // @@protoc_insertion_point(field_mutable:patient.ClaimObject.procedure)
  return procedure_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Procedure >*
ClaimObject::mutable_procedure() {
  // @@protoc_insertion_point(field_mutable_list:patient.ClaimObject.procedure)
  return &procedure_;
}
inline const ::patient::Procedure& ClaimObject::_internal_procedure(int index) const {
  return procedure_.Get(index);
}
inline const ::patient::Procedure& ClaimObject::procedure(int index) const {
  // @@protoc_insertion_point(field_get:patient.ClaimObject.procedure)
  return _internal_procedure(index);
}
inline ::patient::Procedure* ClaimObject::_internal_add_procedure() {
  return procedure_.Add();
}
inline ::patient::Procedure* ClaimObject::add_procedure() {
  // @@protoc_insertion_point(field_add:patient.ClaimObject.procedure)
  return _internal_add_procedure();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Procedure >&
ClaimObject::procedure() const {
  // @@protoc_insertion_point(field_list:patient.ClaimObject.procedure)
  return procedure_;
}

// .patient.Reference provider = 11;
inline bool ClaimObject::_internal_has_provider() const {
  return this != internal_default_instance() && provider_ != nullptr;
}
inline bool ClaimObject::has_provider() const {
  return _internal_has_provider();
}
inline void ClaimObject::clear_provider() {
  if (GetArenaNoVirtual() == nullptr && provider_ != nullptr) {
    delete provider_;
  }
  provider_ = nullptr;
}
inline const ::patient::Reference& ClaimObject::_internal_provider() const {
  const ::patient::Reference* p = provider_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& ClaimObject::provider() const {
  // @@protoc_insertion_point(field_get:patient.ClaimObject.provider)
  return _internal_provider();
}
inline ::patient::Reference* ClaimObject::release_provider() {
  // @@protoc_insertion_point(field_release:patient.ClaimObject.provider)
  
  ::patient::Reference* temp = provider_;
  provider_ = nullptr;
  return temp;
}
inline ::patient::Reference* ClaimObject::_internal_mutable_provider() {
  
  if (provider_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    provider_ = p;
  }
  return provider_;
}
inline ::patient::Reference* ClaimObject::mutable_provider() {
  // @@protoc_insertion_point(field_mutable:patient.ClaimObject.provider)
  return _internal_mutable_provider();
}
inline void ClaimObject::set_allocated_provider(::patient::Reference* provider) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete provider_;
  }
  if (provider) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      provider = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, provider, submessage_arena);
    }
    
  } else {
    
  }
  provider_ = provider;
  // @@protoc_insertion_point(field_set_allocated:patient.ClaimObject.provider)
}

// .patient.ResourceType resourceType = 12;
inline void ClaimObject::clear_resourcetype() {
  resourcetype_ = 0;
}
inline ::patient::ResourceType ClaimObject::_internal_resourcetype() const {
  return static_cast< ::patient::ResourceType >(resourcetype_);
}
inline ::patient::ResourceType ClaimObject::resourcetype() const {
  // @@protoc_insertion_point(field_get:patient.ClaimObject.resourceType)
  return _internal_resourcetype();
}
inline void ClaimObject::_internal_set_resourcetype(::patient::ResourceType value) {
  
  resourcetype_ = value;
}
inline void ClaimObject::set_resourcetype(::patient::ResourceType value) {
  _internal_set_resourcetype(value);
  // @@protoc_insertion_point(field_set:patient.ClaimObject.resourceType)
}

// .patient.Status status = 13;
inline void ClaimObject::clear_status() {
  status_ = 0;
}
inline ::patient::Status ClaimObject::_internal_status() const {
  return static_cast< ::patient::Status >(status_);
}
inline ::patient::Status ClaimObject::status() const {
  // @@protoc_insertion_point(field_get:patient.ClaimObject.status)
  return _internal_status();
}
inline void ClaimObject::_internal_set_status(::patient::Status value) {
  
  status_ = value;
}
inline void ClaimObject::set_status(::patient::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:patient.ClaimObject.status)
}

// repeated .patient.SupportingInfo supportingInfo = 14;
inline int ClaimObject::_internal_supportinginfo_size() const {
  return supportinginfo_.size();
}
inline int ClaimObject::supportinginfo_size() const {
  return _internal_supportinginfo_size();
}
inline void ClaimObject::clear_supportinginfo() {
  supportinginfo_.Clear();
}
inline ::patient::SupportingInfo* ClaimObject::mutable_supportinginfo(int index) {
  // @@protoc_insertion_point(field_mutable:patient.ClaimObject.supportingInfo)
  return supportinginfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::SupportingInfo >*
ClaimObject::mutable_supportinginfo() {
  // @@protoc_insertion_point(field_mutable_list:patient.ClaimObject.supportingInfo)
  return &supportinginfo_;
}
inline const ::patient::SupportingInfo& ClaimObject::_internal_supportinginfo(int index) const {
  return supportinginfo_.Get(index);
}
inline const ::patient::SupportingInfo& ClaimObject::supportinginfo(int index) const {
  // @@protoc_insertion_point(field_get:patient.ClaimObject.supportingInfo)
  return _internal_supportinginfo(index);
}
inline ::patient::SupportingInfo* ClaimObject::_internal_add_supportinginfo() {
  return supportinginfo_.Add();
}
inline ::patient::SupportingInfo* ClaimObject::add_supportinginfo() {
  // @@protoc_insertion_point(field_add:patient.ClaimObject.supportingInfo)
  return _internal_add_supportinginfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::SupportingInfo >&
ClaimObject::supportinginfo() const {
  // @@protoc_insertion_point(field_list:patient.ClaimObject.supportingInfo)
  return supportinginfo_;
}

// .patient.Total total = 15;
inline bool ClaimObject::_internal_has_total() const {
  return this != internal_default_instance() && total_ != nullptr;
}
inline bool ClaimObject::has_total() const {
  return _internal_has_total();
}
inline void ClaimObject::clear_total() {
  if (GetArenaNoVirtual() == nullptr && total_ != nullptr) {
    delete total_;
  }
  total_ = nullptr;
}
inline const ::patient::Total& ClaimObject::_internal_total() const {
  const ::patient::Total* p = total_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Total*>(
      &::patient::_Total_default_instance_);
}
inline const ::patient::Total& ClaimObject::total() const {
  // @@protoc_insertion_point(field_get:patient.ClaimObject.total)
  return _internal_total();
}
inline ::patient::Total* ClaimObject::release_total() {
  // @@protoc_insertion_point(field_release:patient.ClaimObject.total)
  
  ::patient::Total* temp = total_;
  total_ = nullptr;
  return temp;
}
inline ::patient::Total* ClaimObject::_internal_mutable_total() {
  
  if (total_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Total>(GetArenaNoVirtual());
    total_ = p;
  }
  return total_;
}
inline ::patient::Total* ClaimObject::mutable_total() {
  // @@protoc_insertion_point(field_mutable:patient.ClaimObject.total)
  return _internal_mutable_total();
}
inline void ClaimObject::set_allocated_total(::patient::Total* total) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete total_;
  }
  if (total) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      total = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total, submessage_arena);
    }
    
  } else {
    
  }
  total_ = total;
  // @@protoc_insertion_point(field_set_allocated:patient.ClaimObject.total)
}

// .patient.Category type = 16;
inline bool ClaimObject::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool ClaimObject::has_type() const {
  return _internal_has_type();
}
inline void ClaimObject::clear_type() {
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
inline const ::patient::Category& ClaimObject::_internal_type() const {
  const ::patient::Category* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& ClaimObject::type() const {
  // @@protoc_insertion_point(field_get:patient.ClaimObject.type)
  return _internal_type();
}
inline ::patient::Category* ClaimObject::release_type() {
  // @@protoc_insertion_point(field_release:patient.ClaimObject.type)
  
  ::patient::Category* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::patient::Category* ClaimObject::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::patient::Category* ClaimObject::mutable_type() {
  // @@protoc_insertion_point(field_mutable:patient.ClaimObject.type)
  return _internal_mutable_type();
}
inline void ClaimObject::set_allocated_type(::patient::Category* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:patient.ClaimObject.type)
}

// string use = 17;
inline void ClaimObject::clear_use() {
  use_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClaimObject::use() const {
  // @@protoc_insertion_point(field_get:patient.ClaimObject.use)
  return _internal_use();
}
inline void ClaimObject::set_use(const std::string& value) {
  _internal_set_use(value);
  // @@protoc_insertion_point(field_set:patient.ClaimObject.use)
}
inline std::string* ClaimObject::mutable_use() {
  // @@protoc_insertion_point(field_mutable:patient.ClaimObject.use)
  return _internal_mutable_use();
}
inline const std::string& ClaimObject::_internal_use() const {
  return use_.GetNoArena();
}
inline void ClaimObject::_internal_set_use(const std::string& value) {
  
  use_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClaimObject::set_use(std::string&& value) {
  
  use_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.ClaimObject.use)
}
inline void ClaimObject::set_use(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  use_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.ClaimObject.use)
}
inline void ClaimObject::set_use(const char* value, size_t size) {
  
  use_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.ClaimObject.use)
}
inline std::string* ClaimObject::_internal_mutable_use() {
  
  return use_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClaimObject::release_use() {
  // @@protoc_insertion_point(field_release:patient.ClaimObject.use)
  
  return use_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClaimObject::set_allocated_use(std::string* use) {
  if (use != nullptr) {
    
  } else {
    
  }
  use_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), use);
  // @@protoc_insertion_point(field_set_allocated:patient.ClaimObject.use)
}

// -------------------------------------------------------------------

// ConditionObject

// string abatementDateTime = 1;
inline void ConditionObject::clear_abatementdatetime() {
  abatementdatetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConditionObject::abatementdatetime() const {
  // @@protoc_insertion_point(field_get:patient.ConditionObject.abatementDateTime)
  return _internal_abatementdatetime();
}
inline void ConditionObject::set_abatementdatetime(const std::string& value) {
  _internal_set_abatementdatetime(value);
  // @@protoc_insertion_point(field_set:patient.ConditionObject.abatementDateTime)
}
inline std::string* ConditionObject::mutable_abatementdatetime() {
  // @@protoc_insertion_point(field_mutable:patient.ConditionObject.abatementDateTime)
  return _internal_mutable_abatementdatetime();
}
inline const std::string& ConditionObject::_internal_abatementdatetime() const {
  return abatementdatetime_.GetNoArena();
}
inline void ConditionObject::_internal_set_abatementdatetime(const std::string& value) {
  
  abatementdatetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConditionObject::set_abatementdatetime(std::string&& value) {
  
  abatementdatetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.ConditionObject.abatementDateTime)
}
inline void ConditionObject::set_abatementdatetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  abatementdatetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.ConditionObject.abatementDateTime)
}
inline void ConditionObject::set_abatementdatetime(const char* value, size_t size) {
  
  abatementdatetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.ConditionObject.abatementDateTime)
}
inline std::string* ConditionObject::_internal_mutable_abatementdatetime() {
  
  return abatementdatetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConditionObject::release_abatementdatetime() {
  // @@protoc_insertion_point(field_release:patient.ConditionObject.abatementDateTime)
  
  return abatementdatetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConditionObject::set_allocated_abatementdatetime(std::string* abatementdatetime) {
  if (abatementdatetime != nullptr) {
    
  } else {
    
  }
  abatementdatetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), abatementdatetime);
  // @@protoc_insertion_point(field_set_allocated:patient.ConditionObject.abatementDateTime)
}

// .patient.Category clinicalStatus = 2;
inline bool ConditionObject::_internal_has_clinicalstatus() const {
  return this != internal_default_instance() && clinicalstatus_ != nullptr;
}
inline bool ConditionObject::has_clinicalstatus() const {
  return _internal_has_clinicalstatus();
}
inline void ConditionObject::clear_clinicalstatus() {
  if (GetArenaNoVirtual() == nullptr && clinicalstatus_ != nullptr) {
    delete clinicalstatus_;
  }
  clinicalstatus_ = nullptr;
}
inline const ::patient::Category& ConditionObject::_internal_clinicalstatus() const {
  const ::patient::Category* p = clinicalstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& ConditionObject::clinicalstatus() const {
  // @@protoc_insertion_point(field_get:patient.ConditionObject.clinicalStatus)
  return _internal_clinicalstatus();
}
inline ::patient::Category* ConditionObject::release_clinicalstatus() {
  // @@protoc_insertion_point(field_release:patient.ConditionObject.clinicalStatus)
  
  ::patient::Category* temp = clinicalstatus_;
  clinicalstatus_ = nullptr;
  return temp;
}
inline ::patient::Category* ConditionObject::_internal_mutable_clinicalstatus() {
  
  if (clinicalstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    clinicalstatus_ = p;
  }
  return clinicalstatus_;
}
inline ::patient::Category* ConditionObject::mutable_clinicalstatus() {
  // @@protoc_insertion_point(field_mutable:patient.ConditionObject.clinicalStatus)
  return _internal_mutable_clinicalstatus();
}
inline void ConditionObject::set_allocated_clinicalstatus(::patient::Category* clinicalstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete clinicalstatus_;
  }
  if (clinicalstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clinicalstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clinicalstatus, submessage_arena);
    }
    
  } else {
    
  }
  clinicalstatus_ = clinicalstatus;
  // @@protoc_insertion_point(field_set_allocated:patient.ConditionObject.clinicalStatus)
}

// .patient.Category code = 3;
inline bool ConditionObject::_internal_has_code() const {
  return this != internal_default_instance() && code_ != nullptr;
}
inline bool ConditionObject::has_code() const {
  return _internal_has_code();
}
inline void ConditionObject::clear_code() {
  if (GetArenaNoVirtual() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
}
inline const ::patient::Category& ConditionObject::_internal_code() const {
  const ::patient::Category* p = code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& ConditionObject::code() const {
  // @@protoc_insertion_point(field_get:patient.ConditionObject.code)
  return _internal_code();
}
inline ::patient::Category* ConditionObject::release_code() {
  // @@protoc_insertion_point(field_release:patient.ConditionObject.code)
  
  ::patient::Category* temp = code_;
  code_ = nullptr;
  return temp;
}
inline ::patient::Category* ConditionObject::_internal_mutable_code() {
  
  if (code_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    code_ = p;
  }
  return code_;
}
inline ::patient::Category* ConditionObject::mutable_code() {
  // @@protoc_insertion_point(field_mutable:patient.ConditionObject.code)
  return _internal_mutable_code();
}
inline void ConditionObject::set_allocated_code(::patient::Category* code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete code_;
  }
  if (code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:patient.ConditionObject.code)
}

// .patient.Reference encounter = 4;
inline bool ConditionObject::_internal_has_encounter() const {
  return this != internal_default_instance() && encounter_ != nullptr;
}
inline bool ConditionObject::has_encounter() const {
  return _internal_has_encounter();
}
inline void ConditionObject::clear_encounter() {
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
}
inline const ::patient::Reference& ConditionObject::_internal_encounter() const {
  const ::patient::Reference* p = encounter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& ConditionObject::encounter() const {
  // @@protoc_insertion_point(field_get:patient.ConditionObject.encounter)
  return _internal_encounter();
}
inline ::patient::Reference* ConditionObject::release_encounter() {
  // @@protoc_insertion_point(field_release:patient.ConditionObject.encounter)
  
  ::patient::Reference* temp = encounter_;
  encounter_ = nullptr;
  return temp;
}
inline ::patient::Reference* ConditionObject::_internal_mutable_encounter() {
  
  if (encounter_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    encounter_ = p;
  }
  return encounter_;
}
inline ::patient::Reference* ConditionObject::mutable_encounter() {
  // @@protoc_insertion_point(field_mutable:patient.ConditionObject.encounter)
  return _internal_mutable_encounter();
}
inline void ConditionObject::set_allocated_encounter(::patient::Reference* encounter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete encounter_;
  }
  if (encounter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      encounter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encounter, submessage_arena);
    }
    
  } else {
    
  }
  encounter_ = encounter;
  // @@protoc_insertion_point(field_set_allocated:patient.ConditionObject.encounter)
}

// string id = 5;
inline void ConditionObject::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConditionObject::id() const {
  // @@protoc_insertion_point(field_get:patient.ConditionObject.id)
  return _internal_id();
}
inline void ConditionObject::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:patient.ConditionObject.id)
}
inline std::string* ConditionObject::mutable_id() {
  // @@protoc_insertion_point(field_mutable:patient.ConditionObject.id)
  return _internal_mutable_id();
}
inline const std::string& ConditionObject::_internal_id() const {
  return id_.GetNoArena();
}
inline void ConditionObject::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConditionObject::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.ConditionObject.id)
}
inline void ConditionObject::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.ConditionObject.id)
}
inline void ConditionObject::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.ConditionObject.id)
}
inline std::string* ConditionObject::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConditionObject::release_id() {
  // @@protoc_insertion_point(field_release:patient.ConditionObject.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConditionObject::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:patient.ConditionObject.id)
}

// string onsetDateTime = 6;
inline void ConditionObject::clear_onsetdatetime() {
  onsetdatetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConditionObject::onsetdatetime() const {
  // @@protoc_insertion_point(field_get:patient.ConditionObject.onsetDateTime)
  return _internal_onsetdatetime();
}
inline void ConditionObject::set_onsetdatetime(const std::string& value) {
  _internal_set_onsetdatetime(value);
  // @@protoc_insertion_point(field_set:patient.ConditionObject.onsetDateTime)
}
inline std::string* ConditionObject::mutable_onsetdatetime() {
  // @@protoc_insertion_point(field_mutable:patient.ConditionObject.onsetDateTime)
  return _internal_mutable_onsetdatetime();
}
inline const std::string& ConditionObject::_internal_onsetdatetime() const {
  return onsetdatetime_.GetNoArena();
}
inline void ConditionObject::_internal_set_onsetdatetime(const std::string& value) {
  
  onsetdatetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConditionObject::set_onsetdatetime(std::string&& value) {
  
  onsetdatetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.ConditionObject.onsetDateTime)
}
inline void ConditionObject::set_onsetdatetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  onsetdatetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.ConditionObject.onsetDateTime)
}
inline void ConditionObject::set_onsetdatetime(const char* value, size_t size) {
  
  onsetdatetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.ConditionObject.onsetDateTime)
}
inline std::string* ConditionObject::_internal_mutable_onsetdatetime() {
  
  return onsetdatetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConditionObject::release_onsetdatetime() {
  // @@protoc_insertion_point(field_release:patient.ConditionObject.onsetDateTime)
  
  return onsetdatetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConditionObject::set_allocated_onsetdatetime(std::string* onsetdatetime) {
  if (onsetdatetime != nullptr) {
    
  } else {
    
  }
  onsetdatetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), onsetdatetime);
  // @@protoc_insertion_point(field_set_allocated:patient.ConditionObject.onsetDateTime)
}

// string recordedDate = 7;
inline void ConditionObject::clear_recordeddate() {
  recordeddate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConditionObject::recordeddate() const {
  // @@protoc_insertion_point(field_get:patient.ConditionObject.recordedDate)
  return _internal_recordeddate();
}
inline void ConditionObject::set_recordeddate(const std::string& value) {
  _internal_set_recordeddate(value);
  // @@protoc_insertion_point(field_set:patient.ConditionObject.recordedDate)
}
inline std::string* ConditionObject::mutable_recordeddate() {
  // @@protoc_insertion_point(field_mutable:patient.ConditionObject.recordedDate)
  return _internal_mutable_recordeddate();
}
inline const std::string& ConditionObject::_internal_recordeddate() const {
  return recordeddate_.GetNoArena();
}
inline void ConditionObject::_internal_set_recordeddate(const std::string& value) {
  
  recordeddate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConditionObject::set_recordeddate(std::string&& value) {
  
  recordeddate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.ConditionObject.recordedDate)
}
inline void ConditionObject::set_recordeddate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordeddate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.ConditionObject.recordedDate)
}
inline void ConditionObject::set_recordeddate(const char* value, size_t size) {
  
  recordeddate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.ConditionObject.recordedDate)
}
inline std::string* ConditionObject::_internal_mutable_recordeddate() {
  
  return recordeddate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConditionObject::release_recordeddate() {
  // @@protoc_insertion_point(field_release:patient.ConditionObject.recordedDate)
  
  return recordeddate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConditionObject::set_allocated_recordeddate(std::string* recordeddate) {
  if (recordeddate != nullptr) {
    
  } else {
    
  }
  recordeddate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordeddate);
  // @@protoc_insertion_point(field_set_allocated:patient.ConditionObject.recordedDate)
}

// .patient.ResourceType resourceType = 8;
inline void ConditionObject::clear_resourcetype() {
  resourcetype_ = 0;
}
inline ::patient::ResourceType ConditionObject::_internal_resourcetype() const {
  return static_cast< ::patient::ResourceType >(resourcetype_);
}
inline ::patient::ResourceType ConditionObject::resourcetype() const {
  // @@protoc_insertion_point(field_get:patient.ConditionObject.resourceType)
  return _internal_resourcetype();
}
inline void ConditionObject::_internal_set_resourcetype(::patient::ResourceType value) {
  
  resourcetype_ = value;
}
inline void ConditionObject::set_resourcetype(::patient::ResourceType value) {
  _internal_set_resourcetype(value);
  // @@protoc_insertion_point(field_set:patient.ConditionObject.resourceType)
}

// .patient.Reference subject = 9;
inline bool ConditionObject::_internal_has_subject() const {
  return this != internal_default_instance() && subject_ != nullptr;
}
inline bool ConditionObject::has_subject() const {
  return _internal_has_subject();
}
inline void ConditionObject::clear_subject() {
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
}
inline const ::patient::Reference& ConditionObject::_internal_subject() const {
  const ::patient::Reference* p = subject_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& ConditionObject::subject() const {
  // @@protoc_insertion_point(field_get:patient.ConditionObject.subject)
  return _internal_subject();
}
inline ::patient::Reference* ConditionObject::release_subject() {
  // @@protoc_insertion_point(field_release:patient.ConditionObject.subject)
  
  ::patient::Reference* temp = subject_;
  subject_ = nullptr;
  return temp;
}
inline ::patient::Reference* ConditionObject::_internal_mutable_subject() {
  
  if (subject_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    subject_ = p;
  }
  return subject_;
}
inline ::patient::Reference* ConditionObject::mutable_subject() {
  // @@protoc_insertion_point(field_mutable:patient.ConditionObject.subject)
  return _internal_mutable_subject();
}
inline void ConditionObject::set_allocated_subject(::patient::Reference* subject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete subject_;
  }
  if (subject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subject, submessage_arena);
    }
    
  } else {
    
  }
  subject_ = subject;
  // @@protoc_insertion_point(field_set_allocated:patient.ConditionObject.subject)
}

// .patient.Category verificationStatus = 10;
inline bool ConditionObject::_internal_has_verificationstatus() const {
  return this != internal_default_instance() && verificationstatus_ != nullptr;
}
inline bool ConditionObject::has_verificationstatus() const {
  return _internal_has_verificationstatus();
}
inline void ConditionObject::clear_verificationstatus() {
  if (GetArenaNoVirtual() == nullptr && verificationstatus_ != nullptr) {
    delete verificationstatus_;
  }
  verificationstatus_ = nullptr;
}
inline const ::patient::Category& ConditionObject::_internal_verificationstatus() const {
  const ::patient::Category* p = verificationstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& ConditionObject::verificationstatus() const {
  // @@protoc_insertion_point(field_get:patient.ConditionObject.verificationStatus)
  return _internal_verificationstatus();
}
inline ::patient::Category* ConditionObject::release_verificationstatus() {
  // @@protoc_insertion_point(field_release:patient.ConditionObject.verificationStatus)
  
  ::patient::Category* temp = verificationstatus_;
  verificationstatus_ = nullptr;
  return temp;
}
inline ::patient::Category* ConditionObject::_internal_mutable_verificationstatus() {
  
  if (verificationstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    verificationstatus_ = p;
  }
  return verificationstatus_;
}
inline ::patient::Category* ConditionObject::mutable_verificationstatus() {
  // @@protoc_insertion_point(field_mutable:patient.ConditionObject.verificationStatus)
  return _internal_mutable_verificationstatus();
}
inline void ConditionObject::set_allocated_verificationstatus(::patient::Category* verificationstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete verificationstatus_;
  }
  if (verificationstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      verificationstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verificationstatus, submessage_arena);
    }
    
  } else {
    
  }
  verificationstatus_ = verificationstatus;
  // @@protoc_insertion_point(field_set_allocated:patient.ConditionObject.verificationStatus)
}

// -------------------------------------------------------------------

// DiagnosticReportObject

// repeated .patient.Category category = 1;
inline int DiagnosticReportObject::_internal_category_size() const {
  return category_.size();
}
inline int DiagnosticReportObject::category_size() const {
  return _internal_category_size();
}
inline void DiagnosticReportObject::clear_category() {
  category_.Clear();
}
inline ::patient::Category* DiagnosticReportObject::mutable_category(int index) {
  // @@protoc_insertion_point(field_mutable:patient.DiagnosticReportObject.category)
  return category_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >*
DiagnosticReportObject::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:patient.DiagnosticReportObject.category)
  return &category_;
}
inline const ::patient::Category& DiagnosticReportObject::_internal_category(int index) const {
  return category_.Get(index);
}
inline const ::patient::Category& DiagnosticReportObject::category(int index) const {
  // @@protoc_insertion_point(field_get:patient.DiagnosticReportObject.category)
  return _internal_category(index);
}
inline ::patient::Category* DiagnosticReportObject::_internal_add_category() {
  return category_.Add();
}
inline ::patient::Category* DiagnosticReportObject::add_category() {
  // @@protoc_insertion_point(field_add:patient.DiagnosticReportObject.category)
  return _internal_add_category();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >&
DiagnosticReportObject::category() const {
  // @@protoc_insertion_point(field_list:patient.DiagnosticReportObject.category)
  return category_;
}

// .patient.Category code = 2;
inline bool DiagnosticReportObject::_internal_has_code() const {
  return this != internal_default_instance() && code_ != nullptr;
}
inline bool DiagnosticReportObject::has_code() const {
  return _internal_has_code();
}
inline void DiagnosticReportObject::clear_code() {
  if (GetArenaNoVirtual() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
}
inline const ::patient::Category& DiagnosticReportObject::_internal_code() const {
  const ::patient::Category* p = code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& DiagnosticReportObject::code() const {
  // @@protoc_insertion_point(field_get:patient.DiagnosticReportObject.code)
  return _internal_code();
}
inline ::patient::Category* DiagnosticReportObject::release_code() {
  // @@protoc_insertion_point(field_release:patient.DiagnosticReportObject.code)
  
  ::patient::Category* temp = code_;
  code_ = nullptr;
  return temp;
}
inline ::patient::Category* DiagnosticReportObject::_internal_mutable_code() {
  
  if (code_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    code_ = p;
  }
  return code_;
}
inline ::patient::Category* DiagnosticReportObject::mutable_code() {
  // @@protoc_insertion_point(field_mutable:patient.DiagnosticReportObject.code)
  return _internal_mutable_code();
}
inline void DiagnosticReportObject::set_allocated_code(::patient::Category* code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete code_;
  }
  if (code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:patient.DiagnosticReportObject.code)
}

// string effectiveDateTime = 3;
inline void DiagnosticReportObject::clear_effectivedatetime() {
  effectivedatetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosticReportObject::effectivedatetime() const {
  // @@protoc_insertion_point(field_get:patient.DiagnosticReportObject.effectiveDateTime)
  return _internal_effectivedatetime();
}
inline void DiagnosticReportObject::set_effectivedatetime(const std::string& value) {
  _internal_set_effectivedatetime(value);
  // @@protoc_insertion_point(field_set:patient.DiagnosticReportObject.effectiveDateTime)
}
inline std::string* DiagnosticReportObject::mutable_effectivedatetime() {
  // @@protoc_insertion_point(field_mutable:patient.DiagnosticReportObject.effectiveDateTime)
  return _internal_mutable_effectivedatetime();
}
inline const std::string& DiagnosticReportObject::_internal_effectivedatetime() const {
  return effectivedatetime_.GetNoArena();
}
inline void DiagnosticReportObject::_internal_set_effectivedatetime(const std::string& value) {
  
  effectivedatetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DiagnosticReportObject::set_effectivedatetime(std::string&& value) {
  
  effectivedatetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.DiagnosticReportObject.effectiveDateTime)
}
inline void DiagnosticReportObject::set_effectivedatetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  effectivedatetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.DiagnosticReportObject.effectiveDateTime)
}
inline void DiagnosticReportObject::set_effectivedatetime(const char* value, size_t size) {
  
  effectivedatetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.DiagnosticReportObject.effectiveDateTime)
}
inline std::string* DiagnosticReportObject::_internal_mutable_effectivedatetime() {
  
  return effectivedatetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosticReportObject::release_effectivedatetime() {
  // @@protoc_insertion_point(field_release:patient.DiagnosticReportObject.effectiveDateTime)
  
  return effectivedatetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosticReportObject::set_allocated_effectivedatetime(std::string* effectivedatetime) {
  if (effectivedatetime != nullptr) {
    
  } else {
    
  }
  effectivedatetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), effectivedatetime);
  // @@protoc_insertion_point(field_set_allocated:patient.DiagnosticReportObject.effectiveDateTime)
}

// .patient.Reference encounter = 4;
inline bool DiagnosticReportObject::_internal_has_encounter() const {
  return this != internal_default_instance() && encounter_ != nullptr;
}
inline bool DiagnosticReportObject::has_encounter() const {
  return _internal_has_encounter();
}
inline void DiagnosticReportObject::clear_encounter() {
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
}
inline const ::patient::Reference& DiagnosticReportObject::_internal_encounter() const {
  const ::patient::Reference* p = encounter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& DiagnosticReportObject::encounter() const {
  // @@protoc_insertion_point(field_get:patient.DiagnosticReportObject.encounter)
  return _internal_encounter();
}
inline ::patient::Reference* DiagnosticReportObject::release_encounter() {
  // @@protoc_insertion_point(field_release:patient.DiagnosticReportObject.encounter)
  
  ::patient::Reference* temp = encounter_;
  encounter_ = nullptr;
  return temp;
}
inline ::patient::Reference* DiagnosticReportObject::_internal_mutable_encounter() {
  
  if (encounter_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    encounter_ = p;
  }
  return encounter_;
}
inline ::patient::Reference* DiagnosticReportObject::mutable_encounter() {
  // @@protoc_insertion_point(field_mutable:patient.DiagnosticReportObject.encounter)
  return _internal_mutable_encounter();
}
inline void DiagnosticReportObject::set_allocated_encounter(::patient::Reference* encounter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete encounter_;
  }
  if (encounter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      encounter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encounter, submessage_arena);
    }
    
  } else {
    
  }
  encounter_ = encounter;
  // @@protoc_insertion_point(field_set_allocated:patient.DiagnosticReportObject.encounter)
}

// string id = 5;
inline void DiagnosticReportObject::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosticReportObject::id() const {
  // @@protoc_insertion_point(field_get:patient.DiagnosticReportObject.id)
  return _internal_id();
}
inline void DiagnosticReportObject::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:patient.DiagnosticReportObject.id)
}
inline std::string* DiagnosticReportObject::mutable_id() {
  // @@protoc_insertion_point(field_mutable:patient.DiagnosticReportObject.id)
  return _internal_mutable_id();
}
inline const std::string& DiagnosticReportObject::_internal_id() const {
  return id_.GetNoArena();
}
inline void DiagnosticReportObject::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DiagnosticReportObject::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.DiagnosticReportObject.id)
}
inline void DiagnosticReportObject::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.DiagnosticReportObject.id)
}
inline void DiagnosticReportObject::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.DiagnosticReportObject.id)
}
inline std::string* DiagnosticReportObject::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosticReportObject::release_id() {
  // @@protoc_insertion_point(field_release:patient.DiagnosticReportObject.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosticReportObject::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:patient.DiagnosticReportObject.id)
}

// string issued = 6;
inline void DiagnosticReportObject::clear_issued() {
  issued_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosticReportObject::issued() const {
  // @@protoc_insertion_point(field_get:patient.DiagnosticReportObject.issued)
  return _internal_issued();
}
inline void DiagnosticReportObject::set_issued(const std::string& value) {
  _internal_set_issued(value);
  // @@protoc_insertion_point(field_set:patient.DiagnosticReportObject.issued)
}
inline std::string* DiagnosticReportObject::mutable_issued() {
  // @@protoc_insertion_point(field_mutable:patient.DiagnosticReportObject.issued)
  return _internal_mutable_issued();
}
inline const std::string& DiagnosticReportObject::_internal_issued() const {
  return issued_.GetNoArena();
}
inline void DiagnosticReportObject::_internal_set_issued(const std::string& value) {
  
  issued_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DiagnosticReportObject::set_issued(std::string&& value) {
  
  issued_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.DiagnosticReportObject.issued)
}
inline void DiagnosticReportObject::set_issued(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  issued_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.DiagnosticReportObject.issued)
}
inline void DiagnosticReportObject::set_issued(const char* value, size_t size) {
  
  issued_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.DiagnosticReportObject.issued)
}
inline std::string* DiagnosticReportObject::_internal_mutable_issued() {
  
  return issued_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosticReportObject::release_issued() {
  // @@protoc_insertion_point(field_release:patient.DiagnosticReportObject.issued)
  
  return issued_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosticReportObject::set_allocated_issued(std::string* issued) {
  if (issued != nullptr) {
    
  } else {
    
  }
  issued_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), issued);
  // @@protoc_insertion_point(field_set_allocated:patient.DiagnosticReportObject.issued)
}

// .patient.ResourceType resourceType = 7;
inline void DiagnosticReportObject::clear_resourcetype() {
  resourcetype_ = 0;
}
inline ::patient::ResourceType DiagnosticReportObject::_internal_resourcetype() const {
  return static_cast< ::patient::ResourceType >(resourcetype_);
}
inline ::patient::ResourceType DiagnosticReportObject::resourcetype() const {
  // @@protoc_insertion_point(field_get:patient.DiagnosticReportObject.resourceType)
  return _internal_resourcetype();
}
inline void DiagnosticReportObject::_internal_set_resourcetype(::patient::ResourceType value) {
  
  resourcetype_ = value;
}
inline void DiagnosticReportObject::set_resourcetype(::patient::ResourceType value) {
  _internal_set_resourcetype(value);
  // @@protoc_insertion_point(field_set:patient.DiagnosticReportObject.resourceType)
}

// repeated .patient.Reference result = 8;
inline int DiagnosticReportObject::_internal_result_size() const {
  return result_.size();
}
inline int DiagnosticReportObject::result_size() const {
  return _internal_result_size();
}
inline void DiagnosticReportObject::clear_result() {
  result_.Clear();
}
inline ::patient::Reference* DiagnosticReportObject::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:patient.DiagnosticReportObject.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >*
DiagnosticReportObject::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:patient.DiagnosticReportObject.result)
  return &result_;
}
inline const ::patient::Reference& DiagnosticReportObject::_internal_result(int index) const {
  return result_.Get(index);
}
inline const ::patient::Reference& DiagnosticReportObject::result(int index) const {
  // @@protoc_insertion_point(field_get:patient.DiagnosticReportObject.result)
  return _internal_result(index);
}
inline ::patient::Reference* DiagnosticReportObject::_internal_add_result() {
  return result_.Add();
}
inline ::patient::Reference* DiagnosticReportObject::add_result() {
  // @@protoc_insertion_point(field_add:patient.DiagnosticReportObject.result)
  return _internal_add_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >&
DiagnosticReportObject::result() const {
  // @@protoc_insertion_point(field_list:patient.DiagnosticReportObject.result)
  return result_;
}

// .patient.Status status = 9;
inline void DiagnosticReportObject::clear_status() {
  status_ = 0;
}
inline ::patient::Status DiagnosticReportObject::_internal_status() const {
  return static_cast< ::patient::Status >(status_);
}
inline ::patient::Status DiagnosticReportObject::status() const {
  // @@protoc_insertion_point(field_get:patient.DiagnosticReportObject.status)
  return _internal_status();
}
inline void DiagnosticReportObject::_internal_set_status(::patient::Status value) {
  
  status_ = value;
}
inline void DiagnosticReportObject::set_status(::patient::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:patient.DiagnosticReportObject.status)
}

// .patient.Reference Subject = 10;
inline bool DiagnosticReportObject::_internal_has_subject() const {
  return this != internal_default_instance() && subject_ != nullptr;
}
inline bool DiagnosticReportObject::has_subject() const {
  return _internal_has_subject();
}
inline void DiagnosticReportObject::clear_subject() {
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
}
inline const ::patient::Reference& DiagnosticReportObject::_internal_subject() const {
  const ::patient::Reference* p = subject_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& DiagnosticReportObject::subject() const {
  // @@protoc_insertion_point(field_get:patient.DiagnosticReportObject.Subject)
  return _internal_subject();
}
inline ::patient::Reference* DiagnosticReportObject::release_subject() {
  // @@protoc_insertion_point(field_release:patient.DiagnosticReportObject.Subject)
  
  ::patient::Reference* temp = subject_;
  subject_ = nullptr;
  return temp;
}
inline ::patient::Reference* DiagnosticReportObject::_internal_mutable_subject() {
  
  if (subject_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    subject_ = p;
  }
  return subject_;
}
inline ::patient::Reference* DiagnosticReportObject::mutable_subject() {
  // @@protoc_insertion_point(field_mutable:patient.DiagnosticReportObject.Subject)
  return _internal_mutable_subject();
}
inline void DiagnosticReportObject::set_allocated_subject(::patient::Reference* subject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete subject_;
  }
  if (subject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subject, submessage_arena);
    }
    
  } else {
    
  }
  subject_ = subject;
  // @@protoc_insertion_point(field_set_allocated:patient.DiagnosticReportObject.Subject)
}

// -------------------------------------------------------------------

// EncounterObject

// .patient.Category class = 1;
inline bool EncounterObject::_internal_has_class_() const {
  return this != internal_default_instance() && class__ != nullptr;
}
inline bool EncounterObject::has_class_() const {
  return _internal_has_class_();
}
inline void EncounterObject::clear_class_() {
  if (GetArenaNoVirtual() == nullptr && class__ != nullptr) {
    delete class__;
  }
  class__ = nullptr;
}
inline const ::patient::Category& EncounterObject::_internal_class_() const {
  const ::patient::Category* p = class__;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& EncounterObject::class_() const {
  // @@protoc_insertion_point(field_get:patient.EncounterObject.class)
  return _internal_class_();
}
inline ::patient::Category* EncounterObject::release_class_() {
  // @@protoc_insertion_point(field_release:patient.EncounterObject.class)
  
  ::patient::Category* temp = class__;
  class__ = nullptr;
  return temp;
}
inline ::patient::Category* EncounterObject::_internal_mutable_class_() {
  
  if (class__ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    class__ = p;
  }
  return class__;
}
inline ::patient::Category* EncounterObject::mutable_class_() {
  // @@protoc_insertion_point(field_mutable:patient.EncounterObject.class)
  return _internal_mutable_class_();
}
inline void EncounterObject::set_allocated_class_(::patient::Category* class_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete class__;
  }
  if (class_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      class_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, class_, submessage_arena);
    }
    
  } else {
    
  }
  class__ = class_;
  // @@protoc_insertion_point(field_set_allocated:patient.EncounterObject.class)
}

// string id = 2;
inline void EncounterObject::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EncounterObject::id() const {
  // @@protoc_insertion_point(field_get:patient.EncounterObject.id)
  return _internal_id();
}
inline void EncounterObject::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:patient.EncounterObject.id)
}
inline std::string* EncounterObject::mutable_id() {
  // @@protoc_insertion_point(field_mutable:patient.EncounterObject.id)
  return _internal_mutable_id();
}
inline const std::string& EncounterObject::_internal_id() const {
  return id_.GetNoArena();
}
inline void EncounterObject::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EncounterObject::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.EncounterObject.id)
}
inline void EncounterObject::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.EncounterObject.id)
}
inline void EncounterObject::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.EncounterObject.id)
}
inline std::string* EncounterObject::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EncounterObject::release_id() {
  // @@protoc_insertion_point(field_release:patient.EncounterObject.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EncounterObject::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:patient.EncounterObject.id)
}

// repeated .patient.Participant participant = 3;
inline int EncounterObject::_internal_participant_size() const {
  return participant_.size();
}
inline int EncounterObject::participant_size() const {
  return _internal_participant_size();
}
inline void EncounterObject::clear_participant() {
  participant_.Clear();
}
inline ::patient::Participant* EncounterObject::mutable_participant(int index) {
  // @@protoc_insertion_point(field_mutable:patient.EncounterObject.participant)
  return participant_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Participant >*
EncounterObject::mutable_participant() {
  // @@protoc_insertion_point(field_mutable_list:patient.EncounterObject.participant)
  return &participant_;
}
inline const ::patient::Participant& EncounterObject::_internal_participant(int index) const {
  return participant_.Get(index);
}
inline const ::patient::Participant& EncounterObject::participant(int index) const {
  // @@protoc_insertion_point(field_get:patient.EncounterObject.participant)
  return _internal_participant(index);
}
inline ::patient::Participant* EncounterObject::_internal_add_participant() {
  return participant_.Add();
}
inline ::patient::Participant* EncounterObject::add_participant() {
  // @@protoc_insertion_point(field_add:patient.EncounterObject.participant)
  return _internal_add_participant();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Participant >&
EncounterObject::participant() const {
  // @@protoc_insertion_point(field_list:patient.EncounterObject.participant)
  return participant_;
}

// .patient.Period period = 4;
inline bool EncounterObject::_internal_has_period() const {
  return this != internal_default_instance() && period_ != nullptr;
}
inline bool EncounterObject::has_period() const {
  return _internal_has_period();
}
inline void EncounterObject::clear_period() {
  if (GetArenaNoVirtual() == nullptr && period_ != nullptr) {
    delete period_;
  }
  period_ = nullptr;
}
inline const ::patient::Period& EncounterObject::_internal_period() const {
  const ::patient::Period* p = period_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Period*>(
      &::patient::_Period_default_instance_);
}
inline const ::patient::Period& EncounterObject::period() const {
  // @@protoc_insertion_point(field_get:patient.EncounterObject.period)
  return _internal_period();
}
inline ::patient::Period* EncounterObject::release_period() {
  // @@protoc_insertion_point(field_release:patient.EncounterObject.period)
  
  ::patient::Period* temp = period_;
  period_ = nullptr;
  return temp;
}
inline ::patient::Period* EncounterObject::_internal_mutable_period() {
  
  if (period_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Period>(GetArenaNoVirtual());
    period_ = p;
  }
  return period_;
}
inline ::patient::Period* EncounterObject::mutable_period() {
  // @@protoc_insertion_point(field_mutable:patient.EncounterObject.period)
  return _internal_mutable_period();
}
inline void EncounterObject::set_allocated_period(::patient::Period* period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete period_;
  }
  if (period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, period, submessage_arena);
    }
    
  } else {
    
  }
  period_ = period;
  // @@protoc_insertion_point(field_set_allocated:patient.EncounterObject.period)
}

// repeated .patient.Category reasonCode = 5;
inline int EncounterObject::_internal_reasoncode_size() const {
  return reasoncode_.size();
}
inline int EncounterObject::reasoncode_size() const {
  return _internal_reasoncode_size();
}
inline void EncounterObject::clear_reasoncode() {
  reasoncode_.Clear();
}
inline ::patient::Category* EncounterObject::mutable_reasoncode(int index) {
  // @@protoc_insertion_point(field_mutable:patient.EncounterObject.reasonCode)
  return reasoncode_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >*
EncounterObject::mutable_reasoncode() {
  // @@protoc_insertion_point(field_mutable_list:patient.EncounterObject.reasonCode)
  return &reasoncode_;
}
inline const ::patient::Category& EncounterObject::_internal_reasoncode(int index) const {
  return reasoncode_.Get(index);
}
inline const ::patient::Category& EncounterObject::reasoncode(int index) const {
  // @@protoc_insertion_point(field_get:patient.EncounterObject.reasonCode)
  return _internal_reasoncode(index);
}
inline ::patient::Category* EncounterObject::_internal_add_reasoncode() {
  return reasoncode_.Add();
}
inline ::patient::Category* EncounterObject::add_reasoncode() {
  // @@protoc_insertion_point(field_add:patient.EncounterObject.reasonCode)
  return _internal_add_reasoncode();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >&
EncounterObject::reasoncode() const {
  // @@protoc_insertion_point(field_list:patient.EncounterObject.reasonCode)
  return reasoncode_;
}

// .patient.ResourceType resourceType = 6;
inline void EncounterObject::clear_resourcetype() {
  resourcetype_ = 0;
}
inline ::patient::ResourceType EncounterObject::_internal_resourcetype() const {
  return static_cast< ::patient::ResourceType >(resourcetype_);
}
inline ::patient::ResourceType EncounterObject::resourcetype() const {
  // @@protoc_insertion_point(field_get:patient.EncounterObject.resourceType)
  return _internal_resourcetype();
}
inline void EncounterObject::_internal_set_resourcetype(::patient::ResourceType value) {
  
  resourcetype_ = value;
}
inline void EncounterObject::set_resourcetype(::patient::ResourceType value) {
  _internal_set_resourcetype(value);
  // @@protoc_insertion_point(field_set:patient.EncounterObject.resourceType)
}

// .patient.Reference serviceProvider = 7;
inline bool EncounterObject::_internal_has_serviceprovider() const {
  return this != internal_default_instance() && serviceprovider_ != nullptr;
}
inline bool EncounterObject::has_serviceprovider() const {
  return _internal_has_serviceprovider();
}
inline void EncounterObject::clear_serviceprovider() {
  if (GetArenaNoVirtual() == nullptr && serviceprovider_ != nullptr) {
    delete serviceprovider_;
  }
  serviceprovider_ = nullptr;
}
inline const ::patient::Reference& EncounterObject::_internal_serviceprovider() const {
  const ::patient::Reference* p = serviceprovider_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& EncounterObject::serviceprovider() const {
  // @@protoc_insertion_point(field_get:patient.EncounterObject.serviceProvider)
  return _internal_serviceprovider();
}
inline ::patient::Reference* EncounterObject::release_serviceprovider() {
  // @@protoc_insertion_point(field_release:patient.EncounterObject.serviceProvider)
  
  ::patient::Reference* temp = serviceprovider_;
  serviceprovider_ = nullptr;
  return temp;
}
inline ::patient::Reference* EncounterObject::_internal_mutable_serviceprovider() {
  
  if (serviceprovider_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    serviceprovider_ = p;
  }
  return serviceprovider_;
}
inline ::patient::Reference* EncounterObject::mutable_serviceprovider() {
  // @@protoc_insertion_point(field_mutable:patient.EncounterObject.serviceProvider)
  return _internal_mutable_serviceprovider();
}
inline void EncounterObject::set_allocated_serviceprovider(::patient::Reference* serviceprovider) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete serviceprovider_;
  }
  if (serviceprovider) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      serviceprovider = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, serviceprovider, submessage_arena);
    }
    
  } else {
    
  }
  serviceprovider_ = serviceprovider;
  // @@protoc_insertion_point(field_set_allocated:patient.EncounterObject.serviceProvider)
}

// .patient.Status status = 8;
inline void EncounterObject::clear_status() {
  status_ = 0;
}
inline ::patient::Status EncounterObject::_internal_status() const {
  return static_cast< ::patient::Status >(status_);
}
inline ::patient::Status EncounterObject::status() const {
  // @@protoc_insertion_point(field_get:patient.EncounterObject.status)
  return _internal_status();
}
inline void EncounterObject::_internal_set_status(::patient::Status value) {
  
  status_ = value;
}
inline void EncounterObject::set_status(::patient::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:patient.EncounterObject.status)
}

// .patient.Reference subject = 9;
inline bool EncounterObject::_internal_has_subject() const {
  return this != internal_default_instance() && subject_ != nullptr;
}
inline bool EncounterObject::has_subject() const {
  return _internal_has_subject();
}
inline void EncounterObject::clear_subject() {
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
}
inline const ::patient::Reference& EncounterObject::_internal_subject() const {
  const ::patient::Reference* p = subject_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& EncounterObject::subject() const {
  // @@protoc_insertion_point(field_get:patient.EncounterObject.subject)
  return _internal_subject();
}
inline ::patient::Reference* EncounterObject::release_subject() {
  // @@protoc_insertion_point(field_release:patient.EncounterObject.subject)
  
  ::patient::Reference* temp = subject_;
  subject_ = nullptr;
  return temp;
}
inline ::patient::Reference* EncounterObject::_internal_mutable_subject() {
  
  if (subject_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    subject_ = p;
  }
  return subject_;
}
inline ::patient::Reference* EncounterObject::mutable_subject() {
  // @@protoc_insertion_point(field_mutable:patient.EncounterObject.subject)
  return _internal_mutable_subject();
}
inline void EncounterObject::set_allocated_subject(::patient::Reference* subject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete subject_;
  }
  if (subject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subject, submessage_arena);
    }
    
  } else {
    
  }
  subject_ = subject;
  // @@protoc_insertion_point(field_set_allocated:patient.EncounterObject.subject)
}

// repeated .patient.Category type = 10;
inline int EncounterObject::_internal_type_size() const {
  return type_.size();
}
inline int EncounterObject::type_size() const {
  return _internal_type_size();
}
inline void EncounterObject::clear_type() {
  type_.Clear();
}
inline ::patient::Category* EncounterObject::mutable_type(int index) {
  // @@protoc_insertion_point(field_mutable:patient.EncounterObject.type)
  return type_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >*
EncounterObject::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:patient.EncounterObject.type)
  return &type_;
}
inline const ::patient::Category& EncounterObject::_internal_type(int index) const {
  return type_.Get(index);
}
inline const ::patient::Category& EncounterObject::type(int index) const {
  // @@protoc_insertion_point(field_get:patient.EncounterObject.type)
  return _internal_type(index);
}
inline ::patient::Category* EncounterObject::_internal_add_type() {
  return type_.Add();
}
inline ::patient::Category* EncounterObject::add_type() {
  // @@protoc_insertion_point(field_add:patient.EncounterObject.type)
  return _internal_add_type();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >&
EncounterObject::type() const {
  // @@protoc_insertion_point(field_list:patient.EncounterObject.type)
  return type_;
}

// -------------------------------------------------------------------

// ExplanationOfBenefitObject

// .patient.Period billablePeriod = 1;
inline bool ExplanationOfBenefitObject::_internal_has_billableperiod() const {
  return this != internal_default_instance() && billableperiod_ != nullptr;
}
inline bool ExplanationOfBenefitObject::has_billableperiod() const {
  return _internal_has_billableperiod();
}
inline void ExplanationOfBenefitObject::clear_billableperiod() {
  if (GetArenaNoVirtual() == nullptr && billableperiod_ != nullptr) {
    delete billableperiod_;
  }
  billableperiod_ = nullptr;
}
inline const ::patient::Period& ExplanationOfBenefitObject::_internal_billableperiod() const {
  const ::patient::Period* p = billableperiod_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Period*>(
      &::patient::_Period_default_instance_);
}
inline const ::patient::Period& ExplanationOfBenefitObject::billableperiod() const {
  // @@protoc_insertion_point(field_get:patient.ExplanationOfBenefitObject.billablePeriod)
  return _internal_billableperiod();
}
inline ::patient::Period* ExplanationOfBenefitObject::release_billableperiod() {
  // @@protoc_insertion_point(field_release:patient.ExplanationOfBenefitObject.billablePeriod)
  
  ::patient::Period* temp = billableperiod_;
  billableperiod_ = nullptr;
  return temp;
}
inline ::patient::Period* ExplanationOfBenefitObject::_internal_mutable_billableperiod() {
  
  if (billableperiod_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Period>(GetArenaNoVirtual());
    billableperiod_ = p;
  }
  return billableperiod_;
}
inline ::patient::Period* ExplanationOfBenefitObject::mutable_billableperiod() {
  // @@protoc_insertion_point(field_mutable:patient.ExplanationOfBenefitObject.billablePeriod)
  return _internal_mutable_billableperiod();
}
inline void ExplanationOfBenefitObject::set_allocated_billableperiod(::patient::Period* billableperiod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete billableperiod_;
  }
  if (billableperiod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      billableperiod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, billableperiod, submessage_arena);
    }
    
  } else {
    
  }
  billableperiod_ = billableperiod;
  // @@protoc_insertion_point(field_set_allocated:patient.ExplanationOfBenefitObject.billablePeriod)
}

// repeated .patient.CareTeam careteam = 2;
inline int ExplanationOfBenefitObject::_internal_careteam_size() const {
  return careteam_.size();
}
inline int ExplanationOfBenefitObject::careteam_size() const {
  return _internal_careteam_size();
}
inline void ExplanationOfBenefitObject::clear_careteam() {
  careteam_.Clear();
}
inline ::patient::CareTeam* ExplanationOfBenefitObject::mutable_careteam(int index) {
  // @@protoc_insertion_point(field_mutable:patient.ExplanationOfBenefitObject.careteam)
  return careteam_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::CareTeam >*
ExplanationOfBenefitObject::mutable_careteam() {
  // @@protoc_insertion_point(field_mutable_list:patient.ExplanationOfBenefitObject.careteam)
  return &careteam_;
}
inline const ::patient::CareTeam& ExplanationOfBenefitObject::_internal_careteam(int index) const {
  return careteam_.Get(index);
}
inline const ::patient::CareTeam& ExplanationOfBenefitObject::careteam(int index) const {
  // @@protoc_insertion_point(field_get:patient.ExplanationOfBenefitObject.careteam)
  return _internal_careteam(index);
}
inline ::patient::CareTeam* ExplanationOfBenefitObject::_internal_add_careteam() {
  return careteam_.Add();
}
inline ::patient::CareTeam* ExplanationOfBenefitObject::add_careteam() {
  // @@protoc_insertion_point(field_add:patient.ExplanationOfBenefitObject.careteam)
  return _internal_add_careteam();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::CareTeam >&
ExplanationOfBenefitObject::careteam() const {
  // @@protoc_insertion_point(field_list:patient.ExplanationOfBenefitObject.careteam)
  return careteam_;
}

// .patient.Reference claim = 3;
inline bool ExplanationOfBenefitObject::_internal_has_claim() const {
  return this != internal_default_instance() && claim_ != nullptr;
}
inline bool ExplanationOfBenefitObject::has_claim() const {
  return _internal_has_claim();
}
inline void ExplanationOfBenefitObject::clear_claim() {
  if (GetArenaNoVirtual() == nullptr && claim_ != nullptr) {
    delete claim_;
  }
  claim_ = nullptr;
}
inline const ::patient::Reference& ExplanationOfBenefitObject::_internal_claim() const {
  const ::patient::Reference* p = claim_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& ExplanationOfBenefitObject::claim() const {
  // @@protoc_insertion_point(field_get:patient.ExplanationOfBenefitObject.claim)
  return _internal_claim();
}
inline ::patient::Reference* ExplanationOfBenefitObject::release_claim() {
  // @@protoc_insertion_point(field_release:patient.ExplanationOfBenefitObject.claim)
  
  ::patient::Reference* temp = claim_;
  claim_ = nullptr;
  return temp;
}
inline ::patient::Reference* ExplanationOfBenefitObject::_internal_mutable_claim() {
  
  if (claim_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    claim_ = p;
  }
  return claim_;
}
inline ::patient::Reference* ExplanationOfBenefitObject::mutable_claim() {
  // @@protoc_insertion_point(field_mutable:patient.ExplanationOfBenefitObject.claim)
  return _internal_mutable_claim();
}
inline void ExplanationOfBenefitObject::set_allocated_claim(::patient::Reference* claim) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete claim_;
  }
  if (claim) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      claim = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, claim, submessage_arena);
    }
    
  } else {
    
  }
  claim_ = claim;
  // @@protoc_insertion_point(field_set_allocated:patient.ExplanationOfBenefitObject.claim)
}

// repeated .patient.Contained contained = 4;
inline int ExplanationOfBenefitObject::_internal_contained_size() const {
  return contained_.size();
}
inline int ExplanationOfBenefitObject::contained_size() const {
  return _internal_contained_size();
}
inline void ExplanationOfBenefitObject::clear_contained() {
  contained_.Clear();
}
inline ::patient::Contained* ExplanationOfBenefitObject::mutable_contained(int index) {
  // @@protoc_insertion_point(field_mutable:patient.ExplanationOfBenefitObject.contained)
  return contained_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Contained >*
ExplanationOfBenefitObject::mutable_contained() {
  // @@protoc_insertion_point(field_mutable_list:patient.ExplanationOfBenefitObject.contained)
  return &contained_;
}
inline const ::patient::Contained& ExplanationOfBenefitObject::_internal_contained(int index) const {
  return contained_.Get(index);
}
inline const ::patient::Contained& ExplanationOfBenefitObject::contained(int index) const {
  // @@protoc_insertion_point(field_get:patient.ExplanationOfBenefitObject.contained)
  return _internal_contained(index);
}
inline ::patient::Contained* ExplanationOfBenefitObject::_internal_add_contained() {
  return contained_.Add();
}
inline ::patient::Contained* ExplanationOfBenefitObject::add_contained() {
  // @@protoc_insertion_point(field_add:patient.ExplanationOfBenefitObject.contained)
  return _internal_add_contained();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Contained >&
ExplanationOfBenefitObject::contained() const {
  // @@protoc_insertion_point(field_list:patient.ExplanationOfBenefitObject.contained)
  return contained_;
}

// string created = 5;
inline void ExplanationOfBenefitObject::clear_created() {
  created_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExplanationOfBenefitObject::created() const {
  // @@protoc_insertion_point(field_get:patient.ExplanationOfBenefitObject.created)
  return _internal_created();
}
inline void ExplanationOfBenefitObject::set_created(const std::string& value) {
  _internal_set_created(value);
  // @@protoc_insertion_point(field_set:patient.ExplanationOfBenefitObject.created)
}
inline std::string* ExplanationOfBenefitObject::mutable_created() {
  // @@protoc_insertion_point(field_mutable:patient.ExplanationOfBenefitObject.created)
  return _internal_mutable_created();
}
inline const std::string& ExplanationOfBenefitObject::_internal_created() const {
  return created_.GetNoArena();
}
inline void ExplanationOfBenefitObject::_internal_set_created(const std::string& value) {
  
  created_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExplanationOfBenefitObject::set_created(std::string&& value) {
  
  created_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.ExplanationOfBenefitObject.created)
}
inline void ExplanationOfBenefitObject::set_created(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  created_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.ExplanationOfBenefitObject.created)
}
inline void ExplanationOfBenefitObject::set_created(const char* value, size_t size) {
  
  created_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.ExplanationOfBenefitObject.created)
}
inline std::string* ExplanationOfBenefitObject::_internal_mutable_created() {
  
  return created_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExplanationOfBenefitObject::release_created() {
  // @@protoc_insertion_point(field_release:patient.ExplanationOfBenefitObject.created)
  
  return created_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExplanationOfBenefitObject::set_allocated_created(std::string* created) {
  if (created != nullptr) {
    
  } else {
    
  }
  created_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), created);
  // @@protoc_insertion_point(field_set_allocated:patient.ExplanationOfBenefitObject.created)
}

// repeated .patient.Diagnosis diagnosis = 6;
inline int ExplanationOfBenefitObject::_internal_diagnosis_size() const {
  return diagnosis_.size();
}
inline int ExplanationOfBenefitObject::diagnosis_size() const {
  return _internal_diagnosis_size();
}
inline void ExplanationOfBenefitObject::clear_diagnosis() {
  diagnosis_.Clear();
}
inline ::patient::Diagnosis* ExplanationOfBenefitObject::mutable_diagnosis(int index) {
  // @@protoc_insertion_point(field_mutable:patient.ExplanationOfBenefitObject.diagnosis)
  return diagnosis_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Diagnosis >*
ExplanationOfBenefitObject::mutable_diagnosis() {
  // @@protoc_insertion_point(field_mutable_list:patient.ExplanationOfBenefitObject.diagnosis)
  return &diagnosis_;
}
inline const ::patient::Diagnosis& ExplanationOfBenefitObject::_internal_diagnosis(int index) const {
  return diagnosis_.Get(index);
}
inline const ::patient::Diagnosis& ExplanationOfBenefitObject::diagnosis(int index) const {
  // @@protoc_insertion_point(field_get:patient.ExplanationOfBenefitObject.diagnosis)
  return _internal_diagnosis(index);
}
inline ::patient::Diagnosis* ExplanationOfBenefitObject::_internal_add_diagnosis() {
  return diagnosis_.Add();
}
inline ::patient::Diagnosis* ExplanationOfBenefitObject::add_diagnosis() {
  // @@protoc_insertion_point(field_add:patient.ExplanationOfBenefitObject.diagnosis)
  return _internal_add_diagnosis();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Diagnosis >&
ExplanationOfBenefitObject::diagnosis() const {
  // @@protoc_insertion_point(field_list:patient.ExplanationOfBenefitObject.diagnosis)
  return diagnosis_;
}

// string id = 7;
inline void ExplanationOfBenefitObject::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExplanationOfBenefitObject::id() const {
  // @@protoc_insertion_point(field_get:patient.ExplanationOfBenefitObject.id)
  return _internal_id();
}
inline void ExplanationOfBenefitObject::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:patient.ExplanationOfBenefitObject.id)
}
inline std::string* ExplanationOfBenefitObject::mutable_id() {
  // @@protoc_insertion_point(field_mutable:patient.ExplanationOfBenefitObject.id)
  return _internal_mutable_id();
}
inline const std::string& ExplanationOfBenefitObject::_internal_id() const {
  return id_.GetNoArena();
}
inline void ExplanationOfBenefitObject::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExplanationOfBenefitObject::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.ExplanationOfBenefitObject.id)
}
inline void ExplanationOfBenefitObject::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.ExplanationOfBenefitObject.id)
}
inline void ExplanationOfBenefitObject::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.ExplanationOfBenefitObject.id)
}
inline std::string* ExplanationOfBenefitObject::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExplanationOfBenefitObject::release_id() {
  // @@protoc_insertion_point(field_release:patient.ExplanationOfBenefitObject.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExplanationOfBenefitObject::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:patient.ExplanationOfBenefitObject.id)
}

// repeated .patient.Identifier identifier = 8;
inline int ExplanationOfBenefitObject::_internal_identifier_size() const {
  return identifier_.size();
}
inline int ExplanationOfBenefitObject::identifier_size() const {
  return _internal_identifier_size();
}
inline void ExplanationOfBenefitObject::clear_identifier() {
  identifier_.Clear();
}
inline ::patient::Identifier* ExplanationOfBenefitObject::mutable_identifier(int index) {
  // @@protoc_insertion_point(field_mutable:patient.ExplanationOfBenefitObject.identifier)
  return identifier_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Identifier >*
ExplanationOfBenefitObject::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable_list:patient.ExplanationOfBenefitObject.identifier)
  return &identifier_;
}
inline const ::patient::Identifier& ExplanationOfBenefitObject::_internal_identifier(int index) const {
  return identifier_.Get(index);
}
inline const ::patient::Identifier& ExplanationOfBenefitObject::identifier(int index) const {
  // @@protoc_insertion_point(field_get:patient.ExplanationOfBenefitObject.identifier)
  return _internal_identifier(index);
}
inline ::patient::Identifier* ExplanationOfBenefitObject::_internal_add_identifier() {
  return identifier_.Add();
}
inline ::patient::Identifier* ExplanationOfBenefitObject::add_identifier() {
  // @@protoc_insertion_point(field_add:patient.ExplanationOfBenefitObject.identifier)
  return _internal_add_identifier();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Identifier >&
ExplanationOfBenefitObject::identifier() const {
  // @@protoc_insertion_point(field_list:patient.ExplanationOfBenefitObject.identifier)
  return identifier_;
}

// repeated .patient.Insurance insurance = 9;
inline int ExplanationOfBenefitObject::_internal_insurance_size() const {
  return insurance_.size();
}
inline int ExplanationOfBenefitObject::insurance_size() const {
  return _internal_insurance_size();
}
inline void ExplanationOfBenefitObject::clear_insurance() {
  insurance_.Clear();
}
inline ::patient::Insurance* ExplanationOfBenefitObject::mutable_insurance(int index) {
  // @@protoc_insertion_point(field_mutable:patient.ExplanationOfBenefitObject.insurance)
  return insurance_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Insurance >*
ExplanationOfBenefitObject::mutable_insurance() {
  // @@protoc_insertion_point(field_mutable_list:patient.ExplanationOfBenefitObject.insurance)
  return &insurance_;
}
inline const ::patient::Insurance& ExplanationOfBenefitObject::_internal_insurance(int index) const {
  return insurance_.Get(index);
}
inline const ::patient::Insurance& ExplanationOfBenefitObject::insurance(int index) const {
  // @@protoc_insertion_point(field_get:patient.ExplanationOfBenefitObject.insurance)
  return _internal_insurance(index);
}
inline ::patient::Insurance* ExplanationOfBenefitObject::_internal_add_insurance() {
  return insurance_.Add();
}
inline ::patient::Insurance* ExplanationOfBenefitObject::add_insurance() {
  // @@protoc_insertion_point(field_add:patient.ExplanationOfBenefitObject.insurance)
  return _internal_add_insurance();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Insurance >&
ExplanationOfBenefitObject::insurance() const {
  // @@protoc_insertion_point(field_list:patient.ExplanationOfBenefitObject.insurance)
  return insurance_;
}

// .patient.Reference insurer = 10;
inline bool ExplanationOfBenefitObject::_internal_has_insurer() const {
  return this != internal_default_instance() && insurer_ != nullptr;
}
inline bool ExplanationOfBenefitObject::has_insurer() const {
  return _internal_has_insurer();
}
inline void ExplanationOfBenefitObject::clear_insurer() {
  if (GetArenaNoVirtual() == nullptr && insurer_ != nullptr) {
    delete insurer_;
  }
  insurer_ = nullptr;
}
inline const ::patient::Reference& ExplanationOfBenefitObject::_internal_insurer() const {
  const ::patient::Reference* p = insurer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& ExplanationOfBenefitObject::insurer() const {
  // @@protoc_insertion_point(field_get:patient.ExplanationOfBenefitObject.insurer)
  return _internal_insurer();
}
inline ::patient::Reference* ExplanationOfBenefitObject::release_insurer() {
  // @@protoc_insertion_point(field_release:patient.ExplanationOfBenefitObject.insurer)
  
  ::patient::Reference* temp = insurer_;
  insurer_ = nullptr;
  return temp;
}
inline ::patient::Reference* ExplanationOfBenefitObject::_internal_mutable_insurer() {
  
  if (insurer_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    insurer_ = p;
  }
  return insurer_;
}
inline ::patient::Reference* ExplanationOfBenefitObject::mutable_insurer() {
  // @@protoc_insertion_point(field_mutable:patient.ExplanationOfBenefitObject.insurer)
  return _internal_mutable_insurer();
}
inline void ExplanationOfBenefitObject::set_allocated_insurer(::patient::Reference* insurer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete insurer_;
  }
  if (insurer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      insurer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insurer, submessage_arena);
    }
    
  } else {
    
  }
  insurer_ = insurer;
  // @@protoc_insertion_point(field_set_allocated:patient.ExplanationOfBenefitObject.insurer)
}

// repeated .patient.Item item = 11;
inline int ExplanationOfBenefitObject::_internal_item_size() const {
  return item_.size();
}
inline int ExplanationOfBenefitObject::item_size() const {
  return _internal_item_size();
}
inline void ExplanationOfBenefitObject::clear_item() {
  item_.Clear();
}
inline ::patient::Item* ExplanationOfBenefitObject::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:patient.ExplanationOfBenefitObject.item)
  return item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Item >*
ExplanationOfBenefitObject::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:patient.ExplanationOfBenefitObject.item)
  return &item_;
}
inline const ::patient::Item& ExplanationOfBenefitObject::_internal_item(int index) const {
  return item_.Get(index);
}
inline const ::patient::Item& ExplanationOfBenefitObject::item(int index) const {
  // @@protoc_insertion_point(field_get:patient.ExplanationOfBenefitObject.item)
  return _internal_item(index);
}
inline ::patient::Item* ExplanationOfBenefitObject::_internal_add_item() {
  return item_.Add();
}
inline ::patient::Item* ExplanationOfBenefitObject::add_item() {
  // @@protoc_insertion_point(field_add:patient.ExplanationOfBenefitObject.item)
  return _internal_add_item();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Item >&
ExplanationOfBenefitObject::item() const {
  // @@protoc_insertion_point(field_list:patient.ExplanationOfBenefitObject.item)
  return item_;
}

// string outcome = 12;
inline void ExplanationOfBenefitObject::clear_outcome() {
  outcome_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExplanationOfBenefitObject::outcome() const {
  // @@protoc_insertion_point(field_get:patient.ExplanationOfBenefitObject.outcome)
  return _internal_outcome();
}
inline void ExplanationOfBenefitObject::set_outcome(const std::string& value) {
  _internal_set_outcome(value);
  // @@protoc_insertion_point(field_set:patient.ExplanationOfBenefitObject.outcome)
}
inline std::string* ExplanationOfBenefitObject::mutable_outcome() {
  // @@protoc_insertion_point(field_mutable:patient.ExplanationOfBenefitObject.outcome)
  return _internal_mutable_outcome();
}
inline const std::string& ExplanationOfBenefitObject::_internal_outcome() const {
  return outcome_.GetNoArena();
}
inline void ExplanationOfBenefitObject::_internal_set_outcome(const std::string& value) {
  
  outcome_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExplanationOfBenefitObject::set_outcome(std::string&& value) {
  
  outcome_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.ExplanationOfBenefitObject.outcome)
}
inline void ExplanationOfBenefitObject::set_outcome(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  outcome_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.ExplanationOfBenefitObject.outcome)
}
inline void ExplanationOfBenefitObject::set_outcome(const char* value, size_t size) {
  
  outcome_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.ExplanationOfBenefitObject.outcome)
}
inline std::string* ExplanationOfBenefitObject::_internal_mutable_outcome() {
  
  return outcome_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExplanationOfBenefitObject::release_outcome() {
  // @@protoc_insertion_point(field_release:patient.ExplanationOfBenefitObject.outcome)
  
  return outcome_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExplanationOfBenefitObject::set_allocated_outcome(std::string* outcome) {
  if (outcome != nullptr) {
    
  } else {
    
  }
  outcome_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outcome);
  // @@protoc_insertion_point(field_set_allocated:patient.ExplanationOfBenefitObject.outcome)
}

// .patient.Reference patient = 13;
inline bool ExplanationOfBenefitObject::_internal_has_patient() const {
  return this != internal_default_instance() && patient_ != nullptr;
}
inline bool ExplanationOfBenefitObject::has_patient() const {
  return _internal_has_patient();
}
inline void ExplanationOfBenefitObject::clear_patient() {
  if (GetArenaNoVirtual() == nullptr && patient_ != nullptr) {
    delete patient_;
  }
  patient_ = nullptr;
}
inline const ::patient::Reference& ExplanationOfBenefitObject::_internal_patient() const {
  const ::patient::Reference* p = patient_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& ExplanationOfBenefitObject::patient() const {
  // @@protoc_insertion_point(field_get:patient.ExplanationOfBenefitObject.patient)
  return _internal_patient();
}
inline ::patient::Reference* ExplanationOfBenefitObject::release_patient() {
  // @@protoc_insertion_point(field_release:patient.ExplanationOfBenefitObject.patient)
  
  ::patient::Reference* temp = patient_;
  patient_ = nullptr;
  return temp;
}
inline ::patient::Reference* ExplanationOfBenefitObject::_internal_mutable_patient() {
  
  if (patient_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    patient_ = p;
  }
  return patient_;
}
inline ::patient::Reference* ExplanationOfBenefitObject::mutable_patient() {
  // @@protoc_insertion_point(field_mutable:patient.ExplanationOfBenefitObject.patient)
  return _internal_mutable_patient();
}
inline void ExplanationOfBenefitObject::set_allocated_patient(::patient::Reference* patient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete patient_;
  }
  if (patient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      patient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patient, submessage_arena);
    }
    
  } else {
    
  }
  patient_ = patient;
  // @@protoc_insertion_point(field_set_allocated:patient.ExplanationOfBenefitObject.patient)
}

// .patient.Payment payment = 14;
inline bool ExplanationOfBenefitObject::_internal_has_payment() const {
  return this != internal_default_instance() && payment_ != nullptr;
}
inline bool ExplanationOfBenefitObject::has_payment() const {
  return _internal_has_payment();
}
inline void ExplanationOfBenefitObject::clear_payment() {
  if (GetArenaNoVirtual() == nullptr && payment_ != nullptr) {
    delete payment_;
  }
  payment_ = nullptr;
}
inline const ::patient::Payment& ExplanationOfBenefitObject::_internal_payment() const {
  const ::patient::Payment* p = payment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Payment*>(
      &::patient::_Payment_default_instance_);
}
inline const ::patient::Payment& ExplanationOfBenefitObject::payment() const {
  // @@protoc_insertion_point(field_get:patient.ExplanationOfBenefitObject.payment)
  return _internal_payment();
}
inline ::patient::Payment* ExplanationOfBenefitObject::release_payment() {
  // @@protoc_insertion_point(field_release:patient.ExplanationOfBenefitObject.payment)
  
  ::patient::Payment* temp = payment_;
  payment_ = nullptr;
  return temp;
}
inline ::patient::Payment* ExplanationOfBenefitObject::_internal_mutable_payment() {
  
  if (payment_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Payment>(GetArenaNoVirtual());
    payment_ = p;
  }
  return payment_;
}
inline ::patient::Payment* ExplanationOfBenefitObject::mutable_payment() {
  // @@protoc_insertion_point(field_mutable:patient.ExplanationOfBenefitObject.payment)
  return _internal_mutable_payment();
}
inline void ExplanationOfBenefitObject::set_allocated_payment(::patient::Payment* payment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete payment_;
  }
  if (payment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      payment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payment, submessage_arena);
    }
    
  } else {
    
  }
  payment_ = payment;
  // @@protoc_insertion_point(field_set_allocated:patient.ExplanationOfBenefitObject.payment)
}

// .patient.Reference provider = 15;
inline bool ExplanationOfBenefitObject::_internal_has_provider() const {
  return this != internal_default_instance() && provider_ != nullptr;
}
inline bool ExplanationOfBenefitObject::has_provider() const {
  return _internal_has_provider();
}
inline void ExplanationOfBenefitObject::clear_provider() {
  if (GetArenaNoVirtual() == nullptr && provider_ != nullptr) {
    delete provider_;
  }
  provider_ = nullptr;
}
inline const ::patient::Reference& ExplanationOfBenefitObject::_internal_provider() const {
  const ::patient::Reference* p = provider_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& ExplanationOfBenefitObject::provider() const {
  // @@protoc_insertion_point(field_get:patient.ExplanationOfBenefitObject.provider)
  return _internal_provider();
}
inline ::patient::Reference* ExplanationOfBenefitObject::release_provider() {
  // @@protoc_insertion_point(field_release:patient.ExplanationOfBenefitObject.provider)
  
  ::patient::Reference* temp = provider_;
  provider_ = nullptr;
  return temp;
}
inline ::patient::Reference* ExplanationOfBenefitObject::_internal_mutable_provider() {
  
  if (provider_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    provider_ = p;
  }
  return provider_;
}
inline ::patient::Reference* ExplanationOfBenefitObject::mutable_provider() {
  // @@protoc_insertion_point(field_mutable:patient.ExplanationOfBenefitObject.provider)
  return _internal_mutable_provider();
}
inline void ExplanationOfBenefitObject::set_allocated_provider(::patient::Reference* provider) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete provider_;
  }
  if (provider) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      provider = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, provider, submessage_arena);
    }
    
  } else {
    
  }
  provider_ = provider;
  // @@protoc_insertion_point(field_set_allocated:patient.ExplanationOfBenefitObject.provider)
}

// .patient.Reference referral = 16;
inline bool ExplanationOfBenefitObject::_internal_has_referral() const {
  return this != internal_default_instance() && referral_ != nullptr;
}
inline bool ExplanationOfBenefitObject::has_referral() const {
  return _internal_has_referral();
}
inline void ExplanationOfBenefitObject::clear_referral() {
  if (GetArenaNoVirtual() == nullptr && referral_ != nullptr) {
    delete referral_;
  }
  referral_ = nullptr;
}
inline const ::patient::Reference& ExplanationOfBenefitObject::_internal_referral() const {
  const ::patient::Reference* p = referral_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& ExplanationOfBenefitObject::referral() const {
  // @@protoc_insertion_point(field_get:patient.ExplanationOfBenefitObject.referral)
  return _internal_referral();
}
inline ::patient::Reference* ExplanationOfBenefitObject::release_referral() {
  // @@protoc_insertion_point(field_release:patient.ExplanationOfBenefitObject.referral)
  
  ::patient::Reference* temp = referral_;
  referral_ = nullptr;
  return temp;
}
inline ::patient::Reference* ExplanationOfBenefitObject::_internal_mutable_referral() {
  
  if (referral_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    referral_ = p;
  }
  return referral_;
}
inline ::patient::Reference* ExplanationOfBenefitObject::mutable_referral() {
  // @@protoc_insertion_point(field_mutable:patient.ExplanationOfBenefitObject.referral)
  return _internal_mutable_referral();
}
inline void ExplanationOfBenefitObject::set_allocated_referral(::patient::Reference* referral) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete referral_;
  }
  if (referral) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      referral = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, referral, submessage_arena);
    }
    
  } else {
    
  }
  referral_ = referral;
  // @@protoc_insertion_point(field_set_allocated:patient.ExplanationOfBenefitObject.referral)
}

// .patient.ResourceType resourceType = 17;
inline void ExplanationOfBenefitObject::clear_resourcetype() {
  resourcetype_ = 0;
}
inline ::patient::ResourceType ExplanationOfBenefitObject::_internal_resourcetype() const {
  return static_cast< ::patient::ResourceType >(resourcetype_);
}
inline ::patient::ResourceType ExplanationOfBenefitObject::resourcetype() const {
  // @@protoc_insertion_point(field_get:patient.ExplanationOfBenefitObject.resourceType)
  return _internal_resourcetype();
}
inline void ExplanationOfBenefitObject::_internal_set_resourcetype(::patient::ResourceType value) {
  
  resourcetype_ = value;
}
inline void ExplanationOfBenefitObject::set_resourcetype(::patient::ResourceType value) {
  _internal_set_resourcetype(value);
  // @@protoc_insertion_point(field_set:patient.ExplanationOfBenefitObject.resourceType)
}

// .patient.Status status = 18;
inline void ExplanationOfBenefitObject::clear_status() {
  status_ = 0;
}
inline ::patient::Status ExplanationOfBenefitObject::_internal_status() const {
  return static_cast< ::patient::Status >(status_);
}
inline ::patient::Status ExplanationOfBenefitObject::status() const {
  // @@protoc_insertion_point(field_get:patient.ExplanationOfBenefitObject.status)
  return _internal_status();
}
inline void ExplanationOfBenefitObject::_internal_set_status(::patient::Status value) {
  
  status_ = value;
}
inline void ExplanationOfBenefitObject::set_status(::patient::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:patient.ExplanationOfBenefitObject.status)
}

// repeated .patient.Total total = 19;
inline int ExplanationOfBenefitObject::_internal_total_size() const {
  return total_.size();
}
inline int ExplanationOfBenefitObject::total_size() const {
  return _internal_total_size();
}
inline void ExplanationOfBenefitObject::clear_total() {
  total_.Clear();
}
inline ::patient::Total* ExplanationOfBenefitObject::mutable_total(int index) {
  // @@protoc_insertion_point(field_mutable:patient.ExplanationOfBenefitObject.total)
  return total_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Total >*
ExplanationOfBenefitObject::mutable_total() {
  // @@protoc_insertion_point(field_mutable_list:patient.ExplanationOfBenefitObject.total)
  return &total_;
}
inline const ::patient::Total& ExplanationOfBenefitObject::_internal_total(int index) const {
  return total_.Get(index);
}
inline const ::patient::Total& ExplanationOfBenefitObject::total(int index) const {
  // @@protoc_insertion_point(field_get:patient.ExplanationOfBenefitObject.total)
  return _internal_total(index);
}
inline ::patient::Total* ExplanationOfBenefitObject::_internal_add_total() {
  return total_.Add();
}
inline ::patient::Total* ExplanationOfBenefitObject::add_total() {
  // @@protoc_insertion_point(field_add:patient.ExplanationOfBenefitObject.total)
  return _internal_add_total();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Total >&
ExplanationOfBenefitObject::total() const {
  // @@protoc_insertion_point(field_list:patient.ExplanationOfBenefitObject.total)
  return total_;
}

// .patient.Category type = 20;
inline bool ExplanationOfBenefitObject::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool ExplanationOfBenefitObject::has_type() const {
  return _internal_has_type();
}
inline void ExplanationOfBenefitObject::clear_type() {
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
inline const ::patient::Category& ExplanationOfBenefitObject::_internal_type() const {
  const ::patient::Category* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& ExplanationOfBenefitObject::type() const {
  // @@protoc_insertion_point(field_get:patient.ExplanationOfBenefitObject.type)
  return _internal_type();
}
inline ::patient::Category* ExplanationOfBenefitObject::release_type() {
  // @@protoc_insertion_point(field_release:patient.ExplanationOfBenefitObject.type)
  
  ::patient::Category* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::patient::Category* ExplanationOfBenefitObject::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::patient::Category* ExplanationOfBenefitObject::mutable_type() {
  // @@protoc_insertion_point(field_mutable:patient.ExplanationOfBenefitObject.type)
  return _internal_mutable_type();
}
inline void ExplanationOfBenefitObject::set_allocated_type(::patient::Category* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:patient.ExplanationOfBenefitObject.type)
}

// string use = 21;
inline void ExplanationOfBenefitObject::clear_use() {
  use_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExplanationOfBenefitObject::use() const {
  // @@protoc_insertion_point(field_get:patient.ExplanationOfBenefitObject.use)
  return _internal_use();
}
inline void ExplanationOfBenefitObject::set_use(const std::string& value) {
  _internal_set_use(value);
  // @@protoc_insertion_point(field_set:patient.ExplanationOfBenefitObject.use)
}
inline std::string* ExplanationOfBenefitObject::mutable_use() {
  // @@protoc_insertion_point(field_mutable:patient.ExplanationOfBenefitObject.use)
  return _internal_mutable_use();
}
inline const std::string& ExplanationOfBenefitObject::_internal_use() const {
  return use_.GetNoArena();
}
inline void ExplanationOfBenefitObject::_internal_set_use(const std::string& value) {
  
  use_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExplanationOfBenefitObject::set_use(std::string&& value) {
  
  use_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.ExplanationOfBenefitObject.use)
}
inline void ExplanationOfBenefitObject::set_use(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  use_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.ExplanationOfBenefitObject.use)
}
inline void ExplanationOfBenefitObject::set_use(const char* value, size_t size) {
  
  use_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.ExplanationOfBenefitObject.use)
}
inline std::string* ExplanationOfBenefitObject::_internal_mutable_use() {
  
  return use_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExplanationOfBenefitObject::release_use() {
  // @@protoc_insertion_point(field_release:patient.ExplanationOfBenefitObject.use)
  
  return use_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExplanationOfBenefitObject::set_allocated_use(std::string* use) {
  if (use != nullptr) {
    
  } else {
    
  }
  use_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), use);
  // @@protoc_insertion_point(field_set_allocated:patient.ExplanationOfBenefitObject.use)
}

// -------------------------------------------------------------------

// ImmunizationObject

// .patient.Reference encounter = 1;
inline bool ImmunizationObject::_internal_has_encounter() const {
  return this != internal_default_instance() && encounter_ != nullptr;
}
inline bool ImmunizationObject::has_encounter() const {
  return _internal_has_encounter();
}
inline void ImmunizationObject::clear_encounter() {
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
}
inline const ::patient::Reference& ImmunizationObject::_internal_encounter() const {
  const ::patient::Reference* p = encounter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& ImmunizationObject::encounter() const {
  // @@protoc_insertion_point(field_get:patient.ImmunizationObject.encounter)
  return _internal_encounter();
}
inline ::patient::Reference* ImmunizationObject::release_encounter() {
  // @@protoc_insertion_point(field_release:patient.ImmunizationObject.encounter)
  
  ::patient::Reference* temp = encounter_;
  encounter_ = nullptr;
  return temp;
}
inline ::patient::Reference* ImmunizationObject::_internal_mutable_encounter() {
  
  if (encounter_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    encounter_ = p;
  }
  return encounter_;
}
inline ::patient::Reference* ImmunizationObject::mutable_encounter() {
  // @@protoc_insertion_point(field_mutable:patient.ImmunizationObject.encounter)
  return _internal_mutable_encounter();
}
inline void ImmunizationObject::set_allocated_encounter(::patient::Reference* encounter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete encounter_;
  }
  if (encounter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      encounter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encounter, submessage_arena);
    }
    
  } else {
    
  }
  encounter_ = encounter;
  // @@protoc_insertion_point(field_set_allocated:patient.ImmunizationObject.encounter)
}

// string id = 2;
inline void ImmunizationObject::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ImmunizationObject::id() const {
  // @@protoc_insertion_point(field_get:patient.ImmunizationObject.id)
  return _internal_id();
}
inline void ImmunizationObject::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:patient.ImmunizationObject.id)
}
inline std::string* ImmunizationObject::mutable_id() {
  // @@protoc_insertion_point(field_mutable:patient.ImmunizationObject.id)
  return _internal_mutable_id();
}
inline const std::string& ImmunizationObject::_internal_id() const {
  return id_.GetNoArena();
}
inline void ImmunizationObject::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ImmunizationObject::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.ImmunizationObject.id)
}
inline void ImmunizationObject::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.ImmunizationObject.id)
}
inline void ImmunizationObject::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.ImmunizationObject.id)
}
inline std::string* ImmunizationObject::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImmunizationObject::release_id() {
  // @@protoc_insertion_point(field_release:patient.ImmunizationObject.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImmunizationObject::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:patient.ImmunizationObject.id)
}

// string occurenceDateTime = 3;
inline void ImmunizationObject::clear_occurencedatetime() {
  occurencedatetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ImmunizationObject::occurencedatetime() const {
  // @@protoc_insertion_point(field_get:patient.ImmunizationObject.occurenceDateTime)
  return _internal_occurencedatetime();
}
inline void ImmunizationObject::set_occurencedatetime(const std::string& value) {
  _internal_set_occurencedatetime(value);
  // @@protoc_insertion_point(field_set:patient.ImmunizationObject.occurenceDateTime)
}
inline std::string* ImmunizationObject::mutable_occurencedatetime() {
  // @@protoc_insertion_point(field_mutable:patient.ImmunizationObject.occurenceDateTime)
  return _internal_mutable_occurencedatetime();
}
inline const std::string& ImmunizationObject::_internal_occurencedatetime() const {
  return occurencedatetime_.GetNoArena();
}
inline void ImmunizationObject::_internal_set_occurencedatetime(const std::string& value) {
  
  occurencedatetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ImmunizationObject::set_occurencedatetime(std::string&& value) {
  
  occurencedatetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.ImmunizationObject.occurenceDateTime)
}
inline void ImmunizationObject::set_occurencedatetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  occurencedatetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.ImmunizationObject.occurenceDateTime)
}
inline void ImmunizationObject::set_occurencedatetime(const char* value, size_t size) {
  
  occurencedatetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.ImmunizationObject.occurenceDateTime)
}
inline std::string* ImmunizationObject::_internal_mutable_occurencedatetime() {
  
  return occurencedatetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImmunizationObject::release_occurencedatetime() {
  // @@protoc_insertion_point(field_release:patient.ImmunizationObject.occurenceDateTime)
  
  return occurencedatetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImmunizationObject::set_allocated_occurencedatetime(std::string* occurencedatetime) {
  if (occurencedatetime != nullptr) {
    
  } else {
    
  }
  occurencedatetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), occurencedatetime);
  // @@protoc_insertion_point(field_set_allocated:patient.ImmunizationObject.occurenceDateTime)
}

// .patient.Reference patient = 4;
inline bool ImmunizationObject::_internal_has_patient() const {
  return this != internal_default_instance() && patient_ != nullptr;
}
inline bool ImmunizationObject::has_patient() const {
  return _internal_has_patient();
}
inline void ImmunizationObject::clear_patient() {
  if (GetArenaNoVirtual() == nullptr && patient_ != nullptr) {
    delete patient_;
  }
  patient_ = nullptr;
}
inline const ::patient::Reference& ImmunizationObject::_internal_patient() const {
  const ::patient::Reference* p = patient_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& ImmunizationObject::patient() const {
  // @@protoc_insertion_point(field_get:patient.ImmunizationObject.patient)
  return _internal_patient();
}
inline ::patient::Reference* ImmunizationObject::release_patient() {
  // @@protoc_insertion_point(field_release:patient.ImmunizationObject.patient)
  
  ::patient::Reference* temp = patient_;
  patient_ = nullptr;
  return temp;
}
inline ::patient::Reference* ImmunizationObject::_internal_mutable_patient() {
  
  if (patient_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    patient_ = p;
  }
  return patient_;
}
inline ::patient::Reference* ImmunizationObject::mutable_patient() {
  // @@protoc_insertion_point(field_mutable:patient.ImmunizationObject.patient)
  return _internal_mutable_patient();
}
inline void ImmunizationObject::set_allocated_patient(::patient::Reference* patient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete patient_;
  }
  if (patient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      patient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patient, submessage_arena);
    }
    
  } else {
    
  }
  patient_ = patient;
  // @@protoc_insertion_point(field_set_allocated:patient.ImmunizationObject.patient)
}

// bool primarySource = 5;
inline void ImmunizationObject::clear_primarysource() {
  primarysource_ = false;
}
inline bool ImmunizationObject::_internal_primarysource() const {
  return primarysource_;
}
inline bool ImmunizationObject::primarysource() const {
  // @@protoc_insertion_point(field_get:patient.ImmunizationObject.primarySource)
  return _internal_primarysource();
}
inline void ImmunizationObject::_internal_set_primarysource(bool value) {
  
  primarysource_ = value;
}
inline void ImmunizationObject::set_primarysource(bool value) {
  _internal_set_primarysource(value);
  // @@protoc_insertion_point(field_set:patient.ImmunizationObject.primarySource)
}

// .patient.ResourceType resourceType = 6;
inline void ImmunizationObject::clear_resourcetype() {
  resourcetype_ = 0;
}
inline ::patient::ResourceType ImmunizationObject::_internal_resourcetype() const {
  return static_cast< ::patient::ResourceType >(resourcetype_);
}
inline ::patient::ResourceType ImmunizationObject::resourcetype() const {
  // @@protoc_insertion_point(field_get:patient.ImmunizationObject.resourceType)
  return _internal_resourcetype();
}
inline void ImmunizationObject::_internal_set_resourcetype(::patient::ResourceType value) {
  
  resourcetype_ = value;
}
inline void ImmunizationObject::set_resourcetype(::patient::ResourceType value) {
  _internal_set_resourcetype(value);
  // @@protoc_insertion_point(field_set:patient.ImmunizationObject.resourceType)
}

// .patient.Status status = 7;
inline void ImmunizationObject::clear_status() {
  status_ = 0;
}
inline ::patient::Status ImmunizationObject::_internal_status() const {
  return static_cast< ::patient::Status >(status_);
}
inline ::patient::Status ImmunizationObject::status() const {
  // @@protoc_insertion_point(field_get:patient.ImmunizationObject.status)
  return _internal_status();
}
inline void ImmunizationObject::_internal_set_status(::patient::Status value) {
  
  status_ = value;
}
inline void ImmunizationObject::set_status(::patient::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:patient.ImmunizationObject.status)
}

// .patient.Category vaccineCode = 8;
inline bool ImmunizationObject::_internal_has_vaccinecode() const {
  return this != internal_default_instance() && vaccinecode_ != nullptr;
}
inline bool ImmunizationObject::has_vaccinecode() const {
  return _internal_has_vaccinecode();
}
inline void ImmunizationObject::clear_vaccinecode() {
  if (GetArenaNoVirtual() == nullptr && vaccinecode_ != nullptr) {
    delete vaccinecode_;
  }
  vaccinecode_ = nullptr;
}
inline const ::patient::Category& ImmunizationObject::_internal_vaccinecode() const {
  const ::patient::Category* p = vaccinecode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& ImmunizationObject::vaccinecode() const {
  // @@protoc_insertion_point(field_get:patient.ImmunizationObject.vaccineCode)
  return _internal_vaccinecode();
}
inline ::patient::Category* ImmunizationObject::release_vaccinecode() {
  // @@protoc_insertion_point(field_release:patient.ImmunizationObject.vaccineCode)
  
  ::patient::Category* temp = vaccinecode_;
  vaccinecode_ = nullptr;
  return temp;
}
inline ::patient::Category* ImmunizationObject::_internal_mutable_vaccinecode() {
  
  if (vaccinecode_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    vaccinecode_ = p;
  }
  return vaccinecode_;
}
inline ::patient::Category* ImmunizationObject::mutable_vaccinecode() {
  // @@protoc_insertion_point(field_mutable:patient.ImmunizationObject.vaccineCode)
  return _internal_mutable_vaccinecode();
}
inline void ImmunizationObject::set_allocated_vaccinecode(::patient::Category* vaccinecode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vaccinecode_;
  }
  if (vaccinecode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vaccinecode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vaccinecode, submessage_arena);
    }
    
  } else {
    
  }
  vaccinecode_ = vaccinecode;
  // @@protoc_insertion_point(field_set_allocated:patient.ImmunizationObject.vaccineCode)
}

// -------------------------------------------------------------------

// MedicationRequestObject

// string authoredOn = 1;
inline void MedicationRequestObject::clear_authoredon() {
  authoredon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MedicationRequestObject::authoredon() const {
  // @@protoc_insertion_point(field_get:patient.MedicationRequestObject.authoredOn)
  return _internal_authoredon();
}
inline void MedicationRequestObject::set_authoredon(const std::string& value) {
  _internal_set_authoredon(value);
  // @@protoc_insertion_point(field_set:patient.MedicationRequestObject.authoredOn)
}
inline std::string* MedicationRequestObject::mutable_authoredon() {
  // @@protoc_insertion_point(field_mutable:patient.MedicationRequestObject.authoredOn)
  return _internal_mutable_authoredon();
}
inline const std::string& MedicationRequestObject::_internal_authoredon() const {
  return authoredon_.GetNoArena();
}
inline void MedicationRequestObject::_internal_set_authoredon(const std::string& value) {
  
  authoredon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MedicationRequestObject::set_authoredon(std::string&& value) {
  
  authoredon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.MedicationRequestObject.authoredOn)
}
inline void MedicationRequestObject::set_authoredon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  authoredon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.MedicationRequestObject.authoredOn)
}
inline void MedicationRequestObject::set_authoredon(const char* value, size_t size) {
  
  authoredon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.MedicationRequestObject.authoredOn)
}
inline std::string* MedicationRequestObject::_internal_mutable_authoredon() {
  
  return authoredon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MedicationRequestObject::release_authoredon() {
  // @@protoc_insertion_point(field_release:patient.MedicationRequestObject.authoredOn)
  
  return authoredon_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MedicationRequestObject::set_allocated_authoredon(std::string* authoredon) {
  if (authoredon != nullptr) {
    
  } else {
    
  }
  authoredon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authoredon);
  // @@protoc_insertion_point(field_set_allocated:patient.MedicationRequestObject.authoredOn)
}

// .patient.Reference encounter = 2;
inline bool MedicationRequestObject::_internal_has_encounter() const {
  return this != internal_default_instance() && encounter_ != nullptr;
}
inline bool MedicationRequestObject::has_encounter() const {
  return _internal_has_encounter();
}
inline void MedicationRequestObject::clear_encounter() {
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
}
inline const ::patient::Reference& MedicationRequestObject::_internal_encounter() const {
  const ::patient::Reference* p = encounter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& MedicationRequestObject::encounter() const {
  // @@protoc_insertion_point(field_get:patient.MedicationRequestObject.encounter)
  return _internal_encounter();
}
inline ::patient::Reference* MedicationRequestObject::release_encounter() {
  // @@protoc_insertion_point(field_release:patient.MedicationRequestObject.encounter)
  
  ::patient::Reference* temp = encounter_;
  encounter_ = nullptr;
  return temp;
}
inline ::patient::Reference* MedicationRequestObject::_internal_mutable_encounter() {
  
  if (encounter_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    encounter_ = p;
  }
  return encounter_;
}
inline ::patient::Reference* MedicationRequestObject::mutable_encounter() {
  // @@protoc_insertion_point(field_mutable:patient.MedicationRequestObject.encounter)
  return _internal_mutable_encounter();
}
inline void MedicationRequestObject::set_allocated_encounter(::patient::Reference* encounter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete encounter_;
  }
  if (encounter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      encounter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encounter, submessage_arena);
    }
    
  } else {
    
  }
  encounter_ = encounter;
  // @@protoc_insertion_point(field_set_allocated:patient.MedicationRequestObject.encounter)
}

// string id = 3;
inline void MedicationRequestObject::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MedicationRequestObject::id() const {
  // @@protoc_insertion_point(field_get:patient.MedicationRequestObject.id)
  return _internal_id();
}
inline void MedicationRequestObject::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:patient.MedicationRequestObject.id)
}
inline std::string* MedicationRequestObject::mutable_id() {
  // @@protoc_insertion_point(field_mutable:patient.MedicationRequestObject.id)
  return _internal_mutable_id();
}
inline const std::string& MedicationRequestObject::_internal_id() const {
  return id_.GetNoArena();
}
inline void MedicationRequestObject::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MedicationRequestObject::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.MedicationRequestObject.id)
}
inline void MedicationRequestObject::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.MedicationRequestObject.id)
}
inline void MedicationRequestObject::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.MedicationRequestObject.id)
}
inline std::string* MedicationRequestObject::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MedicationRequestObject::release_id() {
  // @@protoc_insertion_point(field_release:patient.MedicationRequestObject.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MedicationRequestObject::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:patient.MedicationRequestObject.id)
}

// string intent = 4;
inline void MedicationRequestObject::clear_intent() {
  intent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MedicationRequestObject::intent() const {
  // @@protoc_insertion_point(field_get:patient.MedicationRequestObject.intent)
  return _internal_intent();
}
inline void MedicationRequestObject::set_intent(const std::string& value) {
  _internal_set_intent(value);
  // @@protoc_insertion_point(field_set:patient.MedicationRequestObject.intent)
}
inline std::string* MedicationRequestObject::mutable_intent() {
  // @@protoc_insertion_point(field_mutable:patient.MedicationRequestObject.intent)
  return _internal_mutable_intent();
}
inline const std::string& MedicationRequestObject::_internal_intent() const {
  return intent_.GetNoArena();
}
inline void MedicationRequestObject::_internal_set_intent(const std::string& value) {
  
  intent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MedicationRequestObject::set_intent(std::string&& value) {
  
  intent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.MedicationRequestObject.intent)
}
inline void MedicationRequestObject::set_intent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  intent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.MedicationRequestObject.intent)
}
inline void MedicationRequestObject::set_intent(const char* value, size_t size) {
  
  intent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.MedicationRequestObject.intent)
}
inline std::string* MedicationRequestObject::_internal_mutable_intent() {
  
  return intent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MedicationRequestObject::release_intent() {
  // @@protoc_insertion_point(field_release:patient.MedicationRequestObject.intent)
  
  return intent_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MedicationRequestObject::set_allocated_intent(std::string* intent) {
  if (intent != nullptr) {
    
  } else {
    
  }
  intent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), intent);
  // @@protoc_insertion_point(field_set_allocated:patient.MedicationRequestObject.intent)
}

// .patient.Category medicationCodeableConcept = 5;
inline bool MedicationRequestObject::_internal_has_medicationcodeableconcept() const {
  return this != internal_default_instance() && medicationcodeableconcept_ != nullptr;
}
inline bool MedicationRequestObject::has_medicationcodeableconcept() const {
  return _internal_has_medicationcodeableconcept();
}
inline void MedicationRequestObject::clear_medicationcodeableconcept() {
  if (GetArenaNoVirtual() == nullptr && medicationcodeableconcept_ != nullptr) {
    delete medicationcodeableconcept_;
  }
  medicationcodeableconcept_ = nullptr;
}
inline const ::patient::Category& MedicationRequestObject::_internal_medicationcodeableconcept() const {
  const ::patient::Category* p = medicationcodeableconcept_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& MedicationRequestObject::medicationcodeableconcept() const {
  // @@protoc_insertion_point(field_get:patient.MedicationRequestObject.medicationCodeableConcept)
  return _internal_medicationcodeableconcept();
}
inline ::patient::Category* MedicationRequestObject::release_medicationcodeableconcept() {
  // @@protoc_insertion_point(field_release:patient.MedicationRequestObject.medicationCodeableConcept)
  
  ::patient::Category* temp = medicationcodeableconcept_;
  medicationcodeableconcept_ = nullptr;
  return temp;
}
inline ::patient::Category* MedicationRequestObject::_internal_mutable_medicationcodeableconcept() {
  
  if (medicationcodeableconcept_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    medicationcodeableconcept_ = p;
  }
  return medicationcodeableconcept_;
}
inline ::patient::Category* MedicationRequestObject::mutable_medicationcodeableconcept() {
  // @@protoc_insertion_point(field_mutable:patient.MedicationRequestObject.medicationCodeableConcept)
  return _internal_mutable_medicationcodeableconcept();
}
inline void MedicationRequestObject::set_allocated_medicationcodeableconcept(::patient::Category* medicationcodeableconcept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete medicationcodeableconcept_;
  }
  if (medicationcodeableconcept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      medicationcodeableconcept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, medicationcodeableconcept, submessage_arena);
    }
    
  } else {
    
  }
  medicationcodeableconcept_ = medicationcodeableconcept;
  // @@protoc_insertion_point(field_set_allocated:patient.MedicationRequestObject.medicationCodeableConcept)
}

// repeated .patient.Reference reasonReference = 6;
inline int MedicationRequestObject::_internal_reasonreference_size() const {
  return reasonreference_.size();
}
inline int MedicationRequestObject::reasonreference_size() const {
  return _internal_reasonreference_size();
}
inline void MedicationRequestObject::clear_reasonreference() {
  reasonreference_.Clear();
}
inline ::patient::Reference* MedicationRequestObject::mutable_reasonreference(int index) {
  // @@protoc_insertion_point(field_mutable:patient.MedicationRequestObject.reasonReference)
  return reasonreference_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >*
MedicationRequestObject::mutable_reasonreference() {
  // @@protoc_insertion_point(field_mutable_list:patient.MedicationRequestObject.reasonReference)
  return &reasonreference_;
}
inline const ::patient::Reference& MedicationRequestObject::_internal_reasonreference(int index) const {
  return reasonreference_.Get(index);
}
inline const ::patient::Reference& MedicationRequestObject::reasonreference(int index) const {
  // @@protoc_insertion_point(field_get:patient.MedicationRequestObject.reasonReference)
  return _internal_reasonreference(index);
}
inline ::patient::Reference* MedicationRequestObject::_internal_add_reasonreference() {
  return reasonreference_.Add();
}
inline ::patient::Reference* MedicationRequestObject::add_reasonreference() {
  // @@protoc_insertion_point(field_add:patient.MedicationRequestObject.reasonReference)
  return _internal_add_reasonreference();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >&
MedicationRequestObject::reasonreference() const {
  // @@protoc_insertion_point(field_list:patient.MedicationRequestObject.reasonReference)
  return reasonreference_;
}

// .patient.Reference requester = 7;
inline bool MedicationRequestObject::_internal_has_requester() const {
  return this != internal_default_instance() && requester_ != nullptr;
}
inline bool MedicationRequestObject::has_requester() const {
  return _internal_has_requester();
}
inline void MedicationRequestObject::clear_requester() {
  if (GetArenaNoVirtual() == nullptr && requester_ != nullptr) {
    delete requester_;
  }
  requester_ = nullptr;
}
inline const ::patient::Reference& MedicationRequestObject::_internal_requester() const {
  const ::patient::Reference* p = requester_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& MedicationRequestObject::requester() const {
  // @@protoc_insertion_point(field_get:patient.MedicationRequestObject.requester)
  return _internal_requester();
}
inline ::patient::Reference* MedicationRequestObject::release_requester() {
  // @@protoc_insertion_point(field_release:patient.MedicationRequestObject.requester)
  
  ::patient::Reference* temp = requester_;
  requester_ = nullptr;
  return temp;
}
inline ::patient::Reference* MedicationRequestObject::_internal_mutable_requester() {
  
  if (requester_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    requester_ = p;
  }
  return requester_;
}
inline ::patient::Reference* MedicationRequestObject::mutable_requester() {
  // @@protoc_insertion_point(field_mutable:patient.MedicationRequestObject.requester)
  return _internal_mutable_requester();
}
inline void MedicationRequestObject::set_allocated_requester(::patient::Reference* requester) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete requester_;
  }
  if (requester) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      requester = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requester, submessage_arena);
    }
    
  } else {
    
  }
  requester_ = requester;
  // @@protoc_insertion_point(field_set_allocated:patient.MedicationRequestObject.requester)
}

// .patient.ResourceType resourceType = 8;
inline void MedicationRequestObject::clear_resourcetype() {
  resourcetype_ = 0;
}
inline ::patient::ResourceType MedicationRequestObject::_internal_resourcetype() const {
  return static_cast< ::patient::ResourceType >(resourcetype_);
}
inline ::patient::ResourceType MedicationRequestObject::resourcetype() const {
  // @@protoc_insertion_point(field_get:patient.MedicationRequestObject.resourceType)
  return _internal_resourcetype();
}
inline void MedicationRequestObject::_internal_set_resourcetype(::patient::ResourceType value) {
  
  resourcetype_ = value;
}
inline void MedicationRequestObject::set_resourcetype(::patient::ResourceType value) {
  _internal_set_resourcetype(value);
  // @@protoc_insertion_point(field_set:patient.MedicationRequestObject.resourceType)
}

// .patient.Status status = 9;
inline void MedicationRequestObject::clear_status() {
  status_ = 0;
}
inline ::patient::Status MedicationRequestObject::_internal_status() const {
  return static_cast< ::patient::Status >(status_);
}
inline ::patient::Status MedicationRequestObject::status() const {
  // @@protoc_insertion_point(field_get:patient.MedicationRequestObject.status)
  return _internal_status();
}
inline void MedicationRequestObject::_internal_set_status(::patient::Status value) {
  
  status_ = value;
}
inline void MedicationRequestObject::set_status(::patient::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:patient.MedicationRequestObject.status)
}

// .patient.Reference subject = 10;
inline bool MedicationRequestObject::_internal_has_subject() const {
  return this != internal_default_instance() && subject_ != nullptr;
}
inline bool MedicationRequestObject::has_subject() const {
  return _internal_has_subject();
}
inline void MedicationRequestObject::clear_subject() {
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
}
inline const ::patient::Reference& MedicationRequestObject::_internal_subject() const {
  const ::patient::Reference* p = subject_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& MedicationRequestObject::subject() const {
  // @@protoc_insertion_point(field_get:patient.MedicationRequestObject.subject)
  return _internal_subject();
}
inline ::patient::Reference* MedicationRequestObject::release_subject() {
  // @@protoc_insertion_point(field_release:patient.MedicationRequestObject.subject)
  
  ::patient::Reference* temp = subject_;
  subject_ = nullptr;
  return temp;
}
inline ::patient::Reference* MedicationRequestObject::_internal_mutable_subject() {
  
  if (subject_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    subject_ = p;
  }
  return subject_;
}
inline ::patient::Reference* MedicationRequestObject::mutable_subject() {
  // @@protoc_insertion_point(field_mutable:patient.MedicationRequestObject.subject)
  return _internal_mutable_subject();
}
inline void MedicationRequestObject::set_allocated_subject(::patient::Reference* subject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete subject_;
  }
  if (subject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subject, submessage_arena);
    }
    
  } else {
    
  }
  subject_ = subject;
  // @@protoc_insertion_point(field_set_allocated:patient.MedicationRequestObject.subject)
}

// -------------------------------------------------------------------

// ObservationObject

// repeated .patient.Category category = 1;
inline int ObservationObject::_internal_category_size() const {
  return category_.size();
}
inline int ObservationObject::category_size() const {
  return _internal_category_size();
}
inline void ObservationObject::clear_category() {
  category_.Clear();
}
inline ::patient::Category* ObservationObject::mutable_category(int index) {
  // @@protoc_insertion_point(field_mutable:patient.ObservationObject.category)
  return category_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >*
ObservationObject::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:patient.ObservationObject.category)
  return &category_;
}
inline const ::patient::Category& ObservationObject::_internal_category(int index) const {
  return category_.Get(index);
}
inline const ::patient::Category& ObservationObject::category(int index) const {
  // @@protoc_insertion_point(field_get:patient.ObservationObject.category)
  return _internal_category(index);
}
inline ::patient::Category* ObservationObject::_internal_add_category() {
  return category_.Add();
}
inline ::patient::Category* ObservationObject::add_category() {
  // @@protoc_insertion_point(field_add:patient.ObservationObject.category)
  return _internal_add_category();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >&
ObservationObject::category() const {
  // @@protoc_insertion_point(field_list:patient.ObservationObject.category)
  return category_;
}

// .patient.Category code = 2;
inline bool ObservationObject::_internal_has_code() const {
  return this != internal_default_instance() && code_ != nullptr;
}
inline bool ObservationObject::has_code() const {
  return _internal_has_code();
}
inline void ObservationObject::clear_code() {
  if (GetArenaNoVirtual() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
}
inline const ::patient::Category& ObservationObject::_internal_code() const {
  const ::patient::Category* p = code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& ObservationObject::code() const {
  // @@protoc_insertion_point(field_get:patient.ObservationObject.code)
  return _internal_code();
}
inline ::patient::Category* ObservationObject::release_code() {
  // @@protoc_insertion_point(field_release:patient.ObservationObject.code)
  
  ::patient::Category* temp = code_;
  code_ = nullptr;
  return temp;
}
inline ::patient::Category* ObservationObject::_internal_mutable_code() {
  
  if (code_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    code_ = p;
  }
  return code_;
}
inline ::patient::Category* ObservationObject::mutable_code() {
  // @@protoc_insertion_point(field_mutable:patient.ObservationObject.code)
  return _internal_mutable_code();
}
inline void ObservationObject::set_allocated_code(::patient::Category* code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete code_;
  }
  if (code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:patient.ObservationObject.code)
}

// repeated .patient.Component component = 3;
inline int ObservationObject::_internal_component_size() const {
  return component_.size();
}
inline int ObservationObject::component_size() const {
  return _internal_component_size();
}
inline void ObservationObject::clear_component() {
  component_.Clear();
}
inline ::patient::Component* ObservationObject::mutable_component(int index) {
  // @@protoc_insertion_point(field_mutable:patient.ObservationObject.component)
  return component_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Component >*
ObservationObject::mutable_component() {
  // @@protoc_insertion_point(field_mutable_list:patient.ObservationObject.component)
  return &component_;
}
inline const ::patient::Component& ObservationObject::_internal_component(int index) const {
  return component_.Get(index);
}
inline const ::patient::Component& ObservationObject::component(int index) const {
  // @@protoc_insertion_point(field_get:patient.ObservationObject.component)
  return _internal_component(index);
}
inline ::patient::Component* ObservationObject::_internal_add_component() {
  return component_.Add();
}
inline ::patient::Component* ObservationObject::add_component() {
  // @@protoc_insertion_point(field_add:patient.ObservationObject.component)
  return _internal_add_component();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Component >&
ObservationObject::component() const {
  // @@protoc_insertion_point(field_list:patient.ObservationObject.component)
  return component_;
}

// string effectiveDateTime = 4;
inline void ObservationObject::clear_effectivedatetime() {
  effectivedatetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ObservationObject::effectivedatetime() const {
  // @@protoc_insertion_point(field_get:patient.ObservationObject.effectiveDateTime)
  return _internal_effectivedatetime();
}
inline void ObservationObject::set_effectivedatetime(const std::string& value) {
  _internal_set_effectivedatetime(value);
  // @@protoc_insertion_point(field_set:patient.ObservationObject.effectiveDateTime)
}
inline std::string* ObservationObject::mutable_effectivedatetime() {
  // @@protoc_insertion_point(field_mutable:patient.ObservationObject.effectiveDateTime)
  return _internal_mutable_effectivedatetime();
}
inline const std::string& ObservationObject::_internal_effectivedatetime() const {
  return effectivedatetime_.GetNoArena();
}
inline void ObservationObject::_internal_set_effectivedatetime(const std::string& value) {
  
  effectivedatetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ObservationObject::set_effectivedatetime(std::string&& value) {
  
  effectivedatetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.ObservationObject.effectiveDateTime)
}
inline void ObservationObject::set_effectivedatetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  effectivedatetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.ObservationObject.effectiveDateTime)
}
inline void ObservationObject::set_effectivedatetime(const char* value, size_t size) {
  
  effectivedatetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.ObservationObject.effectiveDateTime)
}
inline std::string* ObservationObject::_internal_mutable_effectivedatetime() {
  
  return effectivedatetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ObservationObject::release_effectivedatetime() {
  // @@protoc_insertion_point(field_release:patient.ObservationObject.effectiveDateTime)
  
  return effectivedatetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ObservationObject::set_allocated_effectivedatetime(std::string* effectivedatetime) {
  if (effectivedatetime != nullptr) {
    
  } else {
    
  }
  effectivedatetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), effectivedatetime);
  // @@protoc_insertion_point(field_set_allocated:patient.ObservationObject.effectiveDateTime)
}

// .patient.Reference encounter = 5;
inline bool ObservationObject::_internal_has_encounter() const {
  return this != internal_default_instance() && encounter_ != nullptr;
}
inline bool ObservationObject::has_encounter() const {
  return _internal_has_encounter();
}
inline void ObservationObject::clear_encounter() {
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
}
inline const ::patient::Reference& ObservationObject::_internal_encounter() const {
  const ::patient::Reference* p = encounter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& ObservationObject::encounter() const {
  // @@protoc_insertion_point(field_get:patient.ObservationObject.encounter)
  return _internal_encounter();
}
inline ::patient::Reference* ObservationObject::release_encounter() {
  // @@protoc_insertion_point(field_release:patient.ObservationObject.encounter)
  
  ::patient::Reference* temp = encounter_;
  encounter_ = nullptr;
  return temp;
}
inline ::patient::Reference* ObservationObject::_internal_mutable_encounter() {
  
  if (encounter_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    encounter_ = p;
  }
  return encounter_;
}
inline ::patient::Reference* ObservationObject::mutable_encounter() {
  // @@protoc_insertion_point(field_mutable:patient.ObservationObject.encounter)
  return _internal_mutable_encounter();
}
inline void ObservationObject::set_allocated_encounter(::patient::Reference* encounter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete encounter_;
  }
  if (encounter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      encounter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encounter, submessage_arena);
    }
    
  } else {
    
  }
  encounter_ = encounter;
  // @@protoc_insertion_point(field_set_allocated:patient.ObservationObject.encounter)
}

// string id = 6;
inline void ObservationObject::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ObservationObject::id() const {
  // @@protoc_insertion_point(field_get:patient.ObservationObject.id)
  return _internal_id();
}
inline void ObservationObject::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:patient.ObservationObject.id)
}
inline std::string* ObservationObject::mutable_id() {
  // @@protoc_insertion_point(field_mutable:patient.ObservationObject.id)
  return _internal_mutable_id();
}
inline const std::string& ObservationObject::_internal_id() const {
  return id_.GetNoArena();
}
inline void ObservationObject::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ObservationObject::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.ObservationObject.id)
}
inline void ObservationObject::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.ObservationObject.id)
}
inline void ObservationObject::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.ObservationObject.id)
}
inline std::string* ObservationObject::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ObservationObject::release_id() {
  // @@protoc_insertion_point(field_release:patient.ObservationObject.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ObservationObject::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:patient.ObservationObject.id)
}

// string issued = 7;
inline void ObservationObject::clear_issued() {
  issued_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ObservationObject::issued() const {
  // @@protoc_insertion_point(field_get:patient.ObservationObject.issued)
  return _internal_issued();
}
inline void ObservationObject::set_issued(const std::string& value) {
  _internal_set_issued(value);
  // @@protoc_insertion_point(field_set:patient.ObservationObject.issued)
}
inline std::string* ObservationObject::mutable_issued() {
  // @@protoc_insertion_point(field_mutable:patient.ObservationObject.issued)
  return _internal_mutable_issued();
}
inline const std::string& ObservationObject::_internal_issued() const {
  return issued_.GetNoArena();
}
inline void ObservationObject::_internal_set_issued(const std::string& value) {
  
  issued_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ObservationObject::set_issued(std::string&& value) {
  
  issued_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.ObservationObject.issued)
}
inline void ObservationObject::set_issued(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  issued_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.ObservationObject.issued)
}
inline void ObservationObject::set_issued(const char* value, size_t size) {
  
  issued_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.ObservationObject.issued)
}
inline std::string* ObservationObject::_internal_mutable_issued() {
  
  return issued_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ObservationObject::release_issued() {
  // @@protoc_insertion_point(field_release:patient.ObservationObject.issued)
  
  return issued_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ObservationObject::set_allocated_issued(std::string* issued) {
  if (issued != nullptr) {
    
  } else {
    
  }
  issued_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), issued);
  // @@protoc_insertion_point(field_set_allocated:patient.ObservationObject.issued)
}

// .patient.ResourceType resourceType = 8;
inline void ObservationObject::clear_resourcetype() {
  resourcetype_ = 0;
}
inline ::patient::ResourceType ObservationObject::_internal_resourcetype() const {
  return static_cast< ::patient::ResourceType >(resourcetype_);
}
inline ::patient::ResourceType ObservationObject::resourcetype() const {
  // @@protoc_insertion_point(field_get:patient.ObservationObject.resourceType)
  return _internal_resourcetype();
}
inline void ObservationObject::_internal_set_resourcetype(::patient::ResourceType value) {
  
  resourcetype_ = value;
}
inline void ObservationObject::set_resourcetype(::patient::ResourceType value) {
  _internal_set_resourcetype(value);
  // @@protoc_insertion_point(field_set:patient.ObservationObject.resourceType)
}

// .patient.Status status = 9;
inline void ObservationObject::clear_status() {
  status_ = 0;
}
inline ::patient::Status ObservationObject::_internal_status() const {
  return static_cast< ::patient::Status >(status_);
}
inline ::patient::Status ObservationObject::status() const {
  // @@protoc_insertion_point(field_get:patient.ObservationObject.status)
  return _internal_status();
}
inline void ObservationObject::_internal_set_status(::patient::Status value) {
  
  status_ = value;
}
inline void ObservationObject::set_status(::patient::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:patient.ObservationObject.status)
}

// .patient.Reference subject = 10;
inline bool ObservationObject::_internal_has_subject() const {
  return this != internal_default_instance() && subject_ != nullptr;
}
inline bool ObservationObject::has_subject() const {
  return _internal_has_subject();
}
inline void ObservationObject::clear_subject() {
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
}
inline const ::patient::Reference& ObservationObject::_internal_subject() const {
  const ::patient::Reference* p = subject_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& ObservationObject::subject() const {
  // @@protoc_insertion_point(field_get:patient.ObservationObject.subject)
  return _internal_subject();
}
inline ::patient::Reference* ObservationObject::release_subject() {
  // @@protoc_insertion_point(field_release:patient.ObservationObject.subject)
  
  ::patient::Reference* temp = subject_;
  subject_ = nullptr;
  return temp;
}
inline ::patient::Reference* ObservationObject::_internal_mutable_subject() {
  
  if (subject_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    subject_ = p;
  }
  return subject_;
}
inline ::patient::Reference* ObservationObject::mutable_subject() {
  // @@protoc_insertion_point(field_mutable:patient.ObservationObject.subject)
  return _internal_mutable_subject();
}
inline void ObservationObject::set_allocated_subject(::patient::Reference* subject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete subject_;
  }
  if (subject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subject, submessage_arena);
    }
    
  } else {
    
  }
  subject_ = subject;
  // @@protoc_insertion_point(field_set_allocated:patient.ObservationObject.subject)
}

// .patient.Category valueCodeableConcept = 11;
inline bool ObservationObject::_internal_has_valuecodeableconcept() const {
  return this != internal_default_instance() && valuecodeableconcept_ != nullptr;
}
inline bool ObservationObject::has_valuecodeableconcept() const {
  return _internal_has_valuecodeableconcept();
}
inline void ObservationObject::clear_valuecodeableconcept() {
  if (GetArenaNoVirtual() == nullptr && valuecodeableconcept_ != nullptr) {
    delete valuecodeableconcept_;
  }
  valuecodeableconcept_ = nullptr;
}
inline const ::patient::Category& ObservationObject::_internal_valuecodeableconcept() const {
  const ::patient::Category* p = valuecodeableconcept_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& ObservationObject::valuecodeableconcept() const {
  // @@protoc_insertion_point(field_get:patient.ObservationObject.valueCodeableConcept)
  return _internal_valuecodeableconcept();
}
inline ::patient::Category* ObservationObject::release_valuecodeableconcept() {
  // @@protoc_insertion_point(field_release:patient.ObservationObject.valueCodeableConcept)
  
  ::patient::Category* temp = valuecodeableconcept_;
  valuecodeableconcept_ = nullptr;
  return temp;
}
inline ::patient::Category* ObservationObject::_internal_mutable_valuecodeableconcept() {
  
  if (valuecodeableconcept_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    valuecodeableconcept_ = p;
  }
  return valuecodeableconcept_;
}
inline ::patient::Category* ObservationObject::mutable_valuecodeableconcept() {
  // @@protoc_insertion_point(field_mutable:patient.ObservationObject.valueCodeableConcept)
  return _internal_mutable_valuecodeableconcept();
}
inline void ObservationObject::set_allocated_valuecodeableconcept(::patient::Category* valuecodeableconcept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete valuecodeableconcept_;
  }
  if (valuecodeableconcept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      valuecodeableconcept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, valuecodeableconcept, submessage_arena);
    }
    
  } else {
    
  }
  valuecodeableconcept_ = valuecodeableconcept;
  // @@protoc_insertion_point(field_set_allocated:patient.ObservationObject.valueCodeableConcept)
}

// .patient.Quantity valueQuantity = 12;
inline bool ObservationObject::_internal_has_valuequantity() const {
  return this != internal_default_instance() && valuequantity_ != nullptr;
}
inline bool ObservationObject::has_valuequantity() const {
  return _internal_has_valuequantity();
}
inline void ObservationObject::clear_valuequantity() {
  if (GetArenaNoVirtual() == nullptr && valuequantity_ != nullptr) {
    delete valuequantity_;
  }
  valuequantity_ = nullptr;
}
inline const ::patient::Quantity& ObservationObject::_internal_valuequantity() const {
  const ::patient::Quantity* p = valuequantity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Quantity*>(
      &::patient::_Quantity_default_instance_);
}
inline const ::patient::Quantity& ObservationObject::valuequantity() const {
  // @@protoc_insertion_point(field_get:patient.ObservationObject.valueQuantity)
  return _internal_valuequantity();
}
inline ::patient::Quantity* ObservationObject::release_valuequantity() {
  // @@protoc_insertion_point(field_release:patient.ObservationObject.valueQuantity)
  
  ::patient::Quantity* temp = valuequantity_;
  valuequantity_ = nullptr;
  return temp;
}
inline ::patient::Quantity* ObservationObject::_internal_mutable_valuequantity() {
  
  if (valuequantity_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Quantity>(GetArenaNoVirtual());
    valuequantity_ = p;
  }
  return valuequantity_;
}
inline ::patient::Quantity* ObservationObject::mutable_valuequantity() {
  // @@protoc_insertion_point(field_mutable:patient.ObservationObject.valueQuantity)
  return _internal_mutable_valuequantity();
}
inline void ObservationObject::set_allocated_valuequantity(::patient::Quantity* valuequantity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete valuequantity_;
  }
  if (valuequantity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      valuequantity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, valuequantity, submessage_arena);
    }
    
  } else {
    
  }
  valuequantity_ = valuequantity;
  // @@protoc_insertion_point(field_set_allocated:patient.ObservationObject.valueQuantity)
}

// -------------------------------------------------------------------

// OrganizationObject

// bool active = 1;
inline void OrganizationObject::clear_active() {
  active_ = false;
}
inline bool OrganizationObject::_internal_active() const {
  return active_;
}
inline bool OrganizationObject::active() const {
  // @@protoc_insertion_point(field_get:patient.OrganizationObject.active)
  return _internal_active();
}
inline void OrganizationObject::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void OrganizationObject::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:patient.OrganizationObject.active)
}

// repeated .patient.Address address = 2;
inline int OrganizationObject::_internal_address_size() const {
  return address_.size();
}
inline int OrganizationObject::address_size() const {
  return _internal_address_size();
}
inline void OrganizationObject::clear_address() {
  address_.Clear();
}
inline ::patient::Address* OrganizationObject::mutable_address(int index) {
  // @@protoc_insertion_point(field_mutable:patient.OrganizationObject.address)
  return address_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Address >*
OrganizationObject::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:patient.OrganizationObject.address)
  return &address_;
}
inline const ::patient::Address& OrganizationObject::_internal_address(int index) const {
  return address_.Get(index);
}
inline const ::patient::Address& OrganizationObject::address(int index) const {
  // @@protoc_insertion_point(field_get:patient.OrganizationObject.address)
  return _internal_address(index);
}
inline ::patient::Address* OrganizationObject::_internal_add_address() {
  return address_.Add();
}
inline ::patient::Address* OrganizationObject::add_address() {
  // @@protoc_insertion_point(field_add:patient.OrganizationObject.address)
  return _internal_add_address();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Address >&
OrganizationObject::address() const {
  // @@protoc_insertion_point(field_list:patient.OrganizationObject.address)
  return address_;
}

// string id = 3;
inline void OrganizationObject::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OrganizationObject::id() const {
  // @@protoc_insertion_point(field_get:patient.OrganizationObject.id)
  return _internal_id();
}
inline void OrganizationObject::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:patient.OrganizationObject.id)
}
inline std::string* OrganizationObject::mutable_id() {
  // @@protoc_insertion_point(field_mutable:patient.OrganizationObject.id)
  return _internal_mutable_id();
}
inline const std::string& OrganizationObject::_internal_id() const {
  return id_.GetNoArena();
}
inline void OrganizationObject::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OrganizationObject::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.OrganizationObject.id)
}
inline void OrganizationObject::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.OrganizationObject.id)
}
inline void OrganizationObject::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.OrganizationObject.id)
}
inline std::string* OrganizationObject::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OrganizationObject::release_id() {
  // @@protoc_insertion_point(field_release:patient.OrganizationObject.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OrganizationObject::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:patient.OrganizationObject.id)
}

// repeated .patient.Identifier identifier = 4;
inline int OrganizationObject::_internal_identifier_size() const {
  return identifier_.size();
}
inline int OrganizationObject::identifier_size() const {
  return _internal_identifier_size();
}
inline void OrganizationObject::clear_identifier() {
  identifier_.Clear();
}
inline ::patient::Identifier* OrganizationObject::mutable_identifier(int index) {
  // @@protoc_insertion_point(field_mutable:patient.OrganizationObject.identifier)
  return identifier_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Identifier >*
OrganizationObject::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable_list:patient.OrganizationObject.identifier)
  return &identifier_;
}
inline const ::patient::Identifier& OrganizationObject::_internal_identifier(int index) const {
  return identifier_.Get(index);
}
inline const ::patient::Identifier& OrganizationObject::identifier(int index) const {
  // @@protoc_insertion_point(field_get:patient.OrganizationObject.identifier)
  return _internal_identifier(index);
}
inline ::patient::Identifier* OrganizationObject::_internal_add_identifier() {
  return identifier_.Add();
}
inline ::patient::Identifier* OrganizationObject::add_identifier() {
  // @@protoc_insertion_point(field_add:patient.OrganizationObject.identifier)
  return _internal_add_identifier();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Identifier >&
OrganizationObject::identifier() const {
  // @@protoc_insertion_point(field_list:patient.OrganizationObject.identifier)
  return identifier_;
}

// string name = 5;
inline void OrganizationObject::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OrganizationObject::name() const {
  // @@protoc_insertion_point(field_get:patient.OrganizationObject.name)
  return _internal_name();
}
inline void OrganizationObject::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:patient.OrganizationObject.name)
}
inline std::string* OrganizationObject::mutable_name() {
  // @@protoc_insertion_point(field_mutable:patient.OrganizationObject.name)
  return _internal_mutable_name();
}
inline const std::string& OrganizationObject::_internal_name() const {
  return name_.GetNoArena();
}
inline void OrganizationObject::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OrganizationObject::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.OrganizationObject.name)
}
inline void OrganizationObject::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.OrganizationObject.name)
}
inline void OrganizationObject::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.OrganizationObject.name)
}
inline std::string* OrganizationObject::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OrganizationObject::release_name() {
  // @@protoc_insertion_point(field_release:patient.OrganizationObject.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OrganizationObject::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:patient.OrganizationObject.name)
}

// .patient.ResourceType resourceType = 6;
inline void OrganizationObject::clear_resourcetype() {
  resourcetype_ = 0;
}
inline ::patient::ResourceType OrganizationObject::_internal_resourcetype() const {
  return static_cast< ::patient::ResourceType >(resourcetype_);
}
inline ::patient::ResourceType OrganizationObject::resourcetype() const {
  // @@protoc_insertion_point(field_get:patient.OrganizationObject.resourceType)
  return _internal_resourcetype();
}
inline void OrganizationObject::_internal_set_resourcetype(::patient::ResourceType value) {
  
  resourcetype_ = value;
}
inline void OrganizationObject::set_resourcetype(::patient::ResourceType value) {
  _internal_set_resourcetype(value);
  // @@protoc_insertion_point(field_set:patient.OrganizationObject.resourceType)
}

// repeated .patient.Telecom telecom = 7;
inline int OrganizationObject::_internal_telecom_size() const {
  return telecom_.size();
}
inline int OrganizationObject::telecom_size() const {
  return _internal_telecom_size();
}
inline void OrganizationObject::clear_telecom() {
  telecom_.Clear();
}
inline ::patient::Telecom* OrganizationObject::mutable_telecom(int index) {
  // @@protoc_insertion_point(field_mutable:patient.OrganizationObject.telecom)
  return telecom_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Telecom >*
OrganizationObject::mutable_telecom() {
  // @@protoc_insertion_point(field_mutable_list:patient.OrganizationObject.telecom)
  return &telecom_;
}
inline const ::patient::Telecom& OrganizationObject::_internal_telecom(int index) const {
  return telecom_.Get(index);
}
inline const ::patient::Telecom& OrganizationObject::telecom(int index) const {
  // @@protoc_insertion_point(field_get:patient.OrganizationObject.telecom)
  return _internal_telecom(index);
}
inline ::patient::Telecom* OrganizationObject::_internal_add_telecom() {
  return telecom_.Add();
}
inline ::patient::Telecom* OrganizationObject::add_telecom() {
  // @@protoc_insertion_point(field_add:patient.OrganizationObject.telecom)
  return _internal_add_telecom();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Telecom >&
OrganizationObject::telecom() const {
  // @@protoc_insertion_point(field_list:patient.OrganizationObject.telecom)
  return telecom_;
}

// repeated .patient.Category type = 8;
inline int OrganizationObject::_internal_type_size() const {
  return type_.size();
}
inline int OrganizationObject::type_size() const {
  return _internal_type_size();
}
inline void OrganizationObject::clear_type() {
  type_.Clear();
}
inline ::patient::Category* OrganizationObject::mutable_type(int index) {
  // @@protoc_insertion_point(field_mutable:patient.OrganizationObject.type)
  return type_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >*
OrganizationObject::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:patient.OrganizationObject.type)
  return &type_;
}
inline const ::patient::Category& OrganizationObject::_internal_type(int index) const {
  return type_.Get(index);
}
inline const ::patient::Category& OrganizationObject::type(int index) const {
  // @@protoc_insertion_point(field_get:patient.OrganizationObject.type)
  return _internal_type(index);
}
inline ::patient::Category* OrganizationObject::_internal_add_type() {
  return type_.Add();
}
inline ::patient::Category* OrganizationObject::add_type() {
  // @@protoc_insertion_point(field_add:patient.OrganizationObject.type)
  return _internal_add_type();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Category >&
OrganizationObject::type() const {
  // @@protoc_insertion_point(field_list:patient.OrganizationObject.type)
  return type_;
}

// -------------------------------------------------------------------

// PatientObject

// repeated .patient.Address address = 1;
inline int PatientObject::_internal_address_size() const {
  return address_.size();
}
inline int PatientObject::address_size() const {
  return _internal_address_size();
}
inline void PatientObject::clear_address() {
  address_.Clear();
}
inline ::patient::Address* PatientObject::mutable_address(int index) {
  // @@protoc_insertion_point(field_mutable:patient.PatientObject.address)
  return address_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Address >*
PatientObject::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:patient.PatientObject.address)
  return &address_;
}
inline const ::patient::Address& PatientObject::_internal_address(int index) const {
  return address_.Get(index);
}
inline const ::patient::Address& PatientObject::address(int index) const {
  // @@protoc_insertion_point(field_get:patient.PatientObject.address)
  return _internal_address(index);
}
inline ::patient::Address* PatientObject::_internal_add_address() {
  return address_.Add();
}
inline ::patient::Address* PatientObject::add_address() {
  // @@protoc_insertion_point(field_add:patient.PatientObject.address)
  return _internal_add_address();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Address >&
PatientObject::address() const {
  // @@protoc_insertion_point(field_list:patient.PatientObject.address)
  return address_;
}

// string birthDate = 2;
inline void PatientObject::clear_birthdate() {
  birthdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatientObject::birthdate() const {
  // @@protoc_insertion_point(field_get:patient.PatientObject.birthDate)
  return _internal_birthdate();
}
inline void PatientObject::set_birthdate(const std::string& value) {
  _internal_set_birthdate(value);
  // @@protoc_insertion_point(field_set:patient.PatientObject.birthDate)
}
inline std::string* PatientObject::mutable_birthdate() {
  // @@protoc_insertion_point(field_mutable:patient.PatientObject.birthDate)
  return _internal_mutable_birthdate();
}
inline const std::string& PatientObject::_internal_birthdate() const {
  return birthdate_.GetNoArena();
}
inline void PatientObject::_internal_set_birthdate(const std::string& value) {
  
  birthdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PatientObject::set_birthdate(std::string&& value) {
  
  birthdate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.PatientObject.birthDate)
}
inline void PatientObject::set_birthdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  birthdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.PatientObject.birthDate)
}
inline void PatientObject::set_birthdate(const char* value, size_t size) {
  
  birthdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.PatientObject.birthDate)
}
inline std::string* PatientObject::_internal_mutable_birthdate() {
  
  return birthdate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatientObject::release_birthdate() {
  // @@protoc_insertion_point(field_release:patient.PatientObject.birthDate)
  
  return birthdate_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatientObject::set_allocated_birthdate(std::string* birthdate) {
  if (birthdate != nullptr) {
    
  } else {
    
  }
  birthdate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), birthdate);
  // @@protoc_insertion_point(field_set_allocated:patient.PatientObject.birthDate)
}

// repeated .patient.Communication communication = 3;
inline int PatientObject::_internal_communication_size() const {
  return communication_.size();
}
inline int PatientObject::communication_size() const {
  return _internal_communication_size();
}
inline void PatientObject::clear_communication() {
  communication_.Clear();
}
inline ::patient::Communication* PatientObject::mutable_communication(int index) {
  // @@protoc_insertion_point(field_mutable:patient.PatientObject.communication)
  return communication_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Communication >*
PatientObject::mutable_communication() {
  // @@protoc_insertion_point(field_mutable_list:patient.PatientObject.communication)
  return &communication_;
}
inline const ::patient::Communication& PatientObject::_internal_communication(int index) const {
  return communication_.Get(index);
}
inline const ::patient::Communication& PatientObject::communication(int index) const {
  // @@protoc_insertion_point(field_get:patient.PatientObject.communication)
  return _internal_communication(index);
}
inline ::patient::Communication* PatientObject::_internal_add_communication() {
  return communication_.Add();
}
inline ::patient::Communication* PatientObject::add_communication() {
  // @@protoc_insertion_point(field_add:patient.PatientObject.communication)
  return _internal_add_communication();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Communication >&
PatientObject::communication() const {
  // @@protoc_insertion_point(field_list:patient.PatientObject.communication)
  return communication_;
}

// repeated .patient.Extension extension = 4;
inline int PatientObject::_internal_extension_size() const {
  return extension_.size();
}
inline int PatientObject::extension_size() const {
  return _internal_extension_size();
}
inline void PatientObject::clear_extension() {
  extension_.Clear();
}
inline ::patient::Extension* PatientObject::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:patient.PatientObject.extension)
  return extension_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Extension >*
PatientObject::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:patient.PatientObject.extension)
  return &extension_;
}
inline const ::patient::Extension& PatientObject::_internal_extension(int index) const {
  return extension_.Get(index);
}
inline const ::patient::Extension& PatientObject::extension(int index) const {
  // @@protoc_insertion_point(field_get:patient.PatientObject.extension)
  return _internal_extension(index);
}
inline ::patient::Extension* PatientObject::_internal_add_extension() {
  return extension_.Add();
}
inline ::patient::Extension* PatientObject::add_extension() {
  // @@protoc_insertion_point(field_add:patient.PatientObject.extension)
  return _internal_add_extension();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Extension >&
PatientObject::extension() const {
  // @@protoc_insertion_point(field_list:patient.PatientObject.extension)
  return extension_;
}

// .patient.Gender gender = 5;
inline void PatientObject::clear_gender() {
  gender_ = 0;
}
inline ::patient::Gender PatientObject::_internal_gender() const {
  return static_cast< ::patient::Gender >(gender_);
}
inline ::patient::Gender PatientObject::gender() const {
  // @@protoc_insertion_point(field_get:patient.PatientObject.gender)
  return _internal_gender();
}
inline void PatientObject::_internal_set_gender(::patient::Gender value) {
  
  gender_ = value;
}
inline void PatientObject::set_gender(::patient::Gender value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:patient.PatientObject.gender)
}

// string id = 6;
inline void PatientObject::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatientObject::id() const {
  // @@protoc_insertion_point(field_get:patient.PatientObject.id)
  return _internal_id();
}
inline void PatientObject::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:patient.PatientObject.id)
}
inline std::string* PatientObject::mutable_id() {
  // @@protoc_insertion_point(field_mutable:patient.PatientObject.id)
  return _internal_mutable_id();
}
inline const std::string& PatientObject::_internal_id() const {
  return id_.GetNoArena();
}
inline void PatientObject::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PatientObject::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.PatientObject.id)
}
inline void PatientObject::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.PatientObject.id)
}
inline void PatientObject::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.PatientObject.id)
}
inline std::string* PatientObject::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatientObject::release_id() {
  // @@protoc_insertion_point(field_release:patient.PatientObject.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatientObject::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:patient.PatientObject.id)
}

// repeated .patient.Identifier identifier = 7;
inline int PatientObject::_internal_identifier_size() const {
  return identifier_.size();
}
inline int PatientObject::identifier_size() const {
  return _internal_identifier_size();
}
inline void PatientObject::clear_identifier() {
  identifier_.Clear();
}
inline ::patient::Identifier* PatientObject::mutable_identifier(int index) {
  // @@protoc_insertion_point(field_mutable:patient.PatientObject.identifier)
  return identifier_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Identifier >*
PatientObject::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable_list:patient.PatientObject.identifier)
  return &identifier_;
}
inline const ::patient::Identifier& PatientObject::_internal_identifier(int index) const {
  return identifier_.Get(index);
}
inline const ::patient::Identifier& PatientObject::identifier(int index) const {
  // @@protoc_insertion_point(field_get:patient.PatientObject.identifier)
  return _internal_identifier(index);
}
inline ::patient::Identifier* PatientObject::_internal_add_identifier() {
  return identifier_.Add();
}
inline ::patient::Identifier* PatientObject::add_identifier() {
  // @@protoc_insertion_point(field_add:patient.PatientObject.identifier)
  return _internal_add_identifier();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Identifier >&
PatientObject::identifier() const {
  // @@protoc_insertion_point(field_list:patient.PatientObject.identifier)
  return identifier_;
}

// .patient.Category maritalStatus = 8;
inline bool PatientObject::_internal_has_maritalstatus() const {
  return this != internal_default_instance() && maritalstatus_ != nullptr;
}
inline bool PatientObject::has_maritalstatus() const {
  return _internal_has_maritalstatus();
}
inline void PatientObject::clear_maritalstatus() {
  if (GetArenaNoVirtual() == nullptr && maritalstatus_ != nullptr) {
    delete maritalstatus_;
  }
  maritalstatus_ = nullptr;
}
inline const ::patient::Category& PatientObject::_internal_maritalstatus() const {
  const ::patient::Category* p = maritalstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& PatientObject::maritalstatus() const {
  // @@protoc_insertion_point(field_get:patient.PatientObject.maritalStatus)
  return _internal_maritalstatus();
}
inline ::patient::Category* PatientObject::release_maritalstatus() {
  // @@protoc_insertion_point(field_release:patient.PatientObject.maritalStatus)
  
  ::patient::Category* temp = maritalstatus_;
  maritalstatus_ = nullptr;
  return temp;
}
inline ::patient::Category* PatientObject::_internal_mutable_maritalstatus() {
  
  if (maritalstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    maritalstatus_ = p;
  }
  return maritalstatus_;
}
inline ::patient::Category* PatientObject::mutable_maritalstatus() {
  // @@protoc_insertion_point(field_mutable:patient.PatientObject.maritalStatus)
  return _internal_mutable_maritalstatus();
}
inline void PatientObject::set_allocated_maritalstatus(::patient::Category* maritalstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete maritalstatus_;
  }
  if (maritalstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      maritalstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maritalstatus, submessage_arena);
    }
    
  } else {
    
  }
  maritalstatus_ = maritalstatus;
  // @@protoc_insertion_point(field_set_allocated:patient.PatientObject.maritalStatus)
}

// bool multipleBirthBoolean = 9;
inline void PatientObject::clear_multiplebirthboolean() {
  multiplebirthboolean_ = false;
}
inline bool PatientObject::_internal_multiplebirthboolean() const {
  return multiplebirthboolean_;
}
inline bool PatientObject::multiplebirthboolean() const {
  // @@protoc_insertion_point(field_get:patient.PatientObject.multipleBirthBoolean)
  return _internal_multiplebirthboolean();
}
inline void PatientObject::_internal_set_multiplebirthboolean(bool value) {
  
  multiplebirthboolean_ = value;
}
inline void PatientObject::set_multiplebirthboolean(bool value) {
  _internal_set_multiplebirthboolean(value);
  // @@protoc_insertion_point(field_set:patient.PatientObject.multipleBirthBoolean)
}

// repeated .patient.Name name = 10;
inline int PatientObject::_internal_name_size() const {
  return name_.size();
}
inline int PatientObject::name_size() const {
  return _internal_name_size();
}
inline void PatientObject::clear_name() {
  name_.Clear();
}
inline ::patient::Name* PatientObject::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:patient.PatientObject.name)
  return name_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Name >*
PatientObject::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:patient.PatientObject.name)
  return &name_;
}
inline const ::patient::Name& PatientObject::_internal_name(int index) const {
  return name_.Get(index);
}
inline const ::patient::Name& PatientObject::name(int index) const {
  // @@protoc_insertion_point(field_get:patient.PatientObject.name)
  return _internal_name(index);
}
inline ::patient::Name* PatientObject::_internal_add_name() {
  return name_.Add();
}
inline ::patient::Name* PatientObject::add_name() {
  // @@protoc_insertion_point(field_add:patient.PatientObject.name)
  return _internal_add_name();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Name >&
PatientObject::name() const {
  // @@protoc_insertion_point(field_list:patient.PatientObject.name)
  return name_;
}

// .patient.ResourceType resourceType = 11;
inline void PatientObject::clear_resourcetype() {
  resourcetype_ = 0;
}
inline ::patient::ResourceType PatientObject::_internal_resourcetype() const {
  return static_cast< ::patient::ResourceType >(resourcetype_);
}
inline ::patient::ResourceType PatientObject::resourcetype() const {
  // @@protoc_insertion_point(field_get:patient.PatientObject.resourceType)
  return _internal_resourcetype();
}
inline void PatientObject::_internal_set_resourcetype(::patient::ResourceType value) {
  
  resourcetype_ = value;
}
inline void PatientObject::set_resourcetype(::patient::ResourceType value) {
  _internal_set_resourcetype(value);
  // @@protoc_insertion_point(field_set:patient.PatientObject.resourceType)
}

// repeated .patient.Telecom telecom = 12;
inline int PatientObject::_internal_telecom_size() const {
  return telecom_.size();
}
inline int PatientObject::telecom_size() const {
  return _internal_telecom_size();
}
inline void PatientObject::clear_telecom() {
  telecom_.Clear();
}
inline ::patient::Telecom* PatientObject::mutable_telecom(int index) {
  // @@protoc_insertion_point(field_mutable:patient.PatientObject.telecom)
  return telecom_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Telecom >*
PatientObject::mutable_telecom() {
  // @@protoc_insertion_point(field_mutable_list:patient.PatientObject.telecom)
  return &telecom_;
}
inline const ::patient::Telecom& PatientObject::_internal_telecom(int index) const {
  return telecom_.Get(index);
}
inline const ::patient::Telecom& PatientObject::telecom(int index) const {
  // @@protoc_insertion_point(field_get:patient.PatientObject.telecom)
  return _internal_telecom(index);
}
inline ::patient::Telecom* PatientObject::_internal_add_telecom() {
  return telecom_.Add();
}
inline ::patient::Telecom* PatientObject::add_telecom() {
  // @@protoc_insertion_point(field_add:patient.PatientObject.telecom)
  return _internal_add_telecom();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Telecom >&
PatientObject::telecom() const {
  // @@protoc_insertion_point(field_list:patient.PatientObject.telecom)
  return telecom_;
}

// string text = 13;
inline void PatientObject::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatientObject::text() const {
  // @@protoc_insertion_point(field_get:patient.PatientObject.text)
  return _internal_text();
}
inline void PatientObject::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:patient.PatientObject.text)
}
inline std::string* PatientObject::mutable_text() {
  // @@protoc_insertion_point(field_mutable:patient.PatientObject.text)
  return _internal_mutable_text();
}
inline const std::string& PatientObject::_internal_text() const {
  return text_.GetNoArena();
}
inline void PatientObject::_internal_set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PatientObject::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.PatientObject.text)
}
inline void PatientObject::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.PatientObject.text)
}
inline void PatientObject::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.PatientObject.text)
}
inline std::string* PatientObject::_internal_mutable_text() {
  
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatientObject::release_text() {
  // @@protoc_insertion_point(field_release:patient.PatientObject.text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatientObject::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:patient.PatientObject.text)
}

// -------------------------------------------------------------------

// PractitionerObject

// bool active = 1;
inline void PractitionerObject::clear_active() {
  active_ = false;
}
inline bool PractitionerObject::_internal_active() const {
  return active_;
}
inline bool PractitionerObject::active() const {
  // @@protoc_insertion_point(field_get:patient.PractitionerObject.active)
  return _internal_active();
}
inline void PractitionerObject::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void PractitionerObject::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:patient.PractitionerObject.active)
}

// repeated .patient.Address address = 2;
inline int PractitionerObject::_internal_address_size() const {
  return address_.size();
}
inline int PractitionerObject::address_size() const {
  return _internal_address_size();
}
inline void PractitionerObject::clear_address() {
  address_.Clear();
}
inline ::patient::Address* PractitionerObject::mutable_address(int index) {
  // @@protoc_insertion_point(field_mutable:patient.PractitionerObject.address)
  return address_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Address >*
PractitionerObject::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:patient.PractitionerObject.address)
  return &address_;
}
inline const ::patient::Address& PractitionerObject::_internal_address(int index) const {
  return address_.Get(index);
}
inline const ::patient::Address& PractitionerObject::address(int index) const {
  // @@protoc_insertion_point(field_get:patient.PractitionerObject.address)
  return _internal_address(index);
}
inline ::patient::Address* PractitionerObject::_internal_add_address() {
  return address_.Add();
}
inline ::patient::Address* PractitionerObject::add_address() {
  // @@protoc_insertion_point(field_add:patient.PractitionerObject.address)
  return _internal_add_address();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Address >&
PractitionerObject::address() const {
  // @@protoc_insertion_point(field_list:patient.PractitionerObject.address)
  return address_;
}

// .patient.Gender gender = 3;
inline void PractitionerObject::clear_gender() {
  gender_ = 0;
}
inline ::patient::Gender PractitionerObject::_internal_gender() const {
  return static_cast< ::patient::Gender >(gender_);
}
inline ::patient::Gender PractitionerObject::gender() const {
  // @@protoc_insertion_point(field_get:patient.PractitionerObject.gender)
  return _internal_gender();
}
inline void PractitionerObject::_internal_set_gender(::patient::Gender value) {
  
  gender_ = value;
}
inline void PractitionerObject::set_gender(::patient::Gender value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:patient.PractitionerObject.gender)
}

// string id = 4;
inline void PractitionerObject::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PractitionerObject::id() const {
  // @@protoc_insertion_point(field_get:patient.PractitionerObject.id)
  return _internal_id();
}
inline void PractitionerObject::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:patient.PractitionerObject.id)
}
inline std::string* PractitionerObject::mutable_id() {
  // @@protoc_insertion_point(field_mutable:patient.PractitionerObject.id)
  return _internal_mutable_id();
}
inline const std::string& PractitionerObject::_internal_id() const {
  return id_.GetNoArena();
}
inline void PractitionerObject::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PractitionerObject::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.PractitionerObject.id)
}
inline void PractitionerObject::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.PractitionerObject.id)
}
inline void PractitionerObject::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.PractitionerObject.id)
}
inline std::string* PractitionerObject::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PractitionerObject::release_id() {
  // @@protoc_insertion_point(field_release:patient.PractitionerObject.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PractitionerObject::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:patient.PractitionerObject.id)
}

// repeated .patient.Identifier identifier = 5;
inline int PractitionerObject::_internal_identifier_size() const {
  return identifier_.size();
}
inline int PractitionerObject::identifier_size() const {
  return _internal_identifier_size();
}
inline void PractitionerObject::clear_identifier() {
  identifier_.Clear();
}
inline ::patient::Identifier* PractitionerObject::mutable_identifier(int index) {
  // @@protoc_insertion_point(field_mutable:patient.PractitionerObject.identifier)
  return identifier_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Identifier >*
PractitionerObject::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable_list:patient.PractitionerObject.identifier)
  return &identifier_;
}
inline const ::patient::Identifier& PractitionerObject::_internal_identifier(int index) const {
  return identifier_.Get(index);
}
inline const ::patient::Identifier& PractitionerObject::identifier(int index) const {
  // @@protoc_insertion_point(field_get:patient.PractitionerObject.identifier)
  return _internal_identifier(index);
}
inline ::patient::Identifier* PractitionerObject::_internal_add_identifier() {
  return identifier_.Add();
}
inline ::patient::Identifier* PractitionerObject::add_identifier() {
  // @@protoc_insertion_point(field_add:patient.PractitionerObject.identifier)
  return _internal_add_identifier();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Identifier >&
PractitionerObject::identifier() const {
  // @@protoc_insertion_point(field_list:patient.PractitionerObject.identifier)
  return identifier_;
}

// repeated .patient.Name name = 6;
inline int PractitionerObject::_internal_name_size() const {
  return name_.size();
}
inline int PractitionerObject::name_size() const {
  return _internal_name_size();
}
inline void PractitionerObject::clear_name() {
  name_.Clear();
}
inline ::patient::Name* PractitionerObject::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:patient.PractitionerObject.name)
  return name_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Name >*
PractitionerObject::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:patient.PractitionerObject.name)
  return &name_;
}
inline const ::patient::Name& PractitionerObject::_internal_name(int index) const {
  return name_.Get(index);
}
inline const ::patient::Name& PractitionerObject::name(int index) const {
  // @@protoc_insertion_point(field_get:patient.PractitionerObject.name)
  return _internal_name(index);
}
inline ::patient::Name* PractitionerObject::_internal_add_name() {
  return name_.Add();
}
inline ::patient::Name* PractitionerObject::add_name() {
  // @@protoc_insertion_point(field_add:patient.PractitionerObject.name)
  return _internal_add_name();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Name >&
PractitionerObject::name() const {
  // @@protoc_insertion_point(field_list:patient.PractitionerObject.name)
  return name_;
}

// .patient.ResourceType resourceType = 7;
inline void PractitionerObject::clear_resourcetype() {
  resourcetype_ = 0;
}
inline ::patient::ResourceType PractitionerObject::_internal_resourcetype() const {
  return static_cast< ::patient::ResourceType >(resourcetype_);
}
inline ::patient::ResourceType PractitionerObject::resourcetype() const {
  // @@protoc_insertion_point(field_get:patient.PractitionerObject.resourceType)
  return _internal_resourcetype();
}
inline void PractitionerObject::_internal_set_resourcetype(::patient::ResourceType value) {
  
  resourcetype_ = value;
}
inline void PractitionerObject::set_resourcetype(::patient::ResourceType value) {
  _internal_set_resourcetype(value);
  // @@protoc_insertion_point(field_set:patient.PractitionerObject.resourceType)
}

// repeated .patient.Telecom telecom = 8;
inline int PractitionerObject::_internal_telecom_size() const {
  return telecom_.size();
}
inline int PractitionerObject::telecom_size() const {
  return _internal_telecom_size();
}
inline void PractitionerObject::clear_telecom() {
  telecom_.Clear();
}
inline ::patient::Telecom* PractitionerObject::mutable_telecom(int index) {
  // @@protoc_insertion_point(field_mutable:patient.PractitionerObject.telecom)
  return telecom_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Telecom >*
PractitionerObject::mutable_telecom() {
  // @@protoc_insertion_point(field_mutable_list:patient.PractitionerObject.telecom)
  return &telecom_;
}
inline const ::patient::Telecom& PractitionerObject::_internal_telecom(int index) const {
  return telecom_.Get(index);
}
inline const ::patient::Telecom& PractitionerObject::telecom(int index) const {
  // @@protoc_insertion_point(field_get:patient.PractitionerObject.telecom)
  return _internal_telecom(index);
}
inline ::patient::Telecom* PractitionerObject::_internal_add_telecom() {
  return telecom_.Add();
}
inline ::patient::Telecom* PractitionerObject::add_telecom() {
  // @@protoc_insertion_point(field_add:patient.PractitionerObject.telecom)
  return _internal_add_telecom();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Telecom >&
PractitionerObject::telecom() const {
  // @@protoc_insertion_point(field_list:patient.PractitionerObject.telecom)
  return telecom_;
}

// -------------------------------------------------------------------

// ProcedureObject

// .patient.Category code = 1;
inline bool ProcedureObject::_internal_has_code() const {
  return this != internal_default_instance() && code_ != nullptr;
}
inline bool ProcedureObject::has_code() const {
  return _internal_has_code();
}
inline void ProcedureObject::clear_code() {
  if (GetArenaNoVirtual() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
}
inline const ::patient::Category& ProcedureObject::_internal_code() const {
  const ::patient::Category* p = code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Category*>(
      &::patient::_Category_default_instance_);
}
inline const ::patient::Category& ProcedureObject::code() const {
  // @@protoc_insertion_point(field_get:patient.ProcedureObject.code)
  return _internal_code();
}
inline ::patient::Category* ProcedureObject::release_code() {
  // @@protoc_insertion_point(field_release:patient.ProcedureObject.code)
  
  ::patient::Category* temp = code_;
  code_ = nullptr;
  return temp;
}
inline ::patient::Category* ProcedureObject::_internal_mutable_code() {
  
  if (code_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Category>(GetArenaNoVirtual());
    code_ = p;
  }
  return code_;
}
inline ::patient::Category* ProcedureObject::mutable_code() {
  // @@protoc_insertion_point(field_mutable:patient.ProcedureObject.code)
  return _internal_mutable_code();
}
inline void ProcedureObject::set_allocated_code(::patient::Category* code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete code_;
  }
  if (code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:patient.ProcedureObject.code)
}

// .patient.Reference encounter = 2;
inline bool ProcedureObject::_internal_has_encounter() const {
  return this != internal_default_instance() && encounter_ != nullptr;
}
inline bool ProcedureObject::has_encounter() const {
  return _internal_has_encounter();
}
inline void ProcedureObject::clear_encounter() {
  if (GetArenaNoVirtual() == nullptr && encounter_ != nullptr) {
    delete encounter_;
  }
  encounter_ = nullptr;
}
inline const ::patient::Reference& ProcedureObject::_internal_encounter() const {
  const ::patient::Reference* p = encounter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& ProcedureObject::encounter() const {
  // @@protoc_insertion_point(field_get:patient.ProcedureObject.encounter)
  return _internal_encounter();
}
inline ::patient::Reference* ProcedureObject::release_encounter() {
  // @@protoc_insertion_point(field_release:patient.ProcedureObject.encounter)
  
  ::patient::Reference* temp = encounter_;
  encounter_ = nullptr;
  return temp;
}
inline ::patient::Reference* ProcedureObject::_internal_mutable_encounter() {
  
  if (encounter_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    encounter_ = p;
  }
  return encounter_;
}
inline ::patient::Reference* ProcedureObject::mutable_encounter() {
  // @@protoc_insertion_point(field_mutable:patient.ProcedureObject.encounter)
  return _internal_mutable_encounter();
}
inline void ProcedureObject::set_allocated_encounter(::patient::Reference* encounter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete encounter_;
  }
  if (encounter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      encounter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encounter, submessage_arena);
    }
    
  } else {
    
  }
  encounter_ = encounter;
  // @@protoc_insertion_point(field_set_allocated:patient.ProcedureObject.encounter)
}

// string id = 3;
inline void ProcedureObject::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcedureObject::id() const {
  // @@protoc_insertion_point(field_get:patient.ProcedureObject.id)
  return _internal_id();
}
inline void ProcedureObject::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:patient.ProcedureObject.id)
}
inline std::string* ProcedureObject::mutable_id() {
  // @@protoc_insertion_point(field_mutable:patient.ProcedureObject.id)
  return _internal_mutable_id();
}
inline const std::string& ProcedureObject::_internal_id() const {
  return id_.GetNoArena();
}
inline void ProcedureObject::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcedureObject::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:patient.ProcedureObject.id)
}
inline void ProcedureObject::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:patient.ProcedureObject.id)
}
inline void ProcedureObject::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:patient.ProcedureObject.id)
}
inline std::string* ProcedureObject::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcedureObject::release_id() {
  // @@protoc_insertion_point(field_release:patient.ProcedureObject.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcedureObject::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:patient.ProcedureObject.id)
}

// .patient.Period performedPeriod = 4;
inline bool ProcedureObject::_internal_has_performedperiod() const {
  return this != internal_default_instance() && performedperiod_ != nullptr;
}
inline bool ProcedureObject::has_performedperiod() const {
  return _internal_has_performedperiod();
}
inline void ProcedureObject::clear_performedperiod() {
  if (GetArenaNoVirtual() == nullptr && performedperiod_ != nullptr) {
    delete performedperiod_;
  }
  performedperiod_ = nullptr;
}
inline const ::patient::Period& ProcedureObject::_internal_performedperiod() const {
  const ::patient::Period* p = performedperiod_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Period*>(
      &::patient::_Period_default_instance_);
}
inline const ::patient::Period& ProcedureObject::performedperiod() const {
  // @@protoc_insertion_point(field_get:patient.ProcedureObject.performedPeriod)
  return _internal_performedperiod();
}
inline ::patient::Period* ProcedureObject::release_performedperiod() {
  // @@protoc_insertion_point(field_release:patient.ProcedureObject.performedPeriod)
  
  ::patient::Period* temp = performedperiod_;
  performedperiod_ = nullptr;
  return temp;
}
inline ::patient::Period* ProcedureObject::_internal_mutable_performedperiod() {
  
  if (performedperiod_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Period>(GetArenaNoVirtual());
    performedperiod_ = p;
  }
  return performedperiod_;
}
inline ::patient::Period* ProcedureObject::mutable_performedperiod() {
  // @@protoc_insertion_point(field_mutable:patient.ProcedureObject.performedPeriod)
  return _internal_mutable_performedperiod();
}
inline void ProcedureObject::set_allocated_performedperiod(::patient::Period* performedperiod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete performedperiod_;
  }
  if (performedperiod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      performedperiod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, performedperiod, submessage_arena);
    }
    
  } else {
    
  }
  performedperiod_ = performedperiod;
  // @@protoc_insertion_point(field_set_allocated:patient.ProcedureObject.performedPeriod)
}

// repeated .patient.Reference reasonReference = 5;
inline int ProcedureObject::_internal_reasonreference_size() const {
  return reasonreference_.size();
}
inline int ProcedureObject::reasonreference_size() const {
  return _internal_reasonreference_size();
}
inline void ProcedureObject::clear_reasonreference() {
  reasonreference_.Clear();
}
inline ::patient::Reference* ProcedureObject::mutable_reasonreference(int index) {
  // @@protoc_insertion_point(field_mutable:patient.ProcedureObject.reasonReference)
  return reasonreference_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >*
ProcedureObject::mutable_reasonreference() {
  // @@protoc_insertion_point(field_mutable_list:patient.ProcedureObject.reasonReference)
  return &reasonreference_;
}
inline const ::patient::Reference& ProcedureObject::_internal_reasonreference(int index) const {
  return reasonreference_.Get(index);
}
inline const ::patient::Reference& ProcedureObject::reasonreference(int index) const {
  // @@protoc_insertion_point(field_get:patient.ProcedureObject.reasonReference)
  return _internal_reasonreference(index);
}
inline ::patient::Reference* ProcedureObject::_internal_add_reasonreference() {
  return reasonreference_.Add();
}
inline ::patient::Reference* ProcedureObject::add_reasonreference() {
  // @@protoc_insertion_point(field_add:patient.ProcedureObject.reasonReference)
  return _internal_add_reasonreference();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::Reference >&
ProcedureObject::reasonreference() const {
  // @@protoc_insertion_point(field_list:patient.ProcedureObject.reasonReference)
  return reasonreference_;
}

// .patient.ResourceType resourceType = 6;
inline void ProcedureObject::clear_resourcetype() {
  resourcetype_ = 0;
}
inline ::patient::ResourceType ProcedureObject::_internal_resourcetype() const {
  return static_cast< ::patient::ResourceType >(resourcetype_);
}
inline ::patient::ResourceType ProcedureObject::resourcetype() const {
  // @@protoc_insertion_point(field_get:patient.ProcedureObject.resourceType)
  return _internal_resourcetype();
}
inline void ProcedureObject::_internal_set_resourcetype(::patient::ResourceType value) {
  
  resourcetype_ = value;
}
inline void ProcedureObject::set_resourcetype(::patient::ResourceType value) {
  _internal_set_resourcetype(value);
  // @@protoc_insertion_point(field_set:patient.ProcedureObject.resourceType)
}

// .patient.Status status = 7;
inline void ProcedureObject::clear_status() {
  status_ = 0;
}
inline ::patient::Status ProcedureObject::_internal_status() const {
  return static_cast< ::patient::Status >(status_);
}
inline ::patient::Status ProcedureObject::status() const {
  // @@protoc_insertion_point(field_get:patient.ProcedureObject.status)
  return _internal_status();
}
inline void ProcedureObject::_internal_set_status(::patient::Status value) {
  
  status_ = value;
}
inline void ProcedureObject::set_status(::patient::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:patient.ProcedureObject.status)
}

// .patient.Reference subject = 8;
inline bool ProcedureObject::_internal_has_subject() const {
  return this != internal_default_instance() && subject_ != nullptr;
}
inline bool ProcedureObject::has_subject() const {
  return _internal_has_subject();
}
inline void ProcedureObject::clear_subject() {
  if (GetArenaNoVirtual() == nullptr && subject_ != nullptr) {
    delete subject_;
  }
  subject_ = nullptr;
}
inline const ::patient::Reference& ProcedureObject::_internal_subject() const {
  const ::patient::Reference* p = subject_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::Reference*>(
      &::patient::_Reference_default_instance_);
}
inline const ::patient::Reference& ProcedureObject::subject() const {
  // @@protoc_insertion_point(field_get:patient.ProcedureObject.subject)
  return _internal_subject();
}
inline ::patient::Reference* ProcedureObject::release_subject() {
  // @@protoc_insertion_point(field_release:patient.ProcedureObject.subject)
  
  ::patient::Reference* temp = subject_;
  subject_ = nullptr;
  return temp;
}
inline ::patient::Reference* ProcedureObject::_internal_mutable_subject() {
  
  if (subject_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::Reference>(GetArenaNoVirtual());
    subject_ = p;
  }
  return subject_;
}
inline ::patient::Reference* ProcedureObject::mutable_subject() {
  // @@protoc_insertion_point(field_mutable:patient.ProcedureObject.subject)
  return _internal_mutable_subject();
}
inline void ProcedureObject::set_allocated_subject(::patient::Reference* subject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete subject_;
  }
  if (subject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subject, submessage_arena);
    }
    
  } else {
    
  }
  subject_ = subject;
  // @@protoc_insertion_point(field_set_allocated:patient.ProcedureObject.subject)
}

// -------------------------------------------------------------------

// PatientRecord

// .patient.PatientObject patient = 1;
inline bool PatientRecord::_internal_has_patient() const {
  return this != internal_default_instance() && patient_ != nullptr;
}
inline bool PatientRecord::has_patient() const {
  return _internal_has_patient();
}
inline void PatientRecord::clear_patient() {
  if (GetArenaNoVirtual() == nullptr && patient_ != nullptr) {
    delete patient_;
  }
  patient_ = nullptr;
}
inline const ::patient::PatientObject& PatientRecord::_internal_patient() const {
  const ::patient::PatientObject* p = patient_;
  return p != nullptr ? *p : *reinterpret_cast<const ::patient::PatientObject*>(
      &::patient::_PatientObject_default_instance_);
}
inline const ::patient::PatientObject& PatientRecord::patient() const {
  // @@protoc_insertion_point(field_get:patient.PatientRecord.patient)
  return _internal_patient();
}
inline ::patient::PatientObject* PatientRecord::release_patient() {
  // @@protoc_insertion_point(field_release:patient.PatientRecord.patient)
  
  ::patient::PatientObject* temp = patient_;
  patient_ = nullptr;
  return temp;
}
inline ::patient::PatientObject* PatientRecord::_internal_mutable_patient() {
  
  if (patient_ == nullptr) {
    auto* p = CreateMaybeMessage<::patient::PatientObject>(GetArenaNoVirtual());
    patient_ = p;
  }
  return patient_;
}
inline ::patient::PatientObject* PatientRecord::mutable_patient() {
  // @@protoc_insertion_point(field_mutable:patient.PatientRecord.patient)
  return _internal_mutable_patient();
}
inline void PatientRecord::set_allocated_patient(::patient::PatientObject* patient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete patient_;
  }
  if (patient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      patient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patient, submessage_arena);
    }
    
  } else {
    
  }
  patient_ = patient;
  // @@protoc_insertion_point(field_set_allocated:patient.PatientRecord.patient)
}

// repeated .patient.CarePlanObject carePlan = 2;
inline int PatientRecord::_internal_careplan_size() const {
  return careplan_.size();
}
inline int PatientRecord::careplan_size() const {
  return _internal_careplan_size();
}
inline void PatientRecord::clear_careplan() {
  careplan_.Clear();
}
inline ::patient::CarePlanObject* PatientRecord::mutable_careplan(int index) {
  // @@protoc_insertion_point(field_mutable:patient.PatientRecord.carePlan)
  return careplan_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::CarePlanObject >*
PatientRecord::mutable_careplan() {
  // @@protoc_insertion_point(field_mutable_list:patient.PatientRecord.carePlan)
  return &careplan_;
}
inline const ::patient::CarePlanObject& PatientRecord::_internal_careplan(int index) const {
  return careplan_.Get(index);
}
inline const ::patient::CarePlanObject& PatientRecord::careplan(int index) const {
  // @@protoc_insertion_point(field_get:patient.PatientRecord.carePlan)
  return _internal_careplan(index);
}
inline ::patient::CarePlanObject* PatientRecord::_internal_add_careplan() {
  return careplan_.Add();
}
inline ::patient::CarePlanObject* PatientRecord::add_careplan() {
  // @@protoc_insertion_point(field_add:patient.PatientRecord.carePlan)
  return _internal_add_careplan();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::CarePlanObject >&
PatientRecord::careplan() const {
  // @@protoc_insertion_point(field_list:patient.PatientRecord.carePlan)
  return careplan_;
}

// repeated .patient.CareTeamObject careTeam = 3;
inline int PatientRecord::_internal_careteam_size() const {
  return careteam_.size();
}
inline int PatientRecord::careteam_size() const {
  return _internal_careteam_size();
}
inline void PatientRecord::clear_careteam() {
  careteam_.Clear();
}
inline ::patient::CareTeamObject* PatientRecord::mutable_careteam(int index) {
  // @@protoc_insertion_point(field_mutable:patient.PatientRecord.careTeam)
  return careteam_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::CareTeamObject >*
PatientRecord::mutable_careteam() {
  // @@protoc_insertion_point(field_mutable_list:patient.PatientRecord.careTeam)
  return &careteam_;
}
inline const ::patient::CareTeamObject& PatientRecord::_internal_careteam(int index) const {
  return careteam_.Get(index);
}
inline const ::patient::CareTeamObject& PatientRecord::careteam(int index) const {
  // @@protoc_insertion_point(field_get:patient.PatientRecord.careTeam)
  return _internal_careteam(index);
}
inline ::patient::CareTeamObject* PatientRecord::_internal_add_careteam() {
  return careteam_.Add();
}
inline ::patient::CareTeamObject* PatientRecord::add_careteam() {
  // @@protoc_insertion_point(field_add:patient.PatientRecord.careTeam)
  return _internal_add_careteam();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::CareTeamObject >&
PatientRecord::careteam() const {
  // @@protoc_insertion_point(field_list:patient.PatientRecord.careTeam)
  return careteam_;
}

// repeated .patient.ClaimObject claim = 4;
inline int PatientRecord::_internal_claim_size() const {
  return claim_.size();
}
inline int PatientRecord::claim_size() const {
  return _internal_claim_size();
}
inline void PatientRecord::clear_claim() {
  claim_.Clear();
}
inline ::patient::ClaimObject* PatientRecord::mutable_claim(int index) {
  // @@protoc_insertion_point(field_mutable:patient.PatientRecord.claim)
  return claim_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ClaimObject >*
PatientRecord::mutable_claim() {
  // @@protoc_insertion_point(field_mutable_list:patient.PatientRecord.claim)
  return &claim_;
}
inline const ::patient::ClaimObject& PatientRecord::_internal_claim(int index) const {
  return claim_.Get(index);
}
inline const ::patient::ClaimObject& PatientRecord::claim(int index) const {
  // @@protoc_insertion_point(field_get:patient.PatientRecord.claim)
  return _internal_claim(index);
}
inline ::patient::ClaimObject* PatientRecord::_internal_add_claim() {
  return claim_.Add();
}
inline ::patient::ClaimObject* PatientRecord::add_claim() {
  // @@protoc_insertion_point(field_add:patient.PatientRecord.claim)
  return _internal_add_claim();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ClaimObject >&
PatientRecord::claim() const {
  // @@protoc_insertion_point(field_list:patient.PatientRecord.claim)
  return claim_;
}

// repeated .patient.ConditionObject condition = 5;
inline int PatientRecord::_internal_condition_size() const {
  return condition_.size();
}
inline int PatientRecord::condition_size() const {
  return _internal_condition_size();
}
inline void PatientRecord::clear_condition() {
  condition_.Clear();
}
inline ::patient::ConditionObject* PatientRecord::mutable_condition(int index) {
  // @@protoc_insertion_point(field_mutable:patient.PatientRecord.condition)
  return condition_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ConditionObject >*
PatientRecord::mutable_condition() {
  // @@protoc_insertion_point(field_mutable_list:patient.PatientRecord.condition)
  return &condition_;
}
inline const ::patient::ConditionObject& PatientRecord::_internal_condition(int index) const {
  return condition_.Get(index);
}
inline const ::patient::ConditionObject& PatientRecord::condition(int index) const {
  // @@protoc_insertion_point(field_get:patient.PatientRecord.condition)
  return _internal_condition(index);
}
inline ::patient::ConditionObject* PatientRecord::_internal_add_condition() {
  return condition_.Add();
}
inline ::patient::ConditionObject* PatientRecord::add_condition() {
  // @@protoc_insertion_point(field_add:patient.PatientRecord.condition)
  return _internal_add_condition();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ConditionObject >&
PatientRecord::condition() const {
  // @@protoc_insertion_point(field_list:patient.PatientRecord.condition)
  return condition_;
}

// repeated .patient.DiagnosticReportObject diagnosticReport = 6;
inline int PatientRecord::_internal_diagnosticreport_size() const {
  return diagnosticreport_.size();
}
inline int PatientRecord::diagnosticreport_size() const {
  return _internal_diagnosticreport_size();
}
inline void PatientRecord::clear_diagnosticreport() {
  diagnosticreport_.Clear();
}
inline ::patient::DiagnosticReportObject* PatientRecord::mutable_diagnosticreport(int index) {
  // @@protoc_insertion_point(field_mutable:patient.PatientRecord.diagnosticReport)
  return diagnosticreport_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::DiagnosticReportObject >*
PatientRecord::mutable_diagnosticreport() {
  // @@protoc_insertion_point(field_mutable_list:patient.PatientRecord.diagnosticReport)
  return &diagnosticreport_;
}
inline const ::patient::DiagnosticReportObject& PatientRecord::_internal_diagnosticreport(int index) const {
  return diagnosticreport_.Get(index);
}
inline const ::patient::DiagnosticReportObject& PatientRecord::diagnosticreport(int index) const {
  // @@protoc_insertion_point(field_get:patient.PatientRecord.diagnosticReport)
  return _internal_diagnosticreport(index);
}
inline ::patient::DiagnosticReportObject* PatientRecord::_internal_add_diagnosticreport() {
  return diagnosticreport_.Add();
}
inline ::patient::DiagnosticReportObject* PatientRecord::add_diagnosticreport() {
  // @@protoc_insertion_point(field_add:patient.PatientRecord.diagnosticReport)
  return _internal_add_diagnosticreport();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::DiagnosticReportObject >&
PatientRecord::diagnosticreport() const {
  // @@protoc_insertion_point(field_list:patient.PatientRecord.diagnosticReport)
  return diagnosticreport_;
}

// repeated .patient.EncounterObject encounter = 7;
inline int PatientRecord::_internal_encounter_size() const {
  return encounter_.size();
}
inline int PatientRecord::encounter_size() const {
  return _internal_encounter_size();
}
inline void PatientRecord::clear_encounter() {
  encounter_.Clear();
}
inline ::patient::EncounterObject* PatientRecord::mutable_encounter(int index) {
  // @@protoc_insertion_point(field_mutable:patient.PatientRecord.encounter)
  return encounter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::EncounterObject >*
PatientRecord::mutable_encounter() {
  // @@protoc_insertion_point(field_mutable_list:patient.PatientRecord.encounter)
  return &encounter_;
}
inline const ::patient::EncounterObject& PatientRecord::_internal_encounter(int index) const {
  return encounter_.Get(index);
}
inline const ::patient::EncounterObject& PatientRecord::encounter(int index) const {
  // @@protoc_insertion_point(field_get:patient.PatientRecord.encounter)
  return _internal_encounter(index);
}
inline ::patient::EncounterObject* PatientRecord::_internal_add_encounter() {
  return encounter_.Add();
}
inline ::patient::EncounterObject* PatientRecord::add_encounter() {
  // @@protoc_insertion_point(field_add:patient.PatientRecord.encounter)
  return _internal_add_encounter();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::EncounterObject >&
PatientRecord::encounter() const {
  // @@protoc_insertion_point(field_list:patient.PatientRecord.encounter)
  return encounter_;
}

// repeated .patient.ExplanationOfBenefitObject explanationOfBenefit = 8;
inline int PatientRecord::_internal_explanationofbenefit_size() const {
  return explanationofbenefit_.size();
}
inline int PatientRecord::explanationofbenefit_size() const {
  return _internal_explanationofbenefit_size();
}
inline void PatientRecord::clear_explanationofbenefit() {
  explanationofbenefit_.Clear();
}
inline ::patient::ExplanationOfBenefitObject* PatientRecord::mutable_explanationofbenefit(int index) {
  // @@protoc_insertion_point(field_mutable:patient.PatientRecord.explanationOfBenefit)
  return explanationofbenefit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ExplanationOfBenefitObject >*
PatientRecord::mutable_explanationofbenefit() {
  // @@protoc_insertion_point(field_mutable_list:patient.PatientRecord.explanationOfBenefit)
  return &explanationofbenefit_;
}
inline const ::patient::ExplanationOfBenefitObject& PatientRecord::_internal_explanationofbenefit(int index) const {
  return explanationofbenefit_.Get(index);
}
inline const ::patient::ExplanationOfBenefitObject& PatientRecord::explanationofbenefit(int index) const {
  // @@protoc_insertion_point(field_get:patient.PatientRecord.explanationOfBenefit)
  return _internal_explanationofbenefit(index);
}
inline ::patient::ExplanationOfBenefitObject* PatientRecord::_internal_add_explanationofbenefit() {
  return explanationofbenefit_.Add();
}
inline ::patient::ExplanationOfBenefitObject* PatientRecord::add_explanationofbenefit() {
  // @@protoc_insertion_point(field_add:patient.PatientRecord.explanationOfBenefit)
  return _internal_add_explanationofbenefit();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ExplanationOfBenefitObject >&
PatientRecord::explanationofbenefit() const {
  // @@protoc_insertion_point(field_list:patient.PatientRecord.explanationOfBenefit)
  return explanationofbenefit_;
}

// repeated .patient.ImmunizationObject immunization = 9;
inline int PatientRecord::_internal_immunization_size() const {
  return immunization_.size();
}
inline int PatientRecord::immunization_size() const {
  return _internal_immunization_size();
}
inline void PatientRecord::clear_immunization() {
  immunization_.Clear();
}
inline ::patient::ImmunizationObject* PatientRecord::mutable_immunization(int index) {
  // @@protoc_insertion_point(field_mutable:patient.PatientRecord.immunization)
  return immunization_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ImmunizationObject >*
PatientRecord::mutable_immunization() {
  // @@protoc_insertion_point(field_mutable_list:patient.PatientRecord.immunization)
  return &immunization_;
}
inline const ::patient::ImmunizationObject& PatientRecord::_internal_immunization(int index) const {
  return immunization_.Get(index);
}
inline const ::patient::ImmunizationObject& PatientRecord::immunization(int index) const {
  // @@protoc_insertion_point(field_get:patient.PatientRecord.immunization)
  return _internal_immunization(index);
}
inline ::patient::ImmunizationObject* PatientRecord::_internal_add_immunization() {
  return immunization_.Add();
}
inline ::patient::ImmunizationObject* PatientRecord::add_immunization() {
  // @@protoc_insertion_point(field_add:patient.PatientRecord.immunization)
  return _internal_add_immunization();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ImmunizationObject >&
PatientRecord::immunization() const {
  // @@protoc_insertion_point(field_list:patient.PatientRecord.immunization)
  return immunization_;
}

// repeated .patient.MedicationRequestObject medicationRequest = 10;
inline int PatientRecord::_internal_medicationrequest_size() const {
  return medicationrequest_.size();
}
inline int PatientRecord::medicationrequest_size() const {
  return _internal_medicationrequest_size();
}
inline void PatientRecord::clear_medicationrequest() {
  medicationrequest_.Clear();
}
inline ::patient::MedicationRequestObject* PatientRecord::mutable_medicationrequest(int index) {
  // @@protoc_insertion_point(field_mutable:patient.PatientRecord.medicationRequest)
  return medicationrequest_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::MedicationRequestObject >*
PatientRecord::mutable_medicationrequest() {
  // @@protoc_insertion_point(field_mutable_list:patient.PatientRecord.medicationRequest)
  return &medicationrequest_;
}
inline const ::patient::MedicationRequestObject& PatientRecord::_internal_medicationrequest(int index) const {
  return medicationrequest_.Get(index);
}
inline const ::patient::MedicationRequestObject& PatientRecord::medicationrequest(int index) const {
  // @@protoc_insertion_point(field_get:patient.PatientRecord.medicationRequest)
  return _internal_medicationrequest(index);
}
inline ::patient::MedicationRequestObject* PatientRecord::_internal_add_medicationrequest() {
  return medicationrequest_.Add();
}
inline ::patient::MedicationRequestObject* PatientRecord::add_medicationrequest() {
  // @@protoc_insertion_point(field_add:patient.PatientRecord.medicationRequest)
  return _internal_add_medicationrequest();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::MedicationRequestObject >&
PatientRecord::medicationrequest() const {
  // @@protoc_insertion_point(field_list:patient.PatientRecord.medicationRequest)
  return medicationrequest_;
}

// repeated .patient.ObservationObject observation = 11;
inline int PatientRecord::_internal_observation_size() const {
  return observation_.size();
}
inline int PatientRecord::observation_size() const {
  return _internal_observation_size();
}
inline void PatientRecord::clear_observation() {
  observation_.Clear();
}
inline ::patient::ObservationObject* PatientRecord::mutable_observation(int index) {
  // @@protoc_insertion_point(field_mutable:patient.PatientRecord.observation)
  return observation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ObservationObject >*
PatientRecord::mutable_observation() {
  // @@protoc_insertion_point(field_mutable_list:patient.PatientRecord.observation)
  return &observation_;
}
inline const ::patient::ObservationObject& PatientRecord::_internal_observation(int index) const {
  return observation_.Get(index);
}
inline const ::patient::ObservationObject& PatientRecord::observation(int index) const {
  // @@protoc_insertion_point(field_get:patient.PatientRecord.observation)
  return _internal_observation(index);
}
inline ::patient::ObservationObject* PatientRecord::_internal_add_observation() {
  return observation_.Add();
}
inline ::patient::ObservationObject* PatientRecord::add_observation() {
  // @@protoc_insertion_point(field_add:patient.PatientRecord.observation)
  return _internal_add_observation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ObservationObject >&
PatientRecord::observation() const {
  // @@protoc_insertion_point(field_list:patient.PatientRecord.observation)
  return observation_;
}

// repeated .patient.OrganizationObject organiation = 12;
inline int PatientRecord::_internal_organiation_size() const {
  return organiation_.size();
}
inline int PatientRecord::organiation_size() const {
  return _internal_organiation_size();
}
inline void PatientRecord::clear_organiation() {
  organiation_.Clear();
}
inline ::patient::OrganizationObject* PatientRecord::mutable_organiation(int index) {
  // @@protoc_insertion_point(field_mutable:patient.PatientRecord.organiation)
  return organiation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::OrganizationObject >*
PatientRecord::mutable_organiation() {
  // @@protoc_insertion_point(field_mutable_list:patient.PatientRecord.organiation)
  return &organiation_;
}
inline const ::patient::OrganizationObject& PatientRecord::_internal_organiation(int index) const {
  return organiation_.Get(index);
}
inline const ::patient::OrganizationObject& PatientRecord::organiation(int index) const {
  // @@protoc_insertion_point(field_get:patient.PatientRecord.organiation)
  return _internal_organiation(index);
}
inline ::patient::OrganizationObject* PatientRecord::_internal_add_organiation() {
  return organiation_.Add();
}
inline ::patient::OrganizationObject* PatientRecord::add_organiation() {
  // @@protoc_insertion_point(field_add:patient.PatientRecord.organiation)
  return _internal_add_organiation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::OrganizationObject >&
PatientRecord::organiation() const {
  // @@protoc_insertion_point(field_list:patient.PatientRecord.organiation)
  return organiation_;
}

// repeated .patient.PractitionerObject practitioner = 13;
inline int PatientRecord::_internal_practitioner_size() const {
  return practitioner_.size();
}
inline int PatientRecord::practitioner_size() const {
  return _internal_practitioner_size();
}
inline void PatientRecord::clear_practitioner() {
  practitioner_.Clear();
}
inline ::patient::PractitionerObject* PatientRecord::mutable_practitioner(int index) {
  // @@protoc_insertion_point(field_mutable:patient.PatientRecord.practitioner)
  return practitioner_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::PractitionerObject >*
PatientRecord::mutable_practitioner() {
  // @@protoc_insertion_point(field_mutable_list:patient.PatientRecord.practitioner)
  return &practitioner_;
}
inline const ::patient::PractitionerObject& PatientRecord::_internal_practitioner(int index) const {
  return practitioner_.Get(index);
}
inline const ::patient::PractitionerObject& PatientRecord::practitioner(int index) const {
  // @@protoc_insertion_point(field_get:patient.PatientRecord.practitioner)
  return _internal_practitioner(index);
}
inline ::patient::PractitionerObject* PatientRecord::_internal_add_practitioner() {
  return practitioner_.Add();
}
inline ::patient::PractitionerObject* PatientRecord::add_practitioner() {
  // @@protoc_insertion_point(field_add:patient.PatientRecord.practitioner)
  return _internal_add_practitioner();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::PractitionerObject >&
PatientRecord::practitioner() const {
  // @@protoc_insertion_point(field_list:patient.PatientRecord.practitioner)
  return practitioner_;
}

// repeated .patient.ProcedureObject procedure = 14;
inline int PatientRecord::_internal_procedure_size() const {
  return procedure_.size();
}
inline int PatientRecord::procedure_size() const {
  return _internal_procedure_size();
}
inline void PatientRecord::clear_procedure() {
  procedure_.Clear();
}
inline ::patient::ProcedureObject* PatientRecord::mutable_procedure(int index) {
  // @@protoc_insertion_point(field_mutable:patient.PatientRecord.procedure)
  return procedure_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ProcedureObject >*
PatientRecord::mutable_procedure() {
  // @@protoc_insertion_point(field_mutable_list:patient.PatientRecord.procedure)
  return &procedure_;
}
inline const ::patient::ProcedureObject& PatientRecord::_internal_procedure(int index) const {
  return procedure_.Get(index);
}
inline const ::patient::ProcedureObject& PatientRecord::procedure(int index) const {
  // @@protoc_insertion_point(field_get:patient.PatientRecord.procedure)
  return _internal_procedure(index);
}
inline ::patient::ProcedureObject* PatientRecord::_internal_add_procedure() {
  return procedure_.Add();
}
inline ::patient::ProcedureObject* PatientRecord::add_procedure() {
  // @@protoc_insertion_point(field_add:patient.PatientRecord.procedure)
  return _internal_add_procedure();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::patient::ProcedureObject >&
PatientRecord::procedure() const {
  // @@protoc_insertion_point(field_list:patient.PatientRecord.procedure)
  return procedure_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace patient

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::patient::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::patient::Status>() {
  return ::patient::Status_descriptor();
}
template <> struct is_proto_enum< ::patient::Gender> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::patient::Gender>() {
  return ::patient::Gender_descriptor();
}
template <> struct is_proto_enum< ::patient::ResourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::patient::ResourceType>() {
  return ::patient::ResourceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_customized_2eproto
